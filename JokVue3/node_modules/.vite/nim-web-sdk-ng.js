import {
  __commonJS
} from "./chunk-2VXGTG27.js";

// node_modules/nim-web-sdk-ng/dist/v2/NIM_BROWSER_SDK.js
var require_NIM_BROWSER_SDK = __commonJS({
  "node_modules/nim-web-sdk-ng/dist/v2/NIM_BROWSER_SDK.js"(exports, module) {
    !function(t, a) {
      typeof exports == "object" && typeof module != "undefined" ? a(exports) : typeof define == "function" && define.amd ? define(["exports"], a) : a((t = typeof globalThis != "undefined" ? globalThis : t || self).NIM = {});
    }(exports, function(t) {
      "use strict";
      var a = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : {};
      function getDefaultExportFromCjs(t2) {
        return t2 && t2.__esModule && Object.prototype.hasOwnProperty.call(t2, "default") ? t2.default : t2;
      }
      function createCommonjsModule(t2) {
        var a2 = { exports: {} };
        return t2(a2, a2.exports), a2.exports;
      }
      var u, m, check = function(t2) {
        return t2 && t2.Math == Math && t2;
      }, h = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof a == "object" && a) || function() {
        return this;
      }() || Function("return this")(), fails = function(t2) {
        try {
          return !!t2();
        } catch (t3) {
          return true;
        }
      }, g = !fails(function() {
        var t2 = function() {
        }.bind();
        return typeof t2 != "function" || t2.hasOwnProperty("prototype");
      }), M = Function.prototype, I = M.apply, S = M.call, T = typeof Reflect == "object" && Reflect.apply || (g ? S.bind(I) : function() {
        return S.apply(I, arguments);
      }), C = Function.prototype, b = C.bind, E = C.call, k = g && b.bind(E, E), w = g ? function(t2) {
        return t2 && k(t2);
      } : function(t2) {
        return t2 && function() {
          return E.apply(t2, arguments);
        };
      }, isCallable = function(t2) {
        return typeof t2 == "function";
      }, R = !fails(function() {
        return Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1] != 7;
      }), A = Function.prototype.call, N = g ? A.bind(A) : function() {
        return A.apply(A, arguments);
      }, x = {}.propertyIsEnumerable, O = Object.getOwnPropertyDescriptor, P = { f: O && !x.call({ 1: 2 }, 1) ? function propertyIsEnumerable(t2) {
        var a2 = O(this, t2);
        return !!a2 && a2.enumerable;
      } : x }, createPropertyDescriptor = function(t2, a2) {
        return { enumerable: !(1 & t2), configurable: !(2 & t2), writable: !(4 & t2), value: a2 };
      }, L = w({}.toString), V = w("".slice), classofRaw = function(t2) {
        return V(L(t2), 8, -1);
      }, U = Object, D = w("".split), q = fails(function() {
        return !U("z").propertyIsEnumerable(0);
      }) ? function(t2) {
        return classofRaw(t2) == "String" ? D(t2, "") : U(t2);
      } : U, isNullOrUndefined = function(t2) {
        return t2 == null;
      }, B = TypeError, requireObjectCoercible = function(t2) {
        if (isNullOrUndefined(t2))
          throw B("Can't call method on " + t2);
        return t2;
      }, toIndexedObject = function(t2) {
        return q(requireObjectCoercible(t2));
      }, G = typeof document == "object" && document.all, H = G === void 0 && G !== void 0 ? function(t2) {
        return typeof t2 == "object" ? t2 !== null : isCallable(t2) || t2 === G;
      } : function(t2) {
        return typeof t2 == "object" ? t2 !== null : isCallable(t2);
      }, j = {}, aFunction = function(t2) {
        return isCallable(t2) ? t2 : void 0;
      }, getBuiltIn = function(t2, a2) {
        return arguments.length < 2 ? aFunction(j[t2]) || aFunction(h[t2]) : j[t2] && j[t2][a2] || h[t2] && h[t2][a2];
      }, $ = w({}.isPrototypeOf), z = getBuiltIn("navigator", "userAgent") || "", W = h.process, K = h.Deno, Y = W && W.versions || K && K.version, Q = Y && Y.v8;
      Q && (m = (u = Q.split("."))[0] > 0 && u[0] < 4 ? 1 : +(u[0] + u[1])), !m && z && (!(u = z.match(/Edge\/(\d+)/)) || u[1] >= 74) && (u = z.match(/Chrome\/(\d+)/)) && (m = +u[1]);
      var J = m, X = !!Object.getOwnPropertySymbols && !fails(function() {
        var t2 = Symbol();
        return !String(t2) || !(Object(t2) instanceof Symbol) || !Symbol.sham && J && J < 41;
      }), Z = X && !Symbol.sham && typeof Symbol.iterator == "symbol", ee = Object, te = Z ? function(t2) {
        return typeof t2 == "symbol";
      } : function(t2) {
        var a2 = getBuiltIn("Symbol");
        return isCallable(a2) && $(a2.prototype, ee(t2));
      }, re = String, tryToString = function(t2) {
        try {
          return re(t2);
        } catch (t3) {
          return "Object";
        }
      }, ne = TypeError, aCallable = function(t2) {
        if (isCallable(t2))
          return t2;
        throw ne(tryToString(t2) + " is not a function");
      }, getMethod = function(t2, a2) {
        var u2 = t2[a2];
        return isNullOrUndefined(u2) ? void 0 : aCallable(u2);
      }, ae = TypeError, ie = Object.defineProperty, oe = "__core-js_shared__", se = h[oe] || function(t2, a2) {
        try {
          ie(h, t2, { value: a2, configurable: true, writable: true });
        } catch (u2) {
          h[t2] = a2;
        }
        return a2;
      }(oe, {}), ce = createCommonjsModule(function(t2) {
        (t2.exports = function(t3, a2) {
          return se[t3] || (se[t3] = a2 !== void 0 ? a2 : {});
        })("versions", []).push({ version: "3.25.0", mode: "pure", copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)", license: "https://github.com/zloirock/core-js/blob/v3.25.0/LICENSE", source: "https://github.com/zloirock/core-js" });
      }), le = Object, toObject = function(t2) {
        return le(requireObjectCoercible(t2));
      }, ue = w({}.hasOwnProperty), de = Object.hasOwn || function hasOwn(t2, a2) {
        return ue(toObject(t2), a2);
      }, pe = 0, me = Math.random(), he = w(1 .toString), uid = function(t2) {
        return "Symbol(" + (t2 === void 0 ? "" : t2) + ")_" + he(++pe + me, 36);
      }, ge = ce("wks"), ve = h.Symbol, fe = ve && ve.for, ye = Z ? ve : ve && ve.withoutSetter || uid, wellKnownSymbol = function(t2) {
        if (!de(ge, t2) || !X && typeof ge[t2] != "string") {
          var a2 = "Symbol." + t2;
          X && de(ve, t2) ? ge[t2] = ve[t2] : ge[t2] = Z && fe ? fe(a2) : ye(a2);
        }
        return ge[t2];
      }, _e = TypeError, Me = wellKnownSymbol("toPrimitive"), toPrimitive = function(t2, a2) {
        if (!H(t2) || te(t2))
          return t2;
        var u2, m2 = getMethod(t2, Me);
        if (m2) {
          if (a2 === void 0 && (a2 = "default"), u2 = N(m2, t2, a2), !H(u2) || te(u2))
            return u2;
          throw _e("Can't convert object to primitive value");
        }
        return a2 === void 0 && (a2 = "number"), function(t3, a3) {
          var u3, m3;
          if (a3 === "string" && isCallable(u3 = t3.toString) && !H(m3 = N(u3, t3)))
            return m3;
          if (isCallable(u3 = t3.valueOf) && !H(m3 = N(u3, t3)))
            return m3;
          if (a3 !== "string" && isCallable(u3 = t3.toString) && !H(m3 = N(u3, t3)))
            return m3;
          throw ae("Can't convert object to primitive value");
        }(t2, a2);
      }, toPropertyKey = function(t2) {
        var a2 = toPrimitive(t2, "string");
        return te(a2) ? a2 : a2 + "";
      }, Ie = h.document, Se = H(Ie) && H(Ie.createElement), documentCreateElement = function(t2) {
        return Se ? Ie.createElement(t2) : {};
      }, Te = !R && !fails(function() {
        return Object.defineProperty(documentCreateElement("div"), "a", { get: function() {
          return 7;
        } }).a != 7;
      }), Ce = Object.getOwnPropertyDescriptor, be = { f: R ? Ce : function getOwnPropertyDescriptor(t2, a2) {
        if (t2 = toIndexedObject(t2), a2 = toPropertyKey(a2), Te)
          try {
            return Ce(t2, a2);
          } catch (t3) {
          }
        if (de(t2, a2))
          return createPropertyDescriptor(!N(P.f, t2, a2), t2[a2]);
      } }, Ee = /#|\.prototype\./, isForced = function(t2, a2) {
        var u2 = we[ke(t2)];
        return u2 == Ae || u2 != Re && (isCallable(a2) ? fails(a2) : !!a2);
      }, ke = isForced.normalize = function(t2) {
        return String(t2).replace(Ee, ".").toLowerCase();
      }, we = isForced.data = {}, Re = isForced.NATIVE = "N", Ae = isForced.POLYFILL = "P", Ne = isForced, xe = w(w.bind), functionBindContext = function(t2, a2) {
        return aCallable(t2), a2 === void 0 ? t2 : g ? xe(t2, a2) : function() {
          return t2.apply(a2, arguments);
        };
      }, Oe = R && fails(function() {
        return Object.defineProperty(function() {
        }, "prototype", { value: 42, writable: false }).prototype != 42;
      }), Pe = String, Le = TypeError, anObject = function(t2) {
        if (H(t2))
          return t2;
        throw Le(Pe(t2) + " is not an object");
      }, Ve = TypeError, Ue = Object.defineProperty, De = Object.getOwnPropertyDescriptor, qe = "enumerable", Be = "configurable", Fe = "writable", Ge = { f: R ? Oe ? function defineProperty(t2, a2, u2) {
        if (anObject(t2), a2 = toPropertyKey(a2), anObject(u2), typeof t2 == "function" && a2 === "prototype" && "value" in u2 && Fe in u2 && !u2.writable) {
          var m2 = De(t2, a2);
          m2 && m2.writable && (t2[a2] = u2.value, u2 = { configurable: Be in u2 ? u2.configurable : m2.configurable, enumerable: qe in u2 ? u2.enumerable : m2.enumerable, writable: false });
        }
        return Ue(t2, a2, u2);
      } : Ue : function defineProperty(t2, a2, u2) {
        if (anObject(t2), a2 = toPropertyKey(a2), anObject(u2), Te)
          try {
            return Ue(t2, a2, u2);
          } catch (t3) {
          }
        if ("get" in u2 || "set" in u2)
          throw Ve("Accessors not supported");
        return "value" in u2 && (t2[a2] = u2.value), t2;
      } }, He = R ? function(t2, a2, u2) {
        return Ge.f(t2, a2, createPropertyDescriptor(1, u2));
      } : function(t2, a2, u2) {
        return t2[a2] = u2, t2;
      }, je = be.f, wrapConstructor = function(t2) {
        var Wrapper = function(a2, u2, m2) {
          if (this instanceof Wrapper) {
            switch (arguments.length) {
              case 0:
                return new t2();
              case 1:
                return new t2(a2);
              case 2:
                return new t2(a2, u2);
            }
            return new t2(a2, u2, m2);
          }
          return T(t2, this, arguments);
        };
        return Wrapper.prototype = t2.prototype, Wrapper;
      }, _export = function(t2, a2) {
        var u2, m2, g2, M2, I2, S2, T2, C2, b2 = t2.target, E2 = t2.global, k2 = t2.stat, R2 = t2.proto, A2 = E2 ? h : k2 ? h[b2] : (h[b2] || {}).prototype, N2 = E2 ? j : j[b2] || He(j, b2, {})[b2], x2 = N2.prototype;
        for (g2 in a2)
          u2 = !Ne(E2 ? g2 : b2 + (k2 ? "." : "#") + g2, t2.forced) && A2 && de(A2, g2), I2 = N2[g2], u2 && (S2 = t2.dontCallGetSet ? (C2 = je(A2, g2)) && C2.value : A2[g2]), M2 = u2 && S2 ? S2 : a2[g2], u2 && typeof I2 == typeof M2 || (T2 = t2.bind && u2 ? functionBindContext(M2, h) : t2.wrap && u2 ? wrapConstructor(M2) : R2 && isCallable(M2) ? w(M2) : M2, (t2.sham || M2 && M2.sham || I2 && I2.sham) && He(T2, "sham", true), He(N2, g2, T2), R2 && (de(j, m2 = b2 + "Prototype") || He(j, m2, {}), He(j[m2], g2, M2), t2.real && x2 && !x2[g2] && He(x2, g2, M2)));
      }, $e = Ge.f;
      _export({ target: "Object", stat: true, forced: Object.defineProperty !== $e, sham: !R }, { defineProperty: $e });
      var ze, We = createCommonjsModule(function(t2) {
        var a2 = j.Object, u2 = t2.exports = function defineProperty(t3, u3, m2) {
          return a2.defineProperty(t3, u3, m2);
        };
        a2.defineProperty.sham && (u2.sham = true);
      }), Ke = We, Ye = getDefaultExportFromCjs(createCommonjsModule(function(t2) {
        function _defineProperties(t3, a2) {
          for (var u2 = 0; u2 < a2.length; u2++) {
            var m2 = a2[u2];
            m2.enumerable = m2.enumerable || false, m2.configurable = true, "value" in m2 && (m2.writable = true), Ke(t3, m2.key, m2);
          }
        }
        t2.exports = function _createClass(t3, a2, u2) {
          return a2 && _defineProperties(t3.prototype, a2), u2 && _defineProperties(t3, u2), Ke(t3, "prototype", { writable: false }), t3;
        }, t2.exports.__esModule = true, t2.exports.default = t2.exports;
      })), Qe = getDefaultExportFromCjs(createCommonjsModule(function(t2) {
        t2.exports = function _assertThisInitialized(t3) {
          if (t3 === void 0)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return t3;
        }, t2.exports.__esModule = true, t2.exports.default = t2.exports;
      })), Je = Math.ceil, Xe = Math.floor, Ze = Math.trunc || function trunc(t2) {
        var a2 = +t2;
        return (a2 > 0 ? Xe : Je)(a2);
      }, toIntegerOrInfinity = function(t2) {
        var a2 = +t2;
        return a2 != a2 || a2 === 0 ? 0 : Ze(a2);
      }, et = Math.max, rt = Math.min, toAbsoluteIndex = function(t2, a2) {
        var u2 = toIntegerOrInfinity(t2);
        return u2 < 0 ? et(u2 + a2, 0) : rt(u2, a2);
      }, nt = Math.min, toLength = function(t2) {
        return t2 > 0 ? nt(toIntegerOrInfinity(t2), 9007199254740991) : 0;
      }, lengthOfArrayLike = function(t2) {
        return toLength(t2.length);
      }, createMethod$5 = function(t2) {
        return function(a2, u2, m2) {
          var h2, g2 = toIndexedObject(a2), M2 = lengthOfArrayLike(g2), I2 = toAbsoluteIndex(m2, M2);
          if (t2 && u2 != u2) {
            for (; M2 > I2; )
              if ((h2 = g2[I2++]) != h2)
                return true;
          } else
            for (; M2 > I2; I2++)
              if ((t2 || I2 in g2) && g2[I2] === u2)
                return t2 || I2 || 0;
          return !t2 && -1;
        };
      }, at = { includes: createMethod$5(true), indexOf: createMethod$5(false) }, it = {}, ot = at.indexOf, st = w([].push), objectKeysInternal = function(t2, a2) {
        var u2, m2 = toIndexedObject(t2), h2 = 0, g2 = [];
        for (u2 in m2)
          !de(it, u2) && de(m2, u2) && st(g2, u2);
        for (; a2.length > h2; )
          de(m2, u2 = a2[h2++]) && (~ot(g2, u2) || st(g2, u2));
        return g2;
      }, ct = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"], lt = Object.keys || function keys2(t2) {
        return objectKeysInternal(t2, ct);
      }, ut = R && !Oe ? Object.defineProperties : function defineProperties(t2, a2) {
        anObject(t2);
        for (var u2, m2 = toIndexedObject(a2), h2 = lt(a2), g2 = h2.length, M2 = 0; g2 > M2; )
          Ge.f(t2, u2 = h2[M2++], m2[u2]);
        return t2;
      }, dt = { f: ut }, pt = getBuiltIn("document", "documentElement"), mt = ce("keys"), sharedKey = function(t2) {
        return mt[t2] || (mt[t2] = uid(t2));
      }, ht = sharedKey("IE_PROTO"), EmptyConstructor = function() {
      }, scriptTag = function(t2) {
        return "<script>" + t2 + "<\/script>";
      }, NullProtoObjectViaActiveX = function(t2) {
        t2.write(scriptTag("")), t2.close();
        var a2 = t2.parentWindow.Object;
        return t2 = null, a2;
      }, NullProtoObject = function() {
        try {
          ze = new ActiveXObject("htmlfile");
        } catch (t3) {
        }
        var t2, a2;
        NullProtoObject = typeof document != "undefined" ? document.domain && ze ? NullProtoObjectViaActiveX(ze) : ((a2 = documentCreateElement("iframe")).style.display = "none", pt.appendChild(a2), a2.src = String("javascript:"), (t2 = a2.contentWindow.document).open(), t2.write(scriptTag("document.F=Object")), t2.close(), t2.F) : NullProtoObjectViaActiveX(ze);
        for (var u2 = ct.length; u2--; )
          delete NullProtoObject.prototype[ct[u2]];
        return NullProtoObject();
      };
      it[ht] = true;
      var gt = Object.create || function create(t2, a2) {
        var u2;
        return t2 !== null ? (EmptyConstructor.prototype = anObject(t2), u2 = new EmptyConstructor(), EmptyConstructor.prototype = null, u2[ht] = t2) : u2 = NullProtoObject(), a2 === void 0 ? u2 : dt.f(u2, a2);
      };
      _export({ target: "Object", stat: true, sham: !R }, { create: gt });
      var vt = j.Object, ft = function create(t2, a2) {
        return vt.create(t2, a2);
      }, yt = String, _t = TypeError, Mt = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var t2, a2 = false, u2 = {};
        try {
          (t2 = w(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set))(u2, []), a2 = u2 instanceof Array;
        } catch (t3) {
        }
        return function setPrototypeOf(u3, m2) {
          return anObject(u3), function(t3) {
            if (typeof t3 == "object" || isCallable(t3))
              return t3;
            throw _t("Can't set " + yt(t3) + " as a prototype");
          }(m2), a2 ? t2(u3, m2) : u3.__proto__ = m2, u3;
        };
      }() : void 0);
      _export({ target: "Object", stat: true }, { setPrototypeOf: Mt });
      var It = j.Object.setPrototypeOf, St = w([].slice), Tt = Function, Ct = w([].concat), bt = w([].join), Et = {}, construct$8 = function(t2, a2, u2) {
        if (!de(Et, a2)) {
          for (var m2 = [], h2 = 0; h2 < a2; h2++)
            m2[h2] = "a[" + h2 + "]";
          Et[a2] = Tt("C,a", "return new C(" + bt(m2, ",") + ")");
        }
        return Et[a2](t2, u2);
      }, kt = g ? Tt.bind : function bind2(t2) {
        var a2 = aCallable(this), u2 = a2.prototype, m2 = St(arguments, 1), h2 = function bound() {
          var u3 = Ct(m2, St(arguments));
          return this instanceof h2 ? construct$8(a2, u3.length, u3) : a2.apply(t2, u3);
        };
        return H(u2) && (h2.prototype = u2), h2;
      };
      _export({ target: "Function", proto: true, forced: Function.bind !== kt }, { bind: kt });
      var entryVirtual = function(t2) {
        return j[t2 + "Prototype"];
      }, wt = entryVirtual("Function").bind, Rt = Function.prototype, bind$1 = function(t2) {
        var a2 = t2.bind;
        return t2 === Rt || $(Rt, t2) && a2 === Rt.bind ? wt : a2;
      }, At = createCommonjsModule(function(t2) {
        function _setPrototypeOf(a2, u2) {
          var m2;
          return t2.exports = _setPrototypeOf = It ? bind$1(m2 = It).call(m2) : function _setPrototypeOf2(t3, a3) {
            return t3.__proto__ = a3, t3;
          }, t2.exports.__esModule = true, t2.exports.default = t2.exports, _setPrototypeOf(a2, u2);
        }
        t2.exports = _setPrototypeOf, t2.exports.__esModule = true, t2.exports.default = t2.exports;
      }), Nt = getDefaultExportFromCjs(createCommonjsModule(function(t2) {
        t2.exports = function _inheritsLoose(t3, a2) {
          t3.prototype = ft(a2.prototype), t3.prototype.constructor = t3, At(t3, a2);
        }, t2.exports.__esModule = true, t2.exports.default = t2.exports;
      }));
      _export({ target: "Number", stat: true, nonConfigurable: true, nonWritable: true }, { MAX_SAFE_INTEGER: 9007199254740991 });
      var xt = 9007199254740991, Ot = { f: Object.getOwnPropertySymbols }, Pt = Object.assign, Lt = Object.defineProperty, Vt = w([].concat), Ut = !Pt || fails(function() {
        if (R && Pt({ b: 1 }, Pt(Lt({}, "a", { enumerable: true, get: function() {
          Lt(this, "b", { value: 3, enumerable: false });
        } }), { b: 2 })).b !== 1)
          return true;
        var t2 = {}, a2 = {}, u2 = Symbol(), m2 = "abcdefghijklmnopqrst";
        return t2[u2] = 7, m2.split("").forEach(function(t3) {
          a2[t3] = t3;
        }), Pt({}, t2)[u2] != 7 || lt(Pt({}, a2)).join("") != m2;
      }) ? function assign(t2, a2) {
        for (var u2 = toObject(t2), m2 = arguments.length, h2 = 1, g2 = Ot.f, M2 = P.f; m2 > h2; )
          for (var I2, S2 = q(arguments[h2++]), T2 = g2 ? Vt(lt(S2), g2(S2)) : lt(S2), C2 = T2.length, b2 = 0; C2 > b2; )
            I2 = T2[b2++], R && !N(M2, S2, I2) || (u2[I2] = S2[I2]);
        return u2;
      } : Pt;
      _export({ target: "Object", stat: true, arity: 2, forced: Object.assign !== Ut }, { assign: Ut });
      var Dt = j.Object.assign, qt = fails(function() {
        lt(1);
      });
      _export({ target: "Object", stat: true, forced: qt }, { keys: function keys2(t2) {
        return lt(toObject(t2));
      } });
      var Bt, Ft, Gt, Ht = j.Object.keys, jt = {}, $t = h.WeakMap, zt = isCallable($t) && /native code/.test(String($t)), Wt = "Object already initialized", Kt = h.TypeError, Yt = h.WeakMap;
      if (zt || se.state) {
        var Qt = se.state || (se.state = new Yt()), Jt = w(Qt.get), Xt = w(Qt.has), Zt = w(Qt.set);
        Bt = function(t2, a2) {
          if (Xt(Qt, t2))
            throw Kt(Wt);
          return a2.facade = t2, Zt(Qt, t2, a2), a2;
        }, Ft = function(t2) {
          return Jt(Qt, t2) || {};
        }, Gt = function(t2) {
          return Xt(Qt, t2);
        };
      } else {
        var er = sharedKey("state");
        it[er] = true, Bt = function(t2, a2) {
          if (de(t2, er))
            throw Kt(Wt);
          return a2.facade = t2, He(t2, er, a2), a2;
        }, Ft = function(t2) {
          return de(t2, er) ? t2[er] : {};
        }, Gt = function(t2) {
          return de(t2, er);
        };
      }
      var tr, rr, nr, ar = { set: Bt, get: Ft, has: Gt, enforce: function(t2) {
        return Gt(t2) ? Ft(t2) : Bt(t2, {});
      }, getterFor: function(t2) {
        return function(a2) {
          var u2;
          if (!H(a2) || (u2 = Ft(a2)).type !== t2)
            throw Kt("Incompatible receiver, " + t2 + " required");
          return u2;
        };
      } }, ir = Function.prototype, or = R && Object.getOwnPropertyDescriptor, sr = de(ir, "name"), cr = { EXISTS: sr, PROPER: sr && function something() {
      }.name === "something", CONFIGURABLE: sr && (!R || R && or(ir, "name").configurable) }, lr = !fails(function() {
        function F() {
        }
        return F.prototype.constructor = null, Object.getPrototypeOf(new F()) !== F.prototype;
      }), ur = sharedKey("IE_PROTO"), dr = Object, pr = dr.prototype, mr = lr ? dr.getPrototypeOf : function(t2) {
        var a2 = toObject(t2);
        if (de(a2, ur))
          return a2[ur];
        var u2 = a2.constructor;
        return isCallable(u2) && a2 instanceof u2 ? u2.prototype : a2 instanceof dr ? pr : null;
      }, defineBuiltIn = function(t2, a2, u2, m2) {
        return m2 && m2.enumerable ? t2[a2] = u2 : He(t2, a2, u2), t2;
      }, hr = wellKnownSymbol("iterator"), gr = false;
      [].keys && ("next" in (nr = [].keys()) ? (rr = mr(mr(nr))) !== Object.prototype && (tr = rr) : gr = true);
      var vr = !H(tr) || fails(function() {
        var t2 = {};
        return tr[hr].call(t2) !== t2;
      });
      tr = vr ? {} : gt(tr), isCallable(tr[hr]) || defineBuiltIn(tr, hr, function() {
        return this;
      });
      var fr = { IteratorPrototype: tr, BUGGY_SAFARI_ITERATORS: gr }, yr = {};
      yr[wellKnownSymbol("toStringTag")] = "z";
      var _r = String(yr) === "[object z]", Mr = wellKnownSymbol("toStringTag"), Ir = Object, Sr = classofRaw(function() {
        return arguments;
      }()) == "Arguments", Tr = _r ? classofRaw : function(t2) {
        var a2, u2, m2;
        return t2 === void 0 ? "Undefined" : t2 === null ? "Null" : typeof (u2 = function(t3, a3) {
          try {
            return t3[a3];
          } catch (t4) {
          }
        }(a2 = Ir(t2), Mr)) == "string" ? u2 : Sr ? classofRaw(a2) : (m2 = classofRaw(a2)) == "Object" && isCallable(a2.callee) ? "Arguments" : m2;
      }, Cr = _r ? {}.toString : function toString2() {
        return "[object " + Tr(this) + "]";
      }, br = Ge.f, Er = wellKnownSymbol("toStringTag"), setToStringTag = function(t2, a2, u2, m2) {
        if (t2) {
          var h2 = u2 ? t2 : t2.prototype;
          de(h2, Er) || br(h2, Er, { configurable: true, value: a2 }), m2 && !_r && He(h2, "toString", Cr);
        }
      }, kr = fr.IteratorPrototype, returnThis$1 = function() {
        return this;
      }, wr = cr.PROPER, Rr = fr.BUGGY_SAFARI_ITERATORS, Ar = wellKnownSymbol("iterator"), Nr = "keys", xr = "values", Or = "entries", returnThis = function() {
        return this;
      }, iteratorDefine = function(t2, a2, u2, m2, h2, g2, M2) {
        !function(t3, a3, u3, m3) {
          var h3 = a3 + " Iterator";
          t3.prototype = gt(kr, { next: createPropertyDescriptor(+!m3, u3) }), setToStringTag(t3, h3, false, true), jt[h3] = returnThis$1;
        }(u2, a2, m2);
        var I2, S2, T2, getIterationMethod = function(t3) {
          if (t3 === h2 && w2)
            return w2;
          if (!Rr && t3 in E2)
            return E2[t3];
          switch (t3) {
            case Nr:
              return function keys2() {
                return new u2(this, t3);
              };
            case xr:
              return function values2() {
                return new u2(this, t3);
              };
            case Or:
              return function entries() {
                return new u2(this, t3);
              };
          }
          return function() {
            return new u2(this);
          };
        }, C2 = a2 + " Iterator", b2 = false, E2 = t2.prototype, k2 = E2[Ar] || E2["@@iterator"] || h2 && E2[h2], w2 = !Rr && k2 || getIterationMethod(h2), R2 = a2 == "Array" && E2.entries || k2;
        if (R2 && (I2 = mr(R2.call(new t2()))) !== Object.prototype && I2.next && (setToStringTag(I2, C2, true, true), jt[C2] = returnThis), wr && h2 == xr && k2 && k2.name !== xr && (b2 = true, w2 = function values2() {
          return N(k2, this);
        }), h2)
          if (S2 = { values: getIterationMethod(xr), keys: g2 ? w2 : getIterationMethod(Nr), entries: getIterationMethod(Or) }, M2)
            for (T2 in S2)
              (Rr || b2 || !(T2 in E2)) && defineBuiltIn(E2, T2, S2[T2]);
          else
            _export({ target: a2, proto: true, forced: Rr || b2 }, S2);
        return M2 && E2[Ar] !== w2 && defineBuiltIn(E2, Ar, w2, { name: h2 }), jt[a2] = w2, S2;
      };
      Ge.f;
      var Pr = "Array Iterator", Lr = ar.set, Vr = ar.getterFor(Pr);
      iteratorDefine(Array, "Array", function(t2, a2) {
        Lr(this, { type: Pr, target: toIndexedObject(t2), index: 0, kind: a2 });
      }, function() {
        var t2 = Vr(this), a2 = t2.target, u2 = t2.kind, m2 = t2.index++;
        return !a2 || m2 >= a2.length ? (t2.target = void 0, { value: void 0, done: true }) : u2 == "keys" ? { value: m2, done: false } : u2 == "values" ? { value: a2[m2], done: false } : { value: [m2, a2[m2]], done: false };
      }, "values"), jt.Arguments = jt.Array;
      var Ur = wellKnownSymbol("toStringTag");
      for (var Dr in { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 }) {
        var qr = h[Dr], Br = qr && qr.prototype;
        Br && Tr(Br) !== Ur && He(Br, Ur, Dr), jt[Dr] = jt.Array;
      }
      var Fr = Array.isArray || function isArray(t2) {
        return classofRaw(t2) == "Array";
      }, Gr = w(Function.toString);
      isCallable(se.inspectSource) || (se.inspectSource = function(t2) {
        return Gr(t2);
      });
      var Hr = se.inspectSource, noop = function() {
      }, jr = [], $r = getBuiltIn("Reflect", "construct"), zr = /^\s*(?:class|function)\b/, Wr = w(zr.exec), Kr = !zr.exec(noop), Yr = function isConstructor(t2) {
        if (!isCallable(t2))
          return false;
        try {
          return $r(noop, jr, t2), true;
        } catch (t3) {
          return false;
        }
      }, Qr = function isConstructor(t2) {
        if (!isCallable(t2))
          return false;
        switch (Tr(t2)) {
          case "AsyncFunction":
          case "GeneratorFunction":
          case "AsyncGeneratorFunction":
            return false;
        }
        try {
          return Kr || !!Wr(zr, Hr(t2));
        } catch (t3) {
          return true;
        }
      };
      Qr.sham = true;
      var Jr = !$r || fails(function() {
        var t2;
        return Yr(Yr.call) || !Yr(Object) || !Yr(function() {
          t2 = true;
        }) || t2;
      }) ? Qr : Yr, Xr = wellKnownSymbol("species"), Zr = Array, arraySpeciesCreate = function(t2, a2) {
        return new (function(t3) {
          var a3;
          return Fr(t3) && (a3 = t3.constructor, (Jr(a3) && (a3 === Zr || Fr(a3.prototype)) || H(a3) && (a3 = a3[Xr]) === null) && (a3 = void 0)), a3 === void 0 ? Zr : a3;
        }(t2))(a2 === 0 ? 0 : a2);
      }, en = w([].push), createMethod$4 = function(t2) {
        var a2 = t2 == 1, u2 = t2 == 2, m2 = t2 == 3, h2 = t2 == 4, g2 = t2 == 6, M2 = t2 == 7, I2 = t2 == 5 || g2;
        return function(S2, T2, C2, b2) {
          for (var E2, k2, w2 = toObject(S2), R2 = q(w2), A2 = functionBindContext(T2, C2), N2 = lengthOfArrayLike(R2), x2 = 0, O2 = b2 || arraySpeciesCreate, P2 = a2 ? O2(S2, N2) : u2 || M2 ? O2(S2, 0) : void 0; N2 > x2; x2++)
            if ((I2 || x2 in R2) && (k2 = A2(E2 = R2[x2], x2, w2), t2))
              if (a2)
                P2[x2] = k2;
              else if (k2)
                switch (t2) {
                  case 3:
                    return true;
                  case 5:
                    return E2;
                  case 6:
                    return x2;
                  case 2:
                    en(P2, E2);
                }
              else
                switch (t2) {
                  case 4:
                    return false;
                  case 7:
                    en(P2, E2);
                }
          return g2 ? -1 : m2 || h2 ? h2 : P2;
        };
      }, tn = { forEach: createMethod$4(0), map: createMethod$4(1), filter: createMethod$4(2), some: createMethod$4(3), every: createMethod$4(4), find: createMethod$4(5), findIndex: createMethod$4(6), filterReject: createMethod$4(7) }, arrayMethodIsStrict = function(t2, a2) {
        var u2 = [][t2];
        return !!u2 && fails(function() {
          u2.call(null, a2 || function() {
            return 1;
          }, 1);
        });
      }, rn = tn.forEach, nn = arrayMethodIsStrict("forEach") ? [].forEach : function forEach(t2) {
        return rn(this, t2, arguments.length > 1 ? arguments[1] : void 0);
      };
      _export({ target: "Array", proto: true, forced: [].forEach != nn }, { forEach: nn });
      var an = entryVirtual("Array").forEach, sn = Array.prototype, cn = { DOMTokenList: true, NodeList: true }, forEach$1 = function(t2) {
        var a2 = t2.forEach;
        return t2 === sn || $(sn, t2) && a2 === sn.forEach || de(cn, Tr(t2)) ? an : a2;
      }, ln = tn.findIndex, un = "findIndex", dn = true;
      un in [] && Array(1).findIndex(function() {
        dn = false;
      }), _export({ target: "Array", proto: true, forced: dn }, { findIndex: function findIndex(t2) {
        return ln(this, t2, arguments.length > 1 ? arguments[1] : void 0);
      } });
      var pn = entryVirtual("Array").findIndex, mn = Array.prototype, findIndex$1 = function(t2) {
        var a2 = t2.findIndex;
        return t2 === mn || $(mn, t2) && a2 === mn.findIndex ? pn : a2;
      }, hn = TypeError, gn = Object.getOwnPropertyDescriptor, vn = R && !function() {
        if (this !== void 0)
          return true;
        try {
          Object.defineProperty([], "length", { writable: false }).length = 1;
        } catch (t2) {
          return t2 instanceof TypeError;
        }
      }() ? function(t2, a2) {
        if (Fr(t2) && !gn(t2, "length").writable)
          throw hn("Cannot set read only .length");
        return t2.length = a2;
      } : function(t2, a2) {
        return t2.length = a2;
      }, fn = TypeError, doesNotExceedSafeInteger = function(t2) {
        if (t2 > 9007199254740991)
          throw fn("Maximum allowed index exceeded");
        return t2;
      }, createProperty = function(t2, a2, u2) {
        var m2 = toPropertyKey(a2);
        m2 in t2 ? Ge.f(t2, m2, createPropertyDescriptor(0, u2)) : t2[m2] = u2;
      }, yn = TypeError, deletePropertyOrThrow = function(t2, a2) {
        if (!delete t2[a2])
          throw yn("Cannot delete property " + tryToString(a2) + " of " + tryToString(t2));
      }, _n = wellKnownSymbol("species"), arrayMethodHasSpeciesSupport = function(t2) {
        return J >= 51 || !fails(function() {
          var a2 = [];
          return (a2.constructor = {})[_n] = function() {
            return { foo: 1 };
          }, a2[t2](Boolean).foo !== 1;
        });
      }, Mn = arrayMethodHasSpeciesSupport("splice"), In = Math.max, Sn = Math.min;
      _export({ target: "Array", proto: true, forced: !Mn }, { splice: function splice2(t2, a2) {
        var u2, m2, h2, g2, M2, I2, S2 = toObject(this), T2 = lengthOfArrayLike(S2), C2 = toAbsoluteIndex(t2, T2), b2 = arguments.length;
        for (b2 === 0 ? u2 = m2 = 0 : b2 === 1 ? (u2 = 0, m2 = T2 - C2) : (u2 = b2 - 2, m2 = Sn(In(toIntegerOrInfinity(a2), 0), T2 - C2)), doesNotExceedSafeInteger(T2 + u2 - m2), h2 = arraySpeciesCreate(S2, m2), g2 = 0; g2 < m2; g2++)
          (M2 = C2 + g2) in S2 && createProperty(h2, g2, S2[M2]);
        if (h2.length = m2, u2 < m2) {
          for (g2 = C2; g2 < T2 - m2; g2++)
            I2 = g2 + u2, (M2 = g2 + m2) in S2 ? S2[I2] = S2[M2] : deletePropertyOrThrow(S2, I2);
          for (g2 = T2; g2 > T2 - m2 + u2; g2--)
            deletePropertyOrThrow(S2, g2 - 1);
        } else if (u2 > m2)
          for (g2 = T2 - m2; g2 > C2; g2--)
            I2 = g2 + u2 - 1, (M2 = g2 + m2 - 1) in S2 ? S2[I2] = S2[M2] : deletePropertyOrThrow(S2, I2);
        for (g2 = 0; g2 < u2; g2++)
          S2[g2 + C2] = arguments[g2 + 2];
        return vn(S2, T2 - m2 + u2), h2;
      } });
      var Tn = entryVirtual("Array").splice, Cn = Array.prototype, splice = function(t2) {
        var a2 = t2.splice;
        return t2 === Cn || $(Cn, t2) && a2 === Cn.splice ? Tn : a2;
      }, bn = getBuiltIn("JSON", "stringify"), En = w(/./.exec), kn = w("".charAt), wn = w("".charCodeAt), Rn = w("".replace), An = w(1 .toString), Nn = /[\uD800-\uDFFF]/g, xn = /^[\uD800-\uDBFF]$/, On = /^[\uDC00-\uDFFF]$/, Pn = !X || fails(function() {
        var t2 = getBuiltIn("Symbol")();
        return bn([t2]) != "[null]" || bn({ a: t2 }) != "{}" || bn(Object(t2)) != "{}";
      }), Ln = fails(function() {
        return bn("\uDF06\uD834") !== '"\\udf06\\ud834"' || bn("\uDEAD") !== '"\\udead"';
      }), stringifyWithSymbolsFix = function(t2, a2) {
        var u2 = St(arguments), m2 = a2;
        if ((H(a2) || t2 !== void 0) && !te(t2))
          return Fr(a2) || (a2 = function(t3, a3) {
            if (isCallable(m2) && (a3 = N(m2, this, t3, a3)), !te(a3))
              return a3;
          }), u2[1] = a2, T(bn, null, u2);
      }, fixIllFormed = function(t2, a2, u2) {
        var m2 = kn(u2, a2 - 1), h2 = kn(u2, a2 + 1);
        return En(xn, t2) && !En(On, h2) || En(On, t2) && !En(xn, m2) ? "\\u" + An(wn(t2, 0), 16) : t2;
      };
      bn && _export({ target: "JSON", stat: true, arity: 3, forced: Pn || Ln }, { stringify: function stringify(t2, a2, u2) {
        var m2 = St(arguments), h2 = T(Pn ? stringifyWithSymbolsFix : bn, null, m2);
        return Ln && typeof h2 == "string" ? Rn(h2, Nn, fixIllFormed) : h2;
      } }), j.JSON || (j.JSON = { stringify: JSON.stringify });
      var Vn = function stringify(t2, a2, u2) {
        return T(j.JSON.stringify, null, arguments);
      }, Un = Vn;
      _export({ target: "Array", stat: true }, { isArray: Fr });
      var Dn = j.Array.isArray, qn = ct.concat("length", "prototype"), Bn = { f: Object.getOwnPropertyNames || function getOwnPropertyNames(t2) {
        return objectKeysInternal(t2, qn);
      } }, Fn = w([].concat), Gn = getBuiltIn("Reflect", "ownKeys") || function ownKeys(t2) {
        var a2 = Bn.f(anObject(t2)), u2 = Ot.f;
        return u2 ? Fn(a2, u2(t2)) : a2;
      }, Hn = Error, jn = w("".replace), $n = String(Hn("zxcasd").stack), zn = /\n\s*at [^:]*:[^\n]*/, Wn = zn.test($n), errorStackClear = function(t2, a2) {
        if (Wn && typeof t2 == "string" && !Hn.prepareStackTrace)
          for (; a2--; )
            t2 = jn(t2, zn, "");
        return t2;
      }, installErrorCause = function(t2, a2) {
        H(a2) && "cause" in a2 && He(t2, "cause", a2.cause);
      }, Kn = wellKnownSymbol("iterator"), Yn = Array.prototype, isArrayIteratorMethod = function(t2) {
        return t2 !== void 0 && (jt.Array === t2 || Yn[Kn] === t2);
      }, Qn = wellKnownSymbol("iterator"), getIteratorMethod$5 = function(t2) {
        if (!isNullOrUndefined(t2))
          return getMethod(t2, Qn) || getMethod(t2, "@@iterator") || jt[Tr(t2)];
      }, Jn = TypeError, getIterator = function(t2, a2) {
        var u2 = arguments.length < 2 ? getIteratorMethod$5(t2) : a2;
        if (aCallable(u2))
          return anObject(N(u2, t2));
        throw Jn(tryToString(t2) + " is not iterable");
      }, iteratorClose = function(t2, a2, u2) {
        var m2, h2;
        anObject(t2);
        try {
          if (!(m2 = getMethod(t2, "return"))) {
            if (a2 === "throw")
              throw u2;
            return u2;
          }
          m2 = N(m2, t2);
        } catch (t3) {
          h2 = true, m2 = t3;
        }
        if (a2 === "throw")
          throw u2;
        if (h2)
          throw m2;
        return anObject(m2), u2;
      }, Xn = TypeError, Result = function(t2, a2) {
        this.stopped = t2, this.result = a2;
      }, Zn = Result.prototype, iterate = function(t2, a2, u2) {
        var m2, h2, g2, M2, I2, S2, T2, C2 = u2 && u2.that, b2 = !(!u2 || !u2.AS_ENTRIES), E2 = !(!u2 || !u2.IS_RECORD), k2 = !(!u2 || !u2.IS_ITERATOR), w2 = !(!u2 || !u2.INTERRUPTED), R2 = functionBindContext(a2, C2), stop = function(t3) {
          return m2 && iteratorClose(m2, "normal", t3), new Result(true, t3);
        }, callFn = function(t3) {
          return b2 ? (anObject(t3), w2 ? R2(t3[0], t3[1], stop) : R2(t3[0], t3[1])) : w2 ? R2(t3, stop) : R2(t3);
        };
        if (E2)
          m2 = t2.iterator;
        else if (k2)
          m2 = t2;
        else {
          if (!(h2 = getIteratorMethod$5(t2)))
            throw Xn(tryToString(t2) + " is not iterable");
          if (isArrayIteratorMethod(h2)) {
            for (g2 = 0, M2 = lengthOfArrayLike(t2); M2 > g2; g2++)
              if ((I2 = callFn(t2[g2])) && $(Zn, I2))
                return I2;
            return new Result(false);
          }
          m2 = getIterator(t2, h2);
        }
        for (S2 = E2 ? t2.next : m2.next; !(T2 = N(S2, m2)).done; ) {
          try {
            I2 = callFn(T2.value);
          } catch (t3) {
            iteratorClose(m2, "throw", t3);
          }
          if (typeof I2 == "object" && I2 && $(Zn, I2))
            return I2;
        }
        return new Result(false);
      }, ea = String, toString = function(t2) {
        if (Tr(t2) === "Symbol")
          throw TypeError("Cannot convert a Symbol value to a string");
        return ea(t2);
      }, normalizeStringArgument = function(t2, a2) {
        return t2 === void 0 ? arguments.length < 2 ? "" : a2 : toString(t2);
      }, ta = !fails(function() {
        var t2 = Error("a");
        return !("stack" in t2) || (Object.defineProperty(t2, "stack", createPropertyDescriptor(1, 7)), t2.stack !== 7);
      }), ra = wellKnownSymbol("toStringTag"), na = Error, aa = [].push, ia = function AggregateError(t2, a2) {
        var u2, m2 = arguments.length > 2 ? arguments[2] : void 0, h2 = $(oa, this);
        Mt ? u2 = Mt(na(), h2 ? mr(this) : oa) : (u2 = h2 ? this : gt(oa), He(u2, ra, "Error")), a2 !== void 0 && He(u2, "message", normalizeStringArgument(a2)), ta && He(u2, "stack", errorStackClear(u2.stack, 1)), installErrorCause(u2, m2);
        var g2 = [];
        return iterate(t2, aa, { that: g2 }), He(u2, "errors", g2), u2;
      };
      Mt ? Mt(ia, na) : function(t2, a2, u2) {
        for (var m2 = Gn(a2), h2 = Ge.f, g2 = be.f, M2 = 0; M2 < m2.length; M2++) {
          var I2 = m2[M2];
          de(t2, I2) || u2 && de(u2, I2) || h2(t2, I2, g2(a2, I2));
        }
      }(ia, na, { name: true });
      var oa = ia.prototype = gt(na.prototype, { constructor: createPropertyDescriptor(1, ia), message: createPropertyDescriptor(1, ""), name: createPropertyDescriptor(1, "AggregateError") });
      _export({ global: true, constructor: true, arity: 2 }, { AggregateError: ia });
      var sa, ca, la, ua, da = classofRaw(h.process) == "process", pa = wellKnownSymbol("species"), setSpecies = function(t2) {
        var a2 = getBuiltIn(t2), u2 = Ge.f;
        R && a2 && !a2[pa] && u2(a2, pa, { configurable: true, get: function() {
          return this;
        } });
      }, ma = TypeError, anInstance = function(t2, a2) {
        if ($(a2, t2))
          return t2;
        throw ma("Incorrect invocation");
      }, ha = TypeError, aConstructor = function(t2) {
        if (Jr(t2))
          return t2;
        throw ha(tryToString(t2) + " is not a constructor");
      }, ga = wellKnownSymbol("species"), speciesConstructor = function(t2, a2) {
        var u2, m2 = anObject(t2).constructor;
        return m2 === void 0 || isNullOrUndefined(u2 = anObject(m2)[ga]) ? a2 : aConstructor(u2);
      }, va = TypeError, validateArgumentsLength = function(t2, a2) {
        if (t2 < a2)
          throw va("Not enough arguments");
        return t2;
      }, fa = /(?:ipad|iphone|ipod).*applewebkit/i.test(z), ya = h.setImmediate, _a = h.clearImmediate, Ma = h.process, Ia = h.Dispatch, Sa = h.Function, Ta = h.MessageChannel, Ca = h.String, ba = 0, Ea = {}, ka = "onreadystatechange";
      try {
        sa = h.location;
      } catch (t2) {
      }
      var run = function(t2) {
        if (de(Ea, t2)) {
          var a2 = Ea[t2];
          delete Ea[t2], a2();
        }
      }, runner = function(t2) {
        return function() {
          run(t2);
        };
      }, listener = function(t2) {
        run(t2.data);
      }, post = function(t2) {
        h.postMessage(Ca(t2), sa.protocol + "//" + sa.host);
      };
      ya && _a || (ya = function setImmediate(t2) {
        validateArgumentsLength(arguments.length, 1);
        var a2 = isCallable(t2) ? t2 : Sa(t2), u2 = St(arguments, 1);
        return Ea[++ba] = function() {
          T(a2, void 0, u2);
        }, ca(ba), ba;
      }, _a = function clearImmediate(t2) {
        delete Ea[t2];
      }, da ? ca = function(t2) {
        Ma.nextTick(runner(t2));
      } : Ia && Ia.now ? ca = function(t2) {
        Ia.now(runner(t2));
      } : Ta && !fa ? (ua = (la = new Ta()).port2, la.port1.onmessage = listener, ca = functionBindContext(ua.postMessage, ua)) : h.addEventListener && isCallable(h.postMessage) && !h.importScripts && sa && sa.protocol !== "file:" && !fails(post) ? (ca = post, h.addEventListener("message", listener, false)) : ca = ka in documentCreateElement("script") ? function(t2) {
        pt.appendChild(documentCreateElement("script")).onreadystatechange = function() {
          pt.removeChild(this), run(t2);
        };
      } : function(t2) {
        setTimeout(runner(t2), 0);
      });
      var wa, Ra, Aa, Na, xa, Oa, Pa, La, Va = { set: ya, clear: _a }, Ua = /ipad|iphone|ipod/i.test(z) && h.Pebble !== void 0, Da = /web0s(?!.*chrome)/i.test(z), qa = be.f, Ba = Va.set, Fa = h.MutationObserver || h.WebKitMutationObserver, Ga = h.document, Ha = h.process, ja = h.Promise, $a = qa(h, "queueMicrotask"), za = $a && $a.value;
      za || (wa = function() {
        var t2, a2;
        for (da && (t2 = Ha.domain) && t2.exit(); Ra; ) {
          a2 = Ra.fn, Ra = Ra.next;
          try {
            a2();
          } catch (t3) {
            throw Ra ? Na() : Aa = void 0, t3;
          }
        }
        Aa = void 0, t2 && t2.enter();
      }, fa || da || Da || !Fa || !Ga ? !Ua && ja && ja.resolve ? ((Pa = ja.resolve(void 0)).constructor = ja, La = functionBindContext(Pa.then, Pa), Na = function() {
        La(wa);
      }) : da ? Na = function() {
        Ha.nextTick(wa);
      } : (Ba = functionBindContext(Ba, h), Na = function() {
        Ba(wa);
      }) : (xa = true, Oa = Ga.createTextNode(""), new Fa(wa).observe(Oa, { characterData: true }), Na = function() {
        Oa.data = xa = !xa;
      }));
      var Wa = za || function(t2) {
        var a2 = { fn: t2, next: void 0 };
        Aa && (Aa.next = a2), Ra || (Ra = a2, Na()), Aa = a2;
      }, perform = function(t2) {
        try {
          return { error: false, value: t2() };
        } catch (t3) {
          return { error: true, value: t3 };
        }
      }, Queue = function() {
        this.head = null, this.tail = null;
      };
      Queue.prototype = { add: function(t2) {
        var a2 = { item: t2, next: null };
        this.head ? this.tail.next = a2 : this.head = a2, this.tail = a2;
      }, get: function() {
        var t2 = this.head;
        if (t2)
          return this.head = t2.next, this.tail === t2 && (this.tail = null), t2.item;
      } };
      var Ka, Ya, Qa = Queue, Ja = h.Promise, Xa = typeof Deno == "object" && Deno && typeof Deno.version == "object", Za = !Xa && !da && typeof window == "object" && typeof document == "object", ei = Ja && Ja.prototype, ti = wellKnownSymbol("species"), ri = false, ni = isCallable(h.PromiseRejectionEvent), ai = Ne("Promise", function() {
        var t2 = Hr(Ja), a2 = t2 !== String(Ja);
        if (!a2 && J === 66)
          return true;
        if (!ei.catch || !ei.finally)
          return true;
        if (!J || J < 51 || !/native code/.test(t2)) {
          var u2 = new Ja(function(t3) {
            t3(1);
          }), FakePromise = function(t3) {
            t3(function() {
            }, function() {
            });
          };
          if ((u2.constructor = {})[ti] = FakePromise, !(ri = u2.then(function() {
          }) instanceof FakePromise))
            return true;
        }
        return !a2 && (Za || Xa) && !ni;
      }), oi = { CONSTRUCTOR: ai, REJECTION_EVENT: ni, SUBCLASSING: ri }, si = TypeError, PromiseCapability = function(t2) {
        var a2, u2;
        this.promise = new t2(function(t3, m2) {
          if (a2 !== void 0 || u2 !== void 0)
            throw si("Bad Promise constructor");
          a2 = t3, u2 = m2;
        }), this.resolve = aCallable(a2), this.reject = aCallable(u2);
      }, ci = { f: function(t2) {
        return new PromiseCapability(t2);
      } }, li = Va.set, ui = "Promise", di = oi.CONSTRUCTOR, pi = oi.REJECTION_EVENT, mi = ar.getterFor(ui), hi = ar.set, gi = Ja && Ja.prototype, vi = Ja, fi = gi, yi = h.TypeError, _i = h.document, Mi = h.process, Ii = ci.f, Si = Ii, Ti = !!(_i && _i.createEvent && h.dispatchEvent), Ci = "unhandledrejection", isThenable = function(t2) {
        var a2;
        return !(!H(t2) || !isCallable(a2 = t2.then)) && a2;
      }, callReaction = function(t2, a2) {
        var u2, m2, h2, g2 = a2.value, M2 = a2.state == 1, I2 = M2 ? t2.ok : t2.fail, S2 = t2.resolve, T2 = t2.reject, C2 = t2.domain;
        try {
          I2 ? (M2 || (a2.rejection === 2 && onHandleUnhandled(a2), a2.rejection = 1), I2 === true ? u2 = g2 : (C2 && C2.enter(), u2 = I2(g2), C2 && (C2.exit(), h2 = true)), u2 === t2.promise ? T2(yi("Promise-chain cycle")) : (m2 = isThenable(u2)) ? N(m2, u2, S2, T2) : S2(u2)) : T2(g2);
        } catch (t3) {
          C2 && !h2 && C2.exit(), T2(t3);
        }
      }, notify = function(t2, a2) {
        t2.notified || (t2.notified = true, Wa(function() {
          for (var u2, m2 = t2.reactions; u2 = m2.get(); )
            callReaction(u2, t2);
          t2.notified = false, a2 && !t2.rejection && onUnhandled(t2);
        }));
      }, dispatchEvent = function(t2, a2, u2) {
        var m2, g2;
        Ti ? ((m2 = _i.createEvent("Event")).promise = a2, m2.reason = u2, m2.initEvent(t2, false, true), h.dispatchEvent(m2)) : m2 = { promise: a2, reason: u2 }, !pi && (g2 = h["on" + t2]) ? g2(m2) : t2 === Ci && function(t3, a3) {
          var u3 = h.console;
          u3 && u3.error && (arguments.length == 1 ? u3.error(t3) : u3.error(t3, a3));
        }("Unhandled promise rejection", u2);
      }, onUnhandled = function(t2) {
        N(li, h, function() {
          var a2, u2 = t2.facade, m2 = t2.value;
          if (isUnhandled(t2) && (a2 = perform(function() {
            da ? Mi.emit("unhandledRejection", m2, u2) : dispatchEvent(Ci, u2, m2);
          }), t2.rejection = da || isUnhandled(t2) ? 2 : 1, a2.error))
            throw a2.value;
        });
      }, isUnhandled = function(t2) {
        return t2.rejection !== 1 && !t2.parent;
      }, onHandleUnhandled = function(t2) {
        N(li, h, function() {
          var a2 = t2.facade;
          da ? Mi.emit("rejectionHandled", a2) : dispatchEvent("rejectionhandled", a2, t2.value);
        });
      }, bind = function(t2, a2, u2) {
        return function(m2) {
          t2(a2, m2, u2);
        };
      }, internalReject = function(t2, a2, u2) {
        t2.done || (t2.done = true, u2 && (t2 = u2), t2.value = a2, t2.state = 2, notify(t2, true));
      }, internalResolve = function(t2, a2, u2) {
        if (!t2.done) {
          t2.done = true, u2 && (t2 = u2);
          try {
            if (t2.facade === a2)
              throw yi("Promise can't be resolved itself");
            var m2 = isThenable(a2);
            m2 ? Wa(function() {
              var u3 = { done: false };
              try {
                N(m2, a2, bind(internalResolve, u3, t2), bind(internalReject, u3, t2));
              } catch (a3) {
                internalReject(u3, a3, t2);
              }
            }) : (t2.value = a2, t2.state = 1, notify(t2, false));
          } catch (a3) {
            internalReject({ done: false }, a3, t2);
          }
        }
      };
      di && (fi = (vi = function Promise2(t2) {
        anInstance(this, fi), aCallable(t2), N(Ka, this);
        var a2 = mi(this);
        try {
          t2(bind(internalResolve, a2), bind(internalReject, a2));
        } catch (t3) {
          internalReject(a2, t3);
        }
      }).prototype, (Ka = function Promise2(t2) {
        hi(this, { type: ui, done: false, notified: false, parent: false, reactions: new Qa(), rejection: false, state: 0, value: void 0 });
      }).prototype = defineBuiltIn(fi, "then", function then(t2, a2) {
        var u2 = mi(this), m2 = Ii(speciesConstructor(this, vi));
        return u2.parent = true, m2.ok = !isCallable(t2) || t2, m2.fail = isCallable(a2) && a2, m2.domain = da ? Mi.domain : void 0, u2.state == 0 ? u2.reactions.add(m2) : Wa(function() {
          callReaction(m2, u2);
        }), m2.promise;
      }), Ya = function() {
        var t2 = new Ka(), a2 = mi(t2);
        this.promise = t2, this.resolve = bind(internalResolve, a2), this.reject = bind(internalReject, a2);
      }, ci.f = Ii = function(t2) {
        return t2 === vi || t2 === void 0 ? new Ya(t2) : Si(t2);
      }), _export({ global: true, constructor: true, wrap: true, forced: di }, { Promise: vi }), setToStringTag(vi, ui, false, true), setSpecies(ui);
      var bi = wellKnownSymbol("iterator"), Ei = false;
      try {
        var ki = 0, wi = { next: function() {
          return { done: !!ki++ };
        }, return: function() {
          Ei = true;
        } };
        wi[bi] = function() {
          return this;
        }, Array.from(wi, function() {
          throw 2;
        });
      } catch (t2) {
      }
      var checkCorrectnessOfIteration = function(t2, a2) {
        if (!a2 && !Ei)
          return false;
        var u2 = false;
        try {
          var m2 = {};
          m2[bi] = function() {
            return { next: function() {
              return { done: u2 = true };
            } };
          }, t2(m2);
        } catch (t3) {
        }
        return u2;
      }, Ri = oi.CONSTRUCTOR || !checkCorrectnessOfIteration(function(t2) {
        Ja.all(t2).then(void 0, function() {
        });
      });
      _export({ target: "Promise", stat: true, forced: Ri }, { all: function all(t2) {
        var a2 = this, u2 = ci.f(a2), m2 = u2.resolve, h2 = u2.reject, g2 = perform(function() {
          var u3 = aCallable(a2.resolve), g3 = [], M2 = 0, I2 = 1;
          iterate(t2, function(t3) {
            var S2 = M2++, T2 = false;
            I2++, N(u3, a2, t3).then(function(t4) {
              T2 || (T2 = true, g3[S2] = t4, --I2 || m2(g3));
            }, h2);
          }), --I2 || m2(g3);
        });
        return g2.error && h2(g2.value), u2.promise;
      } });
      var Ai = oi.CONSTRUCTOR;
      Ja && Ja.prototype, _export({ target: "Promise", proto: true, forced: Ai, real: true }, { catch: function(t2) {
        return this.then(void 0, t2);
      } }), _export({ target: "Promise", stat: true, forced: Ri }, { race: function race(t2) {
        var a2 = this, u2 = ci.f(a2), m2 = u2.reject, h2 = perform(function() {
          var h3 = aCallable(a2.resolve);
          iterate(t2, function(t3) {
            N(h3, a2, t3).then(u2.resolve, m2);
          });
        });
        return h2.error && m2(h2.value), u2.promise;
      } }), _export({ target: "Promise", stat: true, forced: oi.CONSTRUCTOR }, { reject: function reject(t2) {
        var a2 = ci.f(this);
        return N(a2.reject, void 0, t2), a2.promise;
      } });
      var promiseResolve = function(t2, a2) {
        if (anObject(t2), H(a2) && a2.constructor === t2)
          return a2;
        var u2 = ci.f(t2);
        return (0, u2.resolve)(a2), u2.promise;
      }, Ni = oi.CONSTRUCTOR, xi = getBuiltIn("Promise"), Oi = !Ni;
      _export({ target: "Promise", stat: true, forced: true }, { resolve: function resolve(t2) {
        return promiseResolve(Oi && this === xi ? Ja : this, t2);
      } }), _export({ target: "Promise", stat: true }, { allSettled: function allSettled(t2) {
        var a2 = this, u2 = ci.f(a2), m2 = u2.resolve, h2 = u2.reject, g2 = perform(function() {
          var u3 = aCallable(a2.resolve), h3 = [], g3 = 0, M2 = 1;
          iterate(t2, function(t3) {
            var I2 = g3++, S2 = false;
            M2++, N(u3, a2, t3).then(function(t4) {
              S2 || (S2 = true, h3[I2] = { status: "fulfilled", value: t4 }, --M2 || m2(h3));
            }, function(t4) {
              S2 || (S2 = true, h3[I2] = { status: "rejected", reason: t4 }, --M2 || m2(h3));
            });
          }), --M2 || m2(h3);
        });
        return g2.error && h2(g2.value), u2.promise;
      } });
      var Pi = "No one promise resolved";
      _export({ target: "Promise", stat: true }, { any: function any(t2) {
        var a2 = this, u2 = getBuiltIn("AggregateError"), m2 = ci.f(a2), h2 = m2.resolve, g2 = m2.reject, M2 = perform(function() {
          var m3 = aCallable(a2.resolve), M3 = [], I2 = 0, S2 = 1, T2 = false;
          iterate(t2, function(t3) {
            var C2 = I2++, b2 = false;
            S2++, N(m3, a2, t3).then(function(t4) {
              b2 || T2 || (T2 = true, h2(t4));
            }, function(t4) {
              b2 || T2 || (b2 = true, M3[C2] = t4, --S2 || g2(new u2(M3, Pi)));
            });
          }), --S2 || g2(new u2(M3, Pi));
        });
        return M2.error && g2(M2.value), m2.promise;
      } });
      var Li = Ja && Ja.prototype, Vi = !!Ja && fails(function() {
        Li.finally.call({ then: function() {
        } }, function() {
        });
      });
      _export({ target: "Promise", proto: true, real: true, forced: Vi }, { finally: function(t2) {
        var a2 = speciesConstructor(this, getBuiltIn("Promise")), u2 = isCallable(t2);
        return this.then(u2 ? function(u3) {
          return promiseResolve(a2, t2()).then(function() {
            return u3;
          });
        } : t2, u2 ? function(u3) {
          return promiseResolve(a2, t2()).then(function() {
            throw u3;
          });
        } : t2);
      } });
      var Ui = w("".charAt), Di = w("".charCodeAt), qi = w("".slice), createMethod$3 = function(t2) {
        return function(a2, u2) {
          var m2, h2, g2 = toString(requireObjectCoercible(a2)), M2 = toIntegerOrInfinity(u2), I2 = g2.length;
          return M2 < 0 || M2 >= I2 ? t2 ? "" : void 0 : (m2 = Di(g2, M2)) < 55296 || m2 > 56319 || M2 + 1 === I2 || (h2 = Di(g2, M2 + 1)) < 56320 || h2 > 57343 ? t2 ? Ui(g2, M2) : m2 : t2 ? qi(g2, M2, M2 + 2) : h2 - 56320 + (m2 - 55296 << 10) + 65536;
        };
      }, Bi = { codeAt: createMethod$3(false), charAt: createMethod$3(true) }, Fi = Bi.charAt, Gi = "String Iterator", Hi = ar.set, ji = ar.getterFor(Gi);
      iteratorDefine(String, "String", function(t2) {
        Hi(this, { type: Gi, string: toString(t2), index: 0 });
      }, function next() {
        var t2, a2 = ji(this), u2 = a2.string, m2 = a2.index;
        return m2 >= u2.length ? { value: void 0, done: true } : (t2 = Fi(u2, m2), a2.index += t2.length, { value: t2, done: false });
      });
      var $i = j.Promise;
      _export({ target: "Promise", stat: true, forced: true }, { try: function(t2) {
        var a2 = ci.f(this), u2 = perform(t2);
        return (u2.error ? a2.reject : a2.resolve)(u2.value), a2.promise;
      } });
      var zi = $i, Wi = P.f, Ki = w(Wi), Yi = w([].push), createMethod$2 = function(t2) {
        return function(a2) {
          for (var u2, m2 = toIndexedObject(a2), h2 = lt(m2), g2 = h2.length, M2 = 0, I2 = []; g2 > M2; )
            u2 = h2[M2++], R && !Ki(m2, u2) || Yi(I2, t2 ? [u2, m2[u2]] : m2[u2]);
          return I2;
        };
      }, Qi = { entries: createMethod$2(true), values: createMethod$2(false) }, Ji = Qi.values;
      _export({ target: "Object", stat: true }, { values: function values2(t2) {
        return Ji(t2);
      } });
      var Xi = j.Object.values, Zi = Date, eo = w(Zi.prototype.getTime);
      _export({ target: "Date", stat: true }, { now: function now() {
        return eo(new Zi());
      } });
      var to = j.Date.now, ro = wellKnownSymbol("isConcatSpreadable"), no = J >= 51 || !fails(function() {
        var t2 = [];
        return t2[ro] = false, t2.concat()[0] !== t2;
      }), ao = arrayMethodHasSpeciesSupport("concat"), isConcatSpreadable = function(t2) {
        if (!H(t2))
          return false;
        var a2 = t2[ro];
        return a2 !== void 0 ? !!a2 : Fr(t2);
      };
      _export({ target: "Array", proto: true, arity: 1, forced: !no || !ao }, { concat: function concat2(t2) {
        var a2, u2, m2, h2, g2, M2 = toObject(this), I2 = arraySpeciesCreate(M2, 0), S2 = 0;
        for (a2 = -1, m2 = arguments.length; a2 < m2; a2++)
          if (isConcatSpreadable(g2 = a2 === -1 ? M2 : arguments[a2]))
            for (h2 = lengthOfArrayLike(g2), doesNotExceedSafeInteger(S2 + h2), u2 = 0; u2 < h2; u2++, S2++)
              u2 in g2 && createProperty(I2, S2, g2[u2]);
          else
            doesNotExceedSafeInteger(S2 + 1), createProperty(I2, S2++, g2);
        return I2.length = S2, I2;
      } });
      var io = entryVirtual("Array").concat, oo = Array.prototype, concat = function(t2) {
        var a2 = t2.concat;
        return t2 === oo || $(oo, t2) && a2 === oo.concat ? io : a2;
      }, so = /MSIE .\./.test(z), co = h.Function, wrap$1 = function(t2) {
        return so ? function(a2, u2) {
          var m2 = validateArgumentsLength(arguments.length, 1) > 2, h2 = isCallable(a2) ? a2 : co(a2), g2 = m2 ? St(arguments, 2) : void 0;
          return t2(m2 ? function() {
            T(h2, this, g2);
          } : h2, u2);
        } : t2;
      }, lo = { setTimeout: wrap$1(h.setTimeout), setInterval: wrap$1(h.setInterval) }, uo = lo.setInterval;
      _export({ global: true, bind: true, forced: h.setInterval !== uo }, { setInterval: uo });
      var po = lo.setTimeout;
      _export({ global: true, bind: true, forced: h.setTimeout !== po }, { setTimeout: po });
      var mo = j.setTimeout, ho = createCommonjsModule(function(t2) {
        var a2 = Object.prototype.hasOwnProperty, u2 = "~";
        function Events() {
        }
        function EE(t3, a3, u3) {
          this.fn = t3, this.context = a3, this.once = u3 || false;
        }
        function addListener(t3, a3, m2, h2, g2) {
          if (typeof m2 != "function")
            throw new TypeError("The listener must be a function");
          var M2 = new EE(m2, h2 || t3, g2), I2 = u2 ? u2 + a3 : a3;
          return t3._events[I2] ? t3._events[I2].fn ? t3._events[I2] = [t3._events[I2], M2] : t3._events[I2].push(M2) : (t3._events[I2] = M2, t3._eventsCount++), t3;
        }
        function clearEvent(t3, a3) {
          --t3._eventsCount == 0 ? t3._events = new Events() : delete t3._events[a3];
        }
        function EventEmitter() {
          this._events = new Events(), this._eventsCount = 0;
        }
        Object.create && (Events.prototype = Object.create(null), new Events().__proto__ || (u2 = false)), EventEmitter.prototype.eventNames = function eventNames() {
          var t3, m2, h2 = [];
          if (this._eventsCount === 0)
            return h2;
          for (m2 in t3 = this._events)
            a2.call(t3, m2) && h2.push(u2 ? m2.slice(1) : m2);
          return Object.getOwnPropertySymbols ? h2.concat(Object.getOwnPropertySymbols(t3)) : h2;
        }, EventEmitter.prototype.listeners = function listeners(t3) {
          var a3 = u2 ? u2 + t3 : t3, m2 = this._events[a3];
          if (!m2)
            return [];
          if (m2.fn)
            return [m2.fn];
          for (var h2 = 0, g2 = m2.length, M2 = new Array(g2); h2 < g2; h2++)
            M2[h2] = m2[h2].fn;
          return M2;
        }, EventEmitter.prototype.listenerCount = function listenerCount(t3) {
          var a3 = u2 ? u2 + t3 : t3, m2 = this._events[a3];
          return m2 ? m2.fn ? 1 : m2.length : 0;
        }, EventEmitter.prototype.emit = function emit(t3, a3, m2, h2, g2, M2) {
          var I2 = u2 ? u2 + t3 : t3;
          if (!this._events[I2])
            return false;
          var S2, T2, C2 = this._events[I2], b2 = arguments.length;
          if (C2.fn) {
            switch (C2.once && this.removeListener(t3, C2.fn, void 0, true), b2) {
              case 1:
                return C2.fn.call(C2.context), true;
              case 2:
                return C2.fn.call(C2.context, a3), true;
              case 3:
                return C2.fn.call(C2.context, a3, m2), true;
              case 4:
                return C2.fn.call(C2.context, a3, m2, h2), true;
              case 5:
                return C2.fn.call(C2.context, a3, m2, h2, g2), true;
              case 6:
                return C2.fn.call(C2.context, a3, m2, h2, g2, M2), true;
            }
            for (T2 = 1, S2 = new Array(b2 - 1); T2 < b2; T2++)
              S2[T2 - 1] = arguments[T2];
            C2.fn.apply(C2.context, S2);
          } else {
            var E2, k2 = C2.length;
            for (T2 = 0; T2 < k2; T2++)
              switch (C2[T2].once && this.removeListener(t3, C2[T2].fn, void 0, true), b2) {
                case 1:
                  C2[T2].fn.call(C2[T2].context);
                  break;
                case 2:
                  C2[T2].fn.call(C2[T2].context, a3);
                  break;
                case 3:
                  C2[T2].fn.call(C2[T2].context, a3, m2);
                  break;
                case 4:
                  C2[T2].fn.call(C2[T2].context, a3, m2, h2);
                  break;
                default:
                  if (!S2)
                    for (E2 = 1, S2 = new Array(b2 - 1); E2 < b2; E2++)
                      S2[E2 - 1] = arguments[E2];
                  C2[T2].fn.apply(C2[T2].context, S2);
              }
          }
          return true;
        }, EventEmitter.prototype.on = function on(t3, a3, u3) {
          return addListener(this, t3, a3, u3, false);
        }, EventEmitter.prototype.once = function once(t3, a3, u3) {
          return addListener(this, t3, a3, u3, true);
        }, EventEmitter.prototype.removeListener = function removeListener(t3, a3, m2, h2) {
          var g2 = u2 ? u2 + t3 : t3;
          if (!this._events[g2])
            return this;
          if (!a3)
            return clearEvent(this, g2), this;
          var M2 = this._events[g2];
          if (M2.fn)
            M2.fn !== a3 || h2 && !M2.once || m2 && M2.context !== m2 || clearEvent(this, g2);
          else {
            for (var I2 = 0, S2 = [], T2 = M2.length; I2 < T2; I2++)
              (M2[I2].fn !== a3 || h2 && !M2[I2].once || m2 && M2[I2].context !== m2) && S2.push(M2[I2]);
            S2.length ? this._events[g2] = S2.length === 1 ? S2[0] : S2 : clearEvent(this, g2);
          }
          return this;
        }, EventEmitter.prototype.removeAllListeners = function removeAllListeners(t3) {
          var a3;
          return t3 ? (a3 = u2 ? u2 + t3 : t3, this._events[a3] && clearEvent(this, a3)) : (this._events = new Events(), this._eventsCount = 0), this;
        }, EventEmitter.prototype.off = EventEmitter.prototype.removeListener, EventEmitter.prototype.addListener = EventEmitter.prototype.on, EventEmitter.prefixed = u2, EventEmitter.EventEmitter = EventEmitter, t2.exports = EventEmitter;
      });
      _export({ global: true }, { globalThis: h });
      var go = h, vo = Array, fo = Math.max, arraySliceSimple = function(t2, a2, u2) {
        for (var m2 = lengthOfArrayLike(t2), h2 = toAbsoluteIndex(a2, m2), g2 = toAbsoluteIndex(u2 === void 0 ? m2 : u2, m2), M2 = vo(fo(g2 - h2, 0)), I2 = 0; h2 < g2; h2++, I2++)
          createProperty(M2, I2, t2[h2]);
        return M2.length = I2, M2;
      }, yo = Bn.f, _o = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [], Mo = { f: function getOwnPropertyNames(t2) {
        return _o && classofRaw(t2) == "Window" ? function(t3) {
          try {
            return yo(t3);
          } catch (t4) {
            return arraySliceSimple(_o);
          }
        }(t2) : yo(toIndexedObject(t2));
      } }, Io = { f: wellKnownSymbol }, So = Ge.f, wellKnownSymbolDefine = function(t2) {
        var a2 = j.Symbol || (j.Symbol = {});
        de(a2, t2) || So(a2, t2, { value: Io.f(t2) });
      }, symbolDefineToPrimitive = function() {
        var t2 = getBuiltIn("Symbol"), a2 = t2 && t2.prototype, u2 = a2 && a2.valueOf, m2 = wellKnownSymbol("toPrimitive");
        a2 && !a2[m2] && defineBuiltIn(a2, m2, function(t3) {
          return N(u2, this);
        }, { arity: 1 });
      }, To = tn.forEach, Co = sharedKey("hidden"), bo = "Symbol", Eo = ar.set, ko = ar.getterFor(bo), wo = Object.prototype, Ro = h.Symbol, Ao = Ro && Ro.prototype, No = h.TypeError, xo = h.QObject, Oo = be.f, Po = Ge.f, Lo = Mo.f, Vo = P.f, Uo = w([].push), Do = ce("symbols"), qo = ce("op-symbols"), Bo = ce("wks"), Fo = !xo || !xo.prototype || !xo.prototype.findChild, Go = R && fails(function() {
        return gt(Po({}, "a", { get: function() {
          return Po(this, "a", { value: 7 }).a;
        } })).a != 7;
      }) ? function(t2, a2, u2) {
        var m2 = Oo(wo, a2);
        m2 && delete wo[a2], Po(t2, a2, u2), m2 && t2 !== wo && Po(wo, a2, m2);
      } : Po, wrap = function(t2, a2) {
        var u2 = Do[t2] = gt(Ao);
        return Eo(u2, { type: bo, tag: t2, description: a2 }), R || (u2.description = a2), u2;
      }, Ho = function defineProperty(t2, a2, u2) {
        t2 === wo && Ho(qo, a2, u2), anObject(t2);
        var m2 = toPropertyKey(a2);
        return anObject(u2), de(Do, m2) ? (u2.enumerable ? (de(t2, Co) && t2[Co][m2] && (t2[Co][m2] = false), u2 = gt(u2, { enumerable: createPropertyDescriptor(0, false) })) : (de(t2, Co) || Po(t2, Co, createPropertyDescriptor(1, {})), t2[Co][m2] = true), Go(t2, m2, u2)) : Po(t2, m2, u2);
      }, jo = function defineProperties(t2, a2) {
        anObject(t2);
        var u2 = toIndexedObject(a2), m2 = lt(u2).concat($getOwnPropertySymbols(u2));
        return To(m2, function(a3) {
          R && !N($o, u2, a3) || Ho(t2, a3, u2[a3]);
        }), t2;
      }, $o = function propertyIsEnumerable(t2) {
        var a2 = toPropertyKey(t2), u2 = N(Vo, this, a2);
        return !(this === wo && de(Do, a2) && !de(qo, a2)) && (!(u2 || !de(this, a2) || !de(Do, a2) || de(this, Co) && this[Co][a2]) || u2);
      }, zo = function getOwnPropertyDescriptor(t2, a2) {
        var u2 = toIndexedObject(t2), m2 = toPropertyKey(a2);
        if (u2 !== wo || !de(Do, m2) || de(qo, m2)) {
          var h2 = Oo(u2, m2);
          return !h2 || !de(Do, m2) || de(u2, Co) && u2[Co][m2] || (h2.enumerable = true), h2;
        }
      }, Wo = function getOwnPropertyNames(t2) {
        var a2 = Lo(toIndexedObject(t2)), u2 = [];
        return To(a2, function(t3) {
          de(Do, t3) || de(it, t3) || Uo(u2, t3);
        }), u2;
      }, $getOwnPropertySymbols = function(t2) {
        var a2 = t2 === wo, u2 = Lo(a2 ? qo : toIndexedObject(t2)), m2 = [];
        return To(u2, function(t3) {
          !de(Do, t3) || a2 && !de(wo, t3) || Uo(m2, Do[t3]);
        }), m2;
      };
      X || (Ro = function Symbol2() {
        if ($(Ao, this))
          throw No("Symbol is not a constructor");
        var t2 = arguments.length && arguments[0] !== void 0 ? toString(arguments[0]) : void 0, a2 = uid(t2), setter = function(t3) {
          this === wo && N(setter, qo, t3), de(this, Co) && de(this[Co], a2) && (this[Co][a2] = false), Go(this, a2, createPropertyDescriptor(1, t3));
        };
        return R && Fo && Go(wo, a2, { configurable: true, set: setter }), wrap(a2, t2);
      }, Ao = Ro.prototype, defineBuiltIn(Ao, "toString", function toString2() {
        return ko(this).tag;
      }), defineBuiltIn(Ro, "withoutSetter", function(t2) {
        return wrap(uid(t2), t2);
      }), P.f = $o, Ge.f = Ho, dt.f = jo, be.f = zo, Bn.f = Mo.f = Wo, Ot.f = $getOwnPropertySymbols, Io.f = function(t2) {
        return wrap(wellKnownSymbol(t2), t2);
      }, R && Po(Ao, "description", { configurable: true, get: function description() {
        return ko(this).description;
      } })), _export({ global: true, constructor: true, wrap: true, forced: !X, sham: !X }, { Symbol: Ro }), To(lt(Bo), function(t2) {
        wellKnownSymbolDefine(t2);
      }), _export({ target: bo, stat: true, forced: !X }, { useSetter: function() {
        Fo = true;
      }, useSimple: function() {
        Fo = false;
      } }), _export({ target: "Object", stat: true, forced: !X, sham: !R }, { create: function create(t2, a2) {
        return a2 === void 0 ? gt(t2) : jo(gt(t2), a2);
      }, defineProperty: Ho, defineProperties: jo, getOwnPropertyDescriptor: zo }), _export({ target: "Object", stat: true, forced: !X }, { getOwnPropertyNames: Wo }), symbolDefineToPrimitive(), setToStringTag(Ro, bo), it[Co] = true;
      var Ko = X && !!Symbol.for && !!Symbol.keyFor, Yo = ce("string-to-symbol-registry"), Qo = ce("symbol-to-string-registry");
      _export({ target: "Symbol", stat: true, forced: !Ko }, { for: function(t2) {
        var a2 = toString(t2);
        if (de(Yo, a2))
          return Yo[a2];
        var u2 = getBuiltIn("Symbol")(a2);
        return Yo[a2] = u2, Qo[u2] = a2, u2;
      } });
      var Jo = ce("symbol-to-string-registry");
      _export({ target: "Symbol", stat: true, forced: !Ko }, { keyFor: function keyFor(t2) {
        if (!te(t2))
          throw TypeError(tryToString(t2) + " is not a symbol");
        if (de(Jo, t2))
          return Jo[t2];
      } });
      var Xo = !X || fails(function() {
        Ot.f(1);
      });
      _export({ target: "Object", stat: true, forced: Xo }, { getOwnPropertySymbols: function getOwnPropertySymbols(t2) {
        var a2 = Ot.f;
        return a2 ? a2(toObject(t2)) : [];
      } }), wellKnownSymbolDefine("asyncIterator"), wellKnownSymbolDefine("hasInstance"), wellKnownSymbolDefine("isConcatSpreadable"), wellKnownSymbolDefine("iterator"), wellKnownSymbolDefine("match"), wellKnownSymbolDefine("matchAll"), wellKnownSymbolDefine("replace"), wellKnownSymbolDefine("search"), wellKnownSymbolDefine("species"), wellKnownSymbolDefine("split"), wellKnownSymbolDefine("toPrimitive"), symbolDefineToPrimitive(), wellKnownSymbolDefine("toStringTag"), setToStringTag(getBuiltIn("Symbol"), "Symbol"), wellKnownSymbolDefine("unscopables"), setToStringTag(h.JSON, "JSON", true);
      var Zo = j.Symbol;
      wellKnownSymbolDefine("asyncDispose"), wellKnownSymbolDefine("dispose"), wellKnownSymbolDefine("matcher"), wellKnownSymbolDefine("metadataKey"), wellKnownSymbolDefine("observable"), wellKnownSymbolDefine("metadata"), wellKnownSymbolDefine("patternMatch"), wellKnownSymbolDefine("replaceAll");
      var es = Zo, ts = fails(function() {
        mr(1);
      });
      _export({ target: "Object", stat: true, forced: ts, sham: !lr }, { getPrototypeOf: function getPrototypeOf(t2) {
        return mr(toObject(t2));
      } });
      var rs = j.Object.getPrototypeOf, ns = w([].reverse), as = [1, 2];
      _export({ target: "Array", proto: true, forced: String(as) === String(as.reverse()) }, { reverse: function reverse2() {
        return Fr(this) && (this.length = this.length), ns(this);
      } });
      var is = entryVirtual("Array").reverse, os = Array.prototype, reverse$1 = function(t2) {
        var a2 = t2.reverse;
        return t2 === os || $(os, t2) && a2 === os.reverse ? is : a2;
      }, ss = arrayMethodHasSpeciesSupport("slice"), cs = wellKnownSymbol("species"), ls = Array, us = Math.max;
      _export({ target: "Array", proto: true, forced: !ss }, { slice: function slice2(t2, a2) {
        var u2, m2, h2, g2 = toIndexedObject(this), M2 = lengthOfArrayLike(g2), I2 = toAbsoluteIndex(t2, M2), S2 = toAbsoluteIndex(a2 === void 0 ? M2 : a2, M2);
        if (Fr(g2) && (u2 = g2.constructor, (Jr(u2) && (u2 === ls || Fr(u2.prototype)) || H(u2) && (u2 = u2[cs]) === null) && (u2 = void 0), u2 === ls || u2 === void 0))
          return St(g2, I2, S2);
        for (m2 = new (u2 === void 0 ? ls : u2)(us(S2 - I2, 0)), h2 = 0; I2 < S2; I2++, h2++)
          I2 in g2 && createProperty(m2, h2, g2[I2]);
        return m2.length = h2, m2;
      } });
      var ds = entryVirtual("Array").slice, ps = Array.prototype, slice = function(t2) {
        var a2 = t2.slice;
        return t2 === ps || $(ps, t2) && a2 === ps.slice ? ds : a2;
      }, ms = Io.f("iterator"), hs = at.includes, gs = fails(function() {
        return !Array(1).includes();
      });
      _export({ target: "Array", proto: true, forced: gs }, { includes: function includes2(t2) {
        return hs(this, t2, arguments.length > 1 ? arguments[1] : void 0);
      } });
      var vs = entryVirtual("Array").includes, fs = wellKnownSymbol("match"), ys = TypeError, notARegexp = function(t2) {
        if (function(t3) {
          var a2;
          return H(t3) && ((a2 = t3[fs]) !== void 0 ? !!a2 : classofRaw(t3) == "RegExp");
        }(t2))
          throw ys("The method doesn't accept regular expressions");
        return t2;
      }, _s = wellKnownSymbol("match"), correctIsRegexpLogic = function(t2) {
        var a2 = /./;
        try {
          "/./"[t2](a2);
        } catch (u2) {
          try {
            return a2[_s] = false, "/./"[t2](a2);
          } catch (t3) {
          }
        }
        return false;
      }, Ms = w("".indexOf);
      _export({ target: "String", proto: true, forced: !correctIsRegexpLogic("includes") }, { includes: function includes2(t2) {
        return !!~Ms(toString(requireObjectCoercible(this)), toString(notARegexp(t2)), arguments.length > 1 ? arguments[1] : void 0);
      } });
      var Is = entryVirtual("String").includes, Ss = Array.prototype, Ts = String.prototype, includes = function(t2) {
        var a2 = t2.includes;
        return t2 === Ss || $(Ss, t2) && a2 === Ss.includes ? vs : typeof t2 == "string" || t2 === Ts || $(Ts, t2) && a2 === Ts.includes ? Is : a2;
      }, Cs = tn.map, bs = arrayMethodHasSpeciesSupport("map");
      _export({ target: "Array", proto: true, forced: !bs }, { map: function map(t2) {
        return Cs(this, t2, arguments.length > 1 ? arguments[1] : void 0);
      } });
      var Es = entryVirtual("Array").map, ks = Array.prototype, map$6 = function(t2) {
        var a2 = t2.map;
        return t2 === ks || $(ks, t2) && a2 === ks.map ? Es : a2;
      }, ws = tn.filter, Rs = arrayMethodHasSpeciesSupport("filter");
      _export({ target: "Array", proto: true, forced: !Rs }, { filter: function filter2(t2) {
        return ws(this, t2, arguments.length > 1 ? arguments[1] : void 0);
      } });
      var As = entryVirtual("Array").filter, Ns = Array.prototype, filter = function(t2) {
        var a2 = t2.filter;
        return t2 === Ns || $(Ns, t2) && a2 === Ns.filter ? As : a2;
      }, xs = createCommonjsModule(function(t2, a2) {
        t2.exports = function() {
          function _regeneratorRuntime() {
            _regeneratorRuntime = function _regeneratorRuntime2() {
              return t4;
            };
            var t4 = {}, a4 = Object.prototype, u3 = a4.hasOwnProperty, m3 = typeof es == "function" ? es : {}, h3 = m3.iterator || "@@iterator", g2 = m3.asyncIterator || "@@asyncIterator", M2 = m3.toStringTag || "@@toStringTag";
            function define2(t5, a5, u4) {
              return Ke(t5, a5, { value: u4, enumerable: true, configurable: true, writable: true }), t5[a5];
            }
            try {
              define2({}, "");
            } catch (t5) {
              define2 = function define3(t6, a5, u4) {
                return t6[a5] = u4;
              };
            }
            function wrap2(t5, a5, u4, m4) {
              var h4 = a5 && a5.prototype instanceof Generator ? a5 : Generator, g3 = ft(h4.prototype), M3 = new Context(m4 || []);
              return g3._invoke = function(t6, a6, u5) {
                var m5 = "suspendedStart";
                return function(h5, g4) {
                  if (m5 === "executing")
                    throw new Error("Generator is already running");
                  if (m5 === "completed") {
                    if (h5 === "throw")
                      throw g4;
                    return doneResult();
                  }
                  for (u5.method = h5, u5.arg = g4; ; ) {
                    var M4 = u5.delegate;
                    if (M4) {
                      var S3 = maybeInvokeDelegate(M4, u5);
                      if (S3) {
                        if (S3 === I2)
                          continue;
                        return S3;
                      }
                    }
                    if (u5.method === "next")
                      u5.sent = u5._sent = u5.arg;
                    else if (u5.method === "throw") {
                      if (m5 === "suspendedStart")
                        throw m5 = "completed", u5.arg;
                      u5.dispatchException(u5.arg);
                    } else
                      u5.method === "return" && u5.abrupt("return", u5.arg);
                    m5 = "executing";
                    var T3 = tryCatch(t6, a6, u5);
                    if (T3.type === "normal") {
                      if (m5 = u5.done ? "completed" : "suspendedYield", T3.arg === I2)
                        continue;
                      return { value: T3.arg, done: u5.done };
                    }
                    T3.type === "throw" && (m5 = "completed", u5.method = "throw", u5.arg = T3.arg);
                  }
                };
              }(t5, u4, M3), g3;
            }
            function tryCatch(t5, a5, u4) {
              try {
                return { type: "normal", arg: t5.call(a5, u4) };
              } catch (t6) {
                return { type: "throw", arg: t6 };
              }
            }
            t4.wrap = wrap2;
            var I2 = {};
            function Generator() {
            }
            function GeneratorFunction() {
            }
            function GeneratorFunctionPrototype() {
            }
            var S2 = {};
            define2(S2, h3, function() {
              return this;
            });
            var T2 = rs && rs(rs(values2([])));
            T2 && T2 !== a4 && u3.call(T2, h3) && (S2 = T2);
            var C2 = GeneratorFunctionPrototype.prototype = Generator.prototype = ft(S2);
            function defineIteratorMethods(t5) {
              var a5;
              forEach$1(a5 = ["next", "throw", "return"]).call(a5, function(a6) {
                define2(t5, a6, function(t6) {
                  return this._invoke(a6, t6);
                });
              });
            }
            function AsyncIterator(t5, a5) {
              function invoke(m5, h4, g3, M3) {
                var I3 = tryCatch(t5[m5], t5, h4);
                if (I3.type !== "throw") {
                  var S3 = I3.arg, T3 = S3.value;
                  return T3 && typeof T3 == "object" && u3.call(T3, "__await") ? a5.resolve(T3.__await).then(function(t6) {
                    invoke("next", t6, g3, M3);
                  }, function(t6) {
                    invoke("throw", t6, g3, M3);
                  }) : a5.resolve(T3).then(function(t6) {
                    S3.value = t6, g3(S3);
                  }, function(t6) {
                    return invoke("throw", t6, g3, M3);
                  });
                }
                M3(I3.arg);
              }
              var m4;
              this._invoke = function(t6, u4) {
                function callInvokeWithMethodAndArg() {
                  return new a5(function(a6, m5) {
                    invoke(t6, u4, a6, m5);
                  });
                }
                return m4 = m4 ? m4.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
              };
            }
            function maybeInvokeDelegate(t5, a5) {
              var u4 = t5.iterator[a5.method];
              if (u4 === void 0) {
                if (a5.delegate = null, a5.method === "throw") {
                  if (t5.iterator.return && (a5.method = "return", a5.arg = void 0, maybeInvokeDelegate(t5, a5), a5.method === "throw"))
                    return I2;
                  a5.method = "throw", a5.arg = new TypeError("The iterator does not provide a 'throw' method");
                }
                return I2;
              }
              var m4 = tryCatch(u4, t5.iterator, a5.arg);
              if (m4.type === "throw")
                return a5.method = "throw", a5.arg = m4.arg, a5.delegate = null, I2;
              var h4 = m4.arg;
              return h4 ? h4.done ? (a5[t5.resultName] = h4.value, a5.next = t5.nextLoc, a5.method !== "return" && (a5.method = "next", a5.arg = void 0), a5.delegate = null, I2) : h4 : (a5.method = "throw", a5.arg = new TypeError("iterator result is not an object"), a5.delegate = null, I2);
            }
            function pushTryEntry(t5) {
              var a5 = { tryLoc: t5[0] };
              1 in t5 && (a5.catchLoc = t5[1]), 2 in t5 && (a5.finallyLoc = t5[2], a5.afterLoc = t5[3]), this.tryEntries.push(a5);
            }
            function resetTryEntry(t5) {
              var a5 = t5.completion || {};
              a5.type = "normal", delete a5.arg, t5.completion = a5;
            }
            function Context(t5) {
              this.tryEntries = [{ tryLoc: "root" }], forEach$1(t5).call(t5, pushTryEntry, this), this.reset(true);
            }
            function values2(t5) {
              if (t5) {
                var a5 = t5[h3];
                if (a5)
                  return a5.call(t5);
                if (typeof t5.next == "function")
                  return t5;
                if (!isNaN(t5.length)) {
                  var m4 = -1, g3 = function next() {
                    for (; ++m4 < t5.length; )
                      if (u3.call(t5, m4))
                        return next.value = t5[m4], next.done = false, next;
                    return next.value = void 0, next.done = true, next;
                  };
                  return g3.next = g3;
                }
              }
              return { next: doneResult };
            }
            function doneResult() {
              return { value: void 0, done: true };
            }
            return GeneratorFunction.prototype = GeneratorFunctionPrototype, define2(C2, "constructor", GeneratorFunctionPrototype), define2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, M2, "GeneratorFunction"), t4.isGeneratorFunction = function(t5) {
              var a5 = typeof t5 == "function" && t5.constructor;
              return !!a5 && (a5 === GeneratorFunction || (a5.displayName || a5.name) === "GeneratorFunction");
            }, t4.mark = function(t5) {
              return It ? It(t5, GeneratorFunctionPrototype) : (t5.__proto__ = GeneratorFunctionPrototype, define2(t5, M2, "GeneratorFunction")), t5.prototype = ft(C2), t5;
            }, t4.awrap = function(t5) {
              return { __await: t5 };
            }, defineIteratorMethods(AsyncIterator.prototype), define2(AsyncIterator.prototype, g2, function() {
              return this;
            }), t4.AsyncIterator = AsyncIterator, t4.async = function(a5, u4, m4, h4, g3) {
              g3 === void 0 && (g3 = zi);
              var M3 = new AsyncIterator(wrap2(a5, u4, m4, h4), g3);
              return t4.isGeneratorFunction(u4) ? M3 : M3.next().then(function(t5) {
                return t5.done ? t5.value : M3.next();
              });
            }, defineIteratorMethods(C2), define2(C2, M2, "Generator"), define2(C2, h3, function() {
              return this;
            }), define2(C2, "toString", function() {
              return "[object Generator]";
            }), t4.keys = function(t5) {
              var a5 = [];
              for (var u4 in t5)
                a5.push(u4);
              return reverse$1(a5).call(a5), function next() {
                for (; a5.length; ) {
                  var u5 = a5.pop();
                  if (u5 in t5)
                    return next.value = u5, next.done = false, next;
                }
                return next.done = true, next;
              };
            }, t4.values = values2, Context.prototype = { constructor: Context, reset: function reset(t5) {
              var a5;
              if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, forEach$1(a5 = this.tryEntries).call(a5, resetTryEntry), !t5)
                for (var m4 in this)
                  m4.charAt(0) === "t" && u3.call(this, m4) && !isNaN(+slice(m4).call(m4, 1)) && (this[m4] = void 0);
            }, stop: function stop() {
              this.done = true;
              var t5 = this.tryEntries[0].completion;
              if (t5.type === "throw")
                throw t5.arg;
              return this.rval;
            }, dispatchException: function dispatchException(t5) {
              if (this.done)
                throw t5;
              var a5 = this;
              function handle(u4, m5) {
                return g3.type = "throw", g3.arg = t5, a5.next = u4, m5 && (a5.method = "next", a5.arg = void 0), !!m5;
              }
              for (var m4 = this.tryEntries.length - 1; m4 >= 0; --m4) {
                var h4 = this.tryEntries[m4], g3 = h4.completion;
                if (h4.tryLoc === "root")
                  return handle("end");
                if (h4.tryLoc <= this.prev) {
                  var M3 = u3.call(h4, "catchLoc"), I3 = u3.call(h4, "finallyLoc");
                  if (M3 && I3) {
                    if (this.prev < h4.catchLoc)
                      return handle(h4.catchLoc, true);
                    if (this.prev < h4.finallyLoc)
                      return handle(h4.finallyLoc);
                  } else if (M3) {
                    if (this.prev < h4.catchLoc)
                      return handle(h4.catchLoc, true);
                  } else {
                    if (!I3)
                      throw new Error("try statement without catch or finally");
                    if (this.prev < h4.finallyLoc)
                      return handle(h4.finallyLoc);
                  }
                }
              }
            }, abrupt: function abrupt(t5, a5) {
              for (var m4 = this.tryEntries.length - 1; m4 >= 0; --m4) {
                var h4 = this.tryEntries[m4];
                if (h4.tryLoc <= this.prev && u3.call(h4, "finallyLoc") && this.prev < h4.finallyLoc) {
                  var g3 = h4;
                  break;
                }
              }
              g3 && (t5 === "break" || t5 === "continue") && g3.tryLoc <= a5 && a5 <= g3.finallyLoc && (g3 = null);
              var M3 = g3 ? g3.completion : {};
              return M3.type = t5, M3.arg = a5, g3 ? (this.method = "next", this.next = g3.finallyLoc, I2) : this.complete(M3);
            }, complete: function complete(t5, a5) {
              if (t5.type === "throw")
                throw t5.arg;
              return t5.type === "break" || t5.type === "continue" ? this.next = t5.arg : t5.type === "return" ? (this.rval = this.arg = t5.arg, this.method = "return", this.next = "end") : t5.type === "normal" && a5 && (this.next = a5), I2;
            }, finish: function finish(t5) {
              for (var a5 = this.tryEntries.length - 1; a5 >= 0; --a5) {
                var u4 = this.tryEntries[a5];
                if (u4.finallyLoc === t5)
                  return this.complete(u4.completion, u4.afterLoc), resetTryEntry(u4), I2;
              }
            }, catch: function _catch(t5) {
              for (var a5 = this.tryEntries.length - 1; a5 >= 0; --a5) {
                var u4 = this.tryEntries[a5];
                if (u4.tryLoc === t5) {
                  var m4 = u4.completion;
                  if (m4.type === "throw") {
                    var h4 = m4.arg;
                    resetTryEntry(u4);
                  }
                  return h4;
                }
              }
              throw new Error("illegal catch attempt");
            }, delegateYield: function delegateYield(t5, a5, u4) {
              return this.delegate = { iterator: values2(t5), resultName: a5, nextLoc: u4 }, this.method === "next" && (this.arg = void 0), I2;
            } }, t4;
          }
          function _typeof(t4) {
            return _typeof = typeof es == "function" && typeof ms == "symbol" ? function(t5) {
              return typeof t5;
            } : function(t5) {
              return t5 && typeof es == "function" && t5.constructor === es && t5 !== es.prototype ? "symbol" : typeof t5;
            }, _typeof(t4);
          }
          function _classCallCheck(t4, a4) {
            if (!(t4 instanceof a4))
              throw new TypeError("Cannot call a class as a function");
          }
          function _defineProperties(t4, a4) {
            for (var u3 = 0; u3 < a4.length; u3++) {
              var m3 = a4[u3];
              m3.enumerable = m3.enumerable || false, m3.configurable = true, "value" in m3 && (m3.writable = true), Ke(t4, m3.key, m3);
            }
          }
          function _createClass(t4, a4, u3) {
            return a4 && _defineProperties(t4.prototype, a4), u3 && _defineProperties(t4, u3), Ke(t4, "prototype", { writable: false }), t4;
          }
          function __awaiter2(t4, a4, u3, m3) {
            function adopt(t5) {
              return t5 instanceof u3 ? t5 : new u3(function(a5) {
                a5(t5);
              });
            }
            return new (u3 || (u3 = zi))(function(u4, h3) {
              function fulfilled(t5) {
                try {
                  step(m3.next(t5));
                } catch (t6) {
                  h3(t6);
                }
              }
              function rejected(t5) {
                try {
                  step(m3.throw(t5));
                } catch (t6) {
                  h3(t6);
                }
              }
              function step(t5) {
                t5.done ? u4(t5.value) : adopt(t5.value).then(fulfilled, rejected);
              }
              step((m3 = m3.apply(t4, a4 || [])).next());
            });
          }
          var t3 = { isDataReportEnable: true, maxSize: 100, msgListMaxSize: 1e3, cacheMaxSize: 1e3, maxDelay: 3e5, maxInterval: 3e4, minInterval: 1e4, timeout: 5e3, autoStart: true, loginFailIgnoreInterval: 72e5 }, a3 = 12, u2 = 8e3, m2 = function emptyFn() {
          }, h2 = function() {
            function Reporter(a4) {
              _classCallCheck(this, Reporter), this.isUploadEnable = true, this.serverAllowUpload = false, this.initConfigLoaded = false, this.loading = false, this.isDestroyed = false, this.reportConfig = t3, this.configPath = "dispatcher/req", this.dataReportPath = "statics/report/common/form", this.traceMsgCache = {}, this.reqRetryCount = 0, this.highPriorityMsgList = [], this.msgList = [], this.lowPriorityMsgList = [], this.cacheMsgList = [], this.lastReportTime = to(), this.timer = null, this.endedAsyncMsgByModule = {}, this.lastFailLogin = {}, this.setConfig(a4), this.reportConfig.isDataReportEnable && this.reportConfig.autoStart && this.initUploadConfig();
            }
            return _createClass(Reporter, [{ key: "setConfig", value: function setConfig(t4) {
              var a4 = Dt({}, this.reportConfig.common, t4.common);
              this.reportConfig = Dt({}, this.reportConfig, t4), this.reportConfig.common = a4, this.reportConfig.common.sdk_type || (this.reportConfig.common.sdk_type = "im");
            } }, { key: "reportImmediately", value: function reportImmediately(t4, a4) {
              var u3 = this;
              this.reportConfig.isDataReportEnable && this.reportConfig.request(t4, Dt({ dataType: "json", method: "POST", timeout: this.reportConfig.timeout }, a4)).catch(function(t5) {
                var a5, m3;
                (m3 = (a5 = u3.reportConfig) === null || a5 === void 0 ? void 0 : a5.logger) === null || m3 === void 0 || m3.warn("Reporter immediately upload failed", t5);
              });
            } }, { key: "report", value: function report(a4, u3) {
              var m3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
              if (m3.priority || (m3.priority = this.getEventPriority(a4, u3)), this.reportConfig.isDataReportEnable && a4) {
                if (a4 === "login" && u3.succeed === false && u3.process_id) {
                  var h3 = this.lastFailLogin[u3.process_id] || 0;
                  if (u3.start_time - h3 < t3.loginFailIgnoreInterval)
                    return;
                  this.lastFailLogin[u3.process_id] = u3.start_time;
                }
                var g2 = to();
                m3.priority === "HIGH" ? this.highPriorityMsgList.push({ module: a4, msg: u3, createTime: g2 }) : m3.priority === "NORMAL" ? this.msgList.push({ module: a4, msg: u3, createTime: g2 }) : m3.priority === "LOW" && this.lowPriorityMsgList.push({ module: a4, msg: u3, createTime: g2 }), this.highPriorityMsgList.length > this.reportConfig.msgListMaxSize && this.highPriorityMsgList.shift(), this.msgList.length > this.reportConfig.msgListMaxSize && this.msgList.shift(), this.lowPriorityMsgList.length > this.reportConfig.msgListMaxSize && this.lowPriorityMsgList.shift(), this.doReport();
              }
            } }, { key: "reportTraceStart", value: function reportTraceStart(t4, a4) {
              if (this.reportConfig.isDataReportEnable && t4 && !this.traceMsgCache[t4]) {
                var u3 = Dt(Dt({ start_time: to() }, a4), { extension: [] });
                this.traceMsgCache[t4] = u3;
              }
            } }, { key: "reportTraceUpdate", value: function reportTraceUpdate(t4) {
            } }, { key: "reportTraceUpdateV2", value: function reportTraceUpdateV2(t4, a4, u3) {
              var m3, h3 = this;
              if (this.reportConfig.isDataReportEnable && this.traceMsgCache[t4]) {
                var g2 = this.traceMsgCache[t4].extension, M2 = g2.length, I2 = new Date().getTime();
                M2 === 0 ? a4.duration = I2 - this.traceMsgCache[t4].start_time : g2[M2 - 1].end_time ? a4.duration = I2 - g2[M2 - 1].end_time : a4.duration = I2 - this.traceMsgCache[t4].start_time, g2.push(Dt({ end_time: I2 }, a4));
                var S2 = g2.length - 1;
                (u3 == null ? void 0 : u3.asyncParams) && ((m3 = this.traceMsgCache[t4]).asyncPromiseArray || (m3.asyncPromiseArray = []), this.traceMsgCache[t4].asyncPromiseArray.push(u3.asyncParams.then(function(a5) {
                  h3.traceMsgCache[t4] && h3.traceMsgCache[t4].extension[S2] && Dt(h3.traceMsgCache[t4].extension[S2], a5);
                })));
              }
            } }, { key: "reportTraceEnd", value: function reportTraceEnd(t4) {
              var a4, u3, m3 = this, h3 = !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1];
              if (this.reportConfig.isDataReportEnable && this.traceMsgCache[t4])
                if (t4 !== "nos" || h3 === false) {
                  typeof h3 == "boolean" ? this.traceMsgCache[t4].succeed = !!h3 : this.traceMsgCache[t4].state = h3, this.traceMsgCache[t4].duration = to() - this.traceMsgCache[t4].start_time, forEach$1(a4 = this.traceMsgCache[t4].extension).call(a4, function(t5) {
                    delete t5.end_time;
                  });
                  var g2 = this.traceMsgCache[t4];
                  if (this.traceMsgCache[t4] = null, g2.asyncPromiseArray) {
                    (u3 = this.endedAsyncMsgByModule)[t4] || (u3[t4] = []), this.endedAsyncMsgByModule[t4].push(g2);
                    var M2 = function asyncCallback() {
                      var a5;
                      m3.endedAsyncMsgByModule[t4] && includes(a5 = m3.endedAsyncMsgByModule[t4]).call(a5, g2) && (delete g2.asyncPromiseArray, m3.report(t4, g2, { priority: m3.getEventPriority(t4, g2) }));
                    };
                    zi.all(g2.asyncPromiseArray).then(M2).catch(M2);
                  } else
                    this.report(t4, g2, { priority: this.getEventPriority(t4, g2) });
                } else
                  this.traceMsgCache[t4] = null;
            } }, { key: "getEventPriority", value: function getEventPriority(t4, a4) {
              if (t4 === "exceptions") {
                if (a4.action === 0)
                  return "HIGH";
                if (a4.action === 2)
                  return "HIGH";
                if (a4.action === 1 && a4.exception_service !== 0)
                  return "HIGH";
              } else {
                if (t4 === "msgReceive")
                  return "LOW";
                if (t4 === "nim_api_trace")
                  return "LOW";
              }
              return "NORMAL";
            } }, { key: "reportTraceCancel", value: function reportTraceCancel(t4) {
              this.reportConfig.isDataReportEnable && (this.endedAsyncMsgByModule[t4] = [], this.traceMsgCache[t4] = null);
            } }, { key: "pause", value: function pause() {
              this.reportConfig.isDataReportEnable && (this.isUploadEnable = false);
            } }, { key: "restore", value: function restore() {
              this.reportConfig.isDataReportEnable && (this.isUploadEnable = true, this.initConfigLoaded || this.initUploadConfig());
            } }, { key: "destroy", value: function destroy() {
              var t4, a4 = this;
              this.reportConfig.isDataReportEnable && (forEach$1(t4 = Ht(this.traceMsgCache)).call(t4, function(t5) {
                a4.reportTraceEnd(t5, 1);
              }), this.timer !== null && clearTimeout(this.timer), this.setConfig = m2, this.report = m2, this.reportTraceStart = m2, this.reportTraceUpdate = m2, this.reportTraceEnd = m2, this.pause = m2, this.restore = m2, this.destroy = m2, this.reqRetryCount = 0, this.cacheMsgList = [], this.traceMsgCache = {}, this.lowPriorityMsgList = [], this.msgList = [], this.highPriorityMsgList = [], this.reportConfig = {}, this.isDestroyed = true);
            } }, { key: "initUploadConfig", value: function initUploadConfig() {
              var t4, m3;
              return __awaiter2(this, void 0, void 0, _regeneratorRuntime().mark(function _callee() {
                var h3, g2, M2, I2, S2, T2 = this;
                return _regeneratorRuntime().wrap(function _callee$(C2) {
                  for (var b2; ; )
                    switch (C2.prev = C2.next) {
                      case 0:
                        if (!this.loading) {
                          C2.next = 2;
                          break;
                        }
                        return C2.abrupt("return");
                      case 2:
                        this.loading = true, h3 = this.reportConfig.common || {}, g2 = map$6(b2 = this.reportConfig.compassDataEndpoint.split(",")).call(b2, function(t5) {
                          var a4;
                          return concat(a4 = "".concat(t5, "/")).call(a4, T2.configPath);
                        }), M2 = _regeneratorRuntime().mark(function _loop(M3) {
                          return _regeneratorRuntime().wrap(function _loop$(I3) {
                            for (; ; )
                              switch (I3.prev = I3.next) {
                                case 0:
                                  if (!T2.initConfigLoaded && !T2.isDestroyed) {
                                    I3.next = 2;
                                    break;
                                  }
                                  return I3.abrupt("return", "break");
                                case 2:
                                  return I3.prev = 2, I3.next = 5, T2.reportConfig.request(g2[M3], { method: "GET", dataType: "json", params: { deviceId: h3.dev_id, sdkVer: h3.sdk_ver, platform: h3.platform, appkey: h3.app_key }, timeout: T2.reportConfig.timeout }).then(function(t5) {
                                    var a4, u3;
                                    if (!T2.isDestroyed) {
                                      if (t5.status === 200 && t5.data && t5.data.code === 200) {
                                        T2.initConfigLoaded = true;
                                        var m4 = t5.data.data || {};
                                        T2.reportConfig.maxSize = m4.maxSize > 1e3 ? 1e3 : m4.maxSize, T2.reportConfig.maxInterval = m4.maxInterval > 1e4 ? 1e4 : m4.maxInterval, T2.reportConfig.maxInterval = m4.maxInterval < 10 ? 10 : m4.maxInterval, T2.reportConfig.minInterval = m4.minInterval < 2 ? 2 : m4.minInterval, T2.reportConfig.maxDelay = m4.maxDelay || 300, T2.reportConfig.maxInterval = 1e3 * T2.reportConfig.maxInterval, T2.reportConfig.minInterval = 1e3 * T2.reportConfig.minInterval, T2.reportConfig.maxDelay = 1e3 * T2.reportConfig.maxDelay, m4.endpoint ? T2.dataReportEndpoint = m4.endpoint : T2.dataReportEndpoint = g2[M3], T2.serverAllowUpload = true, T2.loading = false, T2.reportHeartBeat();
                                      } else
                                        t5.status === 200 && (T2.initConfigLoaded = true);
                                      (u3 = (a4 = T2.reportConfig) === null || a4 === void 0 ? void 0 : a4.logger) === null || u3 === void 0 || u3.log("Get reporter upload config success");
                                    }
                                  }).catch(function(t5) {
                                    var m4, h4;
                                    T2.isDestroyed || (T2.loading = false, (h4 = (m4 = T2.reportConfig) === null || m4 === void 0 ? void 0 : m4.logger) === null || h4 === void 0 || h4.error("Get reporter upload config failed", t5), T2.reqRetryCount < a3 && (T2.reqRetryCount++, mo(function() {
                                      T2.isDestroyed || T2.initUploadConfig();
                                    }, u2)));
                                  });
                                case 5:
                                  I3.next = 14;
                                  break;
                                case 7:
                                  if (I3.prev = 7, I3.t0 = I3.catch(2), !T2.isDestroyed) {
                                    I3.next = 11;
                                    break;
                                  }
                                  return I3.abrupt("return", { v: void 0 });
                                case 11:
                                  T2.loading = false, (m3 = (t4 = T2.reportConfig) === null || t4 === void 0 ? void 0 : t4.logger) === null || m3 === void 0 || m3.error("Exec reporter request failed", I3.t0), T2.reqRetryCount < a3 && (T2.reqRetryCount++, mo(function() {
                                    T2.isDestroyed || T2.initUploadConfig();
                                  }, u2));
                                case 14:
                                case "end":
                                  return I3.stop();
                              }
                          }, _loop, null, [[2, 7]]);
                        }), I2 = 0;
                      case 7:
                        if (!(I2 < g2.length)) {
                          C2.next = 17;
                          break;
                        }
                        return C2.delegateYield(M2(I2), "t0", 9);
                      case 9:
                        if ((S2 = C2.t0) !== "break") {
                          C2.next = 12;
                          break;
                        }
                        return C2.abrupt("break", 17);
                      case 12:
                        if (_typeof(S2) !== "object") {
                          C2.next = 14;
                          break;
                        }
                        return C2.abrupt("return", S2.v);
                      case 14:
                        I2++, C2.next = 7;
                        break;
                      case 17:
                      case "end":
                        return C2.stop();
                    }
                }, _callee, this);
              }));
            } }, { key: "reportHeartBeat", value: function reportHeartBeat() {
              var t4 = this;
              this.isDestroyed || (this.timer = mo(function() {
                t4.reportHeartBeat();
              }, this.reportConfig.minInterval), this.doReport());
            } }, { key: "doReport", value: function doReport() {
              if (!this.isDestroyed) {
                var t4 = this.highPriorityMsgList.length + this.msgList.length + this.lowPriorityMsgList.length + this.cacheMsgList.length > 2 * this.reportConfig.maxSize ? this.reportConfig.minInterval : this.reportConfig.maxInterval;
                to() - this.lastReportTime >= t4 && this.upload();
              }
            } }, { key: "getUploadMsg", value: function getUploadMsg() {
              var t4, a4, u3, m3, h3, g2, M2 = this, I2 = {}, S2 = to();
              this.highPriorityMsgList = filter(t4 = this.highPriorityMsgList).call(t4, function(t5) {
                return S2 - t5.createTime < M2.reportConfig.maxDelay;
              }), this.msgList = filter(a4 = this.msgList).call(a4, function(t5) {
                return S2 - t5.createTime < M2.reportConfig.maxDelay;
              }), this.lowPriorityMsgList = filter(u3 = this.lowPriorityMsgList).call(u3, function(t5) {
                return S2 - t5.createTime < M2.reportConfig.maxDelay;
              }), this.cacheMsgList = filter(m3 = this.cacheMsgList).call(m3, function(t5) {
                return S2 - t5.createTime < M2.reportConfig.maxDelay;
              });
              var T2 = slice(h3 = this.highPriorityMsgList).call(h3, 0, this.reportConfig.maxSize);
              if (this.highPriorityMsgList = slice(g2 = this.highPriorityMsgList).call(g2, T2.length), T2.length < this.reportConfig.maxSize) {
                var C2, b2, E2 = this.reportConfig.maxSize - T2.length;
                T2 = concat(T2).call(T2, slice(C2 = this.msgList).call(C2, 0, E2)), this.msgList = slice(b2 = this.msgList).call(b2, E2);
              }
              if (T2.length < this.reportConfig.maxSize) {
                var k2, w2, R2 = this.reportConfig.maxSize - T2.length;
                T2 = concat(T2).call(T2, slice(k2 = this.lowPriorityMsgList).call(k2, 0, R2)), this.lowPriorityMsgList = slice(w2 = this.lowPriorityMsgList).call(w2, R2);
              }
              if (T2.length < this.reportConfig.maxSize) {
                var A2, N2, x2 = this.reportConfig.maxSize - T2.length;
                T2 = concat(T2).call(T2, slice(A2 = this.cacheMsgList).call(A2, 0, x2)), this.cacheMsgList = slice(N2 = this.cacheMsgList).call(N2, x2);
              }
              return forEach$1(T2).call(T2, function(t5) {
                I2[t5.module] ? I2[t5.module].push(t5.msg) : I2[t5.module] = [t5.msg];
              }), { uploadMsgArr: T2, uploadMsg: I2 };
            } }, { key: "upload", value: function upload() {
              var t4, a4, u3 = this;
              if (this.isUploadEnable && this.serverAllowUpload && !(this.lastReportTime && to() - this.lastReportTime < this.reportConfig.minInterval)) {
                var m3 = this.getUploadMsg(), h3 = m3.uploadMsgArr, g2 = m3.uploadMsg;
                if (h3.length) {
                  this.lastReportTime = to();
                  try {
                    var M2, I2 = concat(M2 = "".concat(this.dataReportEndpoint, "/")).call(M2, this.dataReportPath);
                    this.reportConfig.request(I2, { dataType: "json", method: "POST", data: { common: this.reportConfig.common, event: g2 }, headers: { sdktype: "im" }, timeout: this.reportConfig.timeout }).catch(function(t5) {
                      var a5, m4, g3, M3;
                      u3.cacheMsgList = slice(a5 = concat(m4 = u3.cacheMsgList).call(m4, h3)).call(a5, 0, u3.reportConfig.cacheMaxSize), (M3 = (g3 = u3.reportConfig) === null || g3 === void 0 ? void 0 : g3.logger) === null || M3 === void 0 || M3.warn("Reporter upload failed", t5);
                    });
                  } catch (u4) {
                    (a4 = (t4 = this.reportConfig) === null || t4 === void 0 ? void 0 : t4.logger) === null || a4 === void 0 || a4.warn("Exec reporter request failed", u4);
                  }
                  clearTimeout(this.timer), this.reportHeartBeat();
                }
              }
            } }]), Reporter;
          }();
          return h2;
        }();
      }), Os = entryVirtual("Array").values, Ps = Array.prototype, Ls = { DOMTokenList: true, NodeList: true }, values = function(t2) {
        var a2 = t2.values;
        return t2 === Ps || $(Ps, t2) && a2 === Ps.values || de(Ls, Tr(t2)) ? Os : a2;
      }, Vs = at.indexOf, Us = w([].indexOf), Ds = !!Us && 1 / Us([1], 1, -0) < 0, qs = arrayMethodIsStrict("indexOf");
      _export({ target: "Array", proto: true, forced: Ds || !qs }, { indexOf: function indexOf2(t2) {
        var a2 = arguments.length > 1 ? arguments[1] : void 0;
        return Ds ? Us(this, t2, a2) || 0 : Vs(this, t2, a2);
      } });
      var Bs = entryVirtual("Array").indexOf, Fs = Array.prototype, indexOf = function(t2) {
        var a2 = t2.indexOf;
        return t2 === Fs || $(Fs, t2) && a2 === Fs.indexOf ? Bs : a2;
      }, Gs = tn.every, Hs = arrayMethodIsStrict("every");
      _export({ target: "Array", proto: true, forced: !Hs }, { every: function every2(t2) {
        return Gs(this, t2, arguments.length > 1 ? arguments[1] : void 0);
      } });
      var js = entryVirtual("Array").every, $s = Array.prototype, every = function(t2) {
        var a2 = t2.every;
        return t2 === $s || $($s, t2) && a2 === $s.every ? js : a2;
      };
      var zs = fails(function() {
        if (typeof ArrayBuffer == "function") {
          var t2 = new ArrayBuffer(8);
          Object.isExtensible(t2) && Object.defineProperty(t2, "a", { value: 8 });
        }
      }), Ws = Object.isExtensible, Ks = fails(function() {
        Ws(1);
      }) || zs ? function isExtensible(t2) {
        return !!H(t2) && ((!zs || classofRaw(t2) != "ArrayBuffer") && (!Ws || Ws(t2)));
      } : Ws, Ys = !fails(function() {
        return Object.isExtensible(Object.preventExtensions({}));
      }), Qs = createCommonjsModule(function(t2) {
        var a2 = Ge.f, u2 = false, m2 = uid("meta"), h2 = 0, setMetadata = function(t3) {
          a2(t3, m2, { value: { objectID: "O" + h2++, weakData: {} } });
        }, g2 = t2.exports = { enable: function() {
          g2.enable = function() {
          }, u2 = true;
          var t3 = Bn.f, a3 = w([].splice), h3 = {};
          h3[m2] = 1, t3(h3).length && (Bn.f = function(u3) {
            for (var h4 = t3(u3), g3 = 0, M2 = h4.length; g3 < M2; g3++)
              if (h4[g3] === m2) {
                a3(h4, g3, 1);
                break;
              }
            return h4;
          }, _export({ target: "Object", stat: true, forced: true }, { getOwnPropertyNames: Mo.f }));
        }, fastKey: function(t3, a3) {
          if (!H(t3))
            return typeof t3 == "symbol" ? t3 : (typeof t3 == "string" ? "S" : "P") + t3;
          if (!de(t3, m2)) {
            if (!Ks(t3))
              return "F";
            if (!a3)
              return "E";
            setMetadata(t3);
          }
          return t3[m2].objectID;
        }, getWeakData: function(t3, a3) {
          if (!de(t3, m2)) {
            if (!Ks(t3))
              return true;
            if (!a3)
              return false;
            setMetadata(t3);
          }
          return t3[m2].weakData;
        }, onFreeze: function(t3) {
          return Ys && u2 && Ks(t3) && !de(t3, m2) && setMetadata(t3), t3;
        } };
        it[m2] = true;
      }), Js = Ge.f, Xs = tn.forEach, Zs = ar.set, ec = ar.getterFor, collection = function(t2, a2, u2) {
        var m2, g2 = t2.indexOf("Map") !== -1, M2 = t2.indexOf("Weak") !== -1, I2 = g2 ? "set" : "add", S2 = h[t2], T2 = S2 && S2.prototype, C2 = {};
        if (R && isCallable(S2) && (M2 || T2.forEach && !fails(function() {
          new S2().entries().next();
        }))) {
          var b2 = (m2 = a2(function(a3, u3) {
            Zs(anInstance(a3, b2), { type: t2, collection: new S2() }), u3 != null && iterate(u3, a3[I2], { that: a3, AS_ENTRIES: g2 });
          })).prototype, E2 = ec(t2);
          Xs(["add", "clear", "delete", "forEach", "get", "has", "set", "keys", "values", "entries"], function(t3) {
            var a3 = t3 == "add" || t3 == "set";
            !(t3 in T2) || M2 && t3 == "clear" || He(b2, t3, function(u3, m3) {
              var h2 = E2(this).collection;
              if (!a3 && M2 && !H(u3))
                return t3 == "get" && void 0;
              var g3 = h2[t3](u3 === 0 ? 0 : u3, m3);
              return a3 ? this : g3;
            });
          }), M2 || Js(b2, "size", { configurable: true, get: function() {
            return E2(this).collection.size;
          } });
        } else
          m2 = u2.getConstructor(a2, t2, g2, I2), Qs.enable();
        return setToStringTag(m2, t2, false, true), C2[t2] = m2, _export({ global: true, forced: true }, C2), M2 || u2.setStrong(m2, t2, g2), m2;
      }, defineBuiltIns = function(t2, a2, u2) {
        for (var m2 in a2)
          u2 && u2.unsafe && t2[m2] ? t2[m2] = a2[m2] : defineBuiltIn(t2, m2, a2[m2], u2);
        return t2;
      }, tc = Ge.f, rc = Qs.fastKey, nc = ar.set, ac = ar.getterFor, ic = { getConstructor: function(t2, a2, u2, m2) {
        var h2 = t2(function(t3, h3) {
          anInstance(t3, g2), nc(t3, { type: a2, index: gt(null), first: void 0, last: void 0, size: 0 }), R || (t3.size = 0), isNullOrUndefined(h3) || iterate(h3, t3[m2], { that: t3, AS_ENTRIES: u2 });
        }), g2 = h2.prototype, M2 = ac(a2), define2 = function(t3, a3, u3) {
          var m3, h3, g3 = M2(t3), I2 = getEntry(t3, a3);
          return I2 ? I2.value = u3 : (g3.last = I2 = { index: h3 = rc(a3, true), key: a3, value: u3, previous: m3 = g3.last, next: void 0, removed: false }, g3.first || (g3.first = I2), m3 && (m3.next = I2), R ? g3.size++ : t3.size++, h3 !== "F" && (g3.index[h3] = I2)), t3;
        }, getEntry = function(t3, a3) {
          var u3, m3 = M2(t3), h3 = rc(a3);
          if (h3 !== "F")
            return m3.index[h3];
          for (u3 = m3.first; u3; u3 = u3.next)
            if (u3.key == a3)
              return u3;
        };
        return defineBuiltIns(g2, { clear: function clear() {
          for (var t3 = M2(this), a3 = t3.index, u3 = t3.first; u3; )
            u3.removed = true, u3.previous && (u3.previous = u3.previous.next = void 0), delete a3[u3.index], u3 = u3.next;
          t3.first = t3.last = void 0, R ? t3.size = 0 : this.size = 0;
        }, delete: function(t3) {
          var a3 = this, u3 = M2(a3), m3 = getEntry(a3, t3);
          if (m3) {
            var h3 = m3.next, g3 = m3.previous;
            delete u3.index[m3.index], m3.removed = true, g3 && (g3.next = h3), h3 && (h3.previous = g3), u3.first == m3 && (u3.first = h3), u3.last == m3 && (u3.last = g3), R ? u3.size-- : a3.size--;
          }
          return !!m3;
        }, forEach: function forEach(t3) {
          for (var a3, u3 = M2(this), m3 = functionBindContext(t3, arguments.length > 1 ? arguments[1] : void 0); a3 = a3 ? a3.next : u3.first; )
            for (m3(a3.value, a3.key, this); a3 && a3.removed; )
              a3 = a3.previous;
        }, has: function has(t3) {
          return !!getEntry(this, t3);
        } }), defineBuiltIns(g2, u2 ? { get: function get2(t3) {
          var a3 = getEntry(this, t3);
          return a3 && a3.value;
        }, set: function set(t3, a3) {
          return define2(this, t3 === 0 ? 0 : t3, a3);
        } } : { add: function add(t3) {
          return define2(this, t3 = t3 === 0 ? 0 : t3, t3);
        } }), R && tc(g2, "size", { get: function() {
          return M2(this).size;
        } }), h2;
      }, setStrong: function(t2, a2, u2) {
        var m2 = a2 + " Iterator", h2 = ac(a2), g2 = ac(m2);
        iteratorDefine(t2, a2, function(t3, a3) {
          nc(this, { type: m2, target: t3, state: h2(t3), kind: a3, last: void 0 });
        }, function() {
          for (var t3 = g2(this), a3 = t3.kind, u3 = t3.last; u3 && u3.removed; )
            u3 = u3.previous;
          return t3.target && (t3.last = u3 = u3 ? u3.next : t3.state.first) ? a3 == "keys" ? { value: u3.key, done: false } : a3 == "values" ? { value: u3.value, done: false } : { value: [u3.key, u3.value], done: false } : (t3.target = void 0, { value: void 0, done: true });
        }, u2 ? "entries" : "values", !u2, true), setSpecies(a2);
      } };
      collection("Map", function(t2) {
        return function Map() {
          return t2(this, arguments.length ? arguments[0] : void 0);
        };
      }, ic);
      var oc = j.Map, sc = [].push, cc = function from(t2) {
        var a2, u2, m2, h2, g2 = arguments.length, M2 = g2 > 1 ? arguments[1] : void 0;
        return aConstructor(this), (a2 = M2 !== void 0) && aCallable(M2), isNullOrUndefined(t2) ? new this() : (u2 = [], a2 ? (m2 = 0, h2 = functionBindContext(M2, g2 > 2 ? arguments[2] : void 0), iterate(t2, function(t3) {
          N(sc, u2, h2(t3, m2++));
        })) : iterate(t2, sc, { that: u2 }), new this(u2));
      };
      _export({ target: "Map", stat: true, forced: true }, { from: cc });
      var lc = function of() {
        return new this(St(arguments));
      };
      _export({ target: "Map", stat: true, forced: true }, { of: lc });
      var uc = function deleteAll() {
        for (var t2, a2 = anObject(this), u2 = aCallable(a2.delete), m2 = true, h2 = 0, g2 = arguments.length; h2 < g2; h2++)
          t2 = N(u2, a2, arguments[h2]), m2 = m2 && t2;
        return !!m2;
      };
      _export({ target: "Map", proto: true, real: true, forced: true }, { deleteAll: uc });
      _export({ target: "Map", proto: true, real: true, forced: true }, { emplace: function emplace(t2, a2) {
        var u2, m2, h2 = anObject(this), g2 = aCallable(h2.get), M2 = aCallable(h2.has), I2 = aCallable(h2.set);
        return N(M2, h2, t2) ? (u2 = N(g2, h2, t2), "update" in a2 && (u2 = a2.update(u2, t2, h2), N(I2, h2, t2, u2)), u2) : (m2 = a2.insert(t2, h2), N(I2, h2, t2, m2), m2);
      } });
      var dc = getIterator;
      _export({ target: "Map", proto: true, real: true, forced: true }, { every: function every2(t2) {
        var a2 = anObject(this), u2 = dc(a2), m2 = functionBindContext(t2, arguments.length > 1 ? arguments[1] : void 0);
        return !iterate(u2, function(t3, u3, h2) {
          if (!m2(u3, t3, a2))
            return h2();
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      } }), _export({ target: "Map", proto: true, real: true, forced: true }, { filter: function filter2(t2) {
        var a2 = anObject(this), u2 = dc(a2), m2 = functionBindContext(t2, arguments.length > 1 ? arguments[1] : void 0), h2 = new (speciesConstructor(a2, getBuiltIn("Map")))(), g2 = aCallable(h2.set);
        return iterate(u2, function(t3, u3) {
          m2(u3, t3, a2) && N(g2, h2, t3, u3);
        }, { AS_ENTRIES: true, IS_ITERATOR: true }), h2;
      } }), _export({ target: "Map", proto: true, real: true, forced: true }, { find: function find2(t2) {
        var a2 = anObject(this), u2 = dc(a2), m2 = functionBindContext(t2, arguments.length > 1 ? arguments[1] : void 0);
        return iterate(u2, function(t3, u3, h2) {
          if (m2(u3, t3, a2))
            return h2(u3);
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
      } }), _export({ target: "Map", proto: true, real: true, forced: true }, { findKey: function findKey(t2) {
        var a2 = anObject(this), u2 = dc(a2), m2 = functionBindContext(t2, arguments.length > 1 ? arguments[1] : void 0);
        return iterate(u2, function(t3, u3, h2) {
          if (m2(u3, t3, a2))
            return h2(t3);
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
      } });
      var pc = w([].push);
      _export({ target: "Map", stat: true, forced: true }, { groupBy: function groupBy(t2, a2) {
        aCallable(a2);
        var u2 = getIterator(t2), m2 = new this(), h2 = aCallable(m2.has), g2 = aCallable(m2.get), M2 = aCallable(m2.set);
        return iterate(u2, function(t3) {
          var u3 = a2(t3);
          N(h2, m2, u3) ? pc(N(g2, m2, u3), t3) : N(M2, m2, u3, [t3]);
        }, { IS_ITERATOR: true }), m2;
      } });
      _export({ target: "Map", proto: true, real: true, forced: true }, { includes: function includes2(t2) {
        return iterate(dc(anObject(this)), function(a2, u2, m2) {
          if ((h2 = u2) === (g2 = t2) || h2 != h2 && g2 != g2)
            return m2();
          var h2, g2;
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      } }), _export({ target: "Map", stat: true, forced: true }, { keyBy: function keyBy(t2, a2) {
        var u2 = new this();
        aCallable(a2);
        var m2 = aCallable(u2.set);
        return iterate(t2, function(t3) {
          N(m2, u2, a2(t3), t3);
        }), u2;
      } }), _export({ target: "Map", proto: true, real: true, forced: true }, { keyOf: function keyOf(t2) {
        return iterate(dc(anObject(this)), function(a2, u2, m2) {
          if (u2 === t2)
            return m2(a2);
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).result;
      } }), _export({ target: "Map", proto: true, real: true, forced: true }, { mapKeys: function mapKeys(t2) {
        var a2 = anObject(this), u2 = dc(a2), m2 = functionBindContext(t2, arguments.length > 1 ? arguments[1] : void 0), h2 = new (speciesConstructor(a2, getBuiltIn("Map")))(), g2 = aCallable(h2.set);
        return iterate(u2, function(t3, u3) {
          N(g2, h2, m2(u3, t3, a2), u3);
        }, { AS_ENTRIES: true, IS_ITERATOR: true }), h2;
      } }), _export({ target: "Map", proto: true, real: true, forced: true }, { mapValues: function mapValues(t2) {
        var a2 = anObject(this), u2 = dc(a2), m2 = functionBindContext(t2, arguments.length > 1 ? arguments[1] : void 0), h2 = new (speciesConstructor(a2, getBuiltIn("Map")))(), g2 = aCallable(h2.set);
        return iterate(u2, function(t3, u3) {
          N(g2, h2, t3, m2(u3, t3, a2));
        }, { AS_ENTRIES: true, IS_ITERATOR: true }), h2;
      } }), _export({ target: "Map", proto: true, real: true, arity: 1, forced: true }, { merge: function merge2(t2) {
        for (var a2 = anObject(this), u2 = aCallable(a2.set), m2 = arguments.length, h2 = 0; h2 < m2; )
          iterate(arguments[h2++], u2, { that: a2, AS_ENTRIES: true });
        return a2;
      } });
      var mc = TypeError;
      _export({ target: "Map", proto: true, real: true, forced: true }, { reduce: function reduce2(t2) {
        var a2 = anObject(this), u2 = dc(a2), m2 = arguments.length < 2, h2 = m2 ? void 0 : arguments[1];
        if (aCallable(t2), iterate(u2, function(u3, g2) {
          m2 ? (m2 = false, h2 = g2) : h2 = t2(h2, g2, u3, a2);
        }, { AS_ENTRIES: true, IS_ITERATOR: true }), m2)
          throw mc("Reduce of empty map with no initial value");
        return h2;
      } }), _export({ target: "Map", proto: true, real: true, forced: true }, { some: function some2(t2) {
        var a2 = anObject(this), u2 = dc(a2), m2 = functionBindContext(t2, arguments.length > 1 ? arguments[1] : void 0);
        return iterate(u2, function(t3, u3, h2) {
          if (m2(u3, t3, a2))
            return h2();
        }, { AS_ENTRIES: true, IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      } });
      var hc = TypeError;
      _export({ target: "Map", proto: true, real: true, forced: true }, { update: function update(t2, a2) {
        var u2 = anObject(this), m2 = aCallable(u2.get), h2 = aCallable(u2.has), g2 = aCallable(u2.set), M2 = arguments.length;
        aCallable(a2);
        var I2 = N(h2, u2, t2);
        if (!I2 && M2 < 3)
          throw hc("Updating absent value");
        var S2 = I2 ? N(m2, u2, t2) : aCallable(M2 > 2 ? arguments[2] : void 0)(t2, u2);
        return N(g2, u2, t2, a2(S2, t2, u2)), u2;
      } });
      var gc = TypeError, vc = function upsert(t2, a2) {
        var u2, m2 = anObject(this), h2 = aCallable(m2.get), g2 = aCallable(m2.has), M2 = aCallable(m2.set), I2 = arguments.length > 2 ? arguments[2] : void 0;
        if (!isCallable(a2) && !isCallable(I2))
          throw gc("At least one callback required");
        return N(g2, m2, t2) ? (u2 = N(h2, m2, t2), isCallable(a2) && (u2 = a2(u2), N(M2, m2, t2, u2))) : isCallable(I2) && (u2 = I2(), N(M2, m2, t2, u2)), u2;
      };
      _export({ target: "Map", proto: true, real: true, forced: true }, { upsert: vc }), _export({ target: "Map", proto: true, real: true, name: "upsert", forced: true }, { updateOrInsert: vc });
      var fc = oc, yc = createCommonjsModule(function(t2) {
        function _getPrototypeOf(a2) {
          var u2;
          return t2.exports = _getPrototypeOf = It ? bind$1(u2 = rs).call(u2) : function _getPrototypeOf2(t3) {
            return t3.__proto__ || rs(t3);
          }, t2.exports.__esModule = true, t2.exports.default = t2.exports, _getPrototypeOf(a2);
        }
        t2.exports = _getPrototypeOf, t2.exports.__esModule = true, t2.exports.default = t2.exports;
      }), _c = createCommonjsModule(function(t2) {
        t2.exports = function _isNativeFunction(t3) {
          var a2;
          return indexOf(a2 = Function.toString.call(t3)).call(a2, "[native code]") !== -1;
        }, t2.exports.__esModule = true, t2.exports.default = t2.exports;
      }), Mc = getBuiltIn("Reflect", "construct"), Ic = Object.prototype, Sc = [].push, Tc = fails(function() {
        function F() {
        }
        return !(Mc(function() {
        }, [], F) instanceof F);
      }), Cc = !fails(function() {
        Mc(function() {
        });
      }), bc = Tc || Cc;
      _export({ target: "Reflect", stat: true, forced: bc, sham: bc }, { construct: function construct(t2, a2) {
        aConstructor(t2), anObject(a2);
        var u2 = arguments.length < 3 ? t2 : aConstructor(arguments[2]);
        if (Cc && !Tc)
          return Mc(t2, a2, u2);
        if (t2 == u2) {
          switch (a2.length) {
            case 0:
              return new t2();
            case 1:
              return new t2(a2[0]);
            case 2:
              return new t2(a2[0], a2[1]);
            case 3:
              return new t2(a2[0], a2[1], a2[2]);
            case 4:
              return new t2(a2[0], a2[1], a2[2], a2[3]);
          }
          var m2 = [null];
          return T(Sc, m2, a2), new (T(kt, t2, m2))();
        }
        var h2 = u2.prototype, g2 = gt(H(h2) ? h2 : Ic), M2 = T(t2, g2, a2);
        return H(M2) ? M2 : g2;
      } });
      var Ec = j.Reflect.construct, kc = createCommonjsModule(function(t2) {
        t2.exports = function _isNativeReflectConstruct() {
          if (typeof Reflect == "undefined" || !Ec)
            return false;
          if (Ec.sham)
            return false;
          if (typeof Proxy == "function")
            return true;
          try {
            return Boolean.prototype.valueOf.call(Ec(Boolean, [], function() {
            })), true;
          } catch (t3) {
            return false;
          }
        }, t2.exports.__esModule = true, t2.exports.default = t2.exports;
      }), wc = createCommonjsModule(function(t2) {
        function _construct(a2, u2, m2) {
          var h2;
          kc() ? (t2.exports = _construct = bind$1(h2 = Ec).call(h2), t2.exports.__esModule = true, t2.exports.default = t2.exports) : (t2.exports = _construct = function _construct2(t3, a3, u3) {
            var m3 = [null];
            m3.push.apply(m3, a3);
            var h3 = new (bind$1(Function).apply(t3, m3))();
            return u3 && At(h3, u3.prototype), h3;
          }, t2.exports.__esModule = true, t2.exports.default = t2.exports);
          return _construct.apply(null, arguments);
        }
        t2.exports = _construct, t2.exports.__esModule = true, t2.exports.default = t2.exports;
      }), Rc = createCommonjsModule(function(t2) {
        function _wrapNativeSuper(a2) {
          var u2 = typeof fc == "function" ? new fc() : void 0;
          return t2.exports = _wrapNativeSuper = function _wrapNativeSuper2(t3) {
            if (t3 === null || !_c(t3))
              return t3;
            if (typeof t3 != "function")
              throw new TypeError("Super expression must either be null or a function");
            if (u2 !== void 0) {
              if (u2.has(t3))
                return u2.get(t3);
              u2.set(t3, Wrapper);
            }
            function Wrapper() {
              return wc(t3, arguments, yc(this).constructor);
            }
            return Wrapper.prototype = ft(t3.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }), At(Wrapper, t3);
          }, t2.exports.__esModule = true, t2.exports.default = t2.exports, _wrapNativeSuper(a2);
        }
        t2.exports = _wrapNativeSuper, t2.exports.__esModule = true, t2.exports.default = t2.exports;
      }), Ac = getDefaultExportFromCjs(Rc), Nc = TypeError, createMethod$1 = function(t2) {
        return function(a2, u2, m2, h2) {
          aCallable(u2);
          var g2 = toObject(a2), M2 = q(g2), I2 = lengthOfArrayLike(g2), S2 = t2 ? I2 - 1 : 0, T2 = t2 ? -1 : 1;
          if (m2 < 2)
            for (; ; ) {
              if (S2 in M2) {
                h2 = M2[S2], S2 += T2;
                break;
              }
              if (S2 += T2, t2 ? S2 < 0 : I2 <= S2)
                throw Nc("Reduce of empty array with no initial value");
            }
          for (; t2 ? S2 >= 0 : I2 > S2; S2 += T2)
            S2 in M2 && (h2 = u2(h2, M2[S2], S2, g2));
          return h2;
        };
      }, xc = { left: createMethod$1(false), right: createMethod$1(true) }.left, Oc = arrayMethodIsStrict("reduce");
      _export({ target: "Array", proto: true, forced: !Oc || !da && J > 79 && J < 83 }, { reduce: function reduce2(t2) {
        var a2 = arguments.length;
        return xc(this, t2, a2, a2 > 1 ? arguments[1] : void 0);
      } });
      var Pc, Lc, Vc, Uc, Dc, qc, Bc, Fc, Gc, Hc, jc, $c, zc, Wc, Kc, Yc, Qc, Jc, Xc, Zc, el, tl, rl, nl, al, il, ol, sl, cl, ll, ul, dl, pl, ml, hl, gl, vl, fl, yl, _l, Ml, Il, Sl, Tl, Cl, bl, El, kl = entryVirtual("Array").reduce, wl = Array.prototype, reduce = function(t2) {
        var a2 = t2.reduce;
        return t2 === wl || $(wl, t2) && a2 === wl.reduce ? kl : a2;
      };
      !function(t2) {
        t2[t2.V2NIM_DATA_SYNC_TYPE_LEVEL_FULL = 0] = "V2NIM_DATA_SYNC_TYPE_LEVEL_FULL", t2[t2.V2NIM_DATA_SYNC_TYPE_LEVEL_BASIC = 1] = "V2NIM_DATA_SYNC_TYPE_LEVEL_BASIC";
      }(Pc || (Pc = {})), function(t2) {
        t2[t2.V2NIM_DATA_SYNC_TYPE_MAIN = 1] = "V2NIM_DATA_SYNC_TYPE_MAIN", t2[t2.V2NIM_DATA_SYNC_TYPE_TEAM_MEMBER = 2] = "V2NIM_DATA_SYNC_TYPE_TEAM_MEMBER", t2[t2.V2NIM_DATA_SYNC_TYPE_SUPER_TEAM_MEMBER = 3] = "V2NIM_DATA_SYNC_TYPE_SUPER_TEAM_MEMBER";
      }(Lc || (Lc = {})), function(t2) {
        t2[t2.V2NIM_DATA_SYNC_STATE_WAITING = 1] = "V2NIM_DATA_SYNC_STATE_WAITING", t2[t2.V2NIM_DATA_SYNC_STATE_SYNCING = 2] = "V2NIM_DATA_SYNC_STATE_SYNCING", t2[t2.V2NIM_DATA_SYNC_STATE_COMPLETED = 3] = "V2NIM_DATA_SYNC_STATE_COMPLETED";
      }(Vc || (Vc = {})), function(t2) {
        t2[t2.V2NIM_CONVERSATION_TYPE_UNKNOWN = 0] = "V2NIM_CONVERSATION_TYPE_UNKNOWN", t2[t2.V2NIM_CONVERSATION_TYPE_P2P = 1] = "V2NIM_CONVERSATION_TYPE_P2P", t2[t2.V2NIM_CONVERSATION_TYPE_TEAM = 2] = "V2NIM_CONVERSATION_TYPE_TEAM", t2[t2.V2NIM_CONVERSATION_TYPE_SUPER_TEAM = 3] = "V2NIM_CONVERSATION_TYPE_SUPER_TEAM";
      }(Uc || (Uc = {})), function(t2) {
        t2[t2.V2NIM_MESSAGE_STATUS_DEFAULT = 0] = "V2NIM_MESSAGE_STATUS_DEFAULT", t2[t2.V2NIM_MESSAGE_STATUS_REVOKE = 1] = "V2NIM_MESSAGE_STATUS_REVOKE", t2[t2.V2NIM_MESSAGE_STATUS_BACKFILL = 2] = "V2NIM_MESSAGE_STATUS_BACKFILL";
      }(Dc || (Dc = {})), function(t2) {
        t2[t2.V2NIM_FRIEND_MODE_TYPE_ADD = 1] = "V2NIM_FRIEND_MODE_TYPE_ADD", t2[t2.V2NIM_FRIEND_MODE_TYPE_APPLY = 2] = "V2NIM_FRIEND_MODE_TYPE_APPLY";
      }(qc || (qc = {})), function(t2) {
        t2[t2.V2NIM_FRIEND_ADD_APPLICATION_TYPE_RECEIVED = 1] = "V2NIM_FRIEND_ADD_APPLICATION_TYPE_RECEIVED", t2[t2.V2NIM_FRIEND_ADD_APPLICATION_TYPE_REJECTED = 2] = "V2NIM_FRIEND_ADD_APPLICATION_TYPE_REJECTED";
      }(Bc || (Bc = {})), function(t2) {
        t2[t2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_INIT = 0] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_INIT", t2[t2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_AGREED = 1] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_AGREED", t2[t2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_REJECTED = 2] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_REJECTED", t2[t2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_EXPIRED = 3] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_EXPIRED", t2[t2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_DIRECT_ADD = 4] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_DIRECT_ADD";
      }(Fc || (Fc = {})), function(t2) {
        t2[t2.V2NIM_FRIEND_DELETION_TYPE_BY_SELF = 1] = "V2NIM_FRIEND_DELETION_TYPE_BY_SELF", t2[t2.V2NIM_FRIEND_DELETION_TYPE_BY_PEER = 2] = "V2NIM_FRIEND_DELETION_TYPE_BY_PEER";
      }(Gc || (Gc = {})), function(t2) {
        t2[t2.V2NIM_FRIEND_VERIFY_TYPE_ADD = 1] = "V2NIM_FRIEND_VERIFY_TYPE_ADD", t2[t2.V2NIM_FRIEND_VERIFY_TYPE_APPLY = 2] = "V2NIM_FRIEND_VERIFY_TYPE_APPLY", t2[t2.V2NIM_FRIEND_VERIFY_TYPE_ACCEPT = 3] = "V2NIM_FRIEND_VERIFY_TYPE_ACCEPT", t2[t2.V2NIM_FRIEND_VERIFY_TYPE_REJECT = 4] = "V2NIM_FRIEND_VERIFY_TYPE_REJECT";
      }(Hc || (Hc = {})), function(t2) {
        t2[t2.V2NIM_LOGIN_AUTH_TYPE_DEFAULT = 0] = "V2NIM_LOGIN_AUTH_TYPE_DEFAULT", t2[t2.V2NIM_LOGIN_AUTH_TYPE_DYNAMIC_TOKEN = 1] = "V2NIM_LOGIN_AUTH_TYPE_DYNAMIC_TOKEN", t2[t2.V2NIM_LOGIN_AUTH_TYPE_THIRD_PARTY = 2] = "V2NIM_LOGIN_AUTH_TYPE_THIRD_PARTY";
      }(jc || (jc = {})), function(t2) {
        t2[t2.V2NIM_LOGIN_STATUS_LOGOUT = 0] = "V2NIM_LOGIN_STATUS_LOGOUT", t2[t2.V2NIM_LOGIN_STATUS_LOGINED = 1] = "V2NIM_LOGIN_STATUS_LOGINED", t2[t2.V2NIM_LOGIN_STATUS_LOGINING = 2] = "V2NIM_LOGIN_STATUS_LOGINING", t2[t2.V2NIM_LOGIN_STATUS_UNLOGIN = 3] = "V2NIM_LOGIN_STATUS_UNLOGIN";
      }($c || ($c = {})), function(t2) {
        t2[t2.V2NIM_LOGIN_CLIENT_TYPE_UNKNOWN = 0] = "V2NIM_LOGIN_CLIENT_TYPE_UNKNOWN", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_ANDROID = 1] = "V2NIM_LOGIN_CLIENT_TYPE_ANDROID", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_IOS = 2] = "V2NIM_LOGIN_CLIENT_TYPE_IOS", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_PC = 4] = "V2NIM_LOGIN_CLIENT_TYPE_PC", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_WP = 8] = "V2NIM_LOGIN_CLIENT_TYPE_WP", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_WEB = 16] = "V2NIM_LOGIN_CLIENT_TYPE_WEB", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_RESTFUL = 32] = "V2NIM_LOGIN_CLIENT_TYPE_RESTFUL", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_MAC_OS = 64] = "V2NIM_LOGIN_CLIENT_TYPE_MAC_OS", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_HARMONY_OS = 65] = "V2NIM_LOGIN_CLIENT_TYPE_HARMONY_OS";
      }(zc || (zc = {})), function(t2) {
        t2[t2.V2NIM_KICKED_OFFLINE_REASON_CLIENT_EXCLUSIVE = 1] = "V2NIM_KICKED_OFFLINE_REASON_CLIENT_EXCLUSIVE", t2[t2.V2NIM_KICKED_OFFLINE_REASON_SERVER = 2] = "V2NIM_KICKED_OFFLINE_REASON_SERVER", t2[t2.V2NIM_KICKED_OFFLINE_REASON_CLIENT = 3] = "V2NIM_KICKED_OFFLINE_REASON_CLIENT", t2[t2.V2NIM_KICKED_OFFLINE_REASON_CLIENT_QUIETLY = 4] = "V2NIM_KICKED_OFFLINE_REASON_CLIENT_QUIETLY";
      }(Wc || (Wc = {})), function(t2) {
        t2[t2.V2NIM_LOGIN_CLIENT_CHANGE_LIST = 1] = "V2NIM_LOGIN_CLIENT_CHANGE_LIST", t2[t2.V2NIM_LOGIN_CLIENT_CHANGE_LOGIN = 2] = "V2NIM_LOGIN_CLIENT_CHANGE_LOGIN", t2[t2.V2NIM_LOGIN_CLIENT_CHANGE_LOGOUT = 3] = "V2NIM_LOGIN_CLIENT_CHANGE_LOGOUT";
      }(Kc || (Kc = {})), function(t2) {
        t2[t2.V2NIM_CONNECT_STATUS_DISCONNECTED = 0] = "V2NIM_CONNECT_STATUS_DISCONNECTED", t2[t2.V2NIM_CONNECT_STATUS_CONNECTED = 1] = "V2NIM_CONNECT_STATUS_CONNECTED", t2[t2.V2NIM_CONNECT_STATUS_CONNECTING = 2] = "V2NIM_CONNECT_STATUS_CONNECTING", t2[t2.V2NIM_CONNECT_STATUS_WAITING = 3] = "V2NIM_CONNECT_STATUS_WAITING";
      }(Yc || (Yc = {})), function(t2) {
        t2[t2.V2NIM_MESSAGE_AI_STATUS_UNKNOW = 0] = "V2NIM_MESSAGE_AI_STATUS_UNKNOW", t2[t2.V2NIM_MESSAGE_AI_STATUS_AT = 1] = "V2NIM_MESSAGE_AI_STATUS_AT", t2[t2.V2NIM_MESSAGE_AI_STATUS_RESPONSE = 2] = "V2NIM_MESSAGE_AI_STATUS_RESPONSE";
      }(Qc || (Qc = {})), function(t2) {
        t2[t2.V2NIM_MESSAGE_TYPE_INVALID = -1] = "V2NIM_MESSAGE_TYPE_INVALID", t2[t2.V2NIM_MESSAGE_TYPE_TEXT = 0] = "V2NIM_MESSAGE_TYPE_TEXT", t2[t2.V2NIM_MESSAGE_TYPE_IMAGE = 1] = "V2NIM_MESSAGE_TYPE_IMAGE", t2[t2.V2NIM_MESSAGE_TYPE_AUDIO = 2] = "V2NIM_MESSAGE_TYPE_AUDIO", t2[t2.V2NIM_MESSAGE_TYPE_VIDEO = 3] = "V2NIM_MESSAGE_TYPE_VIDEO", t2[t2.V2NIM_MESSAGE_TYPE_LOCATION = 4] = "V2NIM_MESSAGE_TYPE_LOCATION", t2[t2.V2NIM_MESSAGE_TYPE_NOTIFICATION = 5] = "V2NIM_MESSAGE_TYPE_NOTIFICATION", t2[t2.V2NIM_MESSAGE_TYPE_FILE = 6] = "V2NIM_MESSAGE_TYPE_FILE", t2[t2.V2NIM_MESSAGE_TYPE_AVCHAT = 7] = "V2NIM_MESSAGE_TYPE_AVCHAT", t2[t2.V2NIM_MESSAGE_TYPE_TIPS = 10] = "V2NIM_MESSAGE_TYPE_TIPS", t2[t2.V2NIM_MESSAGE_TYPE_ROBOT = 11] = "V2NIM_MESSAGE_TYPE_ROBOT", t2[t2.V2NIM_MESSAGE_TYPE_CALL = 12] = "V2NIM_MESSAGE_TYPE_CALL", t2[t2.V2NIM_MESSAGE_TYPE_CUSTOM = 100] = "V2NIM_MESSAGE_TYPE_CUSTOM";
      }(Jc || (Jc = {})), function(t2) {
        t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_UNDEFINED = -1] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_UNDEFINED", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE = 0] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_KICK = 1] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_KICK", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_LEAVE = 2] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_LEAVE", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_UPDATE_TINFO = 3] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_UPDATE_TINFO", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_DISMISS = 4] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_DISMISS", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_APPLY_PASS = 5] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_APPLY_PASS", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_OWNER_TRANSFER = 6] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_OWNER_TRANSFER", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_ADD_MANAGER = 7] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_ADD_MANAGER", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_REMOVE_MANAGER = 8] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_REMOVE_MANAGER", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE_ACCEPT = 9] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE_ACCEPT", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_BANNED_TEAM_MEMBER = 10] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_BANNED_TEAM_MEMBER", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_INVITE = 401] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_INVITE", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_KICK = 402] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_KICK", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_LEAVE = 403] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_LEAVE", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_UPDATE_TINFO = 404] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_UPDATE_TINFO", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_DISMISS = 405] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_DISMISS", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_APPLY_PASS = 410] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_APPLY_PASS", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_OWNER_TRANSFER = 406] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_OWNER_TRANSFER", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_ADD_MANAGER = 407] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_ADD_MANAGER", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_REMOVE_MANAGER = 408] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_REMOVE_MANAGER", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_INVITE_ACCEPT = 411] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_INVITE_ACCEPT", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_BANNED_TEAM_MEMBER = 409] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_BANNED_TEAM_MEMBER";
      }(Xc || (Xc = {})), function(t2) {
        t2[t2.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_UNKNOWN = 0] = "V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_UNKNOWN", t2[t2.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_SUCCESS = 1] = "V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_SUCCESS", t2[t2.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_FAILED = 2] = "V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_FAILED", t2[t2.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_UPLOADING = 3] = "V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_UPLOADING";
      }(Zc || (Zc = {})), function(t2) {
        t2[t2.V2NIM_MESSAGE_SENDING_STATE_UNKNOWN = 0] = "V2NIM_MESSAGE_SENDING_STATE_UNKNOWN", t2[t2.V2NIM_MESSAGE_SENDING_STATE_SUCCEEDED = 1] = "V2NIM_MESSAGE_SENDING_STATE_SUCCEEDED", t2[t2.V2NIM_MESSAGE_SENDING_STATE_FAILED = 2] = "V2NIM_MESSAGE_SENDING_STATE_FAILED", t2[t2.V2NIM_MESSAGE_SENDING_STATE_SENDING = 3] = "V2NIM_MESSAGE_SENDING_STATE_SENDING";
      }(el || (el = {})), function(t2) {
        t2[t2.V2NIM_QUERY_DIRECTION_DESC = 0] = "V2NIM_QUERY_DIRECTION_DESC", t2[t2.V2NIM_QUERY_DIRECTION_ASC = 1] = "V2NIM_QUERY_DIRECTION_ASC";
      }(tl || (tl = {})), function(t2) {
        t2[t2.V2NIM_MESSAGE_REVOKE_TYPE_UNDEFINED = 0] = "V2NIM_MESSAGE_REVOKE_TYPE_UNDEFINED", t2[t2.V2NIM_MESSAGE_REVOKE_TYPE_P2P_BOTHWAY = 1] = "V2NIM_MESSAGE_REVOKE_TYPE_P2P_BOTHWAY", t2[t2.V2NIM_MESSAGE_REVOKE_TYPE_TEAM_BOTHWAY = 2] = "V2NIM_MESSAGE_REVOKE_TYPE_TEAM_BOTHWAY", t2[t2.V2NIM_MESSAGE_REVOKE_TYPE_SUPERTEAM_BOTHWAY = 3] = "V2NIM_MESSAGE_REVOKE_TYPE_SUPERTEAM_BOTHWAY", t2[t2.V2NIM_MESSAGE_REVOKE_TYPE_P2P_ONEWAY = 4] = "V2NIM_MESSAGE_REVOKE_TYPE_P2P_ONEWAY", t2[t2.V2NIM_MESSAGE_REVOKE_TYPE_TEAM_ONEWAY = 5] = "V2NIM_MESSAGE_REVOKE_TYPE_TEAM_ONEWAY";
      }(rl || (rl = {})), function(t2) {
        t2[t2.V2NIM_MESSAGE_PIN_STATE_NOT_PINNED = 0] = "V2NIM_MESSAGE_PIN_STATE_NOT_PINNED", t2[t2.V2NIM_MESSAGE_PIN_STATE_PINNED = 1] = "V2NIM_MESSAGE_PIN_STATE_PINNED", t2[t2.V2NIM_MESSAGE_PIN_STATE_UPDATED = 2] = "V2NIM_MESSAGE_PIN_STATE_UPDATED";
      }(nl || (nl = {})), function(t2) {
        t2[t2.V2NIM_QUICK_COMMENT_STATE_ADD = 1] = "V2NIM_QUICK_COMMENT_STATE_ADD", t2[t2.V2NIM_QUICK_COMMENT_STATE_REMOVE = 2] = "V2NIM_QUICK_COMMENT_STATE_REMOVE";
      }(al || (al = {})), function(t2) {
        t2[t2.V2NIM_CLIENT_ANTISPAM_OPERATE_NONE = 0] = "V2NIM_CLIENT_ANTISPAM_OPERATE_NONE", t2[t2.V2NIM_CLIENT_ANTISPAM_OPERATE_REPLACE = 1] = "V2NIM_CLIENT_ANTISPAM_OPERATE_REPLACE", t2[t2.V2NIM_CLIENT_ANTISPAM_OPERATE_CLIENT_SHIELD = 2] = "V2NIM_CLIENT_ANTISPAM_OPERATE_CLIENT_SHIELD", t2[t2.V2NIM_CLIENT_ANTISPAM_OPERATE_SERVER_SHIELD = 3] = "V2NIM_CLIENT_ANTISPAM_OPERATE_SERVER_SHIELD";
      }(il || (il = {})), function(t2) {
        t2[t2.V2NIM_SORT_ORDER_DESC = 0] = "V2NIM_SORT_ORDER_DESC", t2[t2.V2NIM_SORT_ORDER_ASC = 1] = "V2NIM_SORT_ORDER_ASC";
      }(ol || (ol = {})), function(t2) {
        t2[t2.P2P_DELETE_MSG = 7] = "P2P_DELETE_MSG", t2[t2.TEAM_DELETE_MSG = 8] = "TEAM_DELETE_MSG", t2[t2.SUPERTEAM_DELETE_MSG = 12] = "SUPERTEAM_DELETE_MSG", t2[t2.P2P_ONE_WAY_DELETE_MSG = 13] = "P2P_ONE_WAY_DELETE_MSG", t2[t2.TEAM_ONE_WAY_DELETE_MSG = 14] = "TEAM_ONE_WAY_DELETE_MSG", t2[t2.CUSTOM_P2P_MSG = 100] = "CUSTOM_P2P_MSG", t2[t2.CUSTOM_TEAM_MSG = 101] = "CUSTOM_TEAM_MSG", t2[t2.CUSTOM_SUPERTEAM_MSG = 103] = "CUSTOM_SUPERTEAM_MSG";
      }(sl || (sl = {})), function(t2) {
        t2[t2.V2NIM_TEAM_MESSAGE_MUTE_MODE_OFF = 0] = "V2NIM_TEAM_MESSAGE_MUTE_MODE_OFF", t2[t2.V2NIM_TEAM_MESSAGE_MUTE_MODE_ON = 1] = "V2NIM_TEAM_MESSAGE_MUTE_MODE_ON", t2[t2.V2NIM_TEAM_MESSAGE_MUTE_MODE_NORMAL_ON = 2] = "V2NIM_TEAM_MESSAGE_MUTE_MODE_NORMAL_ON";
      }(cl || (cl = {})), function(t2) {
        t2[t2.V2NIM_P2P_MESSAGE_MUTE_MODE_OFF = 0] = "V2NIM_P2P_MESSAGE_MUTE_MODE_OFF", t2[t2.V2NIM_P2P_MESSAGE_MUTE_MODE_ON = 1] = "V2NIM_P2P_MESSAGE_MUTE_MODE_ON";
      }(ll || (ll = {})), function(t2) {
        t2[t2.V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_ALL = 0] = "V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_ALL", t2[t2.V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_NORMAL = 1] = "V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_NORMAL", t2[t2.V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_MANAGER = 2] = "V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_MANAGER";
      }(ul || (ul = {})), function(t2) {
        t2[t2.V2NIM_TEAM_TYPE_INVALID = 0] = "V2NIM_TEAM_TYPE_INVALID", t2[t2.V2NIM_TEAM_TYPE_ADVANCED = 1] = "V2NIM_TEAM_TYPE_ADVANCED", t2[t2.V2NIM_TEAM_TYPE_SUPER = 2] = "V2NIM_TEAM_TYPE_SUPER";
      }(dl || (dl = {})), function(t2) {
        t2[t2.V2NIM_TEAM_JOIN_MODE_FREE = 0] = "V2NIM_TEAM_JOIN_MODE_FREE", t2[t2.V2NIM_TEAM_JOIN_MODE_APPLY = 1] = "V2NIM_TEAM_JOIN_MODE_APPLY", t2[t2.V2NIM_TEAM_JOIN_MODE_INVITE = 2] = "V2NIM_TEAM_JOIN_MODE_INVITE";
      }(pl || (pl = {})), function(t2) {
        t2[t2.V2NIM_TEAM_AGREE_MODE_AUTH = 0] = "V2NIM_TEAM_AGREE_MODE_AUTH", t2[t2.V2NIM_TEAM_AGREE_MODE_NO_AUTH = 1] = "V2NIM_TEAM_AGREE_MODE_NO_AUTH";
      }(ml || (ml = {})), function(t2) {
        t2[t2.V2NIM_TEAM_INVITE_MODE_MANAGER = 0] = "V2NIM_TEAM_INVITE_MODE_MANAGER", t2[t2.V2NIM_TEAM_INVITE_MODE_ALL = 1] = "V2NIM_TEAM_INVITE_MODE_ALL";
      }(hl || (hl = {})), function(t2) {
        t2[t2.V2NIM_TEAM_UPDATE_INFO_MODE_MANAGER = 0] = "V2NIM_TEAM_UPDATE_INFO_MODE_MANAGER", t2[t2.V2NIM_TEAM_UPDATE_INFO_MODE_ALL = 1] = "V2NIM_TEAM_UPDATE_INFO_MODE_ALL";
      }(gl || (gl = {})), function(t2) {
        t2[t2.V2NIM_TEAM_CHAT_BANNED_MODE_UNBAN = 0] = "V2NIM_TEAM_CHAT_BANNED_MODE_UNBAN", t2[t2.V2NIM_TEAM_CHAT_BANNED_MODE_BANNED_NORMAL = 1] = "V2NIM_TEAM_CHAT_BANNED_MODE_BANNED_NORMAL", t2[t2.V2NIM_TEAM_CHAT_BANNED_MODE_BANNED_ALL = 2] = "V2NIM_TEAM_CHAT_BANNED_MODE_BANNED_ALL";
      }(vl || (vl = {})), function(t2) {
        t2[t2.V2NIM_TEAM_UPDATE_EXTENSION_MODE_MANAGER = 0] = "V2NIM_TEAM_UPDATE_EXTENSION_MODE_MANAGER", t2[t2.V2NIM_TEAM_UPDATE_EXTENSION_MODE_ALL = 1] = "V2NIM_TEAM_UPDATE_EXTENSION_MODE_ALL";
      }(fl || (fl = {})), function(t2) {
        t2[t2.V2NIM_TEAM_MEMBER_ROLE_NORMAL = 0] = "V2NIM_TEAM_MEMBER_ROLE_NORMAL", t2[t2.V2NIM_TEAM_MEMBER_ROLE_OWNER = 1] = "V2NIM_TEAM_MEMBER_ROLE_OWNER", t2[t2.V2NIM_TEAM_MEMBER_ROLE_MANAGER = 2] = "V2NIM_TEAM_MEMBER_ROLE_MANAGER";
      }(yl || (yl = {})), function(t2) {
        t2[t2.V2NIM_TEAM_JOIN_ACTION_TYPE_APPLICATION = 0] = "V2NIM_TEAM_JOIN_ACTION_TYPE_APPLICATION", t2[t2.V2NIM_TEAM_JOIN_ACTION_TYPE_REJECT_APPLICATION = 1] = "V2NIM_TEAM_JOIN_ACTION_TYPE_REJECT_APPLICATION", t2[t2.V2NIM_TEAM_JOIN_ACTION_TYPE_INVITATION = 2] = "V2NIM_TEAM_JOIN_ACTION_TYPE_INVITATION", t2[t2.V2NIM_TEAM_JOIN_ACTION_TYPE_REJECT_INVITATION = 3] = "V2NIM_TEAM_JOIN_ACTION_TYPE_REJECT_INVITATION";
      }(_l || (_l = {})), function(t2) {
        t2[t2.V2NIM_TEAM_JOIN_ACTION_STATUS_INIT = 0] = "V2NIM_TEAM_JOIN_ACTION_STATUS_INIT", t2[t2.V2NIM_TEAM_JOIN_ACTION_STATUS_AGREED = 1] = "V2NIM_TEAM_JOIN_ACTION_STATUS_AGREED", t2[t2.V2NIM_TEAM_JOIN_ACTION_STATUS_REJECTED = 2] = "V2NIM_TEAM_JOIN_ACTION_STATUS_REJECTED", t2[t2.V2NIM_TEAM_JOIN_ACTION_STATUS_EXPIRED = 3] = "V2NIM_TEAM_JOIN_ACTION_STATUS_EXPIRED";
      }(Ml || (Ml = {})), function(t2) {
        t2[t2.teamApply = 0] = "teamApply", t2[t2.teamApplyReject = 1] = "teamApplyReject", t2[t2.teamInvite = 2] = "teamInvite", t2[t2.teamInviteReject = 3] = "teamInviteReject", t2[t2.tlistUpdate = 4] = "tlistUpdate", t2[t2.superTeamApply = 15] = "superTeamApply", t2[t2.superTeamApplyReject = 16] = "superTeamApplyReject", t2[t2.superTeamInvite = 17] = "superTeamInvite", t2[t2.superTeamInviteReject = 18] = "superTeamInviteReject";
      }(Il || (Il = {})), function(t2) {
        t2[t2.V2NIM_AI_MODEL_TYPE_UNKNOW = 0] = "V2NIM_AI_MODEL_TYPE_UNKNOW", t2[t2.V2NIM_AI_MODEL_TYPE_QWEN = 1] = "V2NIM_AI_MODEL_TYPE_QWEN", t2[t2.V2NIM_AI_MODEL_TYPE_AZURE = 2] = "V2NIM_AI_MODEL_TYPE_AZURE", t2[t2.V2NIM_AI_MODEL_TYPE_PRIVATE = 3] = "V2NIM_AI_MODEL_TYPE_PRIVATE";
      }(Sl || (Sl = {})), function(t2) {
        t2.V2NIM_AI_MODEL_ROLE_TYPE_SYSTEM = "system", t2.V2NIM_AI_MODEL_ROLE_TYPE_USER = "user", t2.V2NIM_AI_MODEL_ROLE_TYPE_ASSISTANT = "assistant";
      }(Tl || (Tl = {})), function(t2) {
        t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_UNKNOWN = 0] = "V2NIM_SIGNALLING_EVENT_TYPE_UNKNOWN", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_CLOSE = 1] = "V2NIM_SIGNALLING_EVENT_TYPE_CLOSE", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_JOIN = 2] = "V2NIM_SIGNALLING_EVENT_TYPE_JOIN", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_INVITE = 3] = "V2NIM_SIGNALLING_EVENT_TYPE_INVITE", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_CANCEL_INVITE = 4] = "V2NIM_SIGNALLING_EVENT_TYPE_CANCEL_INVITE", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_REJECT = 5] = "V2NIM_SIGNALLING_EVENT_TYPE_REJECT", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_ACCEPT = 6] = "V2NIM_SIGNALLING_EVENT_TYPE_ACCEPT", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_LEAVE = 7] = "V2NIM_SIGNALLING_EVENT_TYPE_LEAVE", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_CONTROL = 8] = "V2NIM_SIGNALLING_EVENT_TYPE_CONTROL";
      }(Cl || (Cl = {})), function(t2) {
        t2[t2.V2NIM_SIGNALLING_CHANNEL_TYPE_AUDIO = 1] = "V2NIM_SIGNALLING_CHANNEL_TYPE_AUDIO", t2[t2.V2NIM_SIGNALLING_CHANNEL_TYPE_VIDEO = 2] = "V2NIM_SIGNALLING_CHANNEL_TYPE_VIDEO", t2[t2.V2NIM_SIGNALLING_CHANNEL_TYPE_CUSTOM = 3] = "V2NIM_SIGNALLING_CHANNEL_TYPE_CUSTOM";
      }(bl || (bl = {})), function(t2) {
        t2[t2.V2NIM_USER_STATUS_TYPE_UNKNOWN = 0] = "V2NIM_USER_STATUS_TYPE_UNKNOWN", t2[t2.V2NIM_USER_STATUS_TYPE_LOGIN = 1] = "V2NIM_USER_STATUS_TYPE_LOGIN", t2[t2.V2NIM_USER_STATUS_TYPE_LOGOUT = 2] = "V2NIM_USER_STATUS_TYPE_LOGOUT", t2[t2.V2NIM_USER_STATUS_TYPE_DISCONNECT = 3] = "V2NIM_USER_STATUS_TYPE_DISCONNECT";
      }(El || (El = {}));
      var Rl = { V2NIM_ERROR_CODE_UNKNOWN: { code: 0, message: "unknown error" }, V2NIM_ERROR_CODE_SUCCESS: { code: 200, message: "success" }, V2NIM_ERROR_CODE_HANDSHAKE: { code: 201, message: "handshake error" }, V2NIM_ERROR_CODE_REQUEST_TEMPERARY_FORBIDDEN: { code: 398, message: "request temprary forbidden" }, V2NIM_ERROR_CODE_SERVER_UNIT_ERROR: { code: 399, message: "server unit error" }, V2NIM_ERROR_CODE_FORBIDDEN: { code: 403, message: "forbidden" }, V2NIM_ERROR_CODE_NOT_FOUND: { code: 404, message: "not found" }, V2NIM_ERROR_CODE_PARAMETER_ERROR: { code: 414, message: "parameter error" }, V2NIM_ERROR_CODE_RATE_LIMIT_REACHED: { code: 416, message: "rate limit reached" }, V2NIM_ERROR_CODE_MULTI_LOGIN_FORBIDDEN: { code: 417, message: "multi login forbidden" }, V2NIM_ERROR_CODE_SERVER_INTERNAL_ERROR: { code: 500, message: "server internal error" }, V2NIM_ERROR_CODE_SERVER_BUSY: { code: 503, message: "server busy" }, V2NIM_ERROR_CODE_APP_UNREACHABLE: { code: 511, message: "app server unreachable" }, V2NIM_ERROR_CODE_SERVICE_UNAVAILABLE: { code: 514, message: "service unavailable" }, V2NIM_ERROR_CODE_PROTOCOL_BLACKHOLE_FILTERED: { code: 599, message: "protocol filtered by blackhole rule" }, V2NIM_ERROR_CODE_NO_PERMISSION: { code: 997, message: "appid has no permission to call the protocol" }, V2NIM_ERROR_CODE_UNPACK_ERROR: { code: 998, message: "unpack error" }, V2NIM_ERROR_CODE_PACK_ERROR: { code: 999, message: "pack error" }, V2NIM_ERROR_CODE_IM_DISABLED: { code: 101301, message: "IM disabled" }, V2NIM_ERROR_CODE_SERVICE_ADDRESS_INVALID: { code: 101302, message: "service address invalid" }, V2NIM_ERROR_CODE_APPKEY_NOT_EXIST: { code: 101303, message: "appkey not exist" }, V2NIM_ERROR_CODE_BUNDLEID_CHECK_FAILED: { code: 101304, message: "bundleid check failed" }, V2NIM_ERROR_CODE_APPKEY_BLOCKED: { code: 101403, message: "appkey blocked" }, V2NIM_ERROR_CODE_INVALID_TOKEN: { code: 102302, message: "invalid token" }, V2NIM_ERROR_CODE_ROBOT_NOT_ALLOWED: { code: 102303, message: "robot not allowed" }, V2NIM_ERROR_CODE_ACCOUNT_NOT_EXIST: { code: 102404, message: "account not exist" }, V2NIM_ERROR_CODE_ACCOUNT_CHAT_BANNED: { code: 102421, message: "account chat banned" }, V2NIM_ERROR_CODE_ACCOUNT_BANNED: { code: 102422, message: "account banned" }, V2NIM_ERROR_CODE_ACCOUNT_IN_BLOCK_LIST: { code: 102426, message: "account in block list" }, V2NIM_ERROR_CODE_USER_PROFILE_NOT_EXIST: { code: 103404, message: "user profile not exist" }, V2NIM_ERROR_CODE_USER_PROFILE_HIT_ANTISPAM: { code: 103451, message: "user profile hit antispam" }, V2NIM_ERROR_CODE_PEER_FRIEND_LIMIT: { code: 104301, message: "peer friend limit" }, V2NIM_ERROR_CODE_FRIEND_APPLICATION_NOT_EXIST: { code: 104302, message: "friend application not exist" }, V2NIM_ERROR_CODE_FRIEND_NOT_EXIST: { code: 104404, message: "friend not exist" }, V2NIM_ERROR_CODE_FRIEND_ALREADY_EXIST: { code: 104405, message: "friend already exist" }, V2NIM_ERROR_CODE_SELF_FRIEND_OPERATION_NOT_ALLOWED: { code: 104429, message: "self friend operation not allowed" }, V2NIM_ERROR_CODE_FRIEND_LIMIT: { code: 104435, message: "friend limit" }, V2NIM_ERROR_CODE_FRIEND_OPERATION_RATE_LIMIT: { code: 104449, message: "friend operation rate limit" }, V2NIM_ERROR_CODE_FRIEND_HIT_ANTISPAM: { code: 104451, message: "friend hit antispam" }, V2NIM_ERROR_CODE_SELF_MUTE_OPERATION_NOT_ALLOWED: { code: 105429, message: "self mute operation not allowed" }, V2NIM_ERROR_CODE_MUTE_LIST_LIMIT: { code: 105435, message: "mute list limit" }, V2NIM_ERROR_CODE_SELF_BLOCK_LIST_OPERATION_NOT_ALLOWED: { code: 106429, message: "self block list operation not allowed" }, V2NIM_ERROR_CODE_BLOCK_LIST_LIMIT: { code: 106435, message: "block list limit" }, V2NIM_ERROR_CODE_REVOKE_THIRD_PARTY_MESSAGE_NOT_ALLOWED: { code: 107301, message: "revoke third party message not allowed" }, V2NIM_ERROR_CODE_SHORT_TO_LONG_URL_FAILED: { code: 107307, message: "short to long URL failed" }, V2NIM_ERROR_CODE_URL_INVALID: { code: 107308, message: "URL invalid" }, V2NIM_ERROR_CODE_DURATION_OUT_OF_RANGE: { code: 107309, message: "duration out of range" }, V2NIM_ERROR_CODE_GET_FILE_META_INFO_FAILED: { code: 107310, message: "get file meta info failed" }, V2NIM_ERROR_CODE_AUDIO_FILE_SIZE_LIMIT: { code: 107311, message: "audio file size limit" }, V2NIM_ERROR_CODE_VOICE_TO_TEXT_TIMEOUT: { code: 107312, message: "voice to text timeout" }, V2NIM_ERROR_CODE_VOICE_TO_TEXT_FAILED: { code: 107313, message: "voice to text failed" }, V2NIM_ERROR_CODE_REVOKE_EXCEED_TIME_LIMIT: { code: 107314, message: "revoke message exceed time limit" }, V2NIM_ERROR_CODE_REVOKE_MESSAGE_NOT_ALLOWED: { code: 107315, message: "revoke specific message not allowed" }, V2NIM_ERROR_CODE_FORCE_PUSH_LIST_LIMIT: { code: 107316, message: "force push list limit" }, V2NIM_ERROR_CODE_TEAM_MESSAGE_RECEIPT_RATE_LIMIT: { code: 107317, message: "team message receipt rate limit" }, V2NIM_ERROR_CODE_SNAPSHOT_NOT_EXIST: { code: 107318, message: "snapshot not exist" }, V2NIM_ERROR_CODE_PIN_LIMIT: { code: 107319, message: "pin limit" }, V2NIM_ERROR_CODE_PIN_NOT_EXIST: { code: 107320, message: "pin not exist" }, V2NIM_ERROR_CODE_QUICK_COMMENT_LIMIT: { code: 107321, message: "quick comment limit" }, V2NIM_ERROR_CODE_PIN_ALREADY_EXIST: { code: 107322, message: "pin already exist" }, V2NIM_ERROR_CODE_VOICE_TO_TEXT_FUNCTION_DISABLED: { code: 107333, message: "voice to text function disabled" }, V2NIM_ERROR_CODE_CLOUD_SEARCH_FUNCTION_DISABLED: { code: 107334, message: "cloud search function disabled" }, V2NIM_ERROR_CODE_ONE_WAY_DELETE_FUNCTION_DISABLED: { code: 107335, message: "one-way delete function disabled" }, V2NIM_ERRPR_CODE_ONEWAY_DELETION_NOT_ALLOW_FOR_TARGET_MESSAGES: { code: 107338, message: "one-way deletion is not allowed for target messages" }, V2NIM_ERRPR_CODE_SENDER_CANNOT_INCLUDED_IN_TARGET_LIST: { code: 107339, message: "The message sender cannot be included in the target list" }, V2NIM_ERROR_CODE_ROBOT_CANNOT_SEND_TARGET_MESSAGE: { code: 107340, message: "Robot can not send target message" }, V2NIM_ERROR_CODE_PIN_TARGET_MESSAGE_NOT_ALLOWED: { code: 107345, message: "Pin target message is not allowed" }, V2NIM_ERROR_CODE_TARGET_MESSAGE_NOT_ALLOWED_REPLY: { code: 107346, message: "Target message not allowed reply" }, V2NIM_ERROR_CODE_TARGET_MESSAGE_NOT_ALLOWED_QUICK_COMMENT: { code: 107347, message: "Target message not allowed quick comment" }, V2NIM_ERROR_CODE_REVOKE_MESSAGE_TO_SELF_NOT_ALLOWED: { code: 107429, message: "revoke message to self not allowed" }, V2NIM_ERROR_CODE_APP_CHAT_BANNED: { code: 107410, message: "app chat banned" }, V2NIM_ERROR_CODE_QUICK_COMMENT_FUNCTION_DISABLED: { code: 107326, message: "quick comment function disabled" }, V2NIM_ERROR_CODE_PIN_FUNCTION_DISABLED: { code: 107327, message: "PIN function disabled" }, V2NIM_ERROR_CODE_TEAM_READ_RECEIPT_FUNCTION_DISABLED: { code: 107324, message: "read receipt for team messages function disabled" }, V2NIM_ERROR_CODE_P2P_READ_RECEIPT_FUNCTION_DISABLED: { code: 107325, message: "read receipt for p2p messages function disabled" }, V2NIM_ERROR_CODE_RATE_LIMIT_FOR_MESSAGING_REACHED: { code: 107323, message: "rate limit for messaging reached" }, V2NIM_ERROR_CODE_MESSAGE_HIT_ANTISPAM: { code: 107451, message: "message hit antispam" }, V2NIM_ERROR_CODE_MESSAGE_NOT_EXIST: { code: 107404, message: "message not exist" }, V2NIM_ERROR_CODE_UNSENDING_MESSAGE_EXPIRED: { code: 107406, message: "unsending message expired" }, V2NIM_ERROR_CODE_TEAM_MARK_READ_FAILED: { code: 107302, message: "sending message failed for marking message read failed for too many team members" }, V2NIM_ERROR_CODE_SENDER_OR_MANAGER_PERMISSION_ONLY_REVOKE: { code: 107303, message: "only sender or manager can revoke message" }, V2NIM_ERROR_CODE_DELETE_SELF_MESSAGE_NOT_ALLOWED: { code: 107328, message: "delete self message not allowed" }, V2NIM_ERROR_CODE_NOT_CHATBOT_ACCOUNT: { code: 107329, message: "is not chatbot account" }, V2NIM_ERROR_CODE_MESSAGE_SENSE_REQUIRED: { code: 107330, message: "sender or receiver must sense message" }, V2NIM_ERROR_CODE_HIGH_PRIORITY_MESSAGE_RATE_LIMIT: { code: 107304, message: "rate limit of high-priority messages exceeded" }, ACK_MESSAGE_BE_HIGH_PRIORITY: { code: 107305, message: "ack message should be high-priority" }, V2NIM_ERROR_CODE_DUPLICATE_CLIENT_MESSAGE_ID: { code: 107306, message: "duplicate client message ID" }, V2NIM_ERROR_CODE_INVALID_TIME_RANGE: { code: 107439, message: "invalid time range" }, V2NIM_ERROR_CODE_NOT_ADVANCED_TEAM: { code: 108302, message: "not advanced team" }, V2NIM_ERROR_CODE_TEAM_MANAGER_LIMIT: { code: 108303, message: "team manager limit" }, V2NIM_ERROR_CODE_JOINED_TEAM_LIMIT: { code: 108305, message: "joined team limit" }, V2NIM_ERROR_CODE_TEAM_NORMAL_MEMBER_CHAT_BANNED: { code: 108306, message: "team normal member chat banned" }, V2NIM_ERROR_CODE_INVITED_ACCOUNT_NOT_FRIEND: { code: 108307, message: "invited account not friend" }, V2NIM_ERROR_CODE_REJECT_ALL_TEAM_APPLICATIONS: { code: 108308, message: "reject all team applications" }, V2NIM_ERROR_CODE_TARGETING_MESSAGE_FOR_TEAM_DISABLED: { code: 108318, message: "Targeting messages for group chat is disabled" }, V2NIM_ERROR_CODE_INCLUSIVE_AS_FALSE_NOT_ALLOWED_FOR_SUPER_TEAM: { code: 108319, message: 'Setting "inclusive" to false for super teams is not allowed' }, V2NIM_ERROR_CODE_CANNOT_MAKE_SUPER_TEAM_MESSAGE_VISIBLE_TO_NEW_MEMBERS: { code: 108320, message: "Cannot make super team targeted messages visible to new members" }, V2NIM_ERROR_CODE_CANNOT_ALLOW_TARGETED_MESSAGES_INCLUSIVE_TO_NEW_MEMBERS: { code: 108321, message: "Cannot allow targeted messages inclusive to new members" }, V2NIM_ERROR_CODE_TEAM_NOT_EXIST: { code: 108404, message: "team not exist" }, V2NIM_ERROR_CODE_TEAM_ALREADY_CHAT_BANNED: { code: 108420, message: "team already chat banned" }, V2NIM_ERROR_CODE_ALL_TEAM_MEMBER_CHAT_BANNED: { code: 108423, message: "all team member chat banned" }, V2NIM_ERROR_CODE_EXTENDED_SUPER_TEAM_LIMIT: { code: 108434, message: "extended super team limit" }, V2NIM_ERROR_CODE_CREATED_TEAM_LIMIT: { code: 108435, message: "created team limit" }, V2NIM_ERROR_CODE_TEAM_INVITATION_LIMIT: { code: 108437, message: "team invitation limit" }, V2NIM_ERROR_CODE_TEAM_HIT_ANTISPAM: { code: 108451, message: "team hit antispam" }, V2NIM_ERROR_CODE_EXTENDED_SUPER_TEAM_LIMIT_NOT_CONFIGURED: { code: 108304, message: "extended super team limit not configured" }, V2NIM_ERROR_CODE_SUPER_TEAM_SERVICE_DISABLED: { code: 108311, message: "super team service disabled" }, V2NIM_ERROR_CODE_TEAM_READ_RECEIPT_RECORD_NOT_FOUND: { code: 108301, message: "read receipt record for the team message not found" }, V2NIM_ERROR_CODE_NOT_MANAGER: { code: 108430, message: "unable to assign owner manager" }, V2NIM_ERROR_CODE_ONLINE_MEMBER_COUNT_DISABLED: { code: 108406, message: "number of online users service disabled" }, V2NIM_ERROR_CODE_TRANSFER_DISABLED: { code: 108310, message: "unable to transfer the ownership to owner" }, V2NIM_ERROR_CODE_CREATE_TEAM_DISABLED: { code: 108309, message: "unable to create team with more than %s people" }, V2NIM_ERROR_CODE_EXTENDED_SUPER_TEAM_CREATE_FAILED: { code: 108313, message: "/ extended super team creation failed\uFF0Cuse open api to create the team" }, V2NIM_ERROR_CODE_TEAM_MESSAGE_READ_RECEIPT_DISABLED: { code: 108312, message: "read receipt for team messages function disabled" }, V2NIM_ERROR_CODE_RETRY: { code: 108449, message: "an error occurred, try again" }, V2NIM_ERROR_CODE_CHAT_BAN_LIST_CONTAIN_NOT_TEAM_MEMBER: { code: 109301, message: "list of chat banned users contains non team members" }, V2NIM_ERROR_CODE_CHAT_BAN_LIST_CONTAIN_OPERATOR: { code: 109303, message: "list of chat banned users contains the operator" }, V2NIM_ERROR_CODE_CHAT_BAN_LIST_CONTAIN_TEAM_OWNER: { code: 109304, message: "list of chat banned users contains the team owner" }, V2NIM_ERROR_CODE_OPERATION_ON_TEAM_MANAGER_NOT_ALLOWED: { code: 109305, message: "operation on team manager not allowed" }, V2NIM_ERROR_CODE_NO_TEAM_INVITE_PERMISSION: { code: 109306, message: "no team invite permission" }, V2NIM_ERROR_CODE_TEAM_OWNER_QUIT_NOT_ALLOWED: { code: 109307, message: "team owner quit not allowed" }, V2NIM_ERROR_CODE_TEAM_OWNER_IN_KICK_LIST: { code: 109308, message: "list of kicked user contains the team owner" }, V2NIM_ERROR_CODE_INVITE_ROBOT_ACCOUNT_NOT_ALLOWED: { code: 109309, message: "invite robot account not allowed" }, V2NIM_ERROR_CODE_KICK_OPERATOR_NOT_ALLOWED: { code: 109310, message: "kick operator not allowed" }, V2NIM_ERROR_CODE_TEAM_MEMBER_ALREADY_EXIST: { code: 109311, message: "team member already exist" }, V2NIM_ERROR_CODE_TEAM_INVITATION_OR_APPLICATION_NOT_EXIST: { code: 109313, message: "team invitation or application not exist" }, V2NIM_ERROR_CODE_OPERATION_ON_TEAM_OWNER_NOT_ALLOWED: { code: 109314, message: "operation on team owner not allowed" }, V2NIM_ERROR_CODE_FORCED_PUSH_LIST_INCLUDES_NON_TARGETED_ACCOUNTS: { code: 109318, message: "The forced push list includes non-targeted accounts" }, V2NIM_ERROR_CODE_TEAM_MEMBER_NOT_EXIST: { code: 109404, message: "team member not exist" }, V2NIM_ERROR_CODE_TEAM_MEMBER_CHAT_BANNED: { code: 109424, message: "team member chat banned" }, V2NIM_ERROR_CODE_TEAM_OWNER_OPERATION_PERMISSION_REQUIRED: { code: 109427, message: "team owner operation permission required" }, V2NIM_ERROR_CODE_TEAM_OWNER_OR_MANAGER_OPERATION_PERMISSION_REQUIRED: { code: 109432, message: "team owner or manager operation permission required" }, V2NIM_ERROR_CODE_TEAM_MEMBER_CONCURRENT_OPERATION_FAILED: { code: 109449, message: "team member concurrent operation failed" }, V2NIM_ERROR_CODE_TEAM_MEMBER_HIT_ANTISPAM: { code: 109451, message: "team member hit antispam" }, V2NIM_ERROR_CODE_CONVERSATION_AND_ACCOUNT_MISMATCH: { code: 110302, message: "conversation and account mismatch" }, V2NIM_ERROR_CODE_CONVERSATION_STICK_TOP_LIMIT: { code: 110303, message: "conversation stick top limit" }, V2NIM_ERROR_CODE_CONVERSATION_BELONGED_GROUP_LIMIT: { code: 110304, message: "conversation belonged group limit" }, V2NIM_ERROR_CODE_CONVERSATION_NOT_EXIST: { code: 110404, message: "conversation not exist" }, V2NIM_ERROR_CODE_CHATROOM_LINK_UNAVAILABLE: { code: 113304, message: "chatroom link unavailable" }, V2NIM_ERROR_CODE_IM_CONNECTION_ABNORMAL: { code: 113305, message: "IM connection abnormal" }, V2NIM_ERROR_CODE_CHATROOM_NOT_EXIST: { code: 113404, message: "chatroom not exist" }, V2NIM_ERROR_CODE_CHATROOM_CLOSED: { code: 113406, message: "chatroom closed" }, V2NIM_ERROR_CODE_CHATROOM_REPEATED_OPERATION: { code: 113409, message: "chatroom repeated operation" }, V2NIM_ERROR_CODE_CHATROOM_DISABLED: { code: 113410, message: "chatroom disabled" }, V2NIM_ERROR_CODE_ALL_CHATROOM_MEMBER_CHAT_BANNED: { code: 113423, message: "all chatroom member chat banned" }, V2NIM_ERROR_CODE_CHATROOM_HIT_ANTISPAM: { code: 113451, message: "chatroom hit antispam" }, V2NIM_ERROR_CODE_ANONYMOUS_MEMBER_FORBIDDEN: { code: 114303, message: "anonymous member forbidden" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_NOT_EXIST: { code: 114404, message: "chatroom member not exist" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_REPEATED_OPERATION: { code: 114405, message: "chatroom member repeated operation" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_CHAT_BANNED: { code: 114421, message: "chatroom member chat banned" }, V2NIM_ERROR_CODE_ACCOUNT_IN_CHATROOM_BLOCK_LIST: { code: 114426, message: "account in chatroom block list" }, V2NIM_ERROR_CODE_CHATROOM_OWNER_OPERATION_PERMISSION_REQUIRED: { code: 114427, message: "chatroom owner operation permission required" }, V2NIM_ERROR_CODE_SELF_IN_CHATROOM_MEMBER_OPERATION_LIST: { code: 114429, message: "self in chatroom member operation list" }, V2NIM_ERROR_CODE_CHATROOM_OWNER_OR_MANAGER_OPERATION_PERMISSION_REQUIRED: { code: 114432, message: "chatroom owner or manager operation permission required" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_LIMIT: { code: 114437, message: "chatroom member limit" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_CONCURRENT_OPERATION_FAILED: { code: 114449, message: "chatroom member concurrent operation failed" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_HIT_ANTISPAM: { code: 114451, message: "chatroom member hit antispam" }, V2NIM_ERROR_CODE_CONVERSATION_GROUP_NOT_EXIST: { code: 116404, message: "conversation group not exist" }, V2NIM_ERROR_CODE_CONVERSATION_GROUP_LIMIT: { code: 116435, message: "conversation group limit" }, V2NIM_ERROR_CODE_CONVERSATIONS_IN_GROUP_LIMIT: { code: 116437, message: "conversations in group limit" }, V2NIM_ERROR_CODE_COLLECTION_LIMIT: { code: 189301, message: "collection limit" }, V2NIM_ERROR_CODE_COLLECTION_NOT_EXIST: { code: 189302, message: "collection not exist" }, V2NIM_ERROR_CODE_COLLECTION_CONCURRENT_OPERATION_FAILED: { code: 189449, message: "collection concurrent operation failed" }, V2NIM_ERROR_CODE_INTERNAL: { code: 190001, message: "internal error" }, V2NIM_ERROR_CODE_ILLEGAL_STATE: { code: 190002, message: "illegal state" }, V2NIM_ERROR_CODE_MISUSE: { code: 191001, message: "misuse" }, V2NIM_ERROR_CODE_CANCELLED: { code: 191002, message: "operation cancelled" }, V2NIM_ERROR_CODE_CALLBACK_FAILED: { code: 191003, message: "callback failed" }, V2NIM_ERROR_CODE_INVALID_PARAMETER: { code: 191004, message: "invalid parameter" }, V2NIM_ERROR_CODE_TIMEOUT: { code: 191005, message: "timeout" }, V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST: { code: 191006, message: "resource not exist" }, V2NIM_ERROR_CODE_RESOURCE_ALREADY_EXIST: { code: 191007, message: "resource already exist" }, V2NIM_ERROR_CODE_CONNECT_FAILED: { code: 192001, message: "connect failed" }, V2NIM_ERROR_CODE_CONNECT_TIMEOUT: { code: 192002, message: "connect timeout" }, V2NIM_ERROR_CODE_DISCONNECT: { code: 192003, message: "disconnect" }, V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT: { code: 192004, message: "protocol timeout" }, V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED: { code: 192005, message: "protocol send failed" }, V2NIM_ERROR_CODE_REQUEST_FAILED: { code: 192006, message: "request failed" }, V2NIM_ERROR_CODE_FILE_NOT_FOUND: { code: 194001, message: "file not found" }, V2NIM_ERROR_CODE_FILE_CREATE_FAILED: { code: 194002, message: "file create failed" }, V2NIM_ERROR_CODE_FILE_OPEN_FAILED: { code: 194003, message: "file open failed" }, V2NIM_ERROR_CODE_FILE_WRITE_FAILED: { code: 194004, message: "file write failed" }, V2NIM_ERROR_CODE_FILE_READ_FAILED: { code: 194005, message: "file read failed" }, V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED: { code: 194006, message: "file upload failed" }, V2NIM_ERROR_CODE_FILE_DOWNLOAD_FAILED: { code: 194007, message: "file download failed" }, V2NIM_ERROR_CODE_CLIENT_ANTISPAM: { code: 195001, message: "client anti-spam" }, V2NIM_ERROR_CODE_SERVER_ANTISPAM: { code: 195002, message: "server anti-spam" } }, Al = Ht(Rl), Nl = reduce(Al).call(Al, function(t2, a2) {
        var u2 = Rl[a2];
        return t2[a2] = u2.code, t2;
      }, {}), xl = reduce(Al).call(Al, function(t2, a2) {
        var u2 = Rl[a2];
        return t2[u2.code] = u2.message, t2;
      }, {}), Ol = Object.freeze({ __proto__: null, V2NIMErrorCode: Nl, V2NIMErrorDesc: xl, get V2NIMDataSyncLevel() {
        return Pc;
      }, get V2NIMDataSyncType() {
        return Lc;
      }, get V2NIMDataSyncState() {
        return Vc;
      }, get V2NIMConversationType() {
        return Uc;
      }, get V2NIMLastMessageState() {
        return Dc;
      }, get V2NIMFriendAddMode() {
        return qc;
      }, get V2NIMFriendAddApplicationType() {
        return Bc;
      }, get V2NIMFriendAddApplicationStatus() {
        return Fc;
      }, get V2NIMFriendDeletionType() {
        return Gc;
      }, get V2NIMFriendVerifyType() {
        return Hc;
      }, get V2NIMLoginAuthType() {
        return jc;
      }, get V2NIMLoginStatus() {
        return $c;
      }, get V2NIMLoginClientType() {
        return zc;
      }, get V2NIMKickedOfflineReason() {
        return Wc;
      }, get V2NIMLoginClientChange() {
        return Kc;
      }, get V2NIMConnectStatus() {
        return Yc;
      }, get V2NIMMessageType() {
        return Jc;
      }, get V2NIMMessageNotificationType() {
        return Xc;
      }, get V2NIMMessageAttachmentUploadState() {
        return Zc;
      }, get V2NIMMessageSendingState() {
        return el;
      }, get V2NIMQueryDirection() {
        return tl;
      }, get V2NIMMessageRevokeType() {
        return rl;
      }, get V2NIMMessagePinState() {
        return nl;
      }, get V2NIMMessageQuickCommentType() {
        return al;
      }, get V2NIMClientAntispamOperateType() {
        return il;
      }, get V2NIMSortOrder() {
        return ol;
      }, get V2NIMSystemMessageType() {
        return sl;
      }, get V2NIMTeamMessageMuteMode() {
        return cl;
      }, get V2NIMP2PMessageMuteMode() {
        return ll;
      }, get V2NIMTeamMemberRoleQueryType() {
        return ul;
      }, get V2NIMTeamType() {
        return dl;
      }, get V2NIMTeamJoinMode() {
        return pl;
      }, get V2NIMTeamAgreeMode() {
        return ml;
      }, get V2NIMTeamInviteMode() {
        return hl;
      }, get V2NIMTeamUpdateInfoMode() {
        return gl;
      }, get V2NIMTeamChatBannedMode() {
        return vl;
      }, get V2NIMTeamUpdateExtensionMode() {
        return fl;
      }, get V2NIMTeamJoinActionType() {
        return _l;
      }, get V2NIMTeamJoinActionStatus() {
        return Ml;
      }, get V2NIMTeamNotificationType() {
        return Il;
      }, get V2NIMTeamMemberRole() {
        return yl;
      }, get V2NIMAIModelRoleType() {
        return Tl;
      }, get V2NIMAIModelType() {
        return Sl;
      }, get V2NIMSignallingChannelType() {
        return bl;
      }, get V2NIMSignallingEventType() {
        return Cl;
      }, get V2NIMUserStatusType() {
        return El;
      } }), Pl = function(t2) {
        function V2NIMErrorImpl(a2) {
          var u2;
          return (u2 = t2.call(this, a2.desc) || this).name = "V2NIMError", u2.code = a2.code || 0, u2.desc = a2.desc || xl[u2.code] || Bl[u2.code] || "", u2.message = u2.desc, u2.detail = a2.detail || {}, u2;
        }
        return Nt(V2NIMErrorImpl, t2), V2NIMErrorImpl.prototype.toString = function toString2() {
          var t3, a2 = this.name + "\n code: " + this.code + '\n message: "' + this.message + '"\n detail: ' + (this.detail ? Un(this.detail) : "");
          return ((t3 = this == null ? void 0 : this.detail) === null || t3 === void 0 ? void 0 : t3.rawError) && (a2 += "\n rawError: " + this.detail.rawError.message), a2;
        }, V2NIMErrorImpl;
      }(Ac(Error));
      var Ll = function(t2) {
        function ValidateError(a2, u2, m2) {
          var h2;
          return u2 === void 0 && (u2 = {}), (h2 = t2.call(this, { code: Nl.V2NIM_ERROR_CODE_PARAMETER_ERROR, detail: { reason: a2, rules: m2, data: u2 } }) || this).name = "validateError", h2.message = h2.message + "\n" + Un(h2.detail, null, 2), h2.data = u2, h2.rules = m2, h2;
        }
        return Nt(ValidateError, t2), ValidateError;
      }(Pl), Vl = function(t2) {
        function ValidateErrorV2(a2) {
          var u2, m2, h2, g2;
          return (u2 = t2.call(this, { code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: (m2 = a2.detail) === null || m2 === void 0 ? void 0 : m2.reason, rules: (h2 = a2.detail) === null || h2 === void 0 ? void 0 : h2.rules, data: (g2 = a2.detail) === null || g2 === void 0 ? void 0 : g2.data } }) || this).name = "ValidateErrorV2", u2;
        }
        return Nt(ValidateErrorV2, t2), ValidateErrorV2;
      }(Pl), Ul = function(t2) {
        function FormatError(a2, u2, m2) {
          var h2;
          return (h2 = t2.call(this, { code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: a2, key: u2, rules: m2 } }) || this).name = "formatError", h2;
        }
        return Nt(FormatError, t2), FormatError;
      }(Pl), Dl = function(t2) {
        function UploadError(a2) {
          var u2;
          return (u2 = t2.call(this, Dt({ code: 400 }, a2)) || this).desc = u2.desc || "upload file error", u2.message = u2.desc, u2.name = "uploadError", u2;
        }
        return Nt(UploadError, t2), UploadError;
      }(Pl), ql = function(t2) {
        function CustomError(a2, u2, m2) {
          var h2;
          return u2 === void 0 && (u2 = {}), m2 === void 0 && (m2 = 400), (h2 = t2.call(this, { code: m2, desc: a2, detail: u2 }) || this).name = "customError", h2.data = u2, h2;
        }
        return Nt(CustomError, t2), CustomError;
      }(Pl), Bl = { 200: null, 406: null, 808: null, 810: null, 302: "The user name or password is incorrect.", 405: "Parameter length too long", 408: "Client request timed out", 415: "Client network unavailable", 422: "Account disabled", 508: "Expiration date", 509: "Invalid", 7101: "Be pulled black", 700: "Partial failure of batch operation", 801: "The number of people in the team has reached the upper limit", 802: "No permission", 803: "The team does not exist or has not changed", 804: "The user is not in the team", 805: "Team type mismatch", 806: "The number of teams created has reached the limit", 807: "Team member not valid", 809: "Already in the team", 811: "The number of accounts in the forced push list exceeds the limit", 812: "The team is muted", 813: "Due to the limited number of team, some pull people successfully", 814: "Disable team message read service", 815: "Maximum number of team administrators", 816: "Batch operation partial failure", 9102: "Channel failure", 9103: "This call has been answered / rejected at another end", 10201: "Signaling: target NIM client is offline", 10202: "Signaling: push is unreachable", 10404: "Signaling: channel not exists", 10405: "Signaling: channel already exists", 10406: "Signaling: member of channel not exists", 10407: "Signaling: member of channel already exists", 10408: "Signaling: the invitation request does not exist or has expired", 10409: "Signaling: the invitation request has been rejected", 10410: "Signaling: the invitation request has been accepted", 10414: "Signaling: request parameter error", 10417: "Signaling: uid conflict", 10419: "Signaling: the number of members of channel exceed the limit", 10420: "Signaling: member is already in the channel on other client", 10700: "Signaling: phased success", 13002: "Abnormal chatroom status", 13003: "In the blacklist", 13004: "In the mute list", 13006: "All members are muted, and only the administrator can speak" };
      function difference(t2, a2) {
        return a2 = a2 || [], filter(t2 = t2 || []).call(t2, function(t3) {
          return indexOf(a2).call(a2, t3) === -1;
        });
      }
      function replacer(t2, a2) {
        return a2 instanceof RegExp ? "__REGEXP " + a2.toString() : a2;
      }
      function validate(t2, a2, u2, m2) {
        var h2;
        a2 === void 0 && (a2 = {}), m2 === void 0 && (m2 = false);
        var g2 = {};
        return forEach$1(h2 = Ht(t2)).call(h2, function(h3) {
          var M2 = t2[h3].type, I2 = u2 ? "In " + u2 + ", " : "";
          if (a2 == null) {
            var S2 = I2 + "param is null or undefined";
            throw m2 ? new Vl({ detail: { reason: S2, data: { key: h3 }, rules: "required" } }) : new Ll(S2, { key: h3 }, "required");
          }
          if (a2[h3] === void 0) {
            if (t2[h3].required === false)
              return void (g2[h3] = a2[h3]);
            var T2 = I2 + "param '" + h3 + "' is required";
            throw m2 ? new Vl({ detail: { reason: T2, data: { key: h3 }, rules: "required" } }) : new Ll(T2, { key: h3 }, "required");
          }
          var C2 = Fl[M2];
          if (C2 && !C2(a2, h3, t2[h3], m2)) {
            var b2 = I2 + "param '" + h3 + "' unexpected", E2 = { key: h3, value: a2[h3] };
            throw m2 ? new Vl({ detail: { reason: b2, data: E2, rules: Un(t2[h3], replacer) } }) : new Ll(b2, E2, Un(t2[h3], replacer));
          }
          g2[h3] = a2[h3];
        }), g2;
      }
      var Fl = { string: function string(t2, a2, u2) {
        var m2 = u2.allowEmpty, h2 = u2.max, g2 = u2.min, M2 = u2.regExp, I2 = t2[a2];
        return typeof I2 == "string" && ((m2 !== false || I2 !== "") && (!(typeof h2 == "number" && I2.length > h2) && (!(typeof g2 == "number" && I2.length < g2) && !(function isRegExp(t3) {
          return Object.prototype.toString.call(t3) === "[object RegExp]";
        }(M2) && !M2.test(I2)))));
      }, number: function number(t2, a2, u2) {
        var m2 = u2.min, h2 = u2.max, g2 = t2[a2];
        return typeof g2 == "number" && (!(typeof m2 == "number" && g2 < m2) && !(typeof h2 == "number" && g2 > h2));
      }, boolean: function boolean(t2, a2) {
        return typeof t2[a2] == "boolean";
      }, file: function file(t2, a2) {
        return true;
      }, enum: function _enum(t2, a2, u2) {
        var m2 = values(u2), h2 = t2[a2];
        return !m2 || indexOf(m2).call(m2, h2) > -1;
      }, jsonstr: function jsonstr(t2, a2) {
        try {
          var u2 = JSON.parse(t2[a2]);
          return typeof u2 == "object" && u2 !== null;
        } catch (t3) {
          return false;
        }
      }, func: function func(t2, a2) {
        return typeof t2[a2] == "function";
      }, array: function array(t2, a2, u2, m2) {
        m2 === void 0 && (m2 = false);
        var h2 = u2.itemType, g2 = u2.rules, M2 = u2.min, I2 = u2.max, S2 = values(u2), T2 = t2[a2];
        return !!Dn(T2) && (!(typeof I2 == "number" && T2.length > I2) && (!(typeof M2 == "number" && T2.length < M2) && (!(h2 && h2 !== "enum" && !every(T2).call(T2, function(t3) {
          return typeof t3 === h2;
        })) && ((h2 !== "enum" || !S2 || !difference(T2, S2).length) && (g2 && forEach$1(T2).call(T2, function(t3, u3) {
          return validate(g2, t3, a2 + "[" + u3 + "]", m2);
        }), true)))));
      }, object: function object(t2, a2, u2, m2) {
        m2 === void 0 && (m2 = false);
        var h2 = u2.rules, g2 = u2.allowEmpty, M2 = t2[a2];
        if (typeof M2 != "object" || M2 === null)
          return false;
        if (h2) {
          var I2 = Ht(h2), S2 = Ht(M2), T2 = filter(S2).call(S2, function(t3) {
            return indexOf(I2).call(I2, t3) > -1;
          });
          if (g2 === false && T2.length === 0)
            return false;
          validate(h2, M2, a2, m2);
        }
        return true;
      } };
      function validateConversationId(t2, a2) {
        if (!t2)
          throw new Pl({ code: Nl.V2NIM_ERROR_CODE_ILLEGAL_STATE });
        validate({ conversationId: { type: "string", allowEmpty: false, regExp: new RegExp("^" + t2 + "\\|[1-3]\\|") } }, { conversationId: a2 }, "", true);
      }
      var callWithSafeIterationClosing = function(t2, a2, u2, m2) {
        try {
          return m2 ? a2(anObject(u2)[0], u2[1]) : a2(u2);
        } catch (a3) {
          iteratorClose(t2, "throw", a3);
        }
      }, Gl = Array, Hl = !checkCorrectnessOfIteration(function(t2) {
        Array.from(t2);
      });
      _export({ target: "Array", stat: true, forced: Hl }, { from: function from(t2) {
        var a2 = toObject(t2), u2 = Jr(this), m2 = arguments.length, h2 = m2 > 1 ? arguments[1] : void 0, g2 = h2 !== void 0;
        g2 && (h2 = functionBindContext(h2, m2 > 2 ? arguments[2] : void 0));
        var M2, I2, S2, T2, C2, b2, E2 = getIteratorMethod$5(a2), k2 = 0;
        if (!E2 || this === Gl && isArrayIteratorMethod(E2))
          for (M2 = lengthOfArrayLike(a2), I2 = u2 ? new this(M2) : Gl(M2); M2 > k2; k2++)
            b2 = g2 ? h2(a2[k2], k2) : a2[k2], createProperty(I2, k2, b2);
        else
          for (C2 = (T2 = getIterator(a2, E2)).next, I2 = u2 ? new this() : []; !(S2 = N(C2, T2)).done; k2++)
            b2 = g2 ? callWithSafeIterationClosing(T2, h2, [S2.value, k2], true) : S2.value, createProperty(I2, k2, b2);
        return I2.length = k2, I2;
      } });
      var jl = j.Array.from, $l = getIteratorMethod$5;
      function _createForOfIteratorHelperLoose$b(t2, a2) {
        var u2, m2 = es !== void 0 && $l(t2) || t2["@@iterator"];
        if (m2)
          return bind$1(u2 = (m2 = m2.call(t2)).next).call(u2, m2);
        if (Dn(t2) || (m2 = function _unsupportedIterableToArray$b(t3, a3) {
          if (t3) {
            var u3;
            if (typeof t3 == "string")
              return _arrayLikeToArray$b(t3, a3);
            var m3 = slice(u3 = {}.toString.call(t3)).call(u3, 8, -1);
            return m3 === "Object" && t3.constructor && (m3 = t3.constructor.name), m3 === "Map" || m3 === "Set" ? jl(t3) : m3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m3) ? _arrayLikeToArray$b(t3, a3) : void 0;
          }
        }(t2)) || a2 && t2 && typeof t2.length == "number") {
          m2 && (t2 = m2);
          var h2 = 0;
          return function() {
            return h2 >= t2.length ? { done: true } : { done: false, value: t2[h2++] };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _arrayLikeToArray$b(t2, a2) {
        (a2 == null || a2 > t2.length) && (a2 = t2.length);
        for (var u2 = 0, m2 = Array(a2); u2 < a2; u2++)
          m2[u2] = t2[u2];
        return m2;
      }
      var zl = function() {
        function TimerManager() {
          this.timerList = [], this.id = 1, this.timer = null, this.timeout = 0;
        }
        var t2 = TimerManager.prototype;
        return t2.addTimer = function addTimer(t3, a2, u2) {
          a2 === void 0 && (a2 = 0), u2 === void 0 && (u2 = 1);
          var m2 = new Date().getTime(), h2 = this.id;
          return this.timerList.push({ id: h2, loop: u2, count: 0, timeout: m2 + a2, interval: a2, callback: t3 }), this.id++, this.checkTimer(m2), h2;
        }, t2.checkTimer = function checkTimer(t3) {
          if (t3 === void 0 && (t3 = new Date().getTime()), this.removeFinished(), this.timerList.length !== 0 || this.timer == null) {
            for (var a2, u2, m2 = 0, h2 = _createForOfIteratorHelperLoose$b(this.timerList); !(a2 = h2()).done; ) {
              var g2 = a2.value;
              (m2 === 0 || m2 > g2.timeout) && (m2 = g2.timeout);
            }
            if (this.timerList.length !== 0) {
              if (this.timer === null || m2 < this.timeout || this.timeout < t3)
                this.timer = mo(bind$1(u2 = this.nowTime).call(u2, this), m2 - t3), this.timeout = m2;
            }
          }
        }, t2.nowTime = function nowTime() {
          for (var t3, nowTime2 = new Date().getTime(), a2 = _createForOfIteratorHelperLoose$b(this.timerList); !(t3 = a2()).done; ) {
            var u2 = t3.value;
            nowTime2 >= u2.timeout && (u2.callback(), u2.count++, u2.timeout = nowTime2 + u2.interval);
          }
          this.clerTime(), this.checkTimer(nowTime2);
        }, t2.clerTime = function clerTime() {
          this.timer !== null && (clearTimeout(this.timer), this.timer = null);
        }, t2.deleteTimer = function deleteTimer(t3) {
          for (var a2 = this.timerList.length - 1; a2 >= 0; a2--) {
            var u2;
            if (this.timerList[a2].id === t3)
              splice(u2 = this.timerList).call(u2, a2, 1);
          }
        }, t2.removeFinished = function removeFinished() {
          for (var t3 = this.timerList.length - 1; t3 >= 0; t3--) {
            var a2, u2 = this.timerList[t3];
            if (u2.loop >= 0 && u2.count >= u2.loop)
              splice(a2 = this.timerList).call(a2, t3, 1);
          }
        }, t2.destroy = function destroy() {
          this.clerTime(), this.timerList = [], this.id = 1, this.timer = null;
        }, TimerManager;
      }(), Wl = createCommonjsModule(function(t2) {
        function _typeof(a2) {
          return t2.exports = _typeof = typeof es == "function" && typeof ms == "symbol" ? function(t3) {
            return typeof t3;
          } : function(t3) {
            return t3 && typeof es == "function" && t3.constructor === es && t3 !== es.prototype ? "symbol" : typeof t3;
          }, t2.exports.__esModule = true, t2.exports.default = t2.exports, _typeof(a2);
        }
        t2.exports = _typeof, t2.exports.__esModule = true, t2.exports.default = t2.exports;
      }), Kl = createCommonjsModule(function(t2) {
        var a2 = Wl.default;
        function _regeneratorRuntime() {
          t2.exports = _regeneratorRuntime = function _regeneratorRuntime2() {
            return u2;
          }, t2.exports.__esModule = true, t2.exports.default = t2.exports;
          var u2 = {}, m2 = Object.prototype, h2 = m2.hasOwnProperty, g2 = typeof es == "function" ? es : {}, M2 = g2.iterator || "@@iterator", I2 = g2.asyncIterator || "@@asyncIterator", S2 = g2.toStringTag || "@@toStringTag";
          function define2(t3, a3, u3) {
            return Ke(t3, a3, { value: u3, enumerable: true, configurable: true, writable: true }), t3[a3];
          }
          try {
            define2({}, "");
          } catch (t3) {
            define2 = function define3(t4, a3, u3) {
              return t4[a3] = u3;
            };
          }
          function wrap2(t3, a3, u3, m3) {
            var h3 = a3 && a3.prototype instanceof Generator ? a3 : Generator, g3 = ft(h3.prototype), M3 = new Context(m3 || []);
            return g3._invoke = function(t4, a4, u4) {
              var m4 = "suspendedStart";
              return function(h4, g4) {
                if (m4 === "executing")
                  throw new Error("Generator is already running");
                if (m4 === "completed") {
                  if (h4 === "throw")
                    throw g4;
                  return doneResult();
                }
                for (u4.method = h4, u4.arg = g4; ; ) {
                  var M4 = u4.delegate;
                  if (M4) {
                    var I3 = maybeInvokeDelegate(M4, u4);
                    if (I3) {
                      if (I3 === T2)
                        continue;
                      return I3;
                    }
                  }
                  if (u4.method === "next")
                    u4.sent = u4._sent = u4.arg;
                  else if (u4.method === "throw") {
                    if (m4 === "suspendedStart")
                      throw m4 = "completed", u4.arg;
                    u4.dispatchException(u4.arg);
                  } else
                    u4.method === "return" && u4.abrupt("return", u4.arg);
                  m4 = "executing";
                  var S3 = tryCatch(t4, a4, u4);
                  if (S3.type === "normal") {
                    if (m4 = u4.done ? "completed" : "suspendedYield", S3.arg === T2)
                      continue;
                    return { value: S3.arg, done: u4.done };
                  }
                  S3.type === "throw" && (m4 = "completed", u4.method = "throw", u4.arg = S3.arg);
                }
              };
            }(t3, u3, M3), g3;
          }
          function tryCatch(t3, a3, u3) {
            try {
              return { type: "normal", arg: t3.call(a3, u3) };
            } catch (t4) {
              return { type: "throw", arg: t4 };
            }
          }
          u2.wrap = wrap2;
          var T2 = {};
          function Generator() {
          }
          function GeneratorFunction() {
          }
          function GeneratorFunctionPrototype() {
          }
          var C2 = {};
          define2(C2, M2, function() {
            return this;
          });
          var b2 = rs && rs(rs(values2([])));
          b2 && b2 !== m2 && h2.call(b2, M2) && (C2 = b2);
          var E2 = GeneratorFunctionPrototype.prototype = Generator.prototype = ft(C2);
          function defineIteratorMethods(t3) {
            var a3;
            forEach$1(a3 = ["next", "throw", "return"]).call(a3, function(a4) {
              define2(t3, a4, function(t4) {
                return this._invoke(a4, t4);
              });
            });
          }
          function AsyncIterator(t3, u3) {
            function invoke(m4, g3, M3, I3) {
              var S3 = tryCatch(t3[m4], t3, g3);
              if (S3.type !== "throw") {
                var T3 = S3.arg, C3 = T3.value;
                return C3 && a2(C3) == "object" && h2.call(C3, "__await") ? u3.resolve(C3.__await).then(function(t4) {
                  invoke("next", t4, M3, I3);
                }, function(t4) {
                  invoke("throw", t4, M3, I3);
                }) : u3.resolve(C3).then(function(t4) {
                  T3.value = t4, M3(T3);
                }, function(t4) {
                  return invoke("throw", t4, M3, I3);
                });
              }
              I3(S3.arg);
            }
            var m3;
            this._invoke = function(t4, a3) {
              function callInvokeWithMethodAndArg() {
                return new u3(function(u4, m4) {
                  invoke(t4, a3, u4, m4);
                });
              }
              return m3 = m3 ? m3.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
            };
          }
          function maybeInvokeDelegate(t3, a3) {
            var u3 = t3.iterator[a3.method];
            if (u3 === void 0) {
              if (a3.delegate = null, a3.method === "throw") {
                if (t3.iterator.return && (a3.method = "return", a3.arg = void 0, maybeInvokeDelegate(t3, a3), a3.method === "throw"))
                  return T2;
                a3.method = "throw", a3.arg = new TypeError("The iterator does not provide a 'throw' method");
              }
              return T2;
            }
            var m3 = tryCatch(u3, t3.iterator, a3.arg);
            if (m3.type === "throw")
              return a3.method = "throw", a3.arg = m3.arg, a3.delegate = null, T2;
            var h3 = m3.arg;
            return h3 ? h3.done ? (a3[t3.resultName] = h3.value, a3.next = t3.nextLoc, a3.method !== "return" && (a3.method = "next", a3.arg = void 0), a3.delegate = null, T2) : h3 : (a3.method = "throw", a3.arg = new TypeError("iterator result is not an object"), a3.delegate = null, T2);
          }
          function pushTryEntry(t3) {
            var a3 = { tryLoc: t3[0] };
            1 in t3 && (a3.catchLoc = t3[1]), 2 in t3 && (a3.finallyLoc = t3[2], a3.afterLoc = t3[3]), this.tryEntries.push(a3);
          }
          function resetTryEntry(t3) {
            var a3 = t3.completion || {};
            a3.type = "normal", delete a3.arg, t3.completion = a3;
          }
          function Context(t3) {
            this.tryEntries = [{ tryLoc: "root" }], forEach$1(t3).call(t3, pushTryEntry, this), this.reset(true);
          }
          function values2(t3) {
            if (t3) {
              var a3 = t3[M2];
              if (a3)
                return a3.call(t3);
              if (typeof t3.next == "function")
                return t3;
              if (!isNaN(t3.length)) {
                var u3 = -1, m3 = function next() {
                  for (; ++u3 < t3.length; )
                    if (h2.call(t3, u3))
                      return next.value = t3[u3], next.done = false, next;
                  return next.value = void 0, next.done = true, next;
                };
                return m3.next = m3;
              }
            }
            return { next: doneResult };
          }
          function doneResult() {
            return { value: void 0, done: true };
          }
          return GeneratorFunction.prototype = GeneratorFunctionPrototype, define2(E2, "constructor", GeneratorFunctionPrototype), define2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, S2, "GeneratorFunction"), u2.isGeneratorFunction = function(t3) {
            var a3 = typeof t3 == "function" && t3.constructor;
            return !!a3 && (a3 === GeneratorFunction || (a3.displayName || a3.name) === "GeneratorFunction");
          }, u2.mark = function(t3) {
            return It ? It(t3, GeneratorFunctionPrototype) : (t3.__proto__ = GeneratorFunctionPrototype, define2(t3, S2, "GeneratorFunction")), t3.prototype = ft(E2), t3;
          }, u2.awrap = function(t3) {
            return { __await: t3 };
          }, defineIteratorMethods(AsyncIterator.prototype), define2(AsyncIterator.prototype, I2, function() {
            return this;
          }), u2.AsyncIterator = AsyncIterator, u2.async = function(t3, a3, m3, h3, g3) {
            g3 === void 0 && (g3 = zi);
            var M3 = new AsyncIterator(wrap2(t3, a3, m3, h3), g3);
            return u2.isGeneratorFunction(a3) ? M3 : M3.next().then(function(t4) {
              return t4.done ? t4.value : M3.next();
            });
          }, defineIteratorMethods(E2), define2(E2, S2, "Generator"), define2(E2, M2, function() {
            return this;
          }), define2(E2, "toString", function() {
            return "[object Generator]";
          }), u2.keys = function(t3) {
            var a3 = [];
            for (var u3 in t3)
              a3.push(u3);
            return reverse$1(a3).call(a3), function next() {
              for (; a3.length; ) {
                var u4 = a3.pop();
                if (u4 in t3)
                  return next.value = u4, next.done = false, next;
              }
              return next.done = true, next;
            };
          }, u2.values = values2, Context.prototype = { constructor: Context, reset: function reset(t3) {
            var a3;
            if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, forEach$1(a3 = this.tryEntries).call(a3, resetTryEntry), !t3)
              for (var u3 in this)
                u3.charAt(0) === "t" && h2.call(this, u3) && !isNaN(+slice(u3).call(u3, 1)) && (this[u3] = void 0);
          }, stop: function stop() {
            this.done = true;
            var t3 = this.tryEntries[0].completion;
            if (t3.type === "throw")
              throw t3.arg;
            return this.rval;
          }, dispatchException: function dispatchException(t3) {
            if (this.done)
              throw t3;
            var a3 = this;
            function handle(u4, m4) {
              return g3.type = "throw", g3.arg = t3, a3.next = u4, m4 && (a3.method = "next", a3.arg = void 0), !!m4;
            }
            for (var u3 = this.tryEntries.length - 1; u3 >= 0; --u3) {
              var m3 = this.tryEntries[u3], g3 = m3.completion;
              if (m3.tryLoc === "root")
                return handle("end");
              if (m3.tryLoc <= this.prev) {
                var M3 = h2.call(m3, "catchLoc"), I3 = h2.call(m3, "finallyLoc");
                if (M3 && I3) {
                  if (this.prev < m3.catchLoc)
                    return handle(m3.catchLoc, true);
                  if (this.prev < m3.finallyLoc)
                    return handle(m3.finallyLoc);
                } else if (M3) {
                  if (this.prev < m3.catchLoc)
                    return handle(m3.catchLoc, true);
                } else {
                  if (!I3)
                    throw new Error("try statement without catch or finally");
                  if (this.prev < m3.finallyLoc)
                    return handle(m3.finallyLoc);
                }
              }
            }
          }, abrupt: function abrupt(t3, a3) {
            for (var u3 = this.tryEntries.length - 1; u3 >= 0; --u3) {
              var m3 = this.tryEntries[u3];
              if (m3.tryLoc <= this.prev && h2.call(m3, "finallyLoc") && this.prev < m3.finallyLoc) {
                var g3 = m3;
                break;
              }
            }
            g3 && (t3 === "break" || t3 === "continue") && g3.tryLoc <= a3 && a3 <= g3.finallyLoc && (g3 = null);
            var M3 = g3 ? g3.completion : {};
            return M3.type = t3, M3.arg = a3, g3 ? (this.method = "next", this.next = g3.finallyLoc, T2) : this.complete(M3);
          }, complete: function complete(t3, a3) {
            if (t3.type === "throw")
              throw t3.arg;
            return t3.type === "break" || t3.type === "continue" ? this.next = t3.arg : t3.type === "return" ? (this.rval = this.arg = t3.arg, this.method = "return", this.next = "end") : t3.type === "normal" && a3 && (this.next = a3), T2;
          }, finish: function finish(t3) {
            for (var a3 = this.tryEntries.length - 1; a3 >= 0; --a3) {
              var u3 = this.tryEntries[a3];
              if (u3.finallyLoc === t3)
                return this.complete(u3.completion, u3.afterLoc), resetTryEntry(u3), T2;
            }
          }, catch: function _catch(t3) {
            for (var a3 = this.tryEntries.length - 1; a3 >= 0; --a3) {
              var u3 = this.tryEntries[a3];
              if (u3.tryLoc === t3) {
                var m3 = u3.completion;
                if (m3.type === "throw") {
                  var h3 = m3.arg;
                  resetTryEntry(u3);
                }
                return h3;
              }
            }
            throw new Error("illegal catch attempt");
          }, delegateYield: function delegateYield(t3, a3, u3) {
            return this.delegate = { iterator: values2(t3), resultName: a3, nextLoc: u3 }, this.method === "next" && (this.arg = void 0), T2;
          } }, u2;
        }
        t2.exports = _regeneratorRuntime, t2.exports.__esModule = true, t2.exports.default = t2.exports;
      }), Yl = Kl(), Ql = Yl;
      try {
        regeneratorRuntime = Yl;
      } catch (t2) {
        typeof globalThis == "object" ? globalThis.regeneratorRuntime = Yl : Function("r", "regeneratorRuntime = r")(Yl);
      }
      function __rest(t2, a2) {
        var u2 = {};
        for (var m2 in t2)
          Object.prototype.hasOwnProperty.call(t2, m2) && a2.indexOf(m2) < 0 && (u2[m2] = t2[m2]);
        if (t2 != null && typeof Object.getOwnPropertySymbols == "function") {
          var h2 = 0;
          for (m2 = Object.getOwnPropertySymbols(t2); h2 < m2.length; h2++)
            a2.indexOf(m2[h2]) < 0 && Object.prototype.propertyIsEnumerable.call(t2, m2[h2]) && (u2[m2[h2]] = t2[m2[h2]]);
        }
        return u2;
      }
      function __awaiter(t2, a2, u2, m2) {
        return new (u2 || (u2 = Promise))(function(h2, g2) {
          function fulfilled(t3) {
            try {
              step(m2.next(t3));
            } catch (t4) {
              g2(t4);
            }
          }
          function rejected(t3) {
            try {
              step(m2.throw(t3));
            } catch (t4) {
              g2(t4);
            }
          }
          function step(t3) {
            t3.done ? h2(t3.value) : function adopt(t4) {
              return t4 instanceof u2 ? t4 : new u2(function(a3) {
                a3(t4);
              });
            }(t3.value).then(fulfilled, rejected);
          }
          step((m2 = m2.apply(t2, a2 || [])).next());
        });
      }
      function isPlainObject(t2) {
        return t2 != null && typeof t2 == "object" && rs(t2) == Object.prototype;
      }
      function merge$1(t2, a2) {
        var u2 = isPlainObject(t2) || Dn(t2), m2 = isPlainObject(a2) || Dn(a2);
        if (u2 && m2) {
          for (var h2 in a2) {
            var g2 = merge$1(t2[h2], a2[h2]);
            g2 !== void 0 && (t2[h2] = g2);
          }
          return t2;
        }
        return a2;
      }
      var Jl = { setLogger: function setLogger2(t2) {
        throw new Error("setLogger not implemented.");
      }, platform: "", WebSocket: function() {
        function AdapterSocket(t3, a2) {
          throw this.CONNECTING = 0, this.OPEN = 1, this.CLOSING = 2, this.CLOSED = 3, this.binaryType = "", new Error("Method not implemented.");
        }
        var t2 = AdapterSocket.prototype;
        return t2.close = function close(t3, a2) {
          throw new Error("Method not implemented.");
        }, t2.send = function send(t3) {
          throw new Error("Method not implemented.");
        }, t2.onclose = function onclose(t3) {
          throw new Error("Method not implemented.");
        }, t2.onerror = function onerror(t3) {
          throw new Error("Method not implemented.");
        }, t2.onmessage = function onmessage(t3) {
          throw new Error("Method not implemented.");
        }, t2.onopen = function onopen(t3) {
          throw new Error("Method not implemented.");
        }, AdapterSocket;
      }(), localStorage: {}, request: function request(t2, a2) {
        throw new Error("request not implemented.");
      }, uploadFile: function uploadFile(t2) {
        throw new Error("uploadFile not implemented.");
      }, getSystemInfo: function getSystemInfo() {
        throw new Error("getSystemInfo not implemented.");
      }, getFileUploadInformation: function getFileUploadInformation(t2) {
        throw new Error("getFileUploadInformation not implemented.");
      }, envPayload: {}, net: { getNetworkStatus: function getNetworkStatus() {
        return zi.resolve({ net_type: 0, net_connect: true });
      }, onNetworkStatusChange: function onNetworkStatusChange(t2) {
      }, offNetworkStatusChange: function offNetworkStatusChange() {
      } }, logStorage: function() {
        function AdapterLogStorageImpl(t3) {
        }
        var t2 = AdapterLogStorageImpl.prototype;
        return t2.open = function open() {
          return zi.resolve();
        }, t2.close = function close() {
        }, t2.addLogs = function addLogs(t3) {
          return zi.resolve();
        }, t2.extractLogs = function extractLogs() {
          return zi.resolve();
        }, AdapterLogStorageImpl;
      }() };
      var Xl = ["error", "warn", "log", "debug"], Zl = function emptyFunc2() {
      }, eu = ["off", "error", "warn", "log", "debug"], tu = function() {
        function Logger(t3, a2) {
          a2 === void 0 && (a2 = {}), this.storageArr = [], this.debugLevel = "off", this.timer = 0, this.strategies = { debug: { name: "debg", func: console.log }, log: { name: "info", func: console.log }, warn: { name: "warn", func: console.warn }, error: { name: "erro", func: console.error } }, this.debug = Zl, this.log = Zl, this.warn = Zl, this.error = Zl, this.iid = Math.round(1e3 * Math.random()), this.debugLevel = includes(eu).call(eu, t3) ? t3 : "off", a2.debugLevel && (this.debugLevel = includes(eu).call(eu, a2.debugLevel) ? a2.debugLevel : this.debugLevel), this.logStorage = a2.storageEnable === false ? null : new Jl.logStorage(a2 == null ? void 0 : a2.storageName), this.setOptions(a2), this.setLogFunc(this.debugLevel), this.setTimer(), this.open();
        }
        var t2 = Logger.prototype;
        return t2.getDebugMode = function getDebugMode() {
          return this.debugLevel === "debug";
        }, t2.open = function open(t3) {
          var a2 = this;
          this.logStorage && this.logStorage.open(t3).then(function() {
            a2.log("Logger::open success");
          }).catch(function(t4) {
            a2.warn("Logger::open failed", t4);
          });
        }, t2.setOptions = function setOptions(t3) {
          if (t3 && t3.logFunc) {
            var a2 = t3.logFunc;
            for (var u2 in a2) {
              var m2 = u2, h2 = a2[m2];
              h2 && (this.strategies[m2].func = h2);
            }
          }
        }, t2.setLogFunc = function setLogFunc(t3, a2) {
          var u2 = this;
          a2 === void 0 && (a2 = "log");
          var m2 = findIndex$1(Xl).call(Xl, function(a3) {
            return a3 === t3;
          }), h2 = findIndex$1(Xl).call(Xl, function(t4) {
            return t4 === a2;
          });
          forEach$1(Xl).call(Xl, function(t4, a3) {
            u2[t4] = function() {
              if (!(a3 > m2 && a3 > h2)) {
                var u3 = slice(Array.prototype).call(arguments), g2 = this.strategies[t4], M2 = this.formatArgs(u3, g2.name);
                a3 <= h2 && this.logStorage && this.prepareSaveLog(M2, t4), a3 <= m2 && g2.func(M2);
              }
            };
          });
        }, t2.extractLogs = function extractLogs() {
          var t3;
          return this.logStorage ? (t3 = this.logStorage) === null || t3 === void 0 ? void 0 : t3.extractLogs() : zi.resolve("");
        }, t2.prepareSaveLog = function prepareSaveLog(t3, a2) {
          this.storageArr.push({ text: t3, level: a2, time: to(), iid: this.iid }), this.timer || this.setTimer(), this.storageArr.length >= 100 && (this.triggerTimer(), this.storageArr = []);
        }, t2.saveLogs = function saveLogs() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var t3;
            return Ql.wrap(function _callee$(a2) {
              for (; ; )
                switch (a2.prev = a2.next) {
                  case 0:
                    if (this.logStorage) {
                      a2.next = 2;
                      break;
                    }
                    return a2.abrupt("return");
                  case 2:
                    return t3 = this.storageArr, this.storageArr = [], a2.prev = 4, a2.next = 7, this.logStorage.addLogs(t3);
                  case 7:
                    a2.next = 11;
                    break;
                  case 9:
                    a2.prev = 9, a2.t0 = a2.catch(4);
                  case 11:
                  case "end":
                    return a2.stop();
                }
            }, _callee, this, [[4, 9]]);
          }));
        }, t2.clearTimer = function clearTimer() {
          this.timer && clearTimeout(this.timer), this.timer = 0;
        }, t2.setTimer = function setTimer() {
          var t3;
          this.clearTimer(), this.timer = mo(bind$1(t3 = this.triggerTimer).call(t3, this), 5e3);
        }, t2.triggerTimer = function triggerTimer() {
          this.clearTimer(), this.saveLogs();
        }, t2.formatArgs = function formatArgs(t3, a2) {
          var u2 = new Date();
          return "[NIM " + this.iid + " " + a2 + " " + (u2.getMonth() + 1 + "-" + u2.getDate() + " " + u2.getHours() + ":" + u2.getMinutes() + ":" + u2.getSeconds() + ":" + u2.getMilliseconds()) + "] " + map$6(t3).call(t3, function(t4) {
            return t4 instanceof Pl ? t4.toString() : t4 instanceof Error ? t4 && t4.message ? t4.message : t4 : typeof t4 == "object" ? Un(t4) : t4;
          }).join(" ");
        }, t2.destroy = function destroy() {
          this.debug = Zl, this.log = Zl, this.warn = Zl, this.error = Zl, this.saveLogs(), this.clearTimer(), this.storageArr = [], this.logStorage && this.logStorage.close();
        }, Logger;
      }(), ru = Math.min, nu = [].lastIndexOf, au = !!nu && 1 / [1].lastIndexOf(1, -0) < 0, iu = arrayMethodIsStrict("lastIndexOf"), ou = au || !iu ? function lastIndexOf2(t2) {
        if (au)
          return T(nu, this, arguments) || 0;
        var a2 = toIndexedObject(this), u2 = lengthOfArrayLike(a2), m2 = u2 - 1;
        for (arguments.length > 1 && (m2 = ru(m2, toIntegerOrInfinity(arguments[1]))), m2 < 0 && (m2 = u2 + m2); m2 >= 0; m2--)
          if (m2 in a2 && a2[m2] === t2)
            return m2 || 0;
        return -1;
      } : nu;
      _export({ target: "Array", proto: true, forced: ou !== [].lastIndexOf }, { lastIndexOf: ou });
      var su, cu = entryVirtual("Array").lastIndexOf, lu = Array.prototype, lastIndexOf = function(t2) {
        var a2 = t2.lastIndexOf;
        return t2 === lu || $(lu, t2) && a2 === lu.lastIndexOf ? cu : a2;
      }, uu = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF", du = w("".replace), pu = "[" + uu + "]", mu = RegExp("^" + pu + pu + "*"), hu = RegExp(pu + pu + "*$"), createMethod = function(t2) {
        return function(a2) {
          var u2 = toString(requireObjectCoercible(a2));
          return 1 & t2 && (u2 = du(u2, mu, "")), 2 & t2 && (u2 = du(u2, hu, "")), u2;
        };
      }, gu = { start: createMethod(1), end: createMethod(2), trim: createMethod(3) }, vu = cr.PROPER, fu = gu.trim;
      _export({ target: "String", proto: true, forced: (su = "trim", fails(function() {
        return !!uu[su]() || "\u200B\x85\u180E"[su]() !== "\u200B\x85\u180E" || vu && uu[su].name !== su;
      })) }, { trim: function trim() {
        return fu(this);
      } });
      var yu = entryVirtual("String").trim, _u = String.prototype, trim$2 = function(t2) {
        var a2 = t2.trim;
        return typeof t2 == "string" || t2 === _u || $(_u, t2) && a2 === _u.trim ? yu : a2;
      };
      var Mu, Iu = (Mu = function _s4() {
        return (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
      }, function() {
        return Mu() + Mu() + Mu() + Mu() + Mu() + Mu() + Mu() + Mu();
      });
      function getEnumKeys(t2) {
        var a2;
        return filter(a2 = Ht(t2)).call(a2, function(t3) {
          return !(+t3 >= 0);
        });
      }
      function getEnumKeyByEnumValue(t2, a2) {
        var u2, m2 = filter(u2 = Ht(t2)).call(u2, function(u3) {
          return t2[u3] == a2;
        });
        return m2.length > 0 ? m2[0] : void 0;
      }
      function getAccountFromSessionId(t2, a2) {
        if (a2 === void 0 && (a2 = "-"), !t2)
          throw new ql("No sessionId", {}, 400);
        var u2 = indexOf(t2).call(t2, a2);
        if (u2 === -1)
          throw new ql("Can not find conjunctions", {}, 400);
        var m2 = slice(t2).call(t2, 0, u2);
        return { accid: slice(t2).call(t2, u2 + 1), scene: m2 === "super_team" ? "superTeam" : m2 };
      }
      function getMiniappEnv() {
        return typeof tt != "undefined" && tt.getSystemInfo ? "TT" : typeof swan != "undefined" && swan.getSystemInfo ? "BAIDU" : typeof my != "undefined" && my.getSystemInfo ? "ALI" : typeof wx != "undefined" && wx.getSystemInfo ? "WX" : "unknow environment";
      }
      function assignOptions(t2, a2) {
        return function assignWith(t3, a3, u2, m2) {
          for (var h2 in t3 = t3 || {}, u2 = u2 || {}, m2 = m2 || function() {
          }, a3 = a3 || {}) {
            var g2 = m2(t3[h2], a3[h2]);
            t3[h2] = g2 === void 0 ? a3[h2] : g2;
          }
          for (var M2 in u2) {
            var I2 = m2(t3[M2], u2[M2]);
            t3[M2] = I2 === void 0 ? u2[M2] : I2;
          }
          return t3;
        }({}, t2, a2, function(t3, a3) {
          return a3 === void 0 ? t3 : a3;
        });
      }
      function emptyFuncWithPromise() {
        return zi.resolve();
      }
      function emptyFunc() {
      }
      function getFileExtension(t2) {
        var a2 = lastIndexOf(t2).call(t2, "."), u2 = a2 > -1 ? slice(t2).call(t2, a2 + 1) : "";
        return /^\d+$/.test(trim$2(u2).call(u2)) && (u2 = ""), u2;
      }
      function findIndexWithinTargetValue(t2, a2, u2) {
        return t2.length === 0 || t2[0][a2] <= u2 ? 0 : t2[t2.length - 1][a2] > u2 ? t2.length : findIndex$1(t2).call(t2, function(m2, h2) {
          if (t2[h2 - 1] && t2[h2 - 1][a2] > u2 && u2 >= m2[a2])
            return true;
        });
      }
      var Su = function() {
        function CoreAdapters(t3) {
          this.lastSuccUploadHost = "", this.core = t3;
        }
        var t2 = CoreAdapters.prototype;
        return t2.getFileUploadInformation = function getFileUploadInformation(t3) {
          return Jl.getFileUploadInformation(t3);
        }, t2.request = function request(t3, a2, u2) {
          var m2 = this, h2 = new Date().getTime(), g2 = (u2 == null ? void 0 : u2.exception_service) || 0;
          return Jl.request(t3, a2).catch(function(u3) {
            var M2, I2, S2, T2, C2 = u3;
            throw m2.core.reporter.reportTraceStart("exceptions", { user_id: m2.core.options.account || ((I2 = (M2 = m2.core) === null || M2 === void 0 ? void 0 : M2.auth) === null || I2 === void 0 ? void 0 : I2.account), trace_id: (T2 = (S2 = m2.core.clientSocket) === null || S2 === void 0 ? void 0 : S2.socket) === null || T2 === void 0 ? void 0 : T2.sessionId, start_time: h2, action: 1, exception_service: g2 }), m2.core.reporter.reportTraceUpdateV2("exceptions", { code: typeof C2.code == "number" ? C2.code : 0, description: C2.message || "" + C2.code, operation_type: 0, target: t3, context: a2 ? Un(a2) : "" }, { asyncParams: Jl.net.getNetworkStatus() }), m2.core.reporter.reportTraceEnd("exceptions", 1), u3;
          });
        }, t2.uploadFile = function uploadFile(t3) {
          var a2, u2, m2, h2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var g2, M2, I2, S2, T2, C2, b2, E2, k2, w2, R2, A2, N2, x2;
            return Ql.wrap(function _callee$(O2) {
              for (; ; )
                switch (O2.prev = O2.next) {
                  case 0:
                    I2 = Jl.platform === "BROWSER", S2 = I2 ? t3.chunkUploadHostBackupList : t3.commonUploadHostBackupList, T2 = I2 ? t3.chunkUploadHost : t3.commonUploadHost, C2 = indexOf(S2).call(S2, T2), b2 = C2 === -1 ? concat(g2 = [T2]).call(g2, S2) : concat(M2 = [T2]).call(M2, slice(S2).call(S2, 0, C2), slice(S2).call(S2, C2 + 1)), E2 = Math.max(indexOf(b2).call(b2, this.lastSuccUploadHost), 0), k2 = null, w2 = 0;
                  case 8:
                    if (!(w2 < b2.length)) {
                      O2.next = 32;
                      break;
                    }
                    return R2 = new Date().getTime(), A2 = b2[(w2 + E2) % b2.length], O2.prev = 11, O2.next = 14, Jl.uploadFile(Dt(Dt({}, t3), I2 ? { chunkUploadHost: A2 } : { commonUploadHost: A2 }));
                  case 14:
                    return N2 = O2.sent, this.lastSuccUploadHost = A2, O2.abrupt("return", N2);
                  case 19:
                    if (O2.prev = 19, O2.t0 = O2.catch(11), this.core.cloudStorage.nos.nosErrorCount--, k2 = O2.t0, x2 = O2.t0, this.core.reporter.reportTraceStart("exceptions", { user_id: this.core.options.account || ((u2 = (a2 = this.core) === null || a2 === void 0 ? void 0 : a2.auth) === null || u2 === void 0 ? void 0 : u2.account), trace_id: (h2 = (m2 = this.core.clientSocket) === null || m2 === void 0 ? void 0 : m2.socket) === null || h2 === void 0 ? void 0 : h2.sessionId, start_time: R2, action: 1, exception_service: 3 }), this.core.reporter.reportTraceUpdateV2("exceptions", { code: typeof x2.code == "number" ? x2.code : 0, description: x2.message || "" + x2.code, operation_type: 1, target: A2 }, { asyncParams: Jl.net.getNetworkStatus() }), this.core.reporter.reportTraceEnd("exceptions", 1), !O2.t0 || O2.t0.code !== Nl.V2NIM_ERROR_CODE_CANCELLED && O2.t0.errCode !== 10499) {
                      O2.next = 29;
                      break;
                    }
                    throw O2.t0;
                  case 29:
                    w2++, O2.next = 8;
                    break;
                  case 32:
                    throw k2;
                  case 33:
                  case "end":
                    return O2.stop();
                }
            }, _callee, this, [[11, 19]]);
          }));
        }, CoreAdapters;
      }(), Tu = "weblink.netease.im:443", Cu = ["https://lbs.netease.im/lbs/webconf.jsp"], bu = "https://abt-online.netease.im/v1/api/abt/client/getExperimentInfo", Eu = "imElite_sdk_abtest_web", ku = "https://statistic.live.126.net,https://statistic-overseas.yunxinfw.com", wu = function() {
        function ABTest(t3, a2) {
          this.abtInfo = {}, this.core = t3, this.config = assignOptions({ isAbtestEnable: true, abtestUrl: bu, abtestProjectKey: Eu }, a2);
        }
        var t2 = ABTest.prototype;
        return t2.setOptions = function setOptions(t3) {
          this.config = assignOptions(this.config, t3);
        }, t2.abtRequest = function abtRequest() {
          var t3, a2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2;
            return Ql.wrap(function _callee$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    if (this.config.isAbtestEnable) {
                      m2.next = 2;
                      break;
                    }
                    return m2.abrupt("return");
                  case 2:
                    if (!this.abtInfo.experiments) {
                      m2.next = 4;
                      break;
                    }
                    return m2.abrupt("return");
                  case 4:
                    if (this.config.abtestUrl) {
                      m2.next = 6;
                      break;
                    }
                    return m2.abrupt("return");
                  case 6:
                    return m2.prev = 6, m2.next = 9, this.core.adapters.request(this.config.abtestUrl, { method: "POST", dataType: "json", headers: { sdktype: "ABTest" }, data: { clientInfo: { projectKey: this.config.abtestProjectKey, appKey: this.core.options.appkey, osType: "Web", sdkVersion: "10.7.0", deviceId: this.core.config.deviceId }, useLocalCache: true } }, { exception_service: 7 });
                  case 9:
                    u2 = m2.sent, m2.next = 15;
                    break;
                  case 12:
                    m2.prev = 12, m2.t0 = m2.catch(6), this.core.logger.warn("ABTest request failed");
                  case 15:
                    this.abtInfo = ((a2 = (t3 = u2 == null ? void 0 : u2.data) === null || t3 === void 0 ? void 0 : t3.data) === null || a2 === void 0 ? void 0 : a2.abtInfo) || {};
                  case 16:
                  case "end":
                    return m2.stop();
                }
            }, _callee, this, [[6, 12]]);
          }));
        }, ABTest;
      }();
      function getPromiseWithAbort(t2) {
        var a2 = {}, u2 = new zi(function(t3, u3) {
          a2.abort = u3;
        });
        return a2.promise = zi.race([t2, u2]), a2;
      }
      zi.reject;
      var Ru = function() {
        function PromiseManager() {
          this.abortFns = [];
        }
        var t2 = PromiseManager.prototype;
        return t2.add = function add(t3) {
          var a2 = getPromiseWithAbort(t3);
          return this.abortFns.push(a2.abort), a2.promise;
        }, t2.clear = function clear(t3) {
          var a2;
          forEach$1(a2 = this.abortFns).call(a2, function(a3) {
            return a3(t3 || new Pl({ code: Nl.V2NIM_ERROR_CODE_CANCELLED, detail: { reason: "Aborted" } }));
          }), this.abortFns = [];
        }, t2.destroy = function destroy() {
          this.clear();
        }, PromiseManager;
      }(), Au = gu.trim, Nu = h.parseInt, xu = h.Symbol, Ou = xu && xu.iterator, Pu = /^[+-]?0x/i, Lu = w(Pu.exec), Vu = Nu(uu + "08") !== 8 || Nu(uu + "0x16") !== 22 || Ou && !fails(function() {
        Nu(Object(Ou));
      }) ? function parseInt2(t2, a2) {
        var u2 = Au(toString(t2));
        return Nu(u2, a2 >>> 0 || (Lu(Pu, u2) ? 16 : 10));
      } : Nu;
      _export({ global: true, forced: parseInt != Vu }, { parseInt: Vu });
      var Uu = j.parseInt;
      function get(t2, a2) {
        if (typeof t2 != "object" || t2 === null)
          return t2;
        for (var u2 = (a2 = a2 || "").split("."), m2 = 0; m2 < u2.length; m2++) {
          var h2 = u2[m2], g2 = t2[h2], M2 = indexOf(h2).call(h2, "["), I2 = indexOf(h2).call(h2, "]");
          if (M2 !== -1 && I2 !== -1 && M2 < I2) {
            var S2 = slice(h2).call(h2, 0, M2), T2 = Uu(slice(h2).call(h2, M2 + 1, I2));
            g2 = t2[S2], g2 = Dn(g2) ? g2[T2] : void 0;
          }
          if (g2 == null)
            return g2;
          t2 = g2;
        }
        return t2;
      }
      var Du = { tolerantRTT: 3e3, bestRTT: 100, maxChances: 5, enable: true }, qu = { timestamp: 0, rtt: 0, baseClock: 0, baseTime: 0 }, Bu = function() {
        function TimeOrigin(t3, a2, u2) {
          u2 === void 0 && (u2 = "getServerTime"), this.serverOrigin = qu, this.config = Du, this.isSettingNTP = false, this.currentChance = 0, this.failedDelay = 2e3, this.successDelay = 3e5, this.timer = 0, this.cmdName = "getServerTime", this.core = t3, this.logger = t3.logger, this.promiseManager = new Ru(), this.cmdName = u2, a2 && this.setOptions(a2);
        }
        var t2 = TimeOrigin.prototype;
        return t2.setOptions = function setOptions(t3) {
          this.config = Dt({}, Du, this.config, t3);
        }, t2.reset = function reset() {
          this.timer && clearTimeout(this.timer), this.promiseManager.clear(), this.serverOrigin = qu, this.currentChance = 0;
        }, t2.setOriginTimetick = function setOriginTimetick() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var t3, a2, u2, m2, h2, g2, M2, I2, S2, T2;
            return Ql.wrap(function _callee$(C2) {
              for (; ; )
                switch (C2.prev = C2.next) {
                  case 0:
                    if (this.config.enable) {
                      C2.next = 2;
                      break;
                    }
                    return C2.abrupt("return");
                  case 2:
                    if (!this.isSettingNTP) {
                      C2.next = 4;
                      break;
                    }
                    return C2.abrupt("return");
                  case 4:
                    if (!(this.currentChance >= this.config.maxChances)) {
                      C2.next = 6;
                      break;
                    }
                    return C2.abrupt("return");
                  case 6:
                    if (t3 = get(this.core, "auth.status"), a2 = get(this.core, "status"), u2 = get(this.core, "V2NIMLoginService.lifeCycle.loginStatus"), t3 === "logined" || a2 === "logined" || u2 === 1) {
                      C2.next = 11;
                      break;
                    }
                    return C2.abrupt("return");
                  case 11:
                    return this.isSettingNTP = true, this.currentChance++, this.timer && clearTimeout(this.timer), this.timer = 0, m2 = "TimeOrigin::setOriginTimetick:", h2 = to(), this.core.logger.debug(m2 + " getServerTime start, times " + this.currentChance), C2.prev = 18, C2.next = 21, this.promiseManager.add(this.core.sendCmd(this.cmdName));
                  case 21:
                    M2 = C2.sent, g2 = get(M2, "content.time"), this.isSettingNTP = false, C2.next = 33;
                    break;
                  case 26:
                    return C2.prev = 26, C2.t0 = C2.catch(18), I2 = C2.t0, this.isSettingNTP = false, this.logger.warn(m2 + " Calculate Delay time, getServerTime error", I2), I2.code !== Nl.V2NIM_ERROR_CODE_CANCELLED && (this.timer = mo(bind$1(S2 = this.setOriginTimetick).call(S2, this), this.failedDelay)), C2.abrupt("return");
                  case 33:
                    if (g2) {
                      C2.next = 37;
                      break;
                    }
                    return this.core.logger.warn(m2 + " Calculate Delay time incorrect format"), this.config.enable = false, C2.abrupt("return");
                  case 37:
                    T2 = to() - h2, this.doSet(g2, T2);
                  case 39:
                  case "end":
                    return C2.stop();
                }
            }, _callee, this, [[18, 26]]);
          }));
        }, t2.doSet = function doSet(t3, a2) {
          var u2, m2 = "TimeOrigin::setOriginTimetick:";
          if (a2 > this.config.tolerantRTT)
            this.logger.warn(m2 + " Denied, cause of exceeding the maximum tolerance range of RTT: " + a2), this.timer = mo(bind$1(u2 = this.setOriginTimetick).call(u2, this), this.failedDelay);
          else if (a2 > this.config.bestRTT) {
            var h2;
            this.serverOrigin.rtt && a2 >= this.serverOrigin.rtt ? this.logger.warn(m2 + " Denied, cause of current.RTT >= serverOrigin.RTT: " + a2) : (this.setServerOrigin(a2, t3), this.logger.log(m2 + " Accept within maximum tolerance range of RTT: " + a2 + ", ntpTimestamp: " + this.serverOrigin.timestamp + ", localClock: " + this.serverOrigin.baseClock + ", localTime: " + this.serverOrigin.baseTime)), this.timer = mo(bind$1(h2 = this.setOriginTimetick).call(h2, this), this.failedDelay);
          } else {
            var g2;
            this.setServerOrigin(a2, t3), this.logger.debug(m2 + " Accept within best RTT: " + a2 + ", ntpTimestamp: " + this.serverOrigin.timestamp + ", localClock: " + this.serverOrigin.baseClock + ", localTime: " + this.serverOrigin.baseTime), this.currentChance = 0, this.timer = mo(bind$1(g2 = this.setOriginTimetick).call(g2, this), this.successDelay);
          }
        }, t2.getNTPTime = function getNTPTime(t3) {
          if (t3 === void 0 && (t3 = this.getTimeNode()), this.checkNodeReliable(t3)) {
            var a2 = Math.floor(t3.time - this.serverOrigin.baseTime);
            return this.serverOrigin.timestamp + a2;
          }
          return to();
        }, t2.checkNodeReliable = function checkNodeReliable(t3) {
          if (t3 === void 0 && (t3 = this.getTimeNode()), this.serverOrigin.timestamp) {
            if (this.serverOrigin.baseClock === 0)
              return true;
            var a2 = t3.clock - this.serverOrigin.baseClock, u2 = t3.time - this.serverOrigin.baseTime;
            return Math.abs(u2 - a2) < 500;
          }
          return false;
        }, t2.checkPerformance = function checkPerformance() {
          return Jl.platform === "BROWSER" && !(typeof performance == "undefined" || !performance.now);
        }, TimeOrigin.checkPerformance = function checkPerformance() {
          return Jl.platform === "BROWSER" && !(typeof performance == "undefined" || !performance.now);
        }, t2.getTimeNode = function getTimeNode() {
          return { clock: this.checkPerformance() ? performance.now() : 0, time: to() };
        }, TimeOrigin.getTimeNode = function getTimeNode() {
          return { clock: TimeOrigin.checkPerformance() ? performance.now() : 0, time: to() };
        }, t2.setServerOrigin = function setServerOrigin(t3, a2) {
          this.serverOrigin = { timestamp: a2 + Math.floor(t3 / 2), rtt: t3, baseClock: this.checkPerformance() ? performance.now() : 0, baseTime: to() };
        }, TimeOrigin;
      }(), Fu = { user_id: "", trace_id: "", action: 7, exception_service: 6, duration: 0, start_time: 0, state: 1, extension: [] }, Gu = function() {
        function ReporterHookLinkKeep(t3, a2) {
          this.traceData = Fu, this.core = t3, this.traceData = Dt({}, Fu, a2), this.traceData.extension = [];
        }
        var t2 = ReporterHookLinkKeep.prototype;
        return t2.reset = function reset() {
          this.traceData = Dt({}, Fu), this.traceData.extension = [];
        }, t2.start = function start() {
          var t3, a2;
          this.reset(), this.traceData.user_id = this.core.account, this.traceData.trace_id = ((a2 = (t3 = this.core.clientSocket) === null || t3 === void 0 ? void 0 : t3.socket) === null || a2 === void 0 ? void 0 : a2.sessionId) || "", this.traceData.start_time = new Date().getTime();
        }, t2.update = function update(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a2, u2, m2;
            return Ql.wrap(function _callee$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return h2.next = 2, Jl.net.getNetworkStatus();
                  case 2:
                    a2 = h2.sent, u2 = a2.net_type, m2 = a2.net_connect, this.traceData.extension.push(Dt({ code: 0, foreground: true, foreg_backg_switch: false, net_type: u2, net_connect: m2 }, t3));
                  case 6:
                  case "end":
                    return h2.stop();
                }
            }, _callee, this);
          }));
        }, t2.end = function end(t3) {
          var a2 = this.traceData.extension[0], u2 = this.traceData.extension[1];
          if (a2 && a2.operation_type === 0 && u2 && u2.operation_type === 1) {
            var m2 = a2.net_type !== u2.net_type || a2.net_connect !== u2.net_connect;
            if (t3 || !m2)
              return this.traceData.duration = new Date().getTime() - this.traceData.start_time, this.core.reporter.report("exceptions", this.traceData), void this.reset();
            this.reset();
          } else
            this.reset();
        }, ReporterHookLinkKeep;
      }(), Hu = { user_id: "", trace_id: "", net_connect: true, net_type: 0, duration: 0, start_time: 0, history: [], succeed: false }, ju = function() {
        function ReporterHookLBS(t3) {
          this.traceData = Hu, this.core = t3, this.reset();
        }
        var t2 = ReporterHookLBS.prototype;
        return t2.reset = function reset() {
          this.traceData = Dt({}, Hu), this.traceData.history = [];
        }, t2.start = function start(t3) {
          this.reset(), this.traceData.user_id = t3, this.traceData.start_time = to();
        }, t2.updateBegin = function updateBegin(t3) {
          this.traceData.history.push(Dt({ head: "", body: "", start_time: to(), httpdns: false, index: 0 }, t3));
        }, t2.updateComplete = function updateComplete(t3) {
          var a2;
          forEach$1(a2 = this.traceData.history).call(a2, function(a3) {
            a3.target === t3.target && (Dt(a3, t3), a3.duration = to() - a3.start_time);
          });
        }, t2.end = function end(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a2, u2, m2, h2;
            return Ql.wrap(function _callee$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    if (this.traceData.succeed = t3, this.traceData.history = filter(a2 = this.traceData.history).call(a2, function(t4) {
                      return t4.code !== void 0;
                    }), this.traceData.history.length !== 0) {
                      g2.next = 5;
                      break;
                    }
                    return this.reset(), g2.abrupt("return");
                  case 5:
                    return this.traceData.duration = to() - this.traceData.start_time, g2.next = 8, Jl.net.getNetworkStatus();
                  case 8:
                    u2 = g2.sent, m2 = u2.net_type, h2 = u2.net_connect, this.traceData.net_type = m2, this.traceData.net_connect = h2, this.core.reporter.report("nim_sdk_lbs_records", this.traceData), this.reset();
                  case 15:
                  case "end":
                    return g2.stop();
                }
            }, _callee, this);
          }));
        }, ReporterHookLBS;
      }();
      function getIsDataReportEnable(t2) {
        var a2, u2, m2 = true;
        return typeof ((a2 = t2 == null ? void 0 : t2.reporterConfig) === null || a2 === void 0 ? void 0 : a2.enableCompass) == "boolean" ? m2 = t2.reporterConfig.enableCompass : typeof ((u2 = t2 == null ? void 0 : t2.reporterConfig) === null || u2 === void 0 ? void 0 : u2.isDataReportEnable) == "boolean" && (m2 = t2.reporterConfig.isDataReportEnable), m2;
      }
      var $u = { user_id: "", trace_id: "", action: 0, state: 0, duration: 0, start_time: 0, offset: 0, full_size: 0, transferred_size: 0, operation_type: 0, remote_addr: "" }, zu = "ReporterHook::setMonitorForResources:", Wu = function() {
        function ReporterHookCloudStorage(t3, a2) {
          this.traceData = $u, this.core = t3, this.traceData = Dt({}, $u, a2);
        }
        var t2 = ReporterHookCloudStorage.prototype;
        return t2.reset = function reset() {
          this.traceData = Dt({}, $u);
        }, t2.start = function start() {
          var t3, a2;
          this.reset(), this.traceData.user_id = this.core.account, this.traceData.trace_id = ((a2 = (t3 = this.core.clientSocket) === null || t3 === void 0 ? void 0 : t3.socket) === null || a2 === void 0 ? void 0 : a2.sessionId) || "", this.traceData.start_time = "timeOrigin" in this.core ? this.core.timeOrigin.getNTPTime() : to();
        }, t2.update = function update(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            return Ql.wrap(function _callee$(a2) {
              for (; ; )
                switch (a2.prev = a2.next) {
                  case 0:
                    if (this.traceData.user_id) {
                      a2.next = 2;
                      break;
                    }
                    return a2.abrupt("return");
                  case 2:
                    this.core.logger.log(zu + " upload update", t3), Dt(this.traceData, t3);
                  case 4:
                  case "end":
                    return a2.stop();
                }
            }, _callee, this);
          }));
        }, t2.end = function end(t3) {
          this.traceData.user_id && (this.core.logger.log(zu + " upload end cause of " + t3), this.traceData.state = t3, this.traceData.duration = ("timeOrigin" in this.core ? this.core.timeOrigin.getNTPTime() : to()) - this.traceData.start_time, this.core.reporter.report("nim_sdk_resources", this.traceData), this.traceData = $u);
        }, ReporterHookCloudStorage;
      }(), Ku = {}, Yu = {}, Qu = {}, Ju = { apiVersion: "v1", debugLevel: "off", needReconnect: true, reconnectionAttempts: xt, lbsUrls: Cu, linkUrl: Tu, abtestUrl: bu, isAbtestEnable: true }, Xu = function(t2) {
        function NIM(a3, u2) {
          var m2, h2, g2;
          if (u2 === void 0 && (u2 = {}), (g2 = t2.call(this) || this).instanceName = "NIM", g2.pluginMap = {}, g2.eventBus = new ho(), g2.options = {}, g2.V2NIMConversationIdUtil = {}, g2.V2NIMMessageCreator = {}, g2.V2NIMMessageAttachmentCreator = {}, g2.V2NIMClientAntispamUtil = {}, g2.DataStructureConverter = {}, g2.V2NIMMessageConverter = {}, g2.V2NIMMessageLogUtil = {}, g2.V2NIMMessageExtendUtil = {}, g2.V2NIMStorageUtil = {}, g2.V2NIMNotificationService = {}, g2.V2NIMStorageService = {}, g2.auth = {}, g2.V1NIMLoginService = {}, g2.V2NIMLoginService = {}, g2.clientSocket = {}, g2.V2NIMSyncService = {}, g2.V2NIMConversationService = {}, g2.V2NIMConversationGroupService = {}, g2.V2NIMMessageService = {}, g2.V2NIMTeamService = {}, g2.V2NIMUserService = {}, g2.V2NIMFriendService = {}, g2.V2NIMSettingService = {}, g2.V2NIMAIService = {}, g2.V2NIMSignallingService = {}, g2.V2NIMSubscriptionService = {}, g2.V2NIMPassthroughService = {}, g2.YSFService = {}, g2.offlinePush = {}, g2.sync = {}, g2.msg = {}, g2.msgLog = {}, g2.session = {}, g2.cloudSession = {}, g2.misc = {}, g2.user = {}, g2.friend = {}, g2.systemMessage = {}, g2.team = {}, g2.event = {}, g2.msgExtend = {}, g2.cloudStorage = {}, g2.passThrough = {}, g2.superTeam = {}, g2.plugin = {}, g2.signaling = {}, g2.qchatChannel = {}, g2.qchatMedia = {}, g2.qchatMsg = {}, g2.qchatRole = {}, g2.qchatServer = {}, g2.pluginMap = Qu, g2.logger = new tu(a3.debugLevel, u2.loggerConfig), u2.privateConf) {
            var M2 = g2.getConfigFromPrivate(u2.privateConf), I2 = M2.authConfig, S2 = M2.cloudStorageConfig, T2 = M2.reporterConfig;
            Dt(a3, I2), g2.setInitOptions(a3), g2.otherOptions = Dt(Dt({}, u2), { cloudStorageConfig: Dt(Dt({ storageKeyPrefix: "NIM" }, u2.cloudStorageConfig), S2), reporterConfig: Dt(Dt({}, u2.reporterConfig), T2), V1NIMLoginServiceConfig: Dt(Dt(Dt({}, a3), u2.V1NIMLoginServiceConfig), I2), V2NIMLoginServiceConfig: Dt(Dt({}, u2.V2NIMLoginServiceConfig), I2) });
          } else
            g2.setInitOptions(a3), g2.otherOptions = Dt(Dt({}, u2), { V1NIMLoginServiceConfig: Dt(Dt({}, a3), u2.V1NIMLoginServiceConfig), cloudStorageConfig: Dt({ storageKeyPrefix: "NIM" }, u2.cloudStorageConfig) });
          g2.timerManager = new zl(), g2.timeOrigin = new Bu(Qe(g2)), g2.adapters = new Su(Qe(g2)), g2.abtest = new wu(Qe(g2), Dt(Dt({ isAbtestEnable: g2.options.isAbtestEnable, abtestUrl: g2.options.abtestUrl }, g2.otherOptions.abtestConfig), { abtestProjectKey: Eu }));
          var C2 = Jl.getSystemInfo(), b2 = function getCompassDataEndpoint(t3, a4) {
            var u3, m3, h3 = (u3 = a4 == null ? void 0 : a4.reporterConfig) === null || u3 === void 0 ? void 0 : u3.compassDataEndpoint, g3 = (m3 = a4 == null ? void 0 : a4.reporterConfig) === null || m3 === void 0 ? void 0 : m3.reportConfigUrl;
            if (h3)
              return h3;
            if (g3) {
              var M3 = g3.match(/^https:\/\/([^/]+)\/*/);
              return Dn(M3) && M3.length >= 1 ? "https://" + M3[1] : (t3.error("Invalid reportConfigUrl: " + g3), ku);
            }
            return ku;
          }(g2.logger, g2.otherOptions);
          g2.reporter = new xs(Dt(Dt({}, b2 ? { compassDataEndpoint: b2 } : {}), { isDataReportEnable: getIsDataReportEnable(g2.otherOptions), common: { app_key: a3.appkey, dev_id: "", platform: "Web", sdk_ver: "10.7.0", env: "online", os_name: C2.os, os_ver: C2.osVer, lib_env: C2.libEnv, host_env: C2.hostEnv, host_env_ver: C2.hostEnvVer, manufactor: C2.manufactor, model: C2.model, v2: g2.options.apiVersion !== "v1" }, request: Jl.request, logger: g2.logger, autoStart: true })), g2.reporterHookLinkKeep = new Gu(Qe(g2)), g2.reporterHookCloudStorage = new Wu(Qe(g2)), g2.reporterHookLBS = new ju(Qe(g2)), Jl.setLogger(g2.logger);
          var E2 = g2.getServiceKeys(Ht(Ku));
          return forEach$1(E2).call(E2, function(t3) {
            var a4 = Ku[t3];
            g2[t3] = new a4(Qe(g2));
          }), forEach$1(m2 = Ht(Ku)).call(m2, function(t3) {
            g2.callSetOptions(t3);
          }), forEach$1(h2 = Ht(Yu)).call(h2, function(t3) {
            var a4 = Yu[t3];
            a4 !== void 0 && (g2[t3] = new a4(Qe(g2)));
          }), NIM.instance = Qe(g2), g2.logger.log("NIM init, version:10.7.0, sdk version:100700, appkey:" + a3.appkey), g2;
        }
        Nt(NIM, t2);
        var a2 = NIM.prototype;
        return a2.getServiceKeys = function getServiceKeys(t3) {
          var a3 = findIndex$1(t3).call(t3, function(t4) {
            return t4 === "V1NIMLoginService";
          });
          if (a3 > -1) {
            var u2 = t3[a3];
            splice(t3).call(t3, a3, 1), this.options.apiVersion === "v1" && t3.unshift(u2);
          }
          var m2 = findIndex$1(t3).call(t3, function(t4) {
            return t4 === "V2NIMLoginService";
          });
          if (m2 > -1) {
            var h2 = t3[m2];
            splice(t3).call(t3, m2, 1), this.options.apiVersion === "v2" && t3.unshift(h2);
          }
          var g2 = findIndex$1(t3).call(t3, function(t4) {
            return t4 === "sync";
          });
          if (g2 > -1) {
            var M2 = t3[g2];
            splice(t3).call(t3, g2, 1), this.options.apiVersion === "v1" && t3.push(M2);
          }
          var I2 = findIndex$1(t3).call(t3, function(t4) {
            return t4 === "V2NIMSyncService";
          });
          if (I2 > -1) {
            var S2 = t3[I2];
            splice(t3).call(t3, I2, 1), this.options.apiVersion === "v2" && t3.push(S2);
          }
          return t3;
        }, NIM.getInstance = function getInstance(t3, a3) {
          if (!NIM.instance) {
            if (t3)
              return new NIM(t3, a3);
            throw new Error("Instance not exist, please input options");
          }
          if (t3) {
            if (NIM.instance.options.account === t3.account && NIM.instance.options.appkey === t3.appkey)
              return NIM.instance.setOptions(t3), NIM.instance;
            throw new Error("Unexpected login");
          }
          return NIM.instance;
        }, a2.setInitOptions = function setInitOptions(t3) {
          validate({ appkey: { type: "string" }, apiVersion: { type: "enum", values: ["v1", "v2"], required: false }, binaryWebsocket: { type: "boolean", required: false }, needReconnect: { type: "boolean", required: false }, reconnectionAttempts: { type: "number", required: false }, customClientType: { type: "number", min: 1, required: false }, authType: { type: "number", min: 0, max: 2, required: false }, lbsUrls: { type: "array", itemType: "string", min: 1, required: false }, linkUrl: { type: "string", allowEmpty: false, required: false } }, t3), this.options = Dt(Dt({}, Ju), t3);
        }, a2.getConfigFromPrivate = function getConfigFromPrivate(t3) {
          return t3 ? { authConfig: JSON.parse(Un({ appkey: t3.appkey || void 0, lbsUrls: t3.weblbsUrl ? [t3.weblbsUrl] : void 0, linkUrl: t3.link_web || void 0 })), cloudStorageConfig: JSON.parse(Un({ chunkUploadHost: t3.nos_uploader || void 0, commonUploadHost: t3.nos_uploader || void 0, commonUploadHostBackupList: t3.nos_uploader ? [t3.nos_uploader] : void 0, chunkUploadHostBackupList: t3.nos_uploader ? [t3.nos_uploader] : void 0, uploadReplaceFormat: t3.nos_downloader_v2 ? (t3.nosSsl ? "https://" : "http://") + t3.nos_downloader_v2 : void 0, downloadUrl: t3.nos_accelerate !== void 0 ? t3.nos_accelerate : void 0, downloadHostList: t3.nos_accelerate_host === "" ? [] : typeof t3.nos_accelerate_host == "string" ? [t3.nos_accelerate_host] : Dn(t3.nos_accelerate_host) ? t3.nos_accelerate_host : void 0 })), reporterConfig: JSON.parse(Un({ enableCompass: typeof t3.enableCompass == "boolean" ? t3.enableCompass : void 0, compassDataEndpoint: t3.compassDataEndpoint || void 0 })) } : { authConfig: {}, cloudStorageConfig: {}, reporterConfig: {} };
        }, a2.connect = function connect(t3) {
          return t3 === void 0 && (t3 = {}), this.V1NIMLoginService.login(t3);
        }, a2.setOptions = function setOptions(t3) {
          if (typeof t3 == "object" && t3 !== null) {
            if (Object.prototype.hasOwnProperty.call(t3, "account") && t3.account !== this.options.account || Object.prototype.hasOwnProperty.call(t3, "appkey") && t3.appkey !== this.options.appkey)
              throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "NIM::setOptions account and appkey is not allowed to reset" } });
            if (Object.prototype.hasOwnProperty.call(t3, "apiVersion") && t3.apiVersion !== this.options.apiVersion)
              throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "NIM::setOptions apiVersion is not allowed to reset" } });
            if (Object.prototype.hasOwnProperty.call(t3, "binaryWebsocket") && t3.binaryWebsocket !== this.options.binaryWebsocket)
              throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "NIM::setOptions binaryWebsocket is not allowed to reset" } });
            validate({ token: { type: "string", required: false }, needReconnect: { type: "boolean", required: false }, reconnectionAttempts: { type: "number", required: false }, customClientType: { type: "number", min: 1, required: false }, authType: { type: "number", min: 0, max: 2, required: false }, lbsUrls: { type: "array", itemType: "string", min: 1, required: false }, linkUrl: { type: "string", allowEmpty: false, required: false } }, t3), this.logger.log("NIM::setOptions options is", t3), this.options = Dt(Dt({}, this.options), t3), this.V1NIMLoginService.setOptions && this.V1NIMLoginService.setOptions(this.options);
          }
        }, a2.disconnect = function disconnect() {
          return this.V1NIMLoginService.logout();
        }, a2._disconnect = function _disconnect() {
          return this.options.apiVersion === "v1" ? this.V1NIMLoginService.logout() : this.options.apiVersion === "v2" ? get(this.V2NIMLoginService, "lifeCycle.connectStatus") === 0 && get(this.V2NIMLoginService, "lifeCycle.loginStatus") === 0 ? zi.resolve() : this.V2NIMLoginService.logout() : zi.resolve();
        }, a2.destroy = function destroy() {
          var t3 = this;
          return NIM.instance = void 0, this._disconnect().then(function() {
            t3.status = "destroyed", t3.removeAllListeners(), t3.eventBus.removeAllListeners(), t3.logger.destroy(), t3.reporter.destroy(), t3.timerManager.destroy(), t3._clearModuleData("destroy"), t3._removeAllModuleListeners(), t3.connect = emptyFuncWithPromise, t3.disconnect = emptyFuncWithPromise, t3._disconnect = emptyFuncWithPromise, t3.destroy = emptyFuncWithPromise;
          });
        }, a2._clearModuleData = function _clearModuleData(t3) {
          t3 === void 0 && (t3 = "logout");
          var a3 = Xi(this);
          forEach$1(a3).call(a3, function(a4) {
            a4 && typeof a4.reset == "function" && a4.reset(t3);
          });
        }, a2._removeAllModuleListeners = function _removeAllModuleListeners() {
          var t3 = Xi(this);
          forEach$1(t3).call(t3, function(t4) {
            t4 && typeof t4.removeAllListeners == "function" && t4.removeAllListeners();
          });
        }, a2.kick = function kick(t3) {
          return this.V1NIMLoginService.kick(t3);
        }, a2.sendCmd = function sendCmd(t3, a3, u2) {
          return this.clientSocket.sendCmd(t3, a3, u2);
        }, a2.emit = function emit(a3) {
          var u2 = this;
          try {
            for (var m2, h2, g2 = to(), M2 = arguments.length, I2 = new Array(M2 > 1 ? M2 - 1 : 0), S2 = 1; S2 < M2; S2++)
              I2[S2 - 1] = arguments[S2];
            var T2 = (m2 = t2.prototype.emit).call.apply(m2, concat(h2 = [this, a3]).call(h2, I2)), C2 = to() - g2;
            return C2 >= 10 && this.logger.warn("Core::emit event: " + a3 + " process takes: " + C2 + "ms"), T2;
          } catch (t3) {
            return this.logger.error("Core::emit event: " + a3 + ". Error: " + t3), mo(function() {
              throw u2.logger.error("Core::emit throw error in setTimeout. event: " + a3 + ". Error: " + t3), t3;
            }, 0), false;
          }
        }, a2._registerDep = function _registerDep(t3, a3) {
          this[a3] && this[a3].name || (this[a3] = new t3(this), this.callSetOptions(a3));
        }, a2.callSetOptions = function callSetOptions(t3) {
          var a3 = t3 + "Config", u2 = t3 + "Options", m2 = this.otherOptions[a3] || this.otherOptions[u2] || {}, h2 = get(this, t3 + ".setOptions");
          typeof h2 == "function" && (t3 === "cloudStorage" && (m2 = this.otherOptions[a3] || this.otherOptions.serverConfig || {}), h2.call(this[t3], m2));
        }, NIM.registerService = function registerService(t3, a3) {
          Ku[a3] = t3;
        }, NIM.registerPrivateService = function registerPrivateService(t3, a3) {
          Yu[a3] = t3;
        }, NIM.registerPlugin = function registerPlugin(t3, a3) {
          Qu[a3] = t3;
        }, Ye(NIM, [{ key: "account", get: function get2() {
          return this.auth.account;
        } }, { key: "status", get: function get2() {
          return this.V1NIMLoginService.status;
        }, set: function set(t3) {
          this.V1NIMLoginService.status = t3;
        } }, { key: "config", get: function get2() {
          return { timeout: 8e3, deviceId: this.auth.deviceId };
        } }]), NIM;
      }(ho);
      Xu.sdkVersion = 100700, Xu.sdkVersionFormat = "10.7.0";
      var Zu = createCommonjsModule(function(t2, a2) {
        t2.exports = function() {
          function object2String(t4) {
            if (t4) {
              var a3, u2 = "";
              return forEach$1(a3 = Ht(t4)).call(a3, function(a4, m2) {
                u2 += m2 === 0 ? "?" : "&", u2 += a4 + "=" + t4[a4];
              }), u2;
            }
            return "";
          }
          var t3 = function(t4) {
            function V2NIMError(a3, u2, m2, h2) {
              var g2;
              return (g2 = t4.call(this, m2) || this).source = a3, g2.code = u2, g2.desc = m2, g2.detail = h2 || {}, g2;
            }
            return Nt(V2NIMError, t4), V2NIMError;
          }(Ac(Error));
          function request(a3, u2) {
            u2 === void 0 && (u2 = { dataType: "json", method: "GET", timeout: 5e3 });
            var m2 = u2.dataType === "text" ? "text/plain; charset=UTF-8" : "application/json; charset=UTF-8", h2 = u2.method === "GET" ? object2String(u2.params) : "";
            return new zi(function(g2, M2) {
              if (window.XMLHttpRequest) {
                var I2, S2 = new XMLHttpRequest();
                if (S2.onreadystatechange = function() {
                  if (S2.readyState === 4)
                    if (S2.status === 200) {
                      try {
                        I2 = JSON.parse(S2.response || "{}");
                      } catch (t4) {
                        I2 = S2.response;
                      }
                      g2({ status: S2.status, data: I2 });
                    } else
                      mo(function() {
                        M2(new t3(1, S2.status, "readyState: " + S2.readyState + "; statusText: " + S2.statusText));
                      }, 0);
                }, S2.open(u2.method, "" + a3 + h2), S2.timeout = u2.timeout || 5e3, S2.setRequestHeader("Content-Type", m2), u2.headers)
                  for (var T2 in u2.headers)
                    S2.setRequestHeader(T2, u2.headers[T2]);
                S2.ontimeout = function(a4) {
                  M2(new t3(1, 408, a4 && a4.message ? a4.message : "request timeout"));
                }, S2.send(Un(u2.data));
              } else
                M2(new t3(2, 10400, "request no suppout"));
            });
          }
          return request;
        }();
      }), ed = Math.floor, mergeSort = function(t2, a2) {
        var u2 = t2.length, m2 = ed(u2 / 2);
        return u2 < 8 ? insertionSort(t2, a2) : merge(t2, mergeSort(arraySliceSimple(t2, 0, m2), a2), mergeSort(arraySliceSimple(t2, m2), a2), a2);
      }, insertionSort = function(t2, a2) {
        for (var u2, m2, h2 = t2.length, g2 = 1; g2 < h2; ) {
          for (m2 = g2, u2 = t2[g2]; m2 && a2(t2[m2 - 1], u2) > 0; )
            t2[m2] = t2[--m2];
          m2 !== g2++ && (t2[m2] = u2);
        }
        return t2;
      }, merge = function(t2, a2, u2, m2) {
        for (var h2 = a2.length, g2 = u2.length, M2 = 0, I2 = 0; M2 < h2 || I2 < g2; )
          t2[M2 + I2] = M2 < h2 && I2 < g2 ? m2(a2[M2], u2[I2]) <= 0 ? a2[M2++] : u2[I2++] : M2 < h2 ? a2[M2++] : u2[I2++];
        return t2;
      }, td = mergeSort, rd = z.match(/firefox\/(\d+)/i), nd = !!rd && +rd[1], ad = /MSIE|Trident/.test(z), id = z.match(/AppleWebKit\/(\d+)\./), od = !!id && +id[1], sd = [], cd = w(sd.sort), ld = w(sd.push), ud = fails(function() {
        sd.sort(void 0);
      }), dd = fails(function() {
        sd.sort(null);
      }), pd = arrayMethodIsStrict("sort"), md = !fails(function() {
        if (J)
          return J < 70;
        if (!(nd && nd > 3)) {
          if (ad)
            return true;
          if (od)
            return od < 603;
          var t2, a2, u2, m2, h2 = "";
          for (t2 = 65; t2 < 76; t2++) {
            switch (a2 = String.fromCharCode(t2), t2) {
              case 66:
              case 69:
              case 70:
              case 72:
                u2 = 3;
                break;
              case 68:
              case 71:
                u2 = 4;
                break;
              default:
                u2 = 2;
            }
            for (m2 = 0; m2 < 47; m2++)
              sd.push({ k: a2 + m2, v: u2 });
          }
          for (sd.sort(function(t3, a3) {
            return a3.v - t3.v;
          }), m2 = 0; m2 < sd.length; m2++)
            a2 = sd[m2].k.charAt(0), h2.charAt(h2.length - 1) !== a2 && (h2 += a2);
          return h2 !== "DGBEFHACIJK";
        }
      });
      _export({ target: "Array", proto: true, forced: ud || !dd || !pd || !md }, { sort: function sort2(t2) {
        t2 !== void 0 && aCallable(t2);
        var a2 = toObject(this);
        if (md)
          return t2 === void 0 ? cd(a2) : cd(a2, t2);
        var u2, m2, h2 = [], g2 = lengthOfArrayLike(a2);
        for (m2 = 0; m2 < g2; m2++)
          m2 in a2 && ld(h2, a2[m2]);
        for (td(h2, function(t3) {
          return function(a3, u3) {
            return u3 === void 0 ? -1 : a3 === void 0 ? 1 : t3 !== void 0 ? +t3(a3, u3) || 0 : toString(a3) > toString(u3) ? 1 : -1;
          };
        }(t2)), u2 = lengthOfArrayLike(h2), m2 = 0; m2 < u2; )
          a2[m2] = h2[m2++];
        for (; m2 < g2; )
          deletePropertyOrThrow(a2, m2++);
        return a2;
      } });
      var hd = entryVirtual("Array").sort, gd = Array.prototype, sort = function(t2) {
        var a2 = t2.sort;
        return t2 === gd || $(gd, t2) && a2 === gd.sort ? hd : a2;
      }, vd = createCommonjsModule(function(t2, a2) {
        self, t2.exports = function() {
          var t3 = { d: function d2(a4, u3) {
            for (var m3 in u3)
              t3.o(u3, m3) && !t3.o(a4, m3) && Ke(a4, m3, { enumerable: true, get: u3[m3] });
          }, o: function o(t4, a4) {
            return Object.prototype.hasOwnProperty.call(t4, a4);
          } }, a3 = {};
          t3.d(a3, { default: function _default() {
            return b2;
          } });
          var u2 = function e(t4) {
            for (var a4 in function(t5, a5) {
              if (!(t5 instanceof a5))
                throw new TypeError("Cannot call a class as a function");
            }(this, e), this.directUploadAddr = "https://wanproxy-web.127.net", this.retryCount = 4, this.trunkSize = 4194304, this.trunkUploadTimeout = 5e4, this.getOffsetTimeout = 1e4, this.version = "1.0", this.enableCache = true, this.logger = console, this.onError = function(t5) {
            }, this.onProgress = function(t5) {
            }, this.onUploadProgress = function(t5) {
            }, this.onComplete = function(t5) {
            }, t4)
              this[a4] = t4[a4];
          };
          function n(t4, a4) {
            var u3 = es !== void 0 && $l(t4) || t4["@@iterator"];
            if (!u3) {
              if (Dn(t4) || (u3 = function(t5, a5) {
                if (t5) {
                  var u4;
                  if (typeof t5 == "string")
                    return r(t5, a5);
                  var m4 = slice(u4 = Object.prototype.toString.call(t5)).call(u4, 8, -1);
                  return m4 === "Object" && t5.constructor && (m4 = t5.constructor.name), m4 === "Map" || m4 === "Set" ? jl(t5) : m4 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m4) ? r(t5, a5) : void 0;
                }
              }(t4)) || a4 && t4 && typeof t4.length == "number") {
                u3 && (t4 = u3);
                var m3 = 0, h3 = function i() {
                };
                return { s: h3, n: function n2() {
                  return m3 >= t4.length ? { done: true } : { done: false, value: t4[m3++] };
                }, e: function e(t5) {
                  throw t5;
                }, f: h3 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var g3, M3 = true, I3 = false;
            return { s: function s2() {
              u3 = u3.call(t4);
            }, n: function n2() {
              var t5 = u3.next();
              return M3 = t5.done, t5;
            }, e: function e(t5) {
              I3 = true, g3 = t5;
            }, f: function f2() {
              try {
                M3 || u3.return == null || u3.return();
              } finally {
                if (I3)
                  throw g3;
              }
            } };
          }
          function r(t4, a4) {
            (a4 == null || a4 > t4.length) && (a4 = t4.length);
            for (var u3 = 0, m3 = new Array(a4); u3 < a4; u3++)
              m3[u3] = t4[u3];
            return m3;
          }
          var m2 = { privateObj: {}, setItem: function setItem(t4, a4) {
            m2.privateObj[t4] = a4;
          }, getItem: function getItem(t4) {
            return m2.privateObj[t4];
          }, removeItem: function removeItem(t4) {
            delete m2.privateObj[t4];
          }, getKeys: function getKeys() {
            return Ht(m2.privateObj);
          } }, h2 = { getFileKey: function getFileKey(t4) {
            var a4 = t4.size.toString(), u3 = t4.lastModified.toString();
            return "_NosUploader_" + t4.name + slice(a4).call(a4, a4.length - 5) + slice(u3).call(u3, u3.length - 5);
          }, getFileInfo: function getFileInfo(t4) {
            var a4 = m2.getItem(t4);
            if (!a4)
              return null;
            try {
              return JSON.parse(a4);
            } catch (t5) {
              return null;
            }
          }, initFile: function initFile(t4, a4, u3) {
            h2.clearExpiredInfo();
            var g3 = this.getFileKey(a4), M3 = { ctx: t4.ctx !== void 0 ? t4.ctx : "", bucket: t4.bucketName, obj: t4.objectName, token: t4.token, modifyAt: to(), end: false };
            return t4.payload && (M3.payload = t4.payload), u3 && m2.setItem(g3, Un(M3)), g3;
          }, setUploadContext: function setUploadContext(t4, a4, u3) {
            var h3 = this.getFileInfo(t4);
            h3 && (h3.ctx = a4, u3 && m2.setItem(t4, Un(h3)));
          }, setComplete: function setComplete(t4, a4) {
            var u3 = this.getFileInfo(t4);
            u3 && (u3.modifyAt = to(), u3.end = true, a4 && m2.setItem(t4, Un(u3)));
          }, getUploadContext: function getUploadContext(t4) {
            var a4 = this.getFileInfo(t4);
            return a4 ? a4.ctx : "";
          }, removeFileInfo: function removeFileInfo(t4) {
            indexOf(t4).call(t4, "_NosUploader_") === 0 && m2.removeItem(t4);
          }, clearExpiredInfo: function clearExpiredInfo() {
            var t4, a4 = typeof m2.getKeys == "function" ? m2.getKeys() : Ht(m2), u3 = to(), g3 = [], M3 = n(a4);
            try {
              for (M3.s(); !(t4 = M3.n()).done; ) {
                var I3 = t4.value;
                if (indexOf(I3).call(I3, "_NosUploader_") === 0) {
                  var S3 = h2.getFileInfo(I3);
                  S3 === null || u3 - S3.modifyAt > b2.expireTime ? m2.removeItem(I3) : g3.push({ fileInfo: S3, key: I3 });
                }
              }
            } catch (t5) {
              M3.e(t5);
            } finally {
              M3.f();
            }
            if (g3.length > b2.maxFileCache) {
              var T3, C3, E2 = n(slice(T3 = sort(g3).call(g3, function(t5, a5) {
                return a5.fileInfo.modifyAt - t5.fileInfo.modifyAt;
              })).call(T3, b2.maxFileCache));
              try {
                for (E2.s(); !(C3 = E2.n()).done; ) {
                  var k2, w2 = C3.value;
                  indexOf(k2 = w2.key).call(k2, "_NosUploader_") === 0 && m2.removeItem(w2.key);
                }
              } catch (t5) {
                E2.e(t5);
              } finally {
                E2.f();
              }
            }
          } }, g2 = h2;
          function c(t4) {
            return (c = typeof es == "function" && typeof ms == "symbol" ? function(t5) {
              return typeof t5;
            } : function(t5) {
              return t5 && typeof es == "function" && t5.constructor === es && t5 !== es.prototype ? "symbol" : typeof t5;
            })(t4);
          }
          function s(t4, a4) {
            return !a4 || c(a4) !== "object" && typeof a4 != "function" ? function(t5) {
              if (t5 === void 0)
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return t5;
            }(t4) : a4;
          }
          function f(t4) {
            var a4 = typeof fc == "function" ? new fc() : void 0;
            return (f = function f2(t5) {
              var u3, m3;
              if (t5 === null || (m3 = t5, indexOf(u3 = Function.toString.call(m3)).call(u3, "[native code]") === -1))
                return t5;
              if (typeof t5 != "function")
                throw new TypeError("Super expression must either be null or a function");
              if (a4 !== void 0) {
                if (a4.has(t5))
                  return a4.get(t5);
                a4.set(t5, n2);
              }
              function n2() {
                return l(t5, arguments, y(this).constructor);
              }
              return n2.prototype = ft(t5.prototype, { constructor: { value: n2, enumerable: false, writable: true, configurable: true } }), d(n2, t5);
            })(t4);
          }
          function l(t4, a4, u3) {
            return (l = p() ? Ec : function(t5, a5, u4) {
              var m3 = [null];
              m3.push.apply(m3, a5);
              var h3 = new (bind$1(Function).apply(t5, m3))();
              return u4 && d(h3, u4.prototype), h3;
            }).apply(null, arguments);
          }
          function p() {
            if (typeof Reflect == "undefined" || !Ec)
              return false;
            if (Ec.sham)
              return false;
            if (typeof Proxy == "function")
              return true;
            try {
              return Boolean.prototype.valueOf.call(Ec(Boolean, [], function() {
              })), true;
            } catch (t4) {
              return false;
            }
          }
          function d(t4, a4) {
            return (d = It || function(t5, a5) {
              return t5.__proto__ = a5, t5;
            })(t4, a4);
          }
          function y(t4) {
            return (y = It ? rs : function(t5) {
              return t5.__proto__ || rs(t5);
            })(t4);
          }
          var M2 = function(t4) {
            !function(t5, a5) {
              if (typeof a5 != "function" && a5 !== null)
                throw new TypeError("Super expression must either be null or a function");
              t5.prototype = ft(a5 && a5.prototype, { constructor: { value: t5, writable: true, configurable: true } }), a5 && d(t5, a5);
            }(r2, t4);
            var a4, u3, m3 = (a4 = r2, u3 = p(), function() {
              var t5, m4 = y(a4);
              if (u3) {
                var h3 = y(this).constructor;
                t5 = Ec(m4, arguments, h3);
              } else
                t5 = m4.apply(this, arguments);
              return s(this, t5);
            });
            function r2(t5, a5) {
              var u4;
              return function(t6, a6) {
                if (!(t6 instanceof a6))
                  throw new TypeError("Cannot call a class as a function");
              }(this, r2), (u4 = m3.call(this, "NosUploadError:" + t5)).errCode = a5, u4.errMsg = t5, u4;
            }
            return r2;
          }(f(Error)), I2 = function e(t4, a4, u3) {
            if (t4.uploadState === "uploading") {
              var m3 = t4.config, h3 = t4.param, I3 = g2.getUploadContext(t4.fileKey);
              if (!I3)
                return u3(0);
              var S3 = new XMLHttpRequest(), T3 = m3.directUploadAddr + "/".concat(h3.bucketName) + "/".concat(encodeURIComponent(h3.objectName)) + "?uploadContext" + "&context=".concat(I3) + "&version=".concat(m3.version);
              S3.onreadystatechange = function() {
                var h4;
                if (t4.uploadState !== "abort" && S3.readyState === 4) {
                  var I4, C3, b3, E2;
                  try {
                    E2 = JSON.parse(S3.responseText);
                  } catch (t5) {
                    E2 = { errMsg: "JsonParseError in getOffset. xhr.status = " + S3.status + ". xhr.responseText: " + S3.responseText, errCode: 500 };
                  }
                  S3.status === 200 ? E2.errCode ? t4.config.onError(new M2(E2.errMsg, E2.errCode)) : u3(E2.offset) : S3.status.toString().match(/^5/) ? e(t4, a4 - 1, u3) : a4 > 0 ? (typeof ((h4 = m3.logger) === null || h4 === void 0 ? void 0 : h4.error) == "function" && m3.logger.error(concat(I4 = "getOffset(".concat(T3, ") error. retry after 3 seconds. ")).call(I4, new Date().toTimeString())), mo(function() {
                    e(t4, a4 - 1, u3);
                  }, 3500)) : S3.status ? (g2.removeFileInfo(t4.fileKey), m3.onError(new M2(concat(C3 = concat(b3 = "getOffset(".concat(T3, ") error: ")).call(b3, S3.status, " ")).call(C3, S3.statusText)))) : m3.onError(new M2("getOffset(".concat(T3, ") error. no Error Code")));
                }
              }, S3.open("get", T3), S3.setRequestHeader("x-nos-token", h3.token), S3.timeout = m3.getOffsetTimeout, S3.send();
            }
          }, S2 = function e(t4, a4, u3, m3) {
            if (t4.uploadState === "uploading") {
              var h3 = t4.param, I3 = t4.config, S3 = slice(File.prototype), T3 = h3.ctx !== void 0 ? h3.ctx : "", C3 = a4 + I3.trunkSize >= t4.file.size, b3 = C3 ? t4.file.size : a4 + I3.trunkSize, E2 = new XMLHttpRequest(), k2 = I3.directUploadAddr + "/".concat(h3.bucketName) + "/".concat(encodeURIComponent(h3.objectName));
              if (E2.upload.onprogress = function(u4) {
                if (t4.uploadState !== "abort") {
                  var m4 = 0;
                  u4.lengthComputable ? (m4 = (a4 + u4.loaded) / t4.file.size, I3.onProgress(m4), I3.onUploadProgress({ loaded: u4.loaded, total: t4.file.size, percentage: m4, percentageText: (100 * m4).toFixed(2) + "%" })) : I3.onError(new M2("browser does not support query upload progress"));
                }
              }, E2.onreadystatechange = function() {
                var h4, S4;
                if (t4.uploadState !== "abort" && E2.readyState === 4) {
                  var T4, b4, w3, R2;
                  try {
                    R2 = JSON.parse(E2.responseText);
                  } catch (t5) {
                    typeof ((h4 = I3.logger) === null || h4 === void 0 ? void 0 : h4.error) == "function" && I3.logger.error("JsonParseError in uploadTrunk. xhr.status = " + E2.status + ". xhr.responseText: " + E2.responseText, t5), R2 = { errMsg: "JsonParseError in uploadTrunk. xhr.status = " + E2.status + ". xhr.responseText: " + E2.responseText };
                  }
                  E2.status === 200 ? (t4.setContext(R2.context), C3 ? (m3(), t4.setComplete()) : e(t4, R2.offset, I3.retryCount, m3)) : E2.status.toString().match(/^5/) ? u3 > 0 ? e(t4, a4, u3 - 1, m3) : (g2.removeFileInfo(t4.fileKey), I3.onError(new M2(R2.errMsg, R2.errCode))) : u3 > 0 ? (typeof ((S4 = I3.logger) === null || S4 === void 0 ? void 0 : S4.error) == "function" && I3.logger.error(concat(T4 = "uploadTrunk(".concat(k2, ") error. retry after 3 seconds. ")).call(T4, new Date().toTimeString())), mo(function() {
                    e(t4, a4, u3 - 1, m3);
                  }, 3500)) : E2.status ? (g2.removeFileInfo(t4.fileKey), I3.onError(new M2(concat(b4 = concat(w3 = "uploadTrunk(".concat(k2, ") error: ")).call(w3, E2.status, " ")).call(b4, E2.statusText)))) : I3.onError(new M2("uploadTrunk(".concat(k2, ") error. no Error Code. Please check your network")));
                }
              }, E2.open("post", k2 + "?offset=".concat(a4) + "&complete=".concat(C3) + "&context=".concat(T3) + "&version=".concat(I3.version)), E2.setRequestHeader("x-nos-token", h3.token), h3.md5 && E2.setRequestHeader("content-md5", h3.md5), t4.file.type && E2.setRequestHeader("content-type", t4.file.type), E2.timeout = I3.trunkUploadTimeout, typeof FileReader != "undefined") {
                var w2 = new FileReader();
                w2.addEventListener("load", function(t5) {
                  var a5;
                  ((a5 = t5 == null ? void 0 : t5.target) === null || a5 === void 0 ? void 0 : a5.result) instanceof ArrayBuffer && t5.target.result.byteLength > 0 ? E2.send(t5.target.result) : I3.onError(new M2("Read ArrayBuffer failed", 194003));
                }), w2.addEventListener("error", function(t5) {
                  var a5 = t5.target.error;
                  I3.onError(new M2("Read ArrayBuffer error. ".concat(a5.toString()), 194003));
                }), w2.readAsArrayBuffer(S3.call(t4.file, a4, b3));
              } else
                E2.send(S3.call(t4.file, a4, b3));
            }
          };
          function v(t4, a4) {
            for (var u3 = 0; u3 < a4.length; u3++) {
              var m3 = a4[u3];
              m3.enumerable = m3.enumerable || false, m3.configurable = true, "value" in m3 && (m3.writable = true), Ke(t4, m3.key, m3);
            }
          }
          var T2 = function() {
            function e(t5, a4, u3) {
              !function(t6, a5) {
                if (!(t6 instanceof a5))
                  throw new TypeError("Cannot call a class as a function");
              }(this, e), this.uploadState = "paused", this.config = u3, this.file = t5, this.param = a4, this.fileKey = g2.initFile(a4, t5, this.config.enableCache), this.resume();
            }
            var t4;
            return (t4 = [{ key: "resume", value: function value() {
              var t5 = this;
              if (this.uploadState !== "uploading") {
                this.setUploadState("uploading");
                var a4 = this.config;
                I2(this, a4.retryCount, function(u3) {
                  S2(t5, u3, a4.retryCount, function() {
                    t5.setUploadState("ended"), typeof a4.onComplete == "function" && a4.onComplete(t5.param);
                  });
                });
              }
            } }, { key: "pause", value: function value() {
              this.setUploadState("paused");
            } }, { key: "abort", value: function value() {
              this.uploadState !== "ended" && this.uploadState !== "abort" && (this.setUploadState("abort"), this.config.onError(new M2("Upload Aborted", 10499)));
            } }, { key: "setUploadState", value: function value(t5) {
              t5 !== this.uploadState && (this.uploadState = t5);
            } }, { key: "setContext", value: function value(t5) {
              g2.setUploadContext(this.fileKey, t5, this.config.enableCache), this.param.ctx = t5;
            } }, { key: "setComplete", value: function value() {
              g2.setComplete(this.fileKey, this.config.enableCache), this.setUploadState("ended");
            } }]) && v(e.prototype, t4), e;
          }(), C2 = { maxFileCache: 1 / 0, expireTime: 864e5, getFileUploadInformation: function getFileUploadInformation(t4) {
            var a4 = g2.getFileKey(t4), u3 = g2.getFileInfo(a4);
            return u3 === null ? null : to() - u3.modifyAt > C2.expireTime ? (g2.removeFileInfo(a4), null) : { uploadInfo: Dt({ bucketName: u3.bucket, objectName: u3.obj, token: u3.token, ctx: u3.ctx }, u3.payload ? { payload: u3.payload } : {}), complete: u3.end };
          }, setMaxFileCache: function setMaxFileCache(t4) {
            C2.maxFileCache = t4;
          }, setExpireTime: function setExpireTime(t4) {
            C2.expireTime = t4;
          }, printCaches: function printCaches() {
            if (typeof localStorage != "undefined")
              for (var t4 = 0, a4 = Ht(localStorage); t4 < a4.length; t4++) {
                var u3 = a4[t4], m3 = g2.getFileInfo(u3);
                m3 && console.log(m3, "modifiedAt", new Date(m3.modifyAt).toTimeString());
              }
          }, createConfig: function createConfig(t4) {
            return new u2(t4);
          }, createTask: function createTask(t4, a4, u3) {
            return new T2(t4, a4, u3);
          } }, b2 = C2;
          return a3.default;
        }();
      }), fd = tn.some, yd = arrayMethodIsStrict("some");
      _export({ target: "Array", proto: true, forced: !yd }, { some: function some2(t2) {
        return fd(this, t2, arguments.length > 1 ? arguments[1] : void 0);
      } });
      var _d = entryVirtual("Array").some, Md = Array.prototype, some = function(t2) {
        var a2 = t2.some;
        return t2 === Md || $(Md, t2) && a2 === Md.some ? _d : a2;
      }, Id = { debug: function debug() {
      }, log: function log() {
      }, warn: function warn() {
      }, error: function error() {
      } };
      function setLogger(t2) {
        Id = t2;
      }
      function isMobile() {
        if (!navigator || !navigator.userAgent)
          return false;
        var t2 = [/Android/i, /webOS/i, /iPhone/i, /iPad/i, /iPod/i, /BlackBerry/i, /Windows Phone/i];
        return some(t2).call(t2, function(t3) {
          return navigator.userAgent.match(t3);
        });
      }
      function isElectron() {
        var t2;
        return !(!navigator || !navigator.userAgent) && (typeof navigator == "object" && typeof navigator.userAgent == "string" && indexOf(t2 = navigator.userAgent).call(t2, "Electron") >= 0);
      }
      function isBrowser() {
        return navigator && navigator.userAgent;
      }
      function uploadFileFn(t2) {
        return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
          var a2, u2, m2, h2, g2, M2, I2;
          return Ql.wrap(function _callee$(S2) {
            for (; ; )
              switch (S2.prev = S2.next) {
                case 0:
                  if (h2 = Id, t2.fileInput || t2.file) {
                    S2.next = 3;
                    break;
                  }
                  throw new Error("File not exist");
                case 3:
                  if (!t2.file) {
                    S2.next = 7;
                    break;
                  }
                  g2 = t2.file, S2.next = 21;
                  break;
                case 7:
                  if (typeof t2.fileInput != "string") {
                    S2.next = 16;
                    break;
                  }
                  if (!((M2 = document.getElementById(t2.fileInput)) && M2.files && M2.files[0])) {
                    S2.next = 13;
                    break;
                  }
                  g2 = M2.files[0], S2.next = 14;
                  break;
                case 13:
                  throw new Error("Can not get file from fileInput");
                case 14:
                  S2.next = 21;
                  break;
                case 16:
                  if (!(t2.fileInput && t2.fileInput.files && t2.fileInput.files[0])) {
                    S2.next = 20;
                    break;
                  }
                  g2 = t2.fileInput.files[0], S2.next = 21;
                  break;
                case 20:
                  throw new Error("Can not get file from fileInput " + t2.fileInput);
                case 21:
                  if (!(t2.maxSize && g2.size > t2.maxSize)) {
                    S2.next = 23;
                    break;
                  }
                  throw new Error("The file exceeds maxSize limit. maxSize: " + t2.maxSize + ", get " + g2.size);
                case 23:
                  return S2.next = 25, new zi(function(a3, u3) {
                    var m3, M3 = vd.getFileUploadInformation(g2), I3 = vd.createConfig({ enableCache: true, retryCount: 0, directUploadAddr: t2.chunkUploadHost, onError: function onError(t3) {
                      u3(t3);
                    }, onUploadProgress: t2.onUploadProgress || function() {
                    }, onComplete: function onComplete(t3) {
                      a3(t3);
                    } });
                    if (M3)
                      if (M3.complete)
                        t2.onUploadProgress && t2.onUploadProgress({ total: g2.size, loaded: g2.size, percentage: 1, percentageText: "100%" }), a3(M3.uploadInfo);
                      else {
                        m3 = vd.createTask(g2, M3.uploadInfo, I3);
                        try {
                          t2.onUploadStart && t2.onUploadStart(m3);
                        } catch (t3) {
                          h2.error("Adapter uploadFile: options.onUploadStart error", t3 && t3.message), m3.abort(), u3(t3);
                        }
                      }
                    else {
                      m3 = vd.createTask(g2, Dt(Dt({ bucketName: t2.nosToken.bucket, objectName: decodeURIComponent(t2.nosToken.objectName), token: t2.nosToken.token }, t2.md5 ? { md5: t2.md5 } : {}), t2.payload ? { payload: t2.payload } : {}), I3);
                      try {
                        t2.onUploadStart && t2.onUploadStart(m3);
                      } catch (t3) {
                        h2.error("Adapter uploadFile: options.onUploadStart error", t3 && t3.message), m3.abort(), u3(t3);
                      }
                    }
                  });
                case 25:
                  return (I2 = S2.sent).name = g2.name, I2.size = g2.size, I2.type = g2.type, I2.ext = lastIndexOf(a2 = I2.name).call(a2, ".") > -1 ? slice(u2 = I2.name).call(u2, lastIndexOf(m2 = I2.name).call(m2, ".") + 1).toLowerCase() : "", S2.abrupt("return", I2);
                case 31:
                case "end":
                  return S2.stop();
              }
          }, _callee);
        }));
      }
      function getFileUploadInformationFn(t2) {
        var a2;
        if (t2.file)
          a2 = t2.file;
        else if (typeof t2.fileInput == "string") {
          var u2 = document.getElementById(t2.fileInput);
          if (!(u2 && u2.files && u2.files[0]))
            throw new Error("Can not get file from fileInput");
          a2 = u2.files[0];
        } else {
          if (!(t2.fileInput && t2.fileInput.files && t2.fileInput.files[0]))
            throw new Error("Can not get file from fileInput " + t2.fileInput);
          a2 = t2.fileInput.files[0];
        }
        return vd.getFileUploadInformation(a2);
      }
      var Sd = createCommonjsModule(function(t2, u2) {
        (function() {
          var m2 = { function: true, object: true }[typeof window] && window || this, h2 = u2, g2 = t2 && !t2.nodeType && t2, M2 = h2 && g2 && typeof a == "object" && a;
          !M2 || M2.global !== M2 && M2.window !== M2 && M2.self !== M2 || (m2 = M2);
          var I2 = Math.pow(2, 53) - 1, S2 = /\bOpera/, T2 = Object.prototype, C2 = T2.hasOwnProperty, b2 = T2.toString;
          function capitalize(t3) {
            return (t3 = String(t3)).charAt(0).toUpperCase() + t3.slice(1);
          }
          function format2(t3) {
            return t3 = trim(t3), /^(?:webOS|i(?:OS|P))/.test(t3) ? t3 : capitalize(t3);
          }
          function forOwn(t3, a2) {
            for (var u3 in t3)
              C2.call(t3, u3) && a2(t3[u3], u3, t3);
          }
          function getClassOf(t3) {
            return t3 == null ? capitalize(t3) : b2.call(t3).slice(8, -1);
          }
          function qualify(t3) {
            return String(t3).replace(/([ -])(?!$)/g, "$1?");
          }
          function reduce2(t3, a2) {
            var u3 = null;
            return function each(t4, a3) {
              var u4 = -1, m3 = t4 ? t4.length : 0;
              if (typeof m3 == "number" && m3 > -1 && m3 <= I2)
                for (; ++u4 < m3; )
                  a3(t4[u4], u4, t4);
              else
                forOwn(t4, a3);
            }(t3, function(m3, h3) {
              u3 = a2(u3, m3, h3, t3);
            }), u3;
          }
          function trim(t3) {
            return String(t3).replace(/^ +| +$/g, "");
          }
          var E2 = function parse(t3) {
            var a2 = m2, u3 = t3 && typeof t3 == "object" && getClassOf(t3) != "String";
            u3 && (a2 = t3, t3 = null);
            var h3 = a2.navigator || {}, g3 = h3.userAgent || "";
            t3 || (t3 = g3);
            var M3, I3, T3 = u3 ? !!h3.likeChrome : /\bChrome\b/.test(t3) && !/internal|\n/i.test(b2.toString()), C3 = "Object", E3 = u3 ? C3 : "ScriptBridgingProxyObject", k2 = u3 ? C3 : "Environment", w2 = u3 && a2.java ? "JavaPackage" : getClassOf(a2.java), R2 = u3 ? C3 : "RuntimeObject", A2 = /\bJava/.test(w2) && a2.java, N2 = A2 && getClassOf(a2.environment) == k2, x2 = A2 ? "a" : "\u03B1", O2 = A2 ? "b" : "\u03B2", P2 = a2.document || {}, L2 = a2.operamini || a2.opera, V2 = S2.test(V2 = u3 && L2 ? L2["[[Class]]"] : getClassOf(L2)) ? V2 : L2 = null, U2 = t3, D2 = [], q2 = null, B2 = t3 == g3, G2 = B2 && L2 && typeof L2.version == "function" && L2.version(), H2 = function getLayout(a3) {
              return reduce2(a3, function(a4, u4) {
                return a4 || RegExp("\\b" + (u4.pattern || qualify(u4)) + "\\b", "i").exec(t3) && (u4.label || u4);
              });
            }([{ label: "EdgeHTML", pattern: "Edge" }, "Trident", { label: "WebKit", pattern: "AppleWebKit" }, "iCab", "Presto", "NetFront", "Tasman", "KHTML", "Gecko"]), j2 = function getName(a3) {
              return reduce2(a3, function(a4, u4) {
                return a4 || RegExp("\\b" + (u4.pattern || qualify(u4)) + "\\b", "i").exec(t3) && (u4.label || u4);
              });
            }(["Adobe AIR", "Arora", "Avant Browser", "Breach", "Camino", "Electron", "Epiphany", "Fennec", "Flock", "Galeon", "GreenBrowser", "iCab", "Iceweasel", "K-Meleon", "Konqueror", "Lunascape", "Maxthon", { label: "Microsoft Edge", pattern: "(?:Edge|Edg|EdgA|EdgiOS)" }, "Midori", "Nook Browser", "PaleMoon", "PhantomJS", "Raven", "Rekonq", "RockMelt", { label: "Samsung Internet", pattern: "SamsungBrowser" }, "SeaMonkey", { label: "Silk", pattern: "(?:Cloud9|Silk-Accelerated)" }, "Sleipnir", "SlimBrowser", { label: "SRWare Iron", pattern: "Iron" }, "Sunrise", "Swiftfox", "Vivaldi", "Waterfox", "WebPositive", { label: "Yandex Browser", pattern: "YaBrowser" }, { label: "UC Browser", pattern: "UCBrowser" }, "Opera Mini", { label: "Opera Mini", pattern: "OPiOS" }, "Opera", { label: "Opera", pattern: "OPR" }, "Chromium", "Chrome", { label: "Chrome", pattern: "(?:HeadlessChrome)" }, { label: "Chrome Mobile", pattern: "(?:CriOS|CrMo)" }, { label: "Firefox", pattern: "(?:Firefox|Minefield)" }, { label: "Firefox for iOS", pattern: "FxiOS" }, { label: "IE", pattern: "IEMobile" }, { label: "IE", pattern: "MSIE" }, "Safari"]), $2 = getProduct([{ label: "BlackBerry", pattern: "BB10" }, "BlackBerry", { label: "Galaxy S", pattern: "GT-I9000" }, { label: "Galaxy S2", pattern: "GT-I9100" }, { label: "Galaxy S3", pattern: "GT-I9300" }, { label: "Galaxy S4", pattern: "GT-I9500" }, { label: "Galaxy S5", pattern: "SM-G900" }, { label: "Galaxy S6", pattern: "SM-G920" }, { label: "Galaxy S6 Edge", pattern: "SM-G925" }, { label: "Galaxy S7", pattern: "SM-G930" }, { label: "Galaxy S7 Edge", pattern: "SM-G935" }, "Google TV", "Lumia", "iPad", "iPod", "iPhone", "Kindle", { label: "Kindle Fire", pattern: "(?:Cloud9|Silk-Accelerated)" }, "Nexus", "Nook", "PlayBook", "PlayStation Vita", "PlayStation", "TouchPad", "Transformer", { label: "Wii U", pattern: "WiiU" }, "Wii", "Xbox One", { label: "Xbox 360", pattern: "Xbox" }, "Xoom"]), z2 = function getManufacturer(a3) {
              return reduce2(a3, function(a4, u4, m3) {
                return a4 || (u4[$2] || u4[/^[a-z]+(?: +[a-z]+\b)*/i.exec($2)] || RegExp("\\b" + qualify(m3) + "(?:\\b|\\w*\\d)", "i").exec(t3)) && m3;
              });
            }({ Apple: { iPad: 1, iPhone: 1, iPod: 1 }, Alcatel: {}, Archos: {}, Amazon: { Kindle: 1, "Kindle Fire": 1 }, Asus: { Transformer: 1 }, "Barnes & Noble": { Nook: 1 }, BlackBerry: { PlayBook: 1 }, Google: { "Google TV": 1, Nexus: 1 }, HP: { TouchPad: 1 }, HTC: {}, Huawei: {}, Lenovo: {}, LG: {}, Microsoft: { Xbox: 1, "Xbox One": 1 }, Motorola: { Xoom: 1 }, Nintendo: { "Wii U": 1, Wii: 1 }, Nokia: { Lumia: 1 }, Oppo: {}, Samsung: { "Galaxy S": 1, "Galaxy S2": 1, "Galaxy S3": 1, "Galaxy S4": 1 }, Sony: { PlayStation: 1, "PlayStation Vita": 1 }, Xiaomi: { Mi: 1, Redmi: 1 } }), W2 = function getOS(a3) {
              return reduce2(a3, function(a4, u4) {
                var m3 = u4.pattern || qualify(u4);
                return !a4 && (a4 = RegExp("\\b" + m3 + "(?:/[\\d.]+|[ \\w.]*)", "i").exec(t3)) && (a4 = function cleanupOS(t4, a5, u5) {
                  var m4 = { "10.0": "10", 6.4: "10 Technical Preview", 6.3: "8.1", 6.2: "8", 6.1: "Server 2008 R2 / 7", "6.0": "Server 2008 / Vista", 5.2: "Server 2003 / XP 64-bit", 5.1: "XP", 5.01: "2000 SP1", "5.0": "2000", "4.0": "NT", "4.90": "ME" };
                  return a5 && u5 && /^Win/i.test(t4) && !/^Windows Phone /i.test(t4) && (m4 = m4[/[\d.]+$/.exec(t4)]) && (t4 = "Windows " + m4), t4 = String(t4), a5 && u5 && (t4 = t4.replace(RegExp(a5, "i"), u5)), format2(t4.replace(/ ce$/i, " CE").replace(/\bhpw/i, "web").replace(/\bMacintosh\b/, "Mac OS").replace(/_PowerPC\b/i, " OS").replace(/\b(OS X) [^ \d]+/i, "$1").replace(/\bMac (OS X)\b/, "$1").replace(/\/(\d)/, " $1").replace(/_/g, ".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, "").replace(/\bx86\.64\b/gi, "x86_64").replace(/\b(Windows Phone) OS\b/, "$1").replace(/\b(Chrome OS \w+) [\d.]+\b/, "$1").split(" on ")[0]);
                }(a4, m3, u4.label || u4)), a4;
              });
            }(["Windows Phone", "KaiOS", "Android", "CentOS", { label: "Chrome OS", pattern: "CrOS" }, "Debian", { label: "DragonFly BSD", pattern: "DragonFly" }, "Fedora", "FreeBSD", "Gentoo", "Haiku", "Kubuntu", "Linux Mint", "OpenBSD", "Red Hat", "SuSE", "Ubuntu", "Xubuntu", "Cygwin", "Symbian OS", "hpwOS", "webOS ", "webOS", "Tablet OS", "Tizen", "Linux", "Mac OS X", "Macintosh", "Mac", "Windows 98;", "Windows "]);
            function getProduct(a3) {
              return reduce2(a3, function(a4, u4) {
                var m3 = u4.pattern || qualify(u4);
                return !a4 && (a4 = RegExp("\\b" + m3 + " *\\d+[.\\w_]*", "i").exec(t3) || RegExp("\\b" + m3 + " *\\w+-[\\w]*", "i").exec(t3) || RegExp("\\b" + m3 + "(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)", "i").exec(t3)) && ((a4 = String(u4.label && !RegExp(m3, "i").test(u4.label) ? u4.label : a4).split("/"))[1] && !/[\d.]+/.test(a4[0]) && (a4[0] += " " + a4[1]), u4 = u4.label || u4, a4 = format2(a4[0].replace(RegExp(m3, "i"), u4).replace(RegExp("; *(?:" + u4 + "[_-])?", "i"), " ").replace(RegExp("(" + u4 + ")[-_.]?(\\w)", "i"), "$1 $2"))), a4;
              });
            }
            function getVersion(a3) {
              return reduce2(a3, function(a4, u4) {
                return a4 || (RegExp(u4 + "(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)", "i").exec(t3) || 0)[1] || null;
              });
            }
            if (H2 && (H2 = [H2]), /\bAndroid\b/.test(W2) && !$2 && (M3 = /\bAndroid[^;]*;(.*?)(?:Build|\) AppleWebKit)\b/i.exec(t3)) && ($2 = trim(M3[1]).replace(/^[a-z]{2}-[a-z]{2};\s*/i, "") || null), z2 && !$2 ? $2 = getProduct([z2]) : z2 && $2 && ($2 = $2.replace(RegExp("^(" + qualify(z2) + ")[-_.\\s]", "i"), z2 + " ").replace(RegExp("^(" + qualify(z2) + ")[-_.]?(\\w)", "i"), z2 + " $2")), (M3 = /\bGoogle TV\b/.exec($2)) && ($2 = M3[0]), /\bSimulator\b/i.test(t3) && ($2 = ($2 ? $2 + " " : "") + "Simulator"), j2 == "Opera Mini" && /\bOPiOS\b/.test(t3) && D2.push("running in Turbo/Uncompressed mode"), j2 == "IE" && /\blike iPhone OS\b/.test(t3) ? (z2 = (M3 = parse(t3.replace(/like iPhone OS/, ""))).manufacturer, $2 = M3.product) : /^iP/.test($2) ? (j2 || (j2 = "Safari"), W2 = "iOS" + ((M3 = / OS ([\d_]+)/i.exec(t3)) ? " " + M3[1].replace(/_/g, ".") : "")) : j2 == "Konqueror" && /^Linux\b/i.test(W2) ? W2 = "Kubuntu" : z2 && z2 != "Google" && (/Chrome/.test(j2) && !/\bMobile Safari\b/i.test(t3) || /\bVita\b/.test($2)) || /\bAndroid\b/.test(W2) && /^Chrome/.test(j2) && /\bVersion\//i.test(t3) ? (j2 = "Android Browser", W2 = /\bAndroid\b/.test(W2) ? W2 : "Android") : j2 == "Silk" ? (/\bMobi/i.test(t3) || (W2 = "Android", D2.unshift("desktop mode")), /Accelerated *= *true/i.test(t3) && D2.unshift("accelerated")) : j2 == "UC Browser" && /\bUCWEB\b/.test(t3) ? D2.push("speed mode") : j2 == "PaleMoon" && (M3 = /\bFirefox\/([\d.]+)\b/.exec(t3)) ? D2.push("identifying as Firefox " + M3[1]) : j2 == "Firefox" && (M3 = /\b(Mobile|Tablet|TV)\b/i.exec(t3)) ? (W2 || (W2 = "Firefox OS"), $2 || ($2 = M3[1])) : !j2 || (M3 = !/\bMinefield\b/i.test(t3) && /\b(?:Firefox|Safari)\b/.exec(j2)) ? (j2 && !$2 && /[\/,]|^[^(]+?\)/.test(t3.slice(t3.indexOf(M3 + "/") + 8)) && (j2 = null), (M3 = $2 || z2 || W2) && ($2 || z2 || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(W2)) && (j2 = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(W2) ? W2 : M3) + " Browser")) : j2 == "Electron" && (M3 = (/\bChrome\/([\d.]+)\b/.exec(t3) || 0)[1]) && D2.push("Chromium " + M3), G2 || (G2 = getVersion(["(?:Cloud9|CriOS|CrMo|Edge|Edg|EdgA|EdgiOS|FxiOS|HeadlessChrome|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$)|UCBrowser|YaBrowser)", "Version", qualify(j2), "(?:Firefox|Minefield|NetFront)"])), (M3 = (H2 == "iCab" && parseFloat(G2) > 3 ? "WebKit" : /\bOpera\b/.test(j2) && (/\bOPR\b/.test(t3) ? "Blink" : "Presto")) || /\b(?:Midori|Nook|Safari)\b/i.test(t3) && !/^(?:Trident|EdgeHTML)$/.test(H2) && "WebKit" || !H2 && /\bMSIE\b/i.test(t3) && (W2 == "Mac OS" ? "Tasman" : "Trident") || H2 == "WebKit" && /\bPlayStation\b(?! Vita\b)/i.test(j2) && "NetFront") && (H2 = [M3]), j2 == "IE" && (M3 = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(t3) || 0)[1]) ? (j2 += " Mobile", W2 = "Windows Phone " + (/\+$/.test(M3) ? M3 : M3 + ".x"), D2.unshift("desktop mode")) : /\bWPDesktop\b/i.test(t3) ? (j2 = "IE Mobile", W2 = "Windows Phone 8.x", D2.unshift("desktop mode"), G2 || (G2 = (/\brv:([\d.]+)/.exec(t3) || 0)[1])) : j2 != "IE" && H2 == "Trident" && (M3 = /\brv:([\d.]+)/.exec(t3)) && (j2 && D2.push("identifying as " + j2 + (G2 ? " " + G2 : "")), j2 = "IE", G2 = M3[1]), B2) {
              if (function isHostType(t4, a3) {
                var u4 = t4 != null ? typeof t4[a3] : "number";
                return !(/^(?:boolean|number|string|undefined)$/.test(u4) || u4 == "object" && !t4[a3]);
              }(a2, "global"))
                if (A2 && (U2 = (M3 = A2.lang.System).getProperty("os.arch"), W2 = W2 || M3.getProperty("os.name") + " " + M3.getProperty("os.version")), N2) {
                  try {
                    G2 = a2.require("ringo/engine").version.join("."), j2 = "RingoJS";
                  } catch (t4) {
                    (M3 = a2.system) && M3.global.system == a2.system && (j2 = "Narwhal", W2 || (W2 = M3[0].os || null));
                  }
                  j2 || (j2 = "Rhino");
                } else
                  typeof a2.process == "object" && !a2.process.browser && (M3 = a2.process) && (typeof M3.versions == "object" && (typeof M3.versions.electron == "string" ? (D2.push("Node " + M3.versions.node), j2 = "Electron", G2 = M3.versions.electron) : typeof M3.versions.nw == "string" && (D2.push("Chromium " + G2, "Node " + M3.versions.node), j2 = "NW.js", G2 = M3.versions.nw)), j2 || (j2 = "Node.js", U2 = M3.arch, W2 = M3.platform, G2 = (G2 = /[\d.]+/.exec(M3.version)) ? G2[0] : null));
              else
                getClassOf(M3 = a2.runtime) == E3 ? (j2 = "Adobe AIR", W2 = M3.flash.system.Capabilities.os) : getClassOf(M3 = a2.phantom) == R2 ? (j2 = "PhantomJS", G2 = (M3 = M3.version || null) && M3.major + "." + M3.minor + "." + M3.patch) : typeof P2.documentMode == "number" && (M3 = /\bTrident\/(\d+)/i.exec(t3)) ? (G2 = [G2, P2.documentMode], (M3 = +M3[1] + 4) != G2[1] && (D2.push("IE " + G2[1] + " mode"), H2 && (H2[1] = ""), G2[1] = M3), G2 = j2 == "IE" ? String(G2[1].toFixed(1)) : G2[0]) : typeof P2.documentMode == "number" && /^(?:Chrome|Firefox)\b/.test(j2) && (D2.push("masking as " + j2 + " " + G2), j2 = "IE", G2 = "11.0", H2 = ["Trident"], W2 = "Windows");
              W2 = W2 && format2(W2);
            }
            if (G2 && (M3 = /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(G2) || /(?:alpha|beta)(?: ?\d)?/i.exec(t3 + ";" + (B2 && h3.appMinorVersion)) || /\bMinefield\b/i.test(t3) && "a") && (q2 = /b/i.test(M3) ? "beta" : "alpha", G2 = G2.replace(RegExp(M3 + "\\+?$"), "") + (q2 == "beta" ? O2 : x2) + (/\d+\+?/.exec(M3) || "")), j2 == "Fennec" || j2 == "Firefox" && /\b(?:Android|Firefox OS|KaiOS)\b/.test(W2))
              j2 = "Firefox Mobile";
            else if (j2 == "Maxthon" && G2)
              G2 = G2.replace(/\.[\d.]+/, ".x");
            else if (/\bXbox\b/i.test($2))
              $2 == "Xbox 360" && (W2 = null), $2 == "Xbox 360" && /\bIEMobile\b/.test(t3) && D2.unshift("mobile mode");
            else if (!/^(?:Chrome|IE|Opera)$/.test(j2) && (!j2 || $2 || /Browser|Mobi/.test(j2)) || W2 != "Windows CE" && !/Mobi/i.test(t3))
              if (j2 == "IE" && B2)
                try {
                  a2.external === null && D2.unshift("platform preview");
                } catch (t4) {
                  D2.unshift("embedded");
                }
              else
                (/\bBlackBerry\b/.test($2) || /\bBB10\b/.test(t3)) && (M3 = (RegExp($2.replace(/ +/g, " *") + "/([.\\d]+)", "i").exec(t3) || 0)[1] || G2) ? (W2 = ((M3 = [M3, /BB10/.test(t3)])[1] ? ($2 = null, z2 = "BlackBerry") : "Device Software") + " " + M3[0], G2 = null) : this != forOwn && $2 != "Wii" && (B2 && L2 || /Opera/.test(j2) && /\b(?:MSIE|Firefox)\b/i.test(t3) || j2 == "Firefox" && /\bOS X (?:\d+\.){2,}/.test(W2) || j2 == "IE" && (W2 && !/^Win/.test(W2) && G2 > 5.5 || /\bWindows XP\b/.test(W2) && G2 > 8 || G2 == 8 && !/\bTrident\b/.test(t3))) && !S2.test(M3 = parse.call(forOwn, t3.replace(S2, "") + ";")) && M3.name && (M3 = "ing as " + M3.name + ((M3 = M3.version) ? " " + M3 : ""), S2.test(j2) ? (/\bIE\b/.test(M3) && W2 == "Mac OS" && (W2 = null), M3 = "identify" + M3) : (M3 = "mask" + M3, j2 = V2 ? format2(V2.replace(/([a-z])([A-Z])/g, "$1 $2")) : "Opera", /\bIE\b/.test(M3) && (W2 = null), B2 || (G2 = null)), H2 = ["Presto"], D2.push(M3));
            else
              j2 += " Mobile";
            (M3 = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(t3) || 0)[1]) && (M3 = [parseFloat(M3.replace(/\.(\d)$/, ".0$1")), M3], j2 == "Safari" && M3[1].slice(-1) == "+" ? (j2 = "WebKit Nightly", q2 = "alpha", G2 = M3[1].slice(0, -1)) : G2 != M3[1] && G2 != (M3[2] = (/\bSafari\/([\d.]+\+?)/i.exec(t3) || 0)[1]) || (G2 = null), M3[1] = (/\b(?:Headless)?Chrome\/([\d.]+)/i.exec(t3) || 0)[1], M3[0] == 537.36 && M3[2] == 537.36 && parseFloat(M3[1]) >= 28 && H2 == "WebKit" && (H2 = ["Blink"]), B2 && (T3 || M3[1]) ? (H2 && (H2[1] = "like Chrome"), M3 = M3[1] || ((M3 = M3[0]) < 530 ? 1 : M3 < 532 ? 2 : M3 < 532.05 ? 3 : M3 < 533 ? 4 : M3 < 534.03 ? 5 : M3 < 534.07 ? 6 : M3 < 534.1 ? 7 : M3 < 534.13 ? 8 : M3 < 534.16 ? 9 : M3 < 534.24 ? 10 : M3 < 534.3 ? 11 : M3 < 535.01 ? 12 : M3 < 535.02 ? "13+" : M3 < 535.07 ? 15 : M3 < 535.11 ? 16 : M3 < 535.19 ? 17 : M3 < 536.05 ? 18 : M3 < 536.1 ? 19 : M3 < 537.01 ? 20 : M3 < 537.11 ? "21+" : M3 < 537.13 ? 23 : M3 < 537.18 ? 24 : M3 < 537.24 ? 25 : M3 < 537.36 ? 26 : H2 != "Blink" ? "27" : "28")) : (H2 && (H2[1] = "like Safari"), M3 = (M3 = M3[0]) < 400 ? 1 : M3 < 500 ? 2 : M3 < 526 ? 3 : M3 < 533 ? 4 : M3 < 534 ? "4+" : M3 < 535 ? 5 : M3 < 537 ? 6 : M3 < 538 ? 7 : M3 < 601 ? 8 : M3 < 602 ? 9 : M3 < 604 ? 10 : M3 < 606 ? 11 : M3 < 608 ? 12 : "12"), H2 && (H2[1] += " " + (M3 += typeof M3 == "number" ? ".x" : /[.+]/.test(M3) ? "" : "+")), j2 == "Safari" && (!G2 || parseInt(G2) > 45) ? G2 = M3 : j2 == "Chrome" && /\bHeadlessChrome/i.test(t3) && D2.unshift("headless")), j2 == "Opera" && (M3 = /\bzbov|zvav$/.exec(W2)) ? (j2 += " ", D2.unshift("desktop mode"), M3 == "zvav" ? (j2 += "Mini", G2 = null) : j2 += "Mobile", W2 = W2.replace(RegExp(" *" + M3 + "$"), "")) : j2 == "Safari" && /\bChrome\b/.exec(H2 && H2[1]) ? (D2.unshift("desktop mode"), j2 = "Chrome Mobile", G2 = null, /\bOS X\b/.test(W2) ? (z2 = "Apple", W2 = "iOS 4.3+") : W2 = null) : /\bSRWare Iron\b/.test(j2) && !G2 && (G2 = getVersion("Chrome")), G2 && G2.indexOf(M3 = /[\d.]+$/.exec(W2)) == 0 && t3.indexOf("/" + M3 + "-") > -1 && (W2 = trim(W2.replace(M3, ""))), W2 && W2.indexOf(j2) != -1 && !RegExp(j2 + " OS").test(W2) && (W2 = W2.replace(RegExp(" *" + qualify(j2) + " *"), "")), H2 && !/\b(?:Avant|Nook)\b/.test(j2) && (/Browser|Lunascape|Maxthon/.test(j2) || j2 != "Safari" && /^iOS/.test(W2) && /\bSafari\b/.test(H2[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|SRWare Iron|Vivaldi|Web)/.test(j2) && H2[1]) && (M3 = H2[H2.length - 1]) && D2.push(M3), D2.length && (D2 = ["(" + D2.join("; ") + ")"]), z2 && $2 && $2.indexOf(z2) < 0 && D2.push("on " + z2), $2 && D2.push((/^on /.test(D2[D2.length - 1]) ? "" : "on ") + $2), W2 && (M3 = / ([\d.+]+)$/.exec(W2), I3 = M3 && W2.charAt(W2.length - M3[0].length - 1) == "/", W2 = { architecture: 32, family: M3 && !I3 ? W2.replace(M3[0], "") : W2, version: M3 ? M3[1] : null, toString: function() {
              var t4 = this.version;
              return this.family + (t4 && !I3 ? " " + t4 : "") + (this.architecture == 64 ? " 64-bit" : "");
            } }), (M3 = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(U2)) && !/\bi686\b/i.test(U2) ? (W2 && (W2.architecture = 64, W2.family = W2.family.replace(RegExp(" *" + M3), "")), j2 && (/\bWOW64\b/i.test(t3) || B2 && /\w(?:86|32)$/.test(h3.cpuClass || h3.platform) && !/\bWin64; x64\b/i.test(t3)) && D2.unshift("32-bit")) : W2 && /^OS X/.test(W2.family) && j2 == "Chrome" && parseFloat(G2) >= 39 && (W2.architecture = 64), t3 || (t3 = null);
            var K2 = {};
            return K2.description = t3, K2.layout = H2 && H2[0], K2.manufacturer = z2, K2.name = j2, K2.prerelease = q2, K2.product = $2, K2.ua = t3, K2.version = j2 && G2, K2.os = W2 || { architecture: null, family: null, version: null, toString: function() {
              return "null";
            } }, K2.parse = parse, K2.toString = function toStringPlatform() {
              return this.description || "";
            }, K2.version && D2.unshift(G2), K2.name && D2.unshift(j2), W2 && j2 && (W2 != String(W2).split(" ")[0] || W2 != j2.split(" ")[0] && !$2) && D2.push($2 ? "(" + W2 + ")" : "on " + W2), D2.length && (K2.description = D2.join(" ")), K2;
          }();
          h2 && g2 ? forOwn(E2, function(t3, a2) {
            h2[a2] = t3;
          }) : m2.platform = E2;
        }).call(a);
      });
      function getSystemInfoFn() {
        var t2, a2, u2 = Sd.version || "";
        if (isElectron())
          try {
            var m2 = navigator.userAgent.match(/Electron\/([\d.]+\d+)/);
            m2 && m2[1] && typeof m2[1] == "string" && (u2 = m2[1]);
          } catch (t3) {
          }
        return { os: ((t2 = Sd.os) === null || t2 === void 0 ? void 0 : t2.family) || "", osVer: ((a2 = Sd.os) === null || a2 === void 0 ? void 0 : a2.version) || "", browser: Sd.name || "", browserVer: Sd.version || "", libEnv: "BROWSER", hostEnv: isElectron() ? "Electron" : isMobile() ? "H5" : isBrowser() ? "BROWSER" : "Unset", hostEnvEnum: isElectron() ? 5 : isMobile() ? 101 : isBrowser() ? 100 : 0, hostEnvVer: u2, userAgent: navigator && navigator.userAgent, model: u2, manufactor: Sd.name || "" };
      }
      var Td = null, Cd = null, bd = { getNetworkStatus: function getNetworkStatus() {
        return zi.resolve({ net_type: 0, net_connect: typeof navigator == "undefined" || typeof navigator.onLine != "boolean" || navigator.onLine });
      }, onNetworkStatusChange: function onNetworkStatusChange(t2) {
        Td = function onlineListener() {
          t2({ isConnected: true, networkType: 0 });
        }, Cd = function offlineListener() {
          t2({ isConnected: false, networkType: 0 });
        }, window.addEventListener("online", Td), window.addEventListener("offline", Cd);
      }, offNetworkStatusChange: function offNetworkStatusChange() {
        Td && window.removeEventListener("online", Td), Cd && window.removeEventListener("offline", Cd), Td = null, Cd = null;
      } }, Ed = tn.find, kd = "find", wd = true;
      kd in [] && Array(1).find(function() {
        wd = false;
      }), _export({ target: "Array", proto: true, forced: wd }, { find: function find2(t2) {
        return Ed(this, t2, arguments.length > 1 ? arguments[1] : void 0);
      } });
      var Rd = entryVirtual("Array").find, Ad = Array.prototype, find = function(t2) {
        var a2 = t2.find;
        return t2 === Ad || $(Ad, t2) && a2 === Ad.find ? Rd : a2;
      }, Nd = "log", xd = function() {
        function IDB(t3, a2) {
          this.db = null, this.stores = [], this.name = t3, this.version = a2;
        }
        var t2 = IDB.prototype;
        return t2.setName = function setName(t3) {
          this.name = t3;
        }, t2.getDB = function getDB() {
          if (!this.db)
            throw new Error("DB not ready");
          return this.db;
        }, t2.getStore = function getStore(t3) {
          var a2, u2 = find(a2 = this.stores).call(a2, function(a3) {
            return a3.storeName === t3;
          });
          if (!u2)
            throw new Error("LogStorage: store not found. " + t3);
          return u2;
        }, t2.open = function open() {
          var t3 = this, a2 = window.indexedDB.open(this.name, this.version);
          return new zi(function(u2, m2) {
            a2.onerror = function(t4) {
              var a3 = t4.target;
              m2(a3.error);
            }, a2.onsuccess = function(a3) {
              var m3, h2, g2 = a3.target;
              t3.db = g2.result, t3.db.removeEventListener("close", bind$1(m3 = t3.triggerDBCloseEvt).call(m3, t3)), t3.db.addEventListener("close", bind$1(h2 = t3.triggerDBCloseEvt).call(h2, t3)), t3.stores.push(new Od(Nd, t3)), u2();
            }, a2.onupgradeneeded = function(a3) {
              var u3 = a3.target;
              t3.upgradeDBBySchema(u3);
            };
          });
        }, t2.triggerDBCloseEvt = function triggerDBCloseEvt() {
          try {
            this.db && this.db.close(), this.db = null;
          } catch (t3) {
          }
          this.open();
        }, t2.upgradeDBBySchema = function upgradeDBBySchema(t3) {
          var a2 = t3.result, u2 = t3.transaction && a2.objectStoreNames.contains(Nd) ? t3.transaction.objectStore(Nd) : a2.createObjectStore(Nd, { keyPath: "id", autoIncrement: true });
          try {
            u2.index("time");
          } catch (t4) {
            u2.createIndex("time", "time", { unique: false });
          }
        }, t2.close = function close() {
          var t3;
          this.db && (this.db.removeEventListener("close", bind$1(t3 = this.triggerDBCloseEvt).call(t3, this)), this.db.close(), this.stores = [], this.db = null);
        }, IDB;
      }(), Od = function() {
        function IDBStore(t3, a2) {
          this.idb = null, this.storeName = t3, this.idb = a2;
        }
        var t2 = IDBStore.prototype;
        return t2.getDB = function getDB() {
          if (!this.idb)
            throw new Error("DB not ready");
          return this.idb.getDB();
        }, t2.getStoreName = function getStoreName() {
          return this.storeName;
        }, t2.bulkCreate = function bulkCreate(t3) {
          var a2 = this.getDB(), u2 = this.getStoreName(), m2 = a2.transaction(u2, "readwrite"), h2 = m2.objectStore(u2);
          return forEach$1(t3).call(t3, function(t4) {
            h2.add(t4);
          }), new zi(function(t4, a3) {
            m2.oncomplete = function() {
              t4();
            }, m2.onerror = function(t5) {
              var u3 = t5.target;
              a3(u3.error);
            }, m2.onabort = function(t5) {
              var u3 = t5.target;
              u3.error instanceof Error ? a3(u3.error) : a3(new Error("TransactionAborted"));
            };
          });
        }, t2.bulkDelete = function bulkDelete(t3) {
          var a2 = t3.keyName, u2 = t3.lower, m2 = t3.upper, h2 = t3.lowerOpen, g2 = h2 !== void 0 && h2, M2 = t3.upperOpen, I2 = M2 !== void 0 && M2, S2 = IDBKeyRange.bound(u2, m2, g2, I2), T2 = this.getDB(), C2 = this.getStoreName(), b2 = T2.transaction(C2, "readwrite"), E2 = b2.objectStore(C2).index(a2).openCursor(S2), k2 = 0;
          return E2.onsuccess = function(t4) {
            var a3 = t4.target.result;
            a3 && (a3.delete(), k2++, a3.continue());
          }, new zi(function(t4, a3) {
            b2.oncomplete = function() {
              t4(k2);
            }, b2.onerror = function(t5) {
              var u3 = t5.target;
              a3(u3.error);
            }, b2.onabort = function(t5) {
              var u3 = t5.target;
              u3.error instanceof Error ? a3(u3.error) : a3(new Error("TransactionAborted"));
            };
          });
        }, t2.readAllAndClear = function readAllAndClear() {
          var t3 = this.getDB(), a2 = this.getStoreName(), u2 = t3.transaction(a2, "readwrite").objectStore(a2);
          if (!u2.getAll)
            throw new Error("IDBExtract not support");
          var m2 = u2.getAll();
          return new zi(function(t4, a3) {
            m2.onsuccess = function(a4) {
              var m3 = a4.target;
              u2.clear(), t4(m3.result);
            }, m2.onerror = function(t5) {
              var u3 = t5.target;
              a3(u3.error);
            };
          });
        }, IDBStore;
      }(), Pd = function() {
        function LogStorageImpl(t3) {
          t3 === void 0 && (t3 = "nim-logs"), this.idb = new xd(t3, 1);
        }
        var t2 = LogStorageImpl.prototype;
        return t2.open = function open(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a2;
            return Ql.wrap(function _callee$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return t3 && this.idb.setName(t3), u2.next = 3, this.idb.open();
                  case 3:
                    return a2 = this.idb.getStore(Nd), u2.prev = 4, u2.next = 7, a2.bulkDelete({ keyName: "time", lower: 0, upper: to() - 2592e5 });
                  case 7:
                    u2.next = 11;
                    break;
                  case 9:
                    u2.prev = 9, u2.t0 = u2.catch(4);
                  case 11:
                  case "end":
                    return u2.stop();
                }
            }, _callee, this, [[4, 9]]);
          }));
        }, t2.close = function close() {
          this.idb.close();
        }, t2.addLogs = function addLogs(t3) {
          return this.idb.getStore(Nd).bulkCreate(t3);
        }, t2.extractLogs = function extractLogs() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var t3, a2, u2, m2, h2;
            return Ql.wrap(function _callee2$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return a2 = this.idb.getStore(Nd), g2.next = 3, a2.readAllAndClear();
                  case 3:
                    if ((u2 = g2.sent).length !== 0) {
                      g2.next = 6;
                      break;
                    }
                    return g2.abrupt("return", "");
                  case 6:
                    return m2 = reduce(u2).call(u2, function(t4, a3) {
                      var u3 = a3.iid;
                      return t4[u3] || (t4[u3] = []), t4[u3].push(a3), t4;
                    }, {}), h2 = map$6(t3 = Ht(m2)).call(t3, function(t4) {
                      var a3 = m2[t4];
                      return "==========iid:" + t4 + "==========\n " + map$6(a3).call(a3, function(t5) {
                        return t5.text;
                      }).join("\n");
                    }).join("\n"), g2.abrupt("return", new File([h2], "nim-logs.txt", { type: "text/plain" }));
                  case 9:
                  case "end":
                    return g2.stop();
                }
            }, _callee2, this);
          }));
        }, LogStorageImpl;
      }();
      function _createForOfIteratorHelperLoose$a(t2, a2) {
        var u2, m2 = es !== void 0 && $l(t2) || t2["@@iterator"];
        if (m2)
          return bind$1(u2 = (m2 = m2.call(t2)).next).call(u2, m2);
        if (Dn(t2) || (m2 = function _unsupportedIterableToArray$a(t3, a3) {
          if (t3) {
            var u3;
            if (typeof t3 == "string")
              return _arrayLikeToArray$a(t3, a3);
            var m3 = slice(u3 = {}.toString.call(t3)).call(u3, 8, -1);
            return m3 === "Object" && t3.constructor && (m3 = t3.constructor.name), m3 === "Map" || m3 === "Set" ? jl(t3) : m3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m3) ? _arrayLikeToArray$a(t3, a3) : void 0;
          }
        }(t2)) || a2 && t2 && typeof t2.length == "number") {
          m2 && (t2 = m2);
          var h2 = 0;
          return function() {
            return h2 >= t2.length ? { done: true } : { done: false, value: t2[h2++] };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _arrayLikeToArray$a(t2, a2) {
        (a2 == null || a2 > t2.length) && (a2 = t2.length);
        for (var u2 = 0, m2 = Array(a2); u2 < a2; u2++)
          m2[u2] = t2[u2];
        return m2;
      }
      var Ld = {}, Vd = {};
      function createCmd(t2, a2, u2, m2) {
        var h2 = Ld[t2];
        if (!h2)
          return u2.error("createCmd:: can not find cmd config: ", t2), null;
        var g2, M2 = { SER: a2, SID: h2.sid, CID: h2.cid, Q: [] };
        h2.params && m2 && forEach$1(g2 = h2.params).call(g2, function(t3) {
          var a3 = m2[t3.name];
          if (a3 != null) {
            var u3 = t3.type, h3 = t3.reflectMapper, g3 = t3.select;
            switch (t3.type) {
              case "PropertyArray":
                u3 = "ArrayMable", a3 = map$6(a3).call(a3, function(t4) {
                  return { t: "Property", v: h3 ? serialize(t4, h3, g3) : t4 };
                });
                break;
              case "Property":
                a3 = h3 ? serialize(a3, h3, g3) : a3;
                break;
              case "Bool":
                a3 = a3 ? "true" : "false";
            }
            M2.Q.push({ t: u3, v: a3 });
          }
        });
        return { packet: M2, hasPacketResponse: typeof h2.hasPacketResponse != "boolean" || h2.hasPacketResponse, hasPacketTimer: typeof h2.hasPacketTimer != "boolean" || h2.hasPacketTimer };
      }
      function parseCmd(t2, a2) {
        var u2, m2;
        try {
          m2 = JSON.parse(t2);
        } catch (u3) {
          return void a2.error('Parse command error:"' + t2 + '"');
        }
        var h2 = m2.sid + "_" + m2.cid, g2 = m2.r;
        if (includes(u2 = ["4_1", "4_2", "4_10", "4_11"]).call(u2, h2)) {
          var M2 = m2.r[1].headerPacket;
          h2 = M2.sid + "_" + M2.cid, m2.sid = M2.sid, m2.cid = M2.cid, g2 = m2.r[1].body;
        }
        var I2 = Vd[h2], S2 = [];
        if (I2) {
          for (var T2, C2 = _createForOfIteratorHelperLoose$a(I2); !(T2 = C2()).done; ) {
            var b2 = T2.value;
            S2.push(parseEachCmd(m2, b2.config, b2.cmd, g2, a2));
          }
          return S2;
        }
        a2.error("parseCmd:: mapper not exist", h2, m2.code);
      }
      function parseEachCmd(t2, a2, u2, m2, h2) {
        var g2, M2 = { cmd: u2, raw: t2, error: null, service: a2 == null ? void 0 : a2.service, content: {}, __receiveTimeNode: Bu.getTimeNode() };
        if (!u2 || !a2)
          return M2.notFound = true, M2;
        (a2.sid === 18 || a2.sid >= 26 && a2.sid < 100) && (t2.code = function toReadableCode(t3) {
          if (typeof t3 != "number" || t3 != t3)
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "Read code failed", rawData: "" + t3 } });
          if (t3 < 0 || t3 >= 0 && t3 < 1e3 || t3 >= 2e4 && t3 <= 20099)
            return t3;
          var a3 = (65535 & t3) >> 9;
          a3 -= a3 <= 38 ? 1 : 2;
          return 1e5 + 1e3 * a3 + (511 & t3);
        }(t2.code));
        var I2, S2 = function genCmdError(t3, a3) {
          var u3 = xl[t3], m3 = Bl[t3];
          return m3 === null ? null : new Pl({ code: t3, desc: u3 || m3 || t3, detail: { cmd: a3, timetag: to() } });
        }(t2.code, u2);
        if (M2.error = S2, M2.error) {
          if (M2.error.detail.cmd = u2, !((g2 = a2 == null ? void 0 : a2.ignoreErrCodes) === null || g2 === void 0 ? void 0 : includes(g2).call(g2, t2.code)))
            return M2;
          h2.warn("parseCmd:: ignore error ", M2.error), M2.error.detail.ignore = true;
        }
        a2.response && forEach$1(I2 = a2.response).call(I2, function(t3, a3) {
          var u3 = m2[a3], h3 = t3.type, g3 = t3.name, I3 = t3.reflectMapper;
          if (u3 !== void 0)
            switch (h3) {
              case "Property":
                M2.content[g3] = I3 ? deserialize(u3, I3) : u3;
                break;
              case "PropertyArray":
                M2.content[g3] = map$6(u3).call(u3, function(t4) {
                  return I3 ? deserialize(t4, I3) : t4;
                });
                break;
              case "Int":
              case "Long":
              case "Byte":
                M2.content[g3] = +u3;
                break;
              case "Bool":
                M2.content[g3] = u3 === "true" || u3 === true || u3 === 1;
                break;
              default:
                M2.content[g3] = u3;
            }
        });
        return M2;
      }
      function serialize(t2, a2, u2) {
        var m2 = {};
        for (var h2 in t2 = function flattenObjByMapper(t3, a3) {
          var u3 = {};
          for (var m3 in a3) {
            for (var h3, g3 = a3[m3], M3 = typeof g3 == "number" ? m3 : g3.access ? g3.access : m3, I3 = t3, S2 = _createForOfIteratorHelperLoose$a(M3.split(".")); !(h3 = S2()).done; ) {
              var T2 = h3.value;
              if (I3[T2] === void 0 || I3[T2] === null) {
                I3 = void 0;
                break;
              }
              I3 = I3[T2];
            }
            I3 !== void 0 && (u3[M3] = I3);
          }
          return u3;
        }(t2, a2), a2) {
          var g2 = a2[h2], M2 = typeof g2 == "number" ? h2 : g2.access ? g2.access : h2;
          if (!u2 || includes(u2).call(u2, h2))
            if (M2 in t2) {
              if (typeof g2 == "number")
                m2[g2] = t2[M2];
              else if (typeof g2 == "object")
                if (g2.converter) {
                  var I2 = g2.converter(t2[M2], t2);
                  I2 !== void 0 && (m2[g2.id] = I2);
                } else
                  m2[g2.id] = t2[M2];
            } else
              typeof g2 == "object" && g2.def && (typeof g2.def == "function" ? m2[g2.id] = g2.def(t2) : m2[g2.id] = g2.def);
        }
        return m2;
      }
      function deserialize(t2, a2) {
        var u2 = {};
        for (var m2 in t2) {
          var h2 = a2[m2];
          if (typeof h2 == "string")
            u2[h2] = t2[m2];
          else if (typeof h2 == "object" && "prop" in h2) {
            var g2 = h2.access ? h2.access : h2.prop;
            if (h2.converter) {
              var M2 = h2.converter(t2[m2], t2);
              M2 !== void 0 && (u2[g2] = M2);
            } else
              h2.type && h2.type === "number" ? u2[g2] = +t2[m2] : h2.type && h2.type === "boolean" ? u2[g2] = !(t2[m2] === "0" || !t2[m2]) : u2[g2] = t2[m2];
          }
        }
        for (var I2 in a2) {
          var S2 = a2[I2];
          if (S2 && S2.def !== void 0) {
            var T2 = S2.access ? S2.access : S2.prop;
            T2 in u2 || (typeof S2.def == "function" ? u2[T2] = S2.def(t2) : u2[T2] = S2.def);
          }
        }
        return u2 = function unflattenObj(t3) {
          var a3 = {}, u3 = function _loop(u4) {
            var m4 = u4.split(".");
            reduce(m4).call(m4, function(a4, h3, g3) {
              return a4[h3] || (a4[h3] = isNaN(Number(m4[g3 + 1])) ? m4.length - 1 == g3 ? t3[u4] : {} : []);
            }, a3);
          };
          for (var m3 in t3)
            u3(m3);
          return a3;
        }(u2), u2;
      }
      function registerParser(t2) {
        for (var a2 in Dt(Ld, t2.cmdConfig), t2.cmdMap) {
          var u2 = t2.cmdMap[a2], m2 = t2.cmdConfig[u2];
          if (m2)
            if (Dn(Vd[a2])) {
              for (var h2, g2 = false, M2 = _createForOfIteratorHelperLoose$a(Vd[a2]); !(h2 = M2()).done; ) {
                var I2 = h2.value;
                if (I2.cmd === u2 && I2.config.service === m2.service) {
                  g2 = true;
                  break;
                }
              }
              g2 || Vd[a2].push({ config: m2, cmd: u2 });
            } else
              Vd[a2] = [{ config: m2, cmd: u2 }];
        }
      }
      function invertSerializeMap(t2) {
        var a2, u2 = {};
        return forEach$1(a2 = Ht(t2)).call(a2, function(a3) {
          u2[a3] = invertSerializeItem(t2[a3]);
        }), u2;
      }
      function invertSerializeItem(t2) {
        var a2 = {};
        for (var u2 in t2) {
          var m2 = t2[u2];
          typeof m2 == "number" ? a2[m2] = u2 : typeof m2 == "object" && (a2[m2.id] = { prop: u2, type: m2.retType, access: m2.retAccess ? m2.retAccess : m2.access ? m2.access : u2, def: m2.retDef, converter: m2.retConverter });
        }
        return a2;
      }
      function boolToInt(t2) {
        return t2 ? 1 : 0;
      }
      function objectToJSONString(t2) {
        if (t2 && typeof t2 == "object")
          try {
            return Un(t2);
          } catch (t3) {
            return;
          }
      }
      function stringToJSONObject(t2) {
        if (t2 && typeof t2 == "string")
          try {
            return JSON.parse(t2);
          } catch (t3) {
            return;
          }
      }
      var Ud, Dd, qd, Bd, Fd, Gd = { "1_2": "heartbeat", "2_3": "login", "2_5": "kicked", "2_6": "logout", "2_7": "nimLoginClientChange", "2_8": "kick" }, Hd = { login: { clientType: 3, os: 4, sdkVersion: 6, appLogin: 8, protocolVersion: 9, pushTokenName: 10, pushToken: 11, deviceId: 13, appkey: 18, account: 19, browser: 24, clientSession: 26, deviceInfo: 32, isReactNative: 112, token: 1e3, customTag: 38, customClientType: 39, sdkHumanVersion: 40, hostEnv: 41, userAgent: 42, libEnv: 44, authType: 115, loginExt: 116 }, loginRes: { lastLoginDeviceId: 17, customTag: 38, connectionId: 102, ip: 103, port: 104, country: 106, hasXMPush: 111 }, loginPort: { type: 3, os: 4, mac: 5, deviceId: 13, account: 19, deviceInfo: 32, customTag: 38, customClientType: 39, connectionId: 102, ip: 103, port: 104, time: 109, pushType: 110, hasTokenPreviously: 111 }, aosPushInfo: { pushType: 110, hasTokenPreviously: 111 } }, jd = invertSerializeMap(Hd), $d = { login: { sid: 2, cid: 3, service: "auth", params: [{ type: "Property", name: "login", reflectMapper: Hd.login }], response: [{ type: "Property", name: "loginRes", reflectMapper: jd.loginRes }, { type: "PropertyArray", name: "loginPorts", reflectMapper: jd.loginPort }, { type: "Property", name: "aosPushInfo", reflectMapper: jd.aosPushInfo }] }, logout: { sid: 2, cid: 6, service: "auth" }, heartbeat: { sid: 1, cid: 2, service: "auth" }, kicked: { sid: 2, cid: 5, service: "auth", response: [{ type: "Int", name: "clientType" }, { type: "Int", name: "reason" }, { type: "String", name: "ext" }, { type: "Int", name: "customClientType" }] }, nimLoginClientChange: { sid: 2, cid: 7, service: "auth", response: [{ type: "Byte", name: "state" }, { type: "PropertyArray", name: "datas", reflectMapper: jd.loginPort }] }, kick: { sid: 2, cid: 8, service: "auth", params: [{ type: "StrArray", name: "deviceIds" }], response: [{ type: "StrArray", name: "deviceIds" }] } };
      function format(t2, a2) {
        if (!isPlainObject(a2))
          return {};
        var u2 = JSON.parse(Un(a2)), m2 = doFormat(t2, u2);
        return JSON.parse(Un(Dt(Dt({}, u2), m2)));
      }
      function doFormat(t2, a2) {
        if (!isPlainObject(a2))
          return {};
        var u2 = {}, m2 = Ht(t2);
        return forEach$1(m2).call(m2, function(m3) {
          var h2 = t2[m3].type;
          if (typeof h2 != "string") {
            var g2 = doFormat(t2[m3], a2);
            Ht(g2).length > 0 && (u2[m3] = g2);
          } else {
            var M2 = t2[m3], I2 = M2.rawKey || m3, S2 = zd[h2](a2, I2, M2);
            S2 !== void 0 && (a2[I2] = void 0, u2[m3] = S2);
          }
        }), u2;
      }
      !function(t2) {
        t2[t2.text = 0] = "text", t2[t2.image = 1] = "image", t2[t2.audio = 2] = "audio", t2[t2.video = 3] = "video", t2[t2.geo = 4] = "geo", t2[t2.notification = 5] = "notification", t2[t2.file = 6] = "file", t2[t2.tip = 10] = "tip", t2[t2.robot = 11] = "robot", t2[t2.g2 = 12] = "g2", t2[t2.custom = 100] = "custom";
      }(Ud || (Ud = {})), function(t2) {
        t2[t2.p2p = 0] = "p2p", t2[t2.team = 1] = "team", t2[t2.superTeam = 5] = "superTeam";
      }(Dd || (Dd = {})), function(t2) {
        t2[t2.Android = 1] = "Android", t2[t2.iOS = 2] = "iOS", t2[t2.PC = 4] = "PC", t2[t2.WindowsPhone = 8] = "WindowsPhone", t2[t2.Web = 16] = "Web", t2[t2.Server = 32] = "Server", t2[t2.Mac = 64] = "Mac", t2[t2.HarmonyOS = 65] = "HarmonyOS";
      }(qd || (qd = {})), function(t2) {
        t2[t2.unread = 1] = "unread", t2[t2.read = 2] = "read", t2[t2.deleted = 3] = "deleted", t2[t2.sending = 4] = "sending", t2[t2.sendFailed = 5] = "sendFailed", t2[t2.sent = 6] = "sent", t2[t2.receipt = 7] = "receipt", t2[t2.refused = 10] = "refused";
      }(Bd || (Bd = {})), function(t2) {
        t2[t2.default = 0] = "default", t2[t2.leave = 1] = "leave", t2[t2.roam = 2] = "roam";
      }(Fd || (Fd = {}));
      var zd = { number: function number(t2, a2) {
        if (t2[a2] !== void 0)
          return +t2[a2];
      }, string: function string(t2, a2) {
        if (t2[a2] !== void 0)
          return t2[a2];
      }, boolean: function boolean(t2, a2) {
        return +t2[a2] > 0 || +t2[a2] != 0 && void 0;
      }, enum: function _enum(t2, a2, u2) {
        return values(u2)[t2[a2]];
      }, object: function object(t2, a2) {
        if (t2[a2] !== void 0)
          try {
            return JSON.parse(t2[a2]);
          } catch (t3) {
            return {};
          }
      } };
      function formatReverse(t2, a2) {
        if (!isPlainObject(a2))
          return {};
        var u2 = JSON.parse(Un(a2)), m2 = doFormatReverse(t2, u2);
        return JSON.parse(Un(Dt(Dt({}, u2), m2)));
      }
      function doFormatReverse(t2, a2) {
        var u2;
        if (!isPlainObject(a2))
          return reduce(u2 = Ht(t2)).call(u2, function(a3, u3) {
            return a3[t2[u3].rawKey || u3] = void 0, a3;
          }, {});
        var m2 = {}, h2 = Ht(t2);
        return forEach$1(h2).call(h2, function(u3) {
          var h3 = t2[u3].type;
          if (typeof h3 != "string") {
            var g2 = doFormatReverse(t2[u3], a2[u3]);
            return Dt(m2, g2), void (a2[u3] = void 0);
          }
          var M2 = t2[u3], I2 = M2.rawKey || u3, S2 = Wd[h3](a2, u3, M2);
          a2[I2] = void 0, m2[I2] = S2;
        }), m2;
      }
      var Wd = { number: function number(t2, a2) {
        return t2[a2];
      }, string: function string(t2, a2) {
        return t2[a2];
      }, boolean: function boolean(t2, a2) {
        return t2[a2] === true ? 1 : t2[a2] === false ? 0 : void 0;
      }, enum: function _enum(t2, a2, u2) {
        return values(u2)[t2[a2]];
      }, object: function object(t2, a2) {
        if (t2[a2] !== void 0)
          try {
            return Un(t2[a2]);
          } catch (t3) {
            return "";
          }
      } }, Kd = Wd;
      function formatMultiPortLoginInfo(t2, a2) {
        return t2 && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return Dt(Dt({}, t3), { account: t3.account, connectionId: t3.connectionId, deviceId: t3.deviceId, ip: t3.ip, mac: t3.mac, os: t3.os, type: getEnumKeyByEnumValue(qd, t3.type) || t3.type, time: Uu(t3.time), online: a2 !== 3 });
        }) : [];
      }
      var Yd = { 1: { reason: "samePlatformKick", message: "The same account is not allowed to multiple login at the same time" }, 2: { reason: "serverKick", message: "Kicked out by IM server" }, 3: { reason: "otherPlatformKick", message: "Kicked out by other client of your account" }, 4: { reason: "silentlyKick", message: "Quietly kicked" } };
      var Qd = Backoff;
      function Backoff(t2) {
        t2 = t2 || {}, this.ms = t2.min || 100, this.max = t2.max || 1e4, this.factor = t2.factor || 2, this.jitter = t2.jitter > 0 && t2.jitter <= 1 ? t2.jitter : 0, this.attempts = 0;
      }
      Backoff.prototype.duration = function() {
        var t2 = this.ms * Math.pow(this.factor, this.attempts++);
        if (this.jitter) {
          var a2 = Math.random(), u2 = Math.floor(a2 * this.jitter * t2);
          t2 = (1 & Math.floor(10 * a2)) == 0 ? t2 - u2 : t2 + u2;
        }
        return 0 | Math.min(t2, this.max);
      }, Backoff.prototype.reset = function() {
        this.attempts = 0;
      }, Backoff.prototype.setMin = function(t2) {
        this.ms = t2;
      }, Backoff.prototype.setMax = function(t2) {
        this.max = t2;
      }, Backoff.prototype.setJitter = function(t2) {
        this.jitter = t2;
      };
      var Jd, Xd = ["disconnect", "connect", "heartbeat", "message", "json", "event", "ack", "error", "noop"], Zd = ["transport not supported", "client not handshaken", "unauthorized"], ep = ["reconnect"], tp = function(t2) {
        function BaseWebsocket(a3, u2) {
          var m2;
          return (m2 = t2.call(this) || this).url = u2, m2.websocket = null, m2.socketConnectTimer = 0, m2.core = a3, m2.url = u2, m2.status = "disconnected", m2.logger = a3.logger, m2.connect(), m2;
        }
        Nt(BaseWebsocket, t2);
        var a2 = BaseWebsocket.prototype;
        return a2.connect = function connect() {
          var t3 = this;
          this.status !== "connecting" && this.status !== "connected" ? (this.status = "connecting", this.core.adapters.request("https://" + this.url + "/socket.io/1/?t=" + to(), { method: "GET", dataType: "text", timeout: this.core.options.xhrConnectTimeout || 8e3 }, { exception_service: 6 }).then(function(a3) {
            if (t3.status === "connecting") {
              var u2 = a3.data.split(":"), m2 = u2[0];
              return u2[1], t3.sessionId = m2, t3.logger.log("imsocket::XHR success. status " + t3.status + ", " + (t3.status === "connecting" ? "continue websocket connection" : "stop websocket connection")), t3._createWebsocket("wss://" + t3.url + "/socket.io/1/websocket/" + m2);
            }
          }).catch(function(a3) {
            if (t3.status === "connecting") {
              var u2 = 'imsocket::XHR fail. raw message: "' + (a3 = a3 || {}).message + '", code: "' + a3.code + '"', m2 = a3.code;
              m2 = get(t3.core, "options.apiVersion") === "v2" ? a3.code === Nl.V2NIM_ERROR_CODE_CONNECT_TIMEOUT ? Nl.V2NIM_ERROR_CODE_CONNECT_TIMEOUT : Nl.V2NIM_ERROR_CODE_CONNECT_FAILED : a3.code === 408 ? 408 : 415;
              var h2 = new Pl({ code: m2, detail: { reason: u2, rawError: a3 } });
              t3.logger.error(u2), t3.status = "disconnected", t3.emit("handshakeFailed", h2);
            }
          })) : this.logger.warn("imsocket::socket is connecting or connected", this.status);
        }, a2.close = function close() {
          if (this.status = "disconnected", this.websocket) {
            this.logger.log("imsocket:: close websocket");
            try {
              this.websocket.send(this.encodePacket({ type: "disconnect" }));
            } catch (t3) {
              this.logger.warn("imsocket::attempt to send encodePacket error", t3);
            }
            try {
              this.websocket.close();
            } catch (t3) {
              this.logger.warn("imsocket::attempt to close websocket error", t3);
            }
            this.clean(), this.emit("disconnect", { code: 0, reason: "Active close websocket" });
          }
        }, a2.clean = function clean() {
          this.status = "disconnected", clearTimeout(this.socketConnectTimer), this.websocket && (this.socketUrl = void 0, this.websocket.onmessage = null, this.websocket.onopen = null, this.websocket.onerror = null, this.websocket.onclose = null, this.websocket = null);
        }, a2.onConnect = function onConnect() {
          this.status = "connected", this.emit("connect"), clearTimeout(this.socketConnectTimer);
        }, a2._createWebsocket = function _createWebsocket(t3) {
          var a3, u2 = this;
          this.socketConnectTimer = mo(function() {
            u2.logger.error("imsocket::Websocket connect timeout. url: ", u2.socketUrl), u2.emit("handshakeFailed", new Pl({ code: get(u2.core, "options.apiVersion") === "v2" ? Nl.V2NIM_ERROR_CODE_CONNECT_TIMEOUT : 415, detail: { reason: "imsocket::Websocket connect timeout. url: " + u2.socketUrl } }));
          }, this.core.options.socketConnectTimeout || 8e3), this.socketUrl = t3, this.websocket = new Jl.WebSocket(t3), this.websocket.onmessage = bind$1(a3 = this.onMessage).call(a3, this), this.websocket.onclose = function(t4) {
            var a4 = (t4 == null ? void 0 : t4.reason) || (t4 == null ? void 0 : t4.message) || (t4 == null ? void 0 : t4.errMsg) || "websocket.onclose";
            u2.logger.log("imsocket::Websocket onclose done. code is " + (t4 == null ? void 0 : t4.code) + " and reason is " + a4), u2.clean(), u2.emit("disconnect", { code: (t4 == null ? void 0 : t4.code) || 0, reason: a4 });
          }, this.websocket.onerror = function(t4) {
            u2.logger.error("imsocket::Websocket onerror", t4), u2.core.status === "logined" && u2.core.clientSocket.ping();
          };
        }, a2.onMessage = function onMessage(t3) {
          var a3, u2 = this.decodePacket(t3.data);
          if (u2)
            switch (u2.type) {
              case "connect":
                this.onConnect();
                break;
              case "disconnect":
                this.close(), this.emit("disconnect", { code: 0, reason: "MessageEvent type disconnect" });
                break;
              case "message":
              case "json":
                this.emit("message", u2.data);
                break;
              case "event":
                u2.name && this.emit(u2.name, u2.args);
                break;
              case "error":
                u2.reason === "unauthorized" ? this.emit("connect_failed", u2.reason) : this.emit("error", u2.reason), this.logger.error("imsocket::Websocket connect failed, onmessage type error. url: ", this.socketUrl), clearTimeout(this.socketConnectTimer), this.emit("handshakeFailed", new Pl({ code: get(this.core, "options.apiVersion") === "v2" ? Nl.V2NIM_ERROR_CODE_CONNECT_FAILED : 408, detail: { reason: "imsocket::Websocket connect failed, onMessage socket error. url: " + this.socketUrl } }));
                break;
              case "heartbeat":
                (a3 = this.websocket) === null || a3 === void 0 || a3.send(this.encodePacket({ type: "heartbeat" }));
                break;
              default:
                this.logger.warn("imsocket::Websocket no handler type", u2.type);
            }
        }, a2.encodePacket = function encodePacket(t3) {
          var a3, u2, m2 = t3.type, h2 = t3.id, g2 = h2 === void 0 ? "" : h2, M2 = t3.endpoint, I2 = M2 === void 0 ? "" : M2, S2 = t3.ack, T2 = null;
          if (!m2)
            return "";
          switch (m2) {
            case "error":
              a3 = t3.reason ? indexOf(Zd).call(Zd, t3.reason) : "", u2 = t3.advice ? indexOf(ep).call(ep, t3.advice) : "", a3 === "" && u2 === "" || (T2 = a3 + (u2 !== "" ? "+" + u2 : ""));
              break;
            case "message":
              t3.data !== "" && (T2 = t3.data);
              break;
            case "event":
              a3 = { name: t3.name }, a3 = t3.args && t3.args.length ? { name: t3.name, args: t3.args } : { name: t3.name }, T2 = Un(a3);
              break;
            case "json":
              T2 = Un(t3.data);
              break;
            case "connect":
              t3.qs && (T2 = t3.qs);
              break;
            case "ack":
              T2 = t3.ackId + (t3.args && t3.args.length ? "+" + Un(t3.args) : "");
          }
          var C2 = [indexOf(Xd).call(Xd, m2), g2 + (S2 === "data" ? "+" : ""), I2];
          return T2 != null && C2.push(T2), C2.join(":");
        }, a2.decodePacket = function decodePacket(t3) {
          if (t3)
            if (t3.charAt(0) != "\uFFFD") {
              var a3 = t3.match(/([^:]+):([0-9]+)?(\+)?:([^:]+)?:?([\s\S]*)?/);
              if (a3) {
                var u2, m2 = a3[1], h2 = a3[2], g2 = a3[3], M2 = a3[4], I2 = a3[5], S2 = { type: Xd[+m2], endpoint: M2 };
                switch (h2 && (S2.id = h2, S2.ack = !g2 || "data"), S2.type) {
                  case "error":
                    u2 = I2.split("+"), S2.reason = Zd[+u2[0]] || "";
                    break;
                  case "message":
                    S2.data = I2 || "";
                    break;
                  case "connect":
                    S2.qs = I2 || "";
                    break;
                  case "event":
                    try {
                      var T2 = JSON.parse(I2);
                      S2.name = T2.name, S2.args = T2.args;
                    } catch (t4) {
                      this.logger.error("imsocket::parseData::type::event error", t4);
                    }
                    S2.args = S2.args || [];
                    break;
                  case "json":
                    try {
                      S2.data = JSON.parse(I2);
                    } catch (t4) {
                      this.logger.error("imsocket::parseData::type::json error", t4);
                    }
                    break;
                  case "ack":
                    if ((u2 = I2.match(/^([0-9]+)(\+)?(.*)/)) && (S2.ackId = u2[1], S2.args = [], u2[3]))
                      try {
                        S2.args = u2[3] ? JSON.parse(u2[3]) : [];
                      } catch (t4) {
                        this.logger.error("imsocket::parseData::type::ack error", t4);
                      }
                }
                return S2;
              }
            } else
              this.logger.error("imsocket::unrecognize dataStr", slice(t3).call(t3, 0, 20));
        }, a2.send = function send(t3) {
          var a3, u2 = { data: t3, type: "message", endpoint: "" };
          (a3 = this.websocket) === null || a3 === void 0 || a3.send(this.encodePacket(u2));
        }, BaseWebsocket;
      }(ho);
      function uniq(t2) {
        t2 = t2 || [];
        for (var a2 = [], u2 = 0; u2 < t2.length; u2++)
          indexOf(a2).call(a2, t2[u2]) === -1 && a2.push(t2[u2]);
        return a2;
      }
      function _createForOfIteratorHelperLoose$9(t2, a2) {
        var u2, m2 = es !== void 0 && $l(t2) || t2["@@iterator"];
        if (m2)
          return bind$1(u2 = (m2 = m2.call(t2)).next).call(u2, m2);
        if (Dn(t2) || (m2 = function _unsupportedIterableToArray$9(t3, a3) {
          if (t3) {
            var u3;
            if (typeof t3 == "string")
              return _arrayLikeToArray$9(t3, a3);
            var m3 = slice(u3 = {}.toString.call(t3)).call(u3, 8, -1);
            return m3 === "Object" && t3.constructor && (m3 = t3.constructor.name), m3 === "Map" || m3 === "Set" ? jl(t3) : m3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m3) ? _arrayLikeToArray$9(t3, a3) : void 0;
          }
        }(t2)) || a2 && t2 && typeof t2.length == "number") {
          m2 && (t2 = m2);
          var h2 = 0;
          return function() {
            return h2 >= t2.length ? { done: true } : { done: false, value: t2[h2++] };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _arrayLikeToArray$9(t2, a2) {
        (a2 == null || a2 > t2.length) && (a2 = t2.length);
        for (var u2 = 0, m2 = Array(a2); u2 < a2; u2++)
          m2[u2] = t2[u2];
        return m2;
      }
      !function(t2) {
        t2[t2.ACTIVE = 1] = "ACTIVE", t2[t2.KICKED = 2] = "KICKED", t2[t2.OFFLINE = 3] = "OFFLINE";
      }(Jd || (Jd = {}));
      var rp = function() {
        function V1ClientSocket(t3, a2) {
          this.linkUrls = [], this.isAutoReconnect = false, this.packetTimeout = 3e4, this.packetSer = 1, this.retryCount = 0, this.reconnectTimer = 0, this.backoff = new Qd({ max: 8e3, min: 1600, jitter: 0.01 }), this.sendingCmdMap = new fc(), this.pingTimer = 0, this.hasNetworkListener = false, this.core = t3, a2 && (this.auth = a2), this.logger = t3.logger, this.reporter = t3.reporter, this.timerManager = t3.timerManager;
        }
        var t2 = V1ClientSocket.prototype;
        return t2.setSessionId = function setSessionId(t3) {
        }, t2.connect = function connect(t3, a2) {
          return t3 === void 0 && (t3 = {}), __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2, m2, h2, g2, M2, I2;
            return Ql.wrap(function _callee$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    if (validate({ linkUrls: { type: "array", itemType: "string", required: false } }, t3), /^(unconnected|waitReconnect)$/.test(this.core.status)) {
                      S2.next = 5;
                      break;
                    }
                    return u2 = "Core socket status is " + this.core.status + ", and would not connect", this.logger.warn(u2), S2.abrupt("return", zi.reject(u2));
                  case 5:
                    this.core.status = "connecting", t3.linkUrls && t3.linkUrls.length > 0 && (this.linkUrls = concat(m2 = t3.linkUrls).call(m2, this.linkUrls), this.linkUrls = uniq(this.linkUrls)), this.linkUrls.length === 0 && this.linkUrls.push(Tu), h2 = 0;
                  case 9:
                    if (!(h2 < this.linkUrls.length)) {
                      S2.next = 31;
                      break;
                    }
                    return g2 = this.linkUrls[h2], M2 = new Date().getTime(), S2.prev = 12, S2.next = 15, this.doConnect(g2);
                  case 15:
                    return this.core.status = "connected", this.logger.log("clientsocketV1::connect success with url: " + g2), S2.abrupt("return", g2);
                  case 20:
                    S2.prev = 20, S2.t0 = S2.catch(12), I2 = S2.t0, a2 && a2(I2, g2), this.reporter.reportTraceStart("exceptions", { user_id: this.core.options.account, start_time: M2, action: 0, exception_service: 6 }), this.reporter.reportTraceUpdateV2("exceptions", { code: typeof I2.code == "number" ? I2.code : 0, description: I2.message || "" + I2.code, operation_type: 0, target: g2 }, { asyncParams: Jl.net.getNetworkStatus() }), this.reporter.reportTraceEnd("exceptions", 1), this.logger.warn("clientsocketV1::connect failed with url: " + g2, S2.t0);
                  case 28:
                    h2++, S2.next = 9;
                    break;
                  case 31:
                    throw this.retryCount === 0 ? this.doDisconnect(Jd.ACTIVE, "SocketHandshakeFailed") : this.doDisconnect(Jd.OFFLINE, "ReconnectHadRetryAllLinks"), new Error("clientSocketV1::socket xhr or socket connect failed");
                  case 33:
                  case "end":
                    return S2.stop();
                }
            }, _callee, this, [[12, 20]]);
          }));
        }, t2.doConnect = function doConnect(t3) {
          var a2 = this, u2 = false;
          return new zi(function(m2, h2) {
            var g2;
            a2.socket = new tp(a2.core, t3), a2.socket.on("connect", function() {
              a2.logger.log("clientSocketV1::on connect", t3), a2.core.reporterHookLinkKeep && (a2.core.reporterHookLinkKeep.start(), a2.core.reporterHookLinkKeep.update({ code: 0, description: "connection begin", operation_type: 0, target: t3 })), u2 = true, m2();
            }), a2.socket.on("message", bind$1(g2 = a2.onMessage).call(g2, a2)), a2.socket.on("disconnect", function(m3) {
              return __awaiter(a2, void 0, void 0, Ql.mark(function _callee2() {
                return Ql.wrap(function _callee2$(a3) {
                  for (; ; )
                    switch (a3.prev = a3.next) {
                      case 0:
                        if (this.logger.log("clientSocketV1::socket on disconnect", m3), !this.core.reporterHookLinkKeep) {
                          a3.next = 5;
                          break;
                        }
                        return a3.next = 4, this.core.reporterHookLinkKeep.update({ code: (m3 == null ? void 0 : m3.code) || 0, description: (m3 == null ? void 0 : m3.reason) || "socket on disconnect", operation_type: 1, target: t3 });
                      case 4:
                        this.core.reporterHookLinkKeep.end(false);
                      case 5:
                        u2 = true, this.doDisconnect(Jd.OFFLINE, "SocketOnDisconnect");
                      case 7:
                      case "end":
                        return a3.stop();
                    }
                }, _callee2, this);
              }));
            }), a2.socket.on("handshakeFailed", function(t4) {
              u2 ? a2.ping() : (a2.logger.error('clientsocketV1::handshake failed: "' + (t4 && t4.message) + '"'), a2.cleanSocket()), u2 = true, h2(t4);
            });
          });
        }, t2.cleanSocket = function cleanSocket() {
          this.socket && (typeof this.socket.removeAllListeners == "function" && this.socket.removeAllListeners(), typeof this.socket.close == "function" && this.socket.close(), this.socket = void 0);
        }, t2.beforeConnect = function beforeConnect() {
          this.reconnectTimer && clearTimeout(this.reconnectTimer);
        }, t2.resetConnectStatus = function resetConnectStatus() {
          clearTimeout(this.reconnectTimer), this.backoff.reset(), this.retryCount = 0, this.initOnlineListener();
        }, t2.doDisconnect = function doDisconnect(t3, a2, u2) {
          var m2, h2, g2, M2, I2;
          if (this.logger.log("doDisconnect: type " + t3 + ", description " + a2), this.core.status !== "unconnected") {
            var S2 = { 1: "close", 2: "kicked", 3: "broken" }[t3] || "";
            this.markAllCmdInvaild(new Pl({ code: 415, desc: "Packet timeout due to instance disconnect", detail: { reason: "Packet timeout due to instance disconnect", disconnect_reason: S2 } })), this.timerManager.destroy(), clearTimeout(this.pingTimer), this.cleanSocket();
            var T2 = !this.core.options.needReconnect || this.retryCount >= this.core.options.reconnectionAttempts;
            if (t3 === Jd.ACTIVE || T2)
              this.logger.log("doDisconnect: emit disconnect, type " + t3, T2), this.core.status = "unconnected", this.reconnectTimer && clearTimeout(this.reconnectTimer), this.core.eventBus.emit("disconnect"), this.core.emit("disconnect"), (m2 = this.auth) === null || m2 === void 0 || m2.emit("disconnect"), this.destroyOnlineListener();
            else if (t3 === Jd.KICKED) {
              this.logger.log("doDisconnect: kicked"), this.core.status = "unconnected", this.reconnectTimer && clearTimeout(this.reconnectTimer);
              var C2 = typeof a2 == "string" ? { reason: "unknow", message: a2 } : a2;
              this.core.eventBus.emit("kicked", C2), this.core.emit("kicked", C2), (h2 = this.auth) === null || h2 === void 0 || h2.emit("kicked", C2), this.destroyOnlineListener();
            } else
              t3 === Jd.OFFLINE && this.core.V1NIMLoginService.isManualLoginAttempt ? (this.logger.log("doDisconnect: offline in manual login phase. no reconnect"), this.core.status = "unconnected", this.reconnectTimer && clearTimeout(this.reconnectTimer), this.destroyOnlineListener()) : t3 === Jd.OFFLINE && ((M2 = (g2 = this.auth) === null || g2 === void 0 ? void 0 : g2.authenticator) === null || M2 === void 0 ? void 0 : M2.checkLoginTerminalCode(u2 == null ? void 0 : u2.code)) ? (this.logger.log("doDisconnect: login terminal code " + (u2 == null ? void 0 : u2.code) + ", no reconnect"), this.core.status = "unconnected", this.reconnectTimer && clearTimeout(this.reconnectTimer), this.destroyOnlineListener(), this.core.eventBus.emit("disconnect"), this.core.emit("disconnect"), (I2 = this.auth) === null || I2 === void 0 || I2.emit("disconnect")) : t3 === Jd.OFFLINE ? (this.logger.log("doDisconnect: start to reconnect"), this.attempToReconnect()) : this.logger.log("doDisconnect: nothing to do");
          } else
            this.logger.warn("doDisconnect: already unconnected");
        }, t2.attempToReconnect = function attempToReconnect() {
          var t3, a2, u2 = this;
          if (this.core.status !== "waitReconnect") {
            this.retryCount === 0 && (this.core.eventBus.emit("disconnect"), this.core.emit("disconnect"), (t3 = this.auth) === null || t3 === void 0 || t3.emit("disconnect"));
            var m2 = this.backoff.duration();
            this.retryCount++, this.logger.log("willReconnect " + this.retryCount + " " + m2), this.core.eventBus.emit("willReconnect", { retryCount: this.retryCount, duration: m2 }), this.core.emit("willReconnect", { retryCount: this.retryCount, duration: m2 }), (a2 = this.auth) === null || a2 === void 0 || a2.emit("willReconnect", { retryCount: this.retryCount, duration: m2 }), this.core.status = "waitReconnect", this.reconnectTimer && clearTimeout(this.reconnectTimer), this.reconnectTimer = mo(function() {
              return __awaiter(u2, void 0, void 0, Ql.mark(function _callee3() {
                var t4 = this;
                return Ql.wrap(function _callee3$(a3) {
                  for (; ; )
                    switch (a3.prev = a3.next) {
                      case 0:
                        if (this.core.status === "waitReconnect") {
                          a3.next = 3;
                          break;
                        }
                        return this.logger.warn("doDisconnect: reconnectTimer status is " + this.core.status + ", would not go on reconnecting"), a3.abrupt("return");
                      case 3:
                        return a3.next = 5, Jl.net.getNetworkStatus();
                      case 5:
                        a3.sent.net_connect === false ? (this.logger.log("doDisconnect: skip this reconnection attempt because network is offline"), this.core.status = "connecting", this.retryCount >= this.core.options.reconnectionAttempts ? this.doDisconnect(Jd.OFFLINE, "MaxReconnectionAttemptExceed") : this.attempToReconnect()) : this.core.V1NIMLoginService.login({ isAutoReconnect: true }).catch(function() {
                          t4.logger.error("clientsocketV1::attempToReconnect failed " + t4.retryCount);
                        });
                      case 7:
                      case "end":
                        return a3.stop();
                    }
                }, _callee3, this);
              }));
            }, m2);
          } else
            this.logger.warn("doDisconnect: already is waiting reconnect");
        }, t2.sendCmd = function sendCmd(t3, a2, u2) {
          var m2 = this;
          if (this.core.status !== "logined" && t3 !== "login" && t3 !== "chatroomLogin" && t3 !== "qchatLogin")
            return this.logger.warn("instance status is " + this.core.status + ", so can not sendCmd " + t3), zi.reject({ cmd: t3, error: { code: "No_connected", message: "Connection not established", timetag: new Date().getTime() } });
          if (!this.socket || !this.socket.send)
            return zi.reject("No_socket");
          var h2 = t3 !== "heartbeat", g2 = h2 ? this.packetSer++ : 0, M2 = createCmd(t3, g2, this.logger, a2);
          if (!M2) {
            var I2 = "SendCmd " + g2 + " " + t3 + " error";
            return this.logger.error(I2), zi.reject(new Error(I2));
          }
          var S2 = M2.packet, T2 = M2.hasPacketResponse, C2 = M2.hasPacketTimer, b2 = Un(S2);
          h2 && (this.logger.getDebugMode() ? this.logger.debug("clientsocketV1::sendCmd", t3, "ser:" + g2, b2) : this.logger.log("clientsocketV1::sendCmd", t3, "ser:" + g2));
          var E2 = new Date().getTime();
          return new zi(function(h3, M3) {
            T2 && m2.sendingCmdMap.set(g2, { cmd: t3, params: a2, callback: [h3, M3], timer: C2 ? mo(function() {
              var a3 = new Pl({ code: 408, desc: "Packet Timeout", detail: { reason: "Packet Timeout", cmd: t3, ser: g2, timetag: to() } });
              m2.markCmdInvalid(g2, a3, t3);
            }, u2 && u2.timeout ? u2.timeout : m2.core.config.timeout) : null });
            try {
              m2.socket.send(b2), T2 || h3(S2);
            } catch (a3) {
              var I3 = new Pl({ code: 415, detail: { reason: a3 && a3.message || "Unable to send packet", cmd: t3, ser: g2, timetag: to(), rawError: a3 } });
              m2.markCmdInvalid(g2, I3, t3), M3(a3);
            }
          }).catch(function(t4) {
            var a3, u3 = [408, 415];
            if (!includes(u3).call(u3, t4.code))
              return zi.reject(t4);
            m2.reporter.reportTraceStart("exceptions", { user_id: m2.core.options.account, trace_id: (a3 = m2.socket) === null || a3 === void 0 ? void 0 : a3.sessionId, start_time: E2, action: 2, exception_service: 6 });
            var h3 = get(t4, "data.disconnect_reason") || "", g3 = t4.code === 408 ? "Send failed due to timeout" : "Send failed. Reason unknown";
            return g3 = t4.code === 415 ? Un({ disconnect_reason: h3 }) : g3, m2.reporter.reportTraceUpdateV2("exceptions", { code: t4.code || 415, description: g3, operation_type: 1, target: S2.SID + "-" + S2.CID, context: "" + S2.SER }, { asyncParams: Jl.net.getNetworkStatus() }), m2.reporter.reportTraceEnd("exceptions", 1), zi.reject(t4);
          });
        }, t2.onMessage = function onMessage(t3) {
          var a2 = parseCmd(t3, this.logger);
          if (a2)
            for (var u2, m2 = _createForOfIteratorHelperLoose$9(a2); !(u2 = m2()).done; ) {
              var h2 = u2.value, g2 = h2.raw.ser;
              if (h2.error && this.logger.error("core:onMessage packet error", h2.raw.sid + "_" + h2.raw.cid + ", ser:" + g2 + ",", h2.error), h2.notFound)
                return void this.logger.warn("clientsocketV1::onMessage packet not found", h2.raw.sid + "_" + h2.raw.cid + ", ser:" + g2);
              h2.cmd !== "heartbeat" && (this.logger.getDebugMode() ? this.logger.debug("imsocket::recvCmd ser:" + g2, h2.cmd, h2.content) : this.logger.log("imsocket::recvCmd ser:" + g2, h2.cmd)), this.packetHandler(h2);
            }
        }, t2.packetHandler = function packetHandler(t3) {
          var a2, u2, m2 = this;
          if (t3) {
            var h2 = t3.raw.ser, g2 = this.sendingCmdMap.get(h2);
            if (g2 && g2.cmd === t3.cmd) {
              var M2 = g2.callback, I2 = g2.timer, S2 = g2.params;
              if (clearTimeout(I2), t3.params = S2, this.sendingCmdMap.delete(h2), t3.cmd === "heartbeat")
                return void M2[0]();
              var T2 = (a2 = this.core[t3.service]) === null || a2 === void 0 ? void 0 : a2.process(t3);
              T2 && typeof T2.then == "function" ? T2.then(function(t4) {
                M2[0](t4);
              }).catch(function(t4) {
                M2[1](t4);
              }) : (this.logger.log("imsocket:: handlerFn without promise", t3.service, t3.cmd), M2[0]());
            } else {
              var C2 = (u2 = this.core[t3.service]) === null || u2 === void 0 ? void 0 : u2.process(t3);
              C2 && typeof C2.then == "function" && C2.catch(function(t4) {
                m2.logger.error("imsocket::no obj cache, no process handler", t4);
              });
            }
          }
        }, t2.markCmdInvalid = function markCmdInvalid(t3, a2, u2) {
          var m2 = this.sendingCmdMap.get(t3);
          if (m2) {
            var h2 = m2.callback, g2 = m2.timer;
            g2 && clearTimeout(g2), this.sendingCmdMap.delete(t3), this.logger.warn("packet " + t3 + ", " + u2 + " is invalid:", a2), h2[1](a2);
          }
        }, t2.markAllCmdInvaild = function markAllCmdInvaild(t3) {
          var a2, u2 = this;
          this.logger.log("markAllCmdInvaild", t3), forEach$1(a2 = this.sendingCmdMap).call(a2, function(a3) {
            var m2 = a3.callback, h2 = a3.timer, g2 = a3.cmd;
            u2.logger.log('markAllCmdInvaild:: cmd "' + g2 + '"'), h2 && clearTimeout(h2), m2[1](t3);
          }), this.sendingCmdMap.clear();
        }, t2.ping = function ping() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a2 = this;
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return clearTimeout(this.pingTimer), u2.prev = 1, u2.next = 4, this.sendCmd("heartbeat");
                  case 4:
                    u2.next = 18;
                    break;
                  case 6:
                    return u2.prev = 6, u2.t0 = u2.catch(1), u2.next = 10, this.testHeartBeat5Timeout();
                  case 10:
                    if (!u2.sent) {
                      u2.next = 18;
                      break;
                    }
                    if (!this.core.reporterHookLinkKeep) {
                      u2.next = 16;
                      break;
                    }
                    return u2.next = 15, this.core.reporterHookLinkKeep.update({ code: 0, description: "Heartbeat-discovered link failure", operation_type: 1, target: (t3 = this.socket) === null || t3 === void 0 ? void 0 : t3.url });
                  case 15:
                    this.core.reporterHookLinkKeep.end(true);
                  case 16:
                    return this.doDisconnect(Jd.OFFLINE, "PingError"), u2.abrupt("return");
                  case 18:
                    this.pingTimer = mo(function() {
                      a2.ping();
                    }, 3e4);
                  case 19:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this, [[1, 6]]);
          }));
        }, t2.testHeartBeat5Timeout = function testHeartBeat5Timeout() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var t3;
            return Ql.wrap(function _callee5$(a2) {
              for (; ; )
                switch (a2.prev = a2.next) {
                  case 0:
                    clearTimeout(this.pingTimer), t3 = 0;
                  case 2:
                    if (!(t3 < 5)) {
                      a2.next = 15;
                      break;
                    }
                    return a2.prev = 3, a2.next = 6, this.sendCmd("heartbeat", {}, { timeout: 3e3 });
                  case 6:
                    return a2.abrupt("return", false);
                  case 9:
                    a2.prev = 9, a2.t0 = a2.catch(3), this.logger.log("clientsocketV1:: test heartbeat " + t3 + " Timeout");
                  case 12:
                    t3++, a2.next = 2;
                    break;
                  case 15:
                    return a2.abrupt("return", true);
                  case 16:
                  case "end":
                    return a2.stop();
                }
            }, _callee5, this, [[3, 9]]);
          }));
        }, t2.initOnlineListener = function initOnlineListener() {
          var t3 = this;
          this.hasNetworkListener || (this.logger.log("clientsocketV1::onlineListener:init"), this.hasNetworkListener = true, Jl.net.onNetworkStatusChange(function(a2) {
            t3.logger.log("clientsocketV1::onlineListener:network change", a2), a2.isConnected && t3.core.status === "logined" ? t3.ping() : a2.isConnected && t3.core.status === "waitReconnect" ? (t3.reconnectTimer && clearTimeout(t3.reconnectTimer), t3.core.V1NIMLoginService.login({ isAutoReconnect: true }).catch(function() {
              t3.logger.error("clientsocketV1::attempToReconnect failed " + t3.retryCount);
            })) : a2.isConnected || t3.doDisconnect(Jd.OFFLINE, "OfflineListener");
          }));
        }, t2.destroyOnlineListener = function destroyOnlineListener() {
          this.logger.log("clientsocketV1::onlineListener:destroy"), Jl.net.offNetworkStatusChange(), this.hasNetworkListener = false;
        }, t2.disconnect = function disconnect() {
          switch (this.core.status) {
            case "connected":
            case "logined":
            case "connecting":
            case "waitReconnect":
              return this.doDisconnect(Jd.ACTIVE, "UserActiveDisconnect"), zi.resolve();
            default:
              return zi.resolve();
          }
        }, V1ClientSocket;
      }(), np = function() {
        function V1NIMLoginLbs(t3) {
          this.socketLinkUrls = [], this.timer = 0, this.failedCount = 0, this.core = t3, this.auth = t3.V1NIMLoginService, this.logger = this.core.logger;
        }
        var t2 = V1NIMLoginLbs.prototype;
        return t2.getLbsInfos = function getLbsInfos() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var t3, a2, u2, m2;
            return Ql.wrap(function _callee$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    if (!(this.socketLinkUrls.length > 0)) {
                      h2.next = 5;
                      break;
                    }
                    return t3 = this.socketLinkUrls, this.socketLinkUrls = [], this.core.logger.log("V1NIMLoginService::getLbsInfos:use cache link", t3), h2.abrupt("return", zi.resolve(t3));
                  case 5:
                    return this.core.reporterHookLBS.start(this.core.account), a2 = uniq(this.auth.config.lbsUrls), h2.prev = 7, h2.next = 10, this.ladderLoad(a2);
                  case 10:
                    if ((u2 = h2.sent).status === 200 && u2.data) {
                      h2.next = 14;
                      break;
                    }
                    throw this.core.logger.error("V1NIMLoginService::getLbsInfos:error status", u2.status, u2), new Pl({ code: Nl.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "V1NIMLoginService::getLbsInfos failed, status " + u2.status } });
                  case 14:
                    this.success(u2), h2.next = 25;
                    break;
                  case 17:
                    if (h2.prev = 17, h2.t0 = h2.catch(7), m2 = h2.t0, this.core.logger.error("V1NIMLoginService::lbs getLbsInfos error, use default link: " + this.auth.config.linkUrl + ". error:", h2.t0), this.reportForFail(a2[0], m2.code, m2.message), !this.checkTerminator(m2.code)) {
                      h2.next = 24;
                      break;
                    }
                    throw h2.t0;
                  case 24:
                    this.socketLinkUrls = [this.auth.config.linkUrl];
                  case 25:
                    return h2.abrupt("return", this.socketLinkUrls);
                  case 26:
                  case "end":
                    return h2.stop();
                }
            }, _callee, this, [[7, 17]]);
          }));
        }, t2.checkTerminator = function checkTerminator(t3) {
          return t3 === Nl.V2NIM_ERROR_CODE_CANCELLED || t3 === Nl.V2NIM_ERROR_CODE_TIMEOUT;
        }, t2.generateUrl = function generateUrl(t3) {
          return t3 + (indexOf(t3).call(t3, "?") > -1 ? "&" : "?") + "k=" + this.core.options.appkey + "&id=" + this.core.auth.getLoginUser() + "&sv=180&pv=1&networkType=0&lv=1";
        }, t2.requstLbs = function requstLbs(t3) {
          return this.auth.doLoginStepsManager.add(this.core.adapters.request(this.generateUrl(t3), { method: "GET", dataType: "json", timeout: 8e3 }));
        }, t2.setLadderTimer = function setLadderTimer(t3, a2, u2, m2) {
          var h2 = this;
          this.timer && clearTimeout(this.timer);
          var g2 = t3[a2];
          this.timer = mo(function() {
            g2 && (h2.setLadderTimer(t3, a2 + 1, u2, m2), h2.core.logger.log("V1NIMLoginService::getLbsInfos " + a2 + ":", g2), h2.reportForLbsStart(g2, a2), h2.requstLbs(g2).then(function(t4) {
              h2.reset(), u2(Dt(Dt({}, t4), { url: g2 }));
            }).catch(function(u3) {
              var M2;
              if (h2.core.logger.warn("V1NIMLoginService::getLbsInfos " + a2 + " failed:", u3), h2.failedCount += 1, h2.reportForFailOnce(g2, u3.code, ((M2 = u3.detail) === null || M2 === void 0 ? void 0 : M2.reason) || u3.message), h2.failedCount >= t3.length || h2.checkTerminator(u3.code))
                return h2.reset(), void m2(u3);
            }));
          }, 2e3);
        }, t2.ladderLoad = function ladderLoad(t3) {
          var a2 = this;
          return new zi(function(u2, m2) {
            t3.length > 1 && a2.setLadderTimer(t3, 1, u2, m2);
            var h2 = t3[0];
            a2.core.logger.log("V1NIMLoginService::getLbsInfos 0:", h2), a2.reportForLbsStart(h2, 0), a2.requstLbs(h2).then(function(t4) {
              a2.reset(), u2(Dt(Dt({}, t4), { url: h2 }));
            }).catch(function(u3) {
              var g2;
              a2.failedCount += 1, a2.core.logger.warn("V1NIMLoginService::getLbsInfos 0 failed:", u3), a2.reportForFailOnce(h2, u3.code, ((g2 = u3.detail) === null || g2 === void 0 ? void 0 : g2.reason) || u3.message), (a2.failedCount >= t3.length || a2.checkTerminator(u3.code)) && (a2.reset(), m2(u3));
            });
          });
        }, t2.success = function success(t3) {
          var a2, u2, m2, h2, g2 = t3.data, M2 = [this.auth.config.linkUrl];
          get(g2, "common.link") && (M2 = concat(h2 = get(g2, "common.link")).call(h2, M2));
          get(g2, 'common["link.default"]') && (M2 = concat(M2).call(M2, get(g2, 'common["link.default"]'))), this.socketLinkUrls = M2, g2["nos-chunk"] && (this.logger.log("getLbsInfos success. lbs.nos-chunk", g2["nos-chunk"]), (u2 = this.core.cloudStorage) === null || u2 === void 0 || u2.setOptions({ chunkUploadHost: g2["nos-chunk"] })), Dn(g2.nosup) && g2.nosup.length > 0 && (this.logger.log("getLbsInfos success. lbs.nosup", g2.nosup), (m2 = this.core.cloudStorage) === null || m2 === void 0 || m2.setOptions({ commonUploadHostBackupList: g2.nosup, commonUploadHost: g2.nosup[0] })), this.core.logger.log("V1NIMLoginService::getLbsInfos success, socket link:", slice(a2 = this.socketLinkUrls).call(a2, 0), "chunkUploadHost: ", t3.data["nos-chunk"]), this.reportForLbsSuccess(t3.url, t3.data);
        }, t2.reportForLbsStart = function reportForLbsStart(t3, a2) {
          this.core.reporterHookLBS.updateBegin({ target: t3, index: a2 });
        }, t2.reportForLbsSuccess = function reportForLbsSuccess(t3, a2) {
          this.core.reporterHookLBS.updateComplete({ target: t3, code: 200, body: Un(a2) }), this.core.reporterHookLBS.end(true), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "HTTP", target: t3, code: 200, succeed: true }, { asyncParams: Jl.net.getNetworkStatus() });
        }, t2.reportForFailOnce = function reportForFailOnce(t3, a2, u2) {
          this.core.reporterHookLBS.updateComplete({ target: t3, code: a2, body: u2 });
        }, t2.reportForFail = function reportForFail(t3, a2, u2) {
          this.core.reporterHookLBS.end(false), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "HTTP", target: t3, description: u2, code: a2, succeed: false }, { asyncParams: Jl.net.getNetworkStatus() });
        }, t2.reset = function reset() {
          this.socketLinkUrls = [], this.failedCount = 0, clearTimeout(this.timer);
        }, V1NIMLoginLbs;
      }(), ap = function() {
        function V1NIMLoginAuthenticator(t3) {
          this.core = t3;
        }
        var t2 = V1NIMLoginAuthenticator.prototype;
        return t2.verifyAuthentication = function verifyAuthentication(t3) {
          var a2, u2, m2;
          return t3 === void 0 && (t3 = false), __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var h2, g2, M2, I2, S2, T2, C2, b2, E2, k2, w2, R2;
            return Ql.wrap(function _callee$(A2) {
              for (; ; )
                switch (A2.prev = A2.next) {
                  case 0:
                    return g2 = this.core.options, M2 = Jl.getSystemInfo(), I2 = Dt(Dt({}, g2), { appLogin: t3 ? 0 : 1, appkey: g2.appkey, account: g2.account, token: g2.token, deviceId: this.core.auth.deviceId, clientSession: this.core.auth.clientSession, clientType: 16, protocolVersion: 1, sdkVersion: 100700, sdkHumanVersion: "10.7.0", os: M2.os, browser: M2.browser, userAgent: this.core.options.loginSDKTypeParamCompat ? "Native/10.7.0" : slice(h2 = M2.userAgent.replace("{{appkey}}", g2.appkey)).call(h2, 0, 299), libEnv: this.core.options.loginSDKTypeParamCompat ? void 0 : M2.libEnv, hostEnv: this.core.options.loginSDKTypeParamCompat ? 0 : M2.hostEnvEnum }), S2 = M2.os.toLowerCase(), Jl.platform !== "UNIAPP" || S2 !== "ios" && S2 !== "android" || (I2.isReactNative = 1, I2.clientType = S2 === "ios" ? 2 : 1, T2 = !!((a2 = this.core.offlinePush.authConfig) === null || a2 === void 0 ? void 0 : a2.honorCertificateName), M2.pushDeviceInfo && M2.pushDeviceInfo.MANUFACTURER && (I2.deviceInfo = Un(Dt({ IS_SUPPORT_HONOR: T2 }, M2.pushDeviceInfo)))), this.core.logger.log("clientSocketV1::do login ", g2.account, (m2 = (u2 = this.core.clientSocket) === null || u2 === void 0 ? void 0 : u2.socket) === null || m2 === void 0 ? void 0 : m2.sessionId), A2.next = 8, this.core.clientSocket.sendCmd("login", { login: I2 });
                  case 8:
                    if (!(C2 = A2.sent).error) {
                      A2.next = 11;
                      break;
                    }
                    throw C2.error;
                  case 11:
                    return b2 = C2.content, E2 = b2.loginRes, k2 = b2.loginPorts, w2 = b2.aosPushInfo, R2 = formatMultiPortLoginInfo(k2, 2), (R2 = filter(R2).call(R2, function(t4) {
                      return t4.connectionId !== E2.connectionId;
                    })).length > 0 && this.core.emit("multiPortLogin", R2), A2.abrupt("return", Dt(Dt({}, E2), { aosPushInfo: w2 }));
                  case 16:
                  case "end":
                    return A2.stop();
                }
            }, _callee, this);
          }));
        }, t2.checkLoginTerminalCode = function checkLoginTerminalCode(t3) {
          if (t3 === void 0)
            return false;
          var a2 = [201, 302, 317, 403, 404, 417, 422];
          return includes(a2).call(a2, t3);
        }, V1NIMLoginAuthenticator;
      }(), ip = function(t2) {
        function V2Service(a3, u2) {
          var m2;
          return (m2 = t2.call(this) || this).name = a3, m2.logger = u2.logger, m2.core = u2, m2;
        }
        Nt(V2Service, t2);
        var a2 = V2Service.prototype;
        return a2.checkV2 = function checkV2() {
          var t3 = this.core.options.apiVersion;
          if (t3 === "v2")
            return true;
          throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: 'The version "' + t3 + '" of client is not supported.' } });
        }, a2.checkLogin = function checkLogin() {
          if (this.core.V2NIMLoginService.getLoginStatus() !== 1)
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: "The client is not logged in." } });
        }, a2.emit = function emit(a3) {
          for (var u2 = this, m2 = arguments.length, h2 = new Array(m2 > 1 ? m2 - 1 : 0), g2 = 1; g2 < m2; g2++)
            h2[g2 - 1] = arguments[g2];
          this.logger.debug(this.name + "::emit event: '" + a3.toString() + "',", h2[0] !== void 0 ? h2[0] : "", h2[1] !== void 0 ? h2[1] : "", h2[2] !== void 0 ? h2[2] : "");
          try {
            var M2, I2, S2 = (M2 = t2.prototype.emit).call.apply(M2, concat(I2 = [this, a3]).call(I2, h2));
            return S2;
          } catch (t3) {
            return mo(function() {
              throw u2.logger.error(u2.name + "::emit throw error in setTimeout. event: " + a3.toString() + ". Error", t3), t3;
            }, 0), false;
          }
        }, a2.process = function process(t3) {
          var a3 = this[t3.cmd + "Handler"];
          if (typeof a3 == "function") {
            if (t3.error)
              return this.logger.error(t3.cmd + "::recvError", t3.error), zi.reject(t3.error);
            try {
              var u2 = a3.call(this, t3);
              return zi.resolve(u2);
            } catch (t4) {
              return zi.reject(t4);
            }
          }
          var m2 = get(t3, "error.detail.ignore");
          return t3.error && !m2 ? zi.reject(t3.error) : zi.resolve(t3);
        }, V2Service;
      }(ho), op = function() {
        function Service(t2, a2) {
          this.name = t2, this.core = a2, this.name = t2, this.logger = a2.logger, this.core = a2;
        }
        return Service.prototype.process = function process(t2) {
          var a2 = this[t2.cmd + "Handler"];
          if (typeof a2 == "function")
            return a2.call(this, t2);
          var u2 = get(t2, "error.detail.ignore");
          return t2.error && !u2 ? zi.reject(t2.error) : zi.resolve(t2);
        }, Service;
      }(), sp = { "6_3": "notifylog", "6_4": "uploadLog", "6_23": "getServerTime", "6_31": "notifyDetect", "6_32": "uploadDetect" }, cp = { type: 1, params: 2, result: 3, t1: 100, t2: 101, t3: 102, t4: 103, t5: 104, t6: 105 }, lp = { notifylog: { sid: 6, cid: 3, service: "misc" }, uploadLog: { sid: 6, cid: 4, service: "misc", hasPacketResponse: false, params: [{ type: "String", name: "url" }, { type: "Property", name: "data", reflectMapper: { type: 1, content: 2 } }] }, getServerTime: { sid: 6, cid: 23, service: "misc", response: [{ type: "Long", name: "time" }] }, notifyDetect: { sid: 6, cid: 31, service: "misc", response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(cp) }] }, uploadDetect: { sid: 6, cid: 32, service: "misc", hasPacketResponse: false, params: [{ type: "Property", name: "data", reflectMapper: cp }] } }, up = { type: { type: "number" }, t1: { type: "number" }, t2: { type: "number" }, t3: { type: "number" }, t4: { type: "number" }, t5: { type: "number" }, t6: { type: "number" } };
      var dp = function(t2) {
        function MiscService(a3) {
          var u2;
          return (u2 = t2.call(this, "misc", a3) || this).core = a3, registerParser({ cmdMap: sp, cmdConfig: lp }), u2.setListener(), u2;
        }
        Nt(MiscService, t2);
        var a2 = MiscService.prototype;
        return a2.setListener = function setListener() {
          var t3 = this;
          this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", function() {
            t3.core.timeOrigin.setOriginTimetick();
          }), this.core.eventBus.on("logined", function() {
            t3.core.timeOrigin.setOriginTimetick();
          });
        }, a2.getServerTime = function getServerTime() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var t3;
            return Ql.wrap(function _callee$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.next = 2, this.core.clientSocket.sendCmd("getServerTime");
                  case 2:
                    return t3 = a3.sent, a3.abrupt("return", Uu(t3.content.time));
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee, this);
          }));
        }, a2.notifyDetectHandler = function notifyDetectHandler(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a3;
            return Ql.wrap(function _callee2$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return m2 = t3.content.data, (a3 = format(up, m2)).t3 = t3.__receiveTimeNode.time, a3.t4 = to(), u2.prev = 3, u2.next = 6, this.core.clientSocket.sendCmd("uploadDetect", { data: a3 });
                  case 6:
                    u2.next = 11;
                    break;
                  case 8:
                    u2.prev = 8, u2.t0 = u2.catch(3), this.core.logger.warn("misc::notifyDetectHandler:upload failed", u2.t0);
                  case 11:
                  case "end":
                    return u2.stop();
                }
              var m2;
            }, _callee2, this, [[3, 8]]);
          }));
        }, a2.notifylogHandler = function notifylogHandler() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var t3, a3, u2;
            return Ql.wrap(function _callee3$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return t3 = void 0, m2.prev = 1, m2.next = 4, this.core.logger.extractLogs();
                  case 4:
                    t3 = m2.sent, m2.next = 10;
                    break;
                  case 7:
                    return m2.prev = 7, m2.t0 = m2.catch(1), m2.abrupt("return");
                  case 10:
                    if (t3) {
                      m2.next = 12;
                      break;
                    }
                    return m2.abrupt("return");
                  case 12:
                    if (typeof t3 != "string") {
                      m2.next = 14;
                      break;
                    }
                    return m2.abrupt("return");
                  case 14:
                    return a3 = "", m2.prev = 15, m2.next = 18, this.core.cloudStorage.uploadFile({ type: "file", file: t3 });
                  case 18:
                    u2 = m2.sent, a3 = u2.url, m2.next = 25;
                    break;
                  case 22:
                    return m2.prev = 22, m2.t1 = m2.catch(15), m2.abrupt("return");
                  case 25:
                    if (a3) {
                      m2.next = 27;
                      break;
                    }
                    return m2.abrupt("return");
                  case 27:
                    return a3 += (indexOf(a3).call(a3, "?") > 0 ? "&" : "?") + "download=" + new Date().getTime() + "_web.log", m2.prev = 28, m2.next = 31, this.core.clientSocket.sendCmd("uploadLog", { url: a3 });
                  case 31:
                    m2.next = 36;
                    break;
                  case 33:
                    return m2.prev = 33, m2.t2 = m2.catch(28), m2.abrupt("return");
                  case 36:
                  case "end":
                    return m2.stop();
                }
            }, _callee3, this, [[1, 7], [15, 22], [28, 33]]);
          }));
        }, MiscService;
      }(op), pp = { needReconnect: true, reconnectionAttempts: xt, lbsUrls: Cu, linkUrl: Tu, xhrConnectTimeout: 8e3, socketConnectTimeout: 8e3 }, mp = function(t2) {
        function V1NIMLoginServiceImpl(a3, u2) {
          var m2;
          (m2 = t2.call(this, "V1NIMLoginService", a3) || this).account = "", m2.token = "", m2.deviceId = "", m2.processId = "", m2.clientSession = "", m2.status = "unconnected", m2.config = pp, m2.isManualLoginAttempt = false, m2.core._registerDep(dp, "misc"), registerParser({ cmdMap: Gd, cmdConfig: $d }), a3.V1NIMLoginService = Qe(m2), u2 && m2.setOptions(u2);
          var h2 = new rp(m2.core, Qe(m2));
          return m2.clientSocket = h2, m2.core.options.apiVersion === "v1" && (m2.core.clientSocket = h2, m2.core.auth = Qe(m2)), m2.lbs = new np(a3), m2.authenticator = new ap(a3), m2.doLoginStepsManager = new Ru(), m2;
        }
        Nt(V1NIMLoginServiceImpl, t2);
        var a2 = V1NIMLoginServiceImpl.prototype;
        return a2.reset = function reset() {
          this.lbs.reset();
        }, a2.setOptions = function setOptions(t3) {
          t3 && Ht(t3).length > 0 ? (this.config = assignOptions(this.config, t3), this.account = t3.account || this.core.options.account, this.token = t3.token || this.core.options.token, this.core.options = Dt(Dt({}, this.core.options), this.config)) : (this.config = assignOptions(this.core.options, this.config), this.account = this.core.options.account, this.token = this.core.options.token);
          var a3 = "", u2 = "";
          this.config.isFixedDeviceId ? (a3 = Jl.localStorage.getItem("__NIM_DEVC_ID__") || Iu(), u2 = Jl.localStorage.getItem("__NIM_CLIENT_SESSION_ID__") || Iu(), Jl.localStorage.setItem("__NIM_DEVC_ID__", a3), Jl.localStorage.setItem("__NIM_CLIENT_SESSION_ID__", u2)) : (a3 = Iu(), u2 = Iu()), this.deviceId = a3, this.clientSession = u2, this.core.reporter.setConfig({ common: { dev_id: a3 } });
        }, a2.connect = function connect(t3) {
          return t3 === void 0 && (t3 = {}), this.login(t3);
        }, a2.login = function login(t3) {
          return t3 === void 0 && (t3 = {}), __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            return Ql.wrap(function _callee$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this._checkApiVersion(), t3.isAutoReconnect || (this.isManualLoginAttempt = true, this.processId = Iu()), a3.next = 4, this._connect(t3);
                  case 4:
                    return this.core.abtest.abtRequest(), a3.prev = 5, a3.next = 8, this.doLogin(t3.isAutoReconnect);
                  case 8:
                    this.processId = Iu(), this.isManualLoginAttempt = false, a3.next = 16;
                    break;
                  case 12:
                    throw a3.prev = 12, a3.t0 = a3.catch(5), this.isManualLoginAttempt = false, a3.t0;
                  case 16:
                  case "end":
                    return a3.stop();
                }
            }, _callee, this, [[5, 12]]);
          }));
        }, a2._connect = function _connect(t3) {
          return t3 === void 0 && (t3 = {}), __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a3, u2, m2, h2 = this;
            return Ql.wrap(function _callee2$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    if (/^(unconnected|waitReconnect)$/.test(this.core.status)) {
                      g2.next = 4;
                      break;
                    }
                    return a3 = "NIM status is " + this.core.status + ", and would not connect", this.logger.warn(a3), g2.abrupt("return", zi.reject(a3));
                  case 4:
                    return this.clientSocket.beforeConnect(), this.core.reporter.reportTraceCancel("login"), this.core.reporter.reportTraceStart("login", { user_id: this.core.options.account, action: t3.isAutoReconnect ? "auto_login" : "manual_login", binary_websocket: false, process_id: this.processId }), this.core.reporter.reportTraceUpdateV2("login", { code: 0, description: Un(Dt(Dt({}, this.core.options), { account: "***", token: "***" })), operation_type: "conf_init", succeed: true, duration: 0, target: "" }, { asyncParams: Jl.net.getNetworkStatus() }), g2.next = 10, this.lbs.getLbsInfos();
                  case 10:
                    return u2 = g2.sent, g2.prev = 11, g2.next = 14, this.clientSocket.connect({ linkUrls: u2, isAutoReconnect: t3.isAutoReconnect }, function(t4, a4) {
                      h2.core.reporter.reportTraceUpdateV2("login", { operation_type: "TCP", target: a4, code: t4.code || 408, description: "ws_handshake_failed:" + t4.message, succeed: false }, { asyncParams: Jl.net.getNetworkStatus() });
                    });
                  case 14:
                    (m2 = g2.sent) && this.core.reporter.reportTraceUpdateV2("login", { operation_type: "TCP", target: m2, code: 200, succeed: true }, { asyncParams: Jl.net.getNetworkStatus() }), g2.next = 22;
                    break;
                  case 18:
                    throw g2.prev = 18, g2.t0 = g2.catch(11), this.core.reporter.reportTraceEnd("login", false), g2.t0;
                  case 22:
                  case "end":
                    return g2.stop();
                }
            }, _callee2, this, [[11, 18]]);
          }));
        }, a2.doLogin = function doLogin(t3) {
          return t3 === void 0 && (t3 = false), __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee3$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return g2.prev = 0, g2.next = 3, this.authenticator.verifyAuthentication(t3);
                  case 3:
                    a3 = g2.sent, this.core.reporter.reportTraceUpdateV2("login", { operation_type: "protocol", target: "2-3", code: 200, succeed: true }, { asyncParams: Jl.net.getNetworkStatus() }), this.core.reporter.reportTraceEnd("login", true), this.core.status = "logined", g2.next = 21;
                    break;
                  case 9:
                    if (g2.prev = 9, g2.t0 = g2.catch(0), u2 = g2.t0, m2 = get(u2, "data.disconnect_reason") || "", h2 = u2.code === 415 ? Un({ disconnect_reason: m2 }) : u2.message, this.core.logger.warn("nim login:: login failed", g2.t0), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "protocol", target: "2-3", code: u2.code || 0, succeed: false, description: h2 }, { asyncParams: Jl.net.getNetworkStatus() }), this.core.reporter.reportTraceEnd("login", false), this.clientSocket.doDisconnect(Jd.OFFLINE, this.isManualLoginAttempt ? "FailedToInitializeLogin" : "ReconnectLoginFailed", g2.t0), !this.isManualLoginAttempt) {
                      g2.next = 20;
                      break;
                    }
                    throw g2.t0;
                  case 20:
                    return g2.abrupt("return");
                  case 21:
                    return g2.prev = 21, g2.next = 24, this.core.cloudStorage.init();
                  case 24:
                    g2.next = 29;
                    break;
                  case 26:
                    g2.prev = 26, g2.t1 = g2.catch(21), this.core.logger.error("NIM:login cloudStorage init failed ", g2.t1);
                  case 29:
                    this.core.eventBus.emit("logined", a3), this.core.emit("logined", a3), this.emit("logined", a3), this.core.logger.log("login done"), this.clientSocket.resetConnectStatus(), this.clientSocket.ping();
                  case 35:
                  case "end":
                    return g2.stop();
                }
            }, _callee3, this, [[0, 9], [21, 26]]);
          }));
        }, a2.disconnect = function disconnect() {
          return this.logout();
        }, a2.logout = function logout() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            return Ql.wrap(function _callee4$(t3) {
              for (; ; )
                switch (t3.prev = t3.next) {
                  case 0:
                    this._checkApiVersion(), this.doLoginStepsManager.clear(), t3.t0 = this.status, t3.next = t3.t0 === "logined" ? 5 : t3.t0 === "connected" || t3.t0 === "connecting" || t3.t0 === "waitReconnect" ? 18 : t3.t0 === "unconnected" || t3.t0 === "destroyed" ? 21 : 22;
                    break;
                  case 5:
                    return t3.prev = 5, t3.next = 8, this.clientSocket.sendCmd("logout", void 0, { timeout: 1e3 });
                  case 8:
                    this.clientSocket.doDisconnect(Jd.ACTIVE, "UserActiveDisconnect"), this.core._clearModuleData(), t3.next = 17;
                    break;
                  case 12:
                    t3.prev = 12, t3.t1 = t3.catch(5), this.logger.error("Instance::disconnect sendCmd:logout error", t3.t1), this.clientSocket.doDisconnect(Jd.ACTIVE, "UserActiveDisconnect"), this.core._clearModuleData();
                  case 17:
                    return t3.abrupt("break", 22);
                  case 18:
                    return this.clientSocket.doDisconnect(Jd.ACTIVE, "UserActiveDisconnect"), this.core._clearModuleData(), t3.abrupt("return", zi.resolve());
                  case 21:
                    return t3.abrupt("return", zi.resolve());
                  case 22:
                  case "end":
                    return t3.stop();
                }
            }, _callee4, this, [[5, 12]]);
          }));
        }, a2.kick = function kick(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var u2;
            return Ql.wrap(function _callee5$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this._checkApiVersion(), m2.next = 3, this.clientSocket.sendCmd("kick", t3);
                  case 3:
                    return u2 = m2.sent, m2.abrupt("return", (a3 = u2.content) === null || a3 === void 0 ? void 0 : a3.deviceIds);
                  case 5:
                  case "end":
                    return m2.stop();
                }
            }, _callee5, this);
          }));
        }, a2._checkApiVersion = function _checkApiVersion() {
          if (this.core.options.apiVersion !== "v1")
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: 'apiVersion is not "v1"' } });
        }, a2.nimLoginClientChangeHandler = function nimLoginClientChangeHandler(t3) {
          if (t3.error)
            this.logger.error("nimLoginClientChangeHandler:: error, ", t3.error);
          else {
            var a3 = t3.content, u2 = formatMultiPortLoginInfo(a3.datas, a3.state);
            u2.length > 0 && (this.core.emit("multiPortLogin", u2), this.emit("multiPortLogin", u2));
          }
        }, a2.kickedHandler = function kickedHandler(t3) {
          if (t3.error)
            this.logger.error("kickedHandler:: error, ", t3.error);
          else {
            var a3 = function formatBeKickedTag$1(t4) {
              var a4 = format({ clientType: { type: "enum", values: qd }, customClientType: { type: "number" } }, t4), u2 = Yd[a4.reason];
              return Dt(a4, u2 = u2 || { reason: "unknow", message: "Unknown reason" });
            }(t3.content);
            this.logger.warn("kicked::", a3), this.clientSocket.doDisconnect(Jd.KICKED, a3), this.core._clearModuleData();
          }
        }, a2.getConnectStatus = function getConnectStatus() {
          switch (this.core.status) {
            case "unconnected":
            case "destroyed":
            default:
              return 0;
            case "connecting":
              return 2;
            case "connected":
            case "logined":
              return 1;
            case "waitReconnect":
              return 3;
          }
        }, a2.getLoginStatus = function getLoginStatus() {
          switch (this.core.status) {
            case "unconnected":
            case "destroyed":
            case "waitReconnect":
            default:
              return 0;
            case "connecting":
            case "connected":
              return 2;
            case "logined":
              return 1;
          }
        }, a2.getLoginUser = function getLoginUser() {
          return this.core.options.account;
        }, a2.emit = function emit(a3) {
          for (var u2, m2, h2, g2, M2 = this.name + "::emit " + a3.toString(), I2 = arguments.length, S2 = new Array(I2 > 1 ? I2 - 1 : 0), T2 = 1; T2 < I2; T2++)
            S2[T2 - 1] = arguments[T2];
          return (u2 = this.logger).log.apply(u2, concat(m2 = ["" + M2]).call(m2, S2)), (h2 = t2.prototype.emit).call.apply(h2, concat(g2 = [this, a3]).call(g2, S2));
        }, V1NIMLoginServiceImpl;
      }(ip);
      function formatLoginInfo(t2) {
        return format({ type: { type: "number" }, port: { type: "number" }, customClientType: { type: "number" }, timestamp: { type: "number" }, loginType: { type: "number" } }, t2);
      }
      function invert(t2) {
        t2 = t2 || {};
        var a2 = {};
        for (var u2 in t2)
          a2[t2[u2]] = u2;
        return a2;
      }
      var hp = { "26_3": "v2Login", "26_5": "v2Logout", "26_8": "v2KickOffline", "26_9": "v2BeKicked", "26_10": "v2LoginClientChange", "36_1": "v2GetChatroomLinkAddress" }, gp = { "1_2": "heartbeat", "2_7": "nimLoginClientChange", "24_8": "qchatLoginClientChange" }, vp = { webLoginReqTag: { clientType: 3, os: 4, sdkVersion: 6, appLogin: 8, protocolVersion: 9, pushTokenName: 10, pushToken: 11, clientId: 13, appkey: 18, account: 19, browser: 24, clientSession: 26, deviceInfo: 32, isReactNative: 112, customTag: 38, customClientType: 39, sdkHumanVersion: 40, hostEnv: 41, userAgent: 42, libEnv: 44, authType: 115, thirdPartyExtension: 116, token: 1e3 }, mixAuthRepTag: { clientId: 1, consid: 2, clientIP: 3, port: 4, type: 5, customClientType: 6, timestamp: 7, customTag: 8, os: 9, pushType: 10, hasTokenPreviously: 11, loginType: 12 }, nimAuthRepTag: { type: 3, os: 4, mac: 5, clientId: 13, account: 19, deviceInfo: 32, customTag: 38, customClientType: 39, consid: 102, clientIP: 103, port: 104, timestamp: 109, pushType: 110, hasTokenPreviously: 111 }, qchatAuthRepTag: { clientId: 8, consid: 102, clientIP: 103, port: 104, type: 6, customClientType: 13, timestamp: 105, os: 30, pushType: 100, hasTokenPreviously: 101 } }, fp = { v2Login: { sid: 26, cid: 3, service: "auth", params: [{ type: "Property", name: "tag", reflectMapper: vp.webLoginReqTag }], response: [{ type: "Property", name: "data", reflectMapper: invert(vp.mixAuthRepTag) }, { type: "PropertyArray", name: "loginClients", reflectMapper: invert(vp.mixAuthRepTag) }] }, v2Logout: { sid: 26, cid: 5, service: "auth" }, v2KickOffline: { sid: 26, cid: 8, service: "auth", params: [{ type: "StrArray", name: "clientIds" }], response: [{ type: "StrArray", name: "clientIds" }] }, v2BeKicked: { sid: 26, cid: 9, service: "auth", response: [{ type: "Int", name: "clientType" }, { type: "Int", name: "reason" }, { type: "String", name: "reasonDesc" }, { type: "Int", name: "customClientType" }] }, v2LoginClientChange: { sid: 26, cid: 10, service: "auth", response: [{ type: "Byte", name: "state" }, { type: "PropertyArray", name: "datas", reflectMapper: invert(vp.mixAuthRepTag) }] }, v2GetChatroomLinkAddress: { sid: 36, cid: 1, service: "auth", params: [{ type: "Long", name: "roomId" }, { type: "Bool", name: "miniProgram" }], response: [{ type: "StrArray", name: "linkAddress" }] } }, yp = { heartbeat: { sid: 1, cid: 2, service: "auth" }, nimLoginClientChange: { sid: 2, cid: 7, service: "auth", response: [{ type: "Byte", name: "state" }, { type: "PropertyArray", name: "datas", reflectMapper: invert(vp.nimAuthRepTag) }] }, qchatLoginClientChange: { sid: 24, cid: 8, service: "auth", response: [{ type: "Byte", name: "state" }, { type: "Property", name: "data", reflectMapper: invert(vp.qchatAuthRepTag) }] } }, _p = Bi.codeAt;
      _export({ target: "String", proto: true }, { codePointAt: function codePointAt2(t2) {
        return _p(this, t2);
      } });
      var Mp = entryVirtual("String").codePointAt, Ip = String.prototype, codePointAt = function(t2) {
        var a2 = t2.codePointAt;
        return typeof t2 == "string" || t2 === Ip || $(Ip, t2) && a2 === Ip.codePointAt ? Mp : a2;
      }, Sp = RangeError, Tp = String.fromCharCode, Cp = String.fromCodePoint, bp = w([].join), Ep = !!Cp && Cp.length != 1;
      _export({ target: "String", stat: true, arity: 1, forced: Ep }, { fromCodePoint: function fromCodePoint(t2) {
        for (var a2, u2 = [], m2 = arguments.length, h2 = 0; m2 > h2; ) {
          if (a2 = +arguments[h2++], toAbsoluteIndex(a2, 1114111) !== a2)
            throw Sp(a2 + " is not a valid code point");
          u2[h2] = a2 < 65536 ? Tp(a2) : Tp(55296 + ((a2 -= 65536) >> 10), a2 % 1024 + 56320);
        }
        return bp(u2, "");
      } });
      var kp = j.String.fromCodePoint, wp = function abs(t2) {
        var a2;
        if (t2 !== void 0)
          return (a2 = BigNumber(t2)).sign = 1, a2;
      }, Rp = function isArray(t2) {
        return Object.prototype.toString.call(t2) === "[object Array]";
      }, Ap = function isValidType(t2) {
        var a2;
        return some(a2 = [typeof t2 == "number", typeof t2 == "string" && t2.length > 0, Rp(t2) && t2.length > 0, t2 instanceof BigNumber]).call(a2, function(t3) {
          return t3 === true;
        });
      }, Np = "Invalid Number", xp = "Invalid Number - Division By Zero";
      function BigNumber(t2) {
        var a2;
        if (!(this instanceof BigNumber))
          return new BigNumber(t2);
        if (this.number = [], this.sign = 1, this.rest = 0, Ap(t2)) {
          if (Rp(t2)) {
            for ((t2.length && t2[0] === "-" || t2[0] === "+") && (this.sign = t2[0] === "+" ? 1 : -1, t2.shift(0)), a2 = t2.length - 1; a2 >= 0; a2--)
              if (!this.addDigit(t2[a2]))
                return;
          } else
            for ((t2 = t2.toString()).charAt(0) !== "-" && t2.charAt(0) !== "+" || (this.sign = t2.charAt(0) === "+" ? 1 : -1, t2 = t2.substring(1)), a2 = t2.length - 1; a2 >= 0; a2--)
              if (!this.addDigit(Uu(t2.charAt(a2), 10)))
                return;
        } else
          this.number = Np;
      }
      BigNumber.prototype.addDigit = function(t2) {
        return function testDigit(t3) {
          return /^\d$/.test(t3);
        }(t2) ? (this.number.push(t2), this) : (this.number = Np, false);
      }, BigNumber.prototype._compare = function(t2) {
        var a2, u2;
        if (!Ap(t2))
          return null;
        if (a2 = BigNumber(t2), this.sign !== a2.sign)
          return this.sign;
        if (this.number.length > a2.number.length)
          return this.sign;
        if (this.number.length < a2.number.length)
          return -1 * this.sign;
        for (u2 = this.number.length - 1; u2 >= 0; u2--) {
          if (this.number[u2] > a2.number[u2])
            return this.sign;
          if (this.number[u2] < a2.number[u2])
            return -1 * this.sign;
        }
        return 0;
      }, BigNumber.prototype.gt = function(t2) {
        return this._compare(t2) > 0;
      }, BigNumber.prototype.gte = function(t2) {
        return this._compare(t2) >= 0;
      }, BigNumber.prototype.equals = function(t2) {
        return this._compare(t2) === 0;
      }, BigNumber.prototype.lte = function(t2) {
        return this._compare(t2) <= 0;
      }, BigNumber.prototype.lt = function(t2) {
        return this._compare(t2) < 0;
      }, BigNumber.prototype.subtract = function(t2) {
        var a2;
        return t2 === void 0 ? this : (a2 = BigNumber(t2), this.sign !== a2.sign ? (this.number = BigNumber._add(this, a2), this) : (this.sign = this.lt(a2) ? -1 : 1, this.number = wp(this).lt(wp(a2)) ? BigNumber._subtract(a2, this) : BigNumber._subtract(this, a2), this));
      }, BigNumber._add = function(t2, a2) {
        var u2, m2 = 0, h2 = Math.max(t2.number.length, a2.number.length);
        for (u2 = 0; u2 < h2 || m2 > 0; u2++)
          t2.number[u2] = (m2 += (t2.number[u2] || 0) + (a2.number[u2] || 0)) % 10, m2 = Math.floor(m2 / 10);
        return t2.number;
      }, BigNumber._subtract = function(t2, a2) {
        var u2, m2, h2 = 0, g2 = t2.number.length;
        for (u2 = 0; u2 < g2; u2++)
          t2.number[u2] -= (a2.number[u2] || 0) + h2, t2.number[u2] += 10 * (h2 = t2.number[u2] < 0 ? 1 : 0);
        for (u2 = 0, g2 = t2.number.length - 1; t2.number[g2 - u2] === 0 && g2 - u2 > 0; )
          u2++;
        u2 > 0 && splice(m2 = t2.number).call(m2, -u2);
        return t2.number;
      }, BigNumber.prototype.multiply = function(t2) {
        if (t2 === void 0)
          return this;
        var a2, u2, m2 = BigNumber(t2), h2 = 0, g2 = [];
        if (this.isZero() || m2.isZero())
          return BigNumber(0);
        for (this.sign *= m2.sign, a2 = 0; a2 < this.number.length; a2++)
          for (h2 = 0, u2 = 0; u2 < m2.number.length || h2 > 0; u2++)
            g2[a2 + u2] = (h2 += (g2[a2 + u2] || 0) + this.number[a2] * (m2.number[u2] || 0)) % 10, h2 = Math.floor(h2 / 10);
        return this.number = g2, this;
      }, BigNumber.prototype.divide = function(t2) {
        if (t2 === void 0)
          return this;
        var a2, u2, m2 = BigNumber(t2), h2 = [], g2 = BigNumber(0);
        if (m2.isZero())
          return this.number = xp, this;
        if (this.isZero())
          return this.rest = BigNumber(0), this;
        if (this.sign *= m2.sign, m2.sign = 1, m2.number.length === 1 && m2.number[0] === 1)
          return this.rest = BigNumber(0), this;
        for (a2 = this.number.length - 1; a2 >= 0; a2--)
          for (g2.multiply(10), g2.number[0] = this.number[a2], h2[a2] = 0; m2.lte(g2); )
            h2[a2]++, g2.subtract(m2);
        for (a2 = 0, u2 = h2.length - 1; h2[u2 - a2] === 0 && u2 - a2 > 0; )
          a2++;
        return a2 > 0 && splice(h2).call(h2, -a2), this.rest = g2, this.number = h2, this;
      }, BigNumber.prototype.mod = function(t2) {
        return this.divide(t2).rest;
      }, BigNumber.prototype.isZero = function() {
        var t2;
        for (t2 = 0; t2 < this.number.length; t2++)
          if (this.number[t2] !== 0)
            return false;
        return true;
      }, BigNumber.prototype.toString = function() {
        var t2, a2 = "";
        if (typeof this.number == "string")
          return this.number;
        for (t2 = this.number.length - 1; t2 >= 0; t2--)
          a2 += this.number[t2];
        return this.sign > 0 ? a2 : "-" + a2;
      };
      var Op = Math.pow(2, 32);
      function varintToBytes(t2) {
        for (var a2 = new Uint8Array(5), u2 = new DataView(a2.buffer), m2 = 0; (4294967168 & t2) != 0; )
          u2.setUint8(m2++, 127 & t2 | 128), t2 >>>= 7;
        return u2.setUint8(m2++, 127 & t2), slice(a2).call(a2, 0, m2);
      }
      function encodeText(t2) {
        if (typeof TextEncoder == "function")
          return new TextEncoder().encode(t2);
        var a2 = function textEncoder(t3) {
          for (var a3 = [], u2 = t3.length, m2 = 0; m2 < u2; ) {
            var h2 = codePointAt(t3).call(t3, m2), g2 = 0, M2 = 0;
            for (h2 <= 127 ? (g2 = 0, M2 = 0) : h2 <= 2047 ? (g2 = 6, M2 = 192) : h2 <= 65535 ? (g2 = 12, M2 = 224) : h2 <= 2097151 && (g2 = 18, M2 = 240), a3.push(M2 | h2 >> g2), g2 -= 6; g2 >= 0; )
              a3.push(128 | h2 >> g2 & 63), g2 -= 6;
            m2 += h2 >= 65536 ? 2 : 1;
          }
          return a3;
        }(t2);
        return new Uint8Array(a2);
      }
      function decodeText(t2) {
        return typeof TextDecoder == "function" ? new TextDecoder("utf-8").decode(t2) : function textDecoder(t3) {
          for (var a2 = "", u2 = 0; u2 < t3.length; ) {
            var m2 = t3[u2], h2 = 0, g2 = 0;
            if (m2 <= 127 ? (h2 = 0, g2 = 255 & m2) : m2 <= 223 ? (h2 = 1, g2 = 31 & m2) : m2 <= 239 ? (h2 = 2, g2 = 15 & m2) : m2 <= 244 && (h2 = 3, g2 = 7 & m2), t3.length - u2 - h2 > 0)
              for (var M2 = 0; M2 < h2; )
                g2 = g2 << 6 | 63 & (m2 = t3[u2 + M2 + 1]), M2 += 1;
            else
              g2 = 65533, h2 = t3.length - u2;
            a2 += kp(g2), u2 += h2 + 1;
          }
          return a2;
        }(t2);
      }
      var Pp = function() {
        function Unpack(t3) {
          this.offset = 0, this.buffer = new Uint8Array(t3), this.view = new DataView(t3);
        }
        var t2 = Unpack.prototype;
        return t2.checkBufferBoundaryAccess = function checkBufferBoundaryAccess() {
          return this.offset >= this.buffer.byteLength;
        }, t2.length = function length() {
          var t3;
          return ((t3 = this.view) === null || t3 === void 0 ? void 0 : t3.byteLength) || 0;
        }, t2.getBuffer = function getBuffer() {
          return this.view.buffer;
        }, t2.getOffset = function getOffset() {
          return this.offset;
        }, t2.popRaw = function popRaw(t3) {
          try {
            var a2, u2 = slice(a2 = this.buffer).call(a2, this.offset, this.offset + t3);
            return this.offset += t3, u2;
          } catch (t4) {
            throw new Error("UnpackException raw " + (t4 && t4.message));
          }
        }, t2.popByte = function popByte() {
          try {
            var t3 = this.view.getUint8(this.offset);
            return this.offset += 1, t3;
          } catch (t4) {
            throw new Error("UnpackException byte " + (t4 && t4.message));
          }
        }, t2.popVarbin = function popVarbin() {
          return this.popRaw(this.popVarInt());
        }, t2.popString = function popString() {
          try {
            return decodeText(this.popVarbin());
          } catch (t3) {
            throw new Error("UnpackException string " + (t3 && t3.message));
          }
        }, t2.popInt = function popInt() {
          try {
            var t3 = this.view.getUint32(this.offset, true);
            return this.offset += 4, t3;
          } catch (t4) {
            throw new Error("UnpackException int " + (t4 && t4.message));
          }
        }, t2.popVarInt = function popVarInt() {
          var t3 = 1, a2 = 0, u2 = 0, m2 = 0;
          do {
            if (a2 += (127 & (u2 = this.popByte())) * t3, t3 *= 128, (m2 += 1) > 5)
              throw new Error("Variable length quantity is too long");
          } while ((128 & u2) != 0);
          return a2;
        }, t2.popLong = function popLong() {
          try {
            var t3, a2 = function getBigUint64(t4, a3) {
              a3 === void 0 && (a3 = false);
              var u2 = new DataView(t4.buffer), m2 = a3 ? [4, 0] : [0, 4], h2 = m2[0], g2 = m2[1], M2 = u2.getUint32(h2, a3), I2 = u2.getUint32(g2, a3);
              return M2 > 0 ? M2 * Op + I2 : I2;
            }(slice(t3 = this.buffer).call(t3, this.offset, this.offset + 8), true);
            return this.offset += 8, Number(a2);
          } catch (t4) {
            throw new Error("UnpackException long " + (t4 && t4.message));
          }
        }, t2.popShort = function popShort() {
          try {
            var t3 = this.view.getUint16(this.offset, true);
            return this.offset += 2, t3;
          } catch (t4) {
            throw new Error("UnpackException short " + (t4 && t4.message));
          }
        }, t2.popBoolean = function popBoolean() {
          return this.popByte() > 0;
        }, t2.toString = function toString2() {
          return jl(new Uint8Array(this.buffer)).toString();
        }, t2.reset = function reset() {
          this.offset = 0, this.buffer = null, this.view = null;
        }, Unpack;
      }(), Lp = function() {
        function PacketDecoder(t3) {
          this.packetLength = 0, this.serviceId = 0, this.commandId = 0, this.serialId = 0, this.tag = 0, this.resCode = 200, this.innerHeader = null, this.msgId = 0, this.bodyArr = [], this.unpack = new Pp(t3);
        }
        var t2 = PacketDecoder.prototype;
        return t2.reset = function reset() {
          this.innerHeader = null, this.bodyArr = [], this.unpack.reset();
        }, t2.getBodyDetail = function getBodyDetail() {
          return this.bodyArr.join("");
        }, t2.unmarshalHeader = function unmarshalHeader() {
          var t3, a2 = this._unmarshalHeader();
          this.packetLength = a2.packetLength, this.serviceId = a2.serviceId, this.commandId = a2.commandId, this.serialId = a2.serialId, this.tag = a2.tag, this.resCode = a2.resCode, a2.serviceId === 4 && includes(t3 = [1, 2, 10, 11]).call(t3, a2.commandId) && (this.msgId = this.unmarshalLong(), this.innerHeader = this._unmarshalHeader());
        }, t2._unmarshalHeader = function _unmarshalHeader() {
          var t3 = this.unpack.popVarInt(), a2 = this.unpack.popByte(), u2 = this.unpack.popByte(), m2 = this.unpack.popShort(), h2 = this.unpack.popByte(), g2 = 200;
          return this.hasRescode(h2) && (g2 = this.unpack.popShort()), { packetLength: t3, serviceId: a2, commandId: u2, serialId: m2, tag: h2, resCode: g2 };
        }, t2.hasRescode = function hasRescode(t3) {
          return ((t3 = t3 || this.tag) & PacketDecoder.RES_CODE) != 0;
        }, t2.getHeader = function getHeader() {
          return { packetLength: this.packetLength, sid: this.serviceId, cid: this.commandId, ser: this.serialId, code: this.resCode };
        }, t2.getInnerHeader = function getInnerHeader() {
          return this.innerHeader ? { sid: this.innerHeader.serviceId, cid: this.innerHeader.commandId } : null;
        }, t2.unmarshalProperty = function unmarshalProperty() {
          var t3 = this.unpack.popVarInt(), a2 = {};
          this.bodyArr.push("\nProperty(" + t3 + ") {");
          for (var u2 = 0; u2 < t3; u2++) {
            var m2 = this.unpack.popVarInt();
            this.bodyArr.push(m2 + ":");
            var h2 = this.unpack.popString();
            this.bodyArr.push('"' + h2.length + " " + this.unpack.getOffset() + '",'), a2[m2] = h2;
          }
          return this.bodyArr.push("},"), a2;
        }, t2.unmarshalPropertyArray = function unmarshalPropertyArray() {
          var t3 = this.unpack.popVarInt(), a2 = [];
          this.bodyArr.push("\nPropertyArray(" + t3 + ") [");
          for (var u2 = 0; u2 < t3; u2++)
            a2.push(this.unmarshalProperty());
          return this.bodyArr.push("],"), a2;
        }, t2.unmarshalLong = function unmarshalLong() {
          var t3 = this.unpack.popLong();
          return this.bodyArr.push("\nLong:" + t3), t3;
        }, t2.unmarshalLongArray = function unmarshalLongArray() {
          var t3 = this.unpack.popVarInt(), a2 = [];
          this.bodyArr.push("\nLongArray " + t3 + ":");
          for (var u2 = 0; u2 < t3; u2++) {
            var m2 = this.unpack.popLong();
            this.bodyArr.push(m2 + ","), a2.push(m2);
          }
          return a2;
        }, t2.unmarshalStrArray = function unmarshalStrArray() {
          var t3 = this.unpack.popVarInt(), a2 = [];
          this.bodyArr.push("\nStrArray " + t3 + ":");
          for (var u2 = 0; u2 < t3; u2++) {
            var m2 = this.unpack.popString();
            this.bodyArr.push(m2 + ","), a2.push(m2);
          }
          return a2;
        }, t2.unmarshalStrLongMap = function unmarshalStrLongMap() {
          var t3 = this.unpack.popVarInt(), a2 = {};
          this.bodyArr.push("\nStrLongMap " + t3 + ":");
          for (var u2 = 0; u2 < t3; u2++) {
            var m2 = this.unpack.popString();
            this.bodyArr.push(m2 + ",");
            var h2 = this.unpack.popLong();
            this.bodyArr.push(h2 + ";"), a2[m2] = h2;
          }
          return a2;
        }, t2.unmarshalStrStrMap = function unmarshalStrStrMap() {
          var t3 = this.unpack.popVarInt(), a2 = {};
          this.bodyArr.push("\nStrStrMap " + t3 + ":");
          for (var u2 = 0; u2 < t3; u2++) {
            var m2 = this.unpack.popString();
            this.bodyArr.push(m2 + ",");
            var h2 = this.unpack.popString();
            this.bodyArr.push(h2 + ";"), a2[m2] = h2;
          }
          return a2;
        }, t2.unmarshalLongLongMap = function unmarshalLongLongMap() {
          var t3 = this.unpack.popVarInt(), a2 = {};
          this.bodyArr.push("\nStrLongLongMap " + t3 + ":");
          for (var u2 = 0; u2 < t3; u2++) {
            var m2 = this.unpack.popLong();
            this.bodyArr.push(m2 + ",");
            var h2 = this.unpack.popLong();
            this.bodyArr.push(h2 + ";"), a2[m2] = h2;
          }
          return { m_map: a2 };
        }, t2.unmarshalKVArray = function unmarshalKVArray() {
          var t3 = this.unpack.popVarInt(), a2 = [];
          this.bodyArr.push("\nKVArray " + t3 + ":");
          for (var u2 = 0; u2 < t3; u2++)
            a2.push(this.unmarshalStrStrMap());
          return a2;
        }, t2.unmarshal = function unmarshal(t3) {
          var a2, u2 = this, m2 = Dt(Dt({}, this.getHeader()), { r: [] });
          if (this.innerHeader && (m2.r[0] = this.msgId, m2.r[1] = { body: [], headerPacket: this.getInnerHeader() }), !includes(a2 = [200, 406, 808, 810, 7101]).call(a2, m2.code))
            return Un(m2);
          if (this.packetLength > 0 && this.packetLength > this.unpack.length())
            throw new Error("UnpackException packetLength(" + this.packetLength + ") greater than bufferLength(" + this.unpack.length() + ")");
          var h2 = [];
          return t3 && forEach$1(t3).call(t3, function(t4) {
            if (!u2.unpack.checkBufferBoundaryAccess())
              switch (t4.type) {
                case "PropertyArray":
                  h2.push(u2.unmarshalPropertyArray());
                  break;
                case "Property":
                  h2.push(u2.unmarshalProperty());
                  break;
                case "Byte":
                  h2.push(u2.unpack.popByte());
                  break;
                case "Int":
                  h2.push(u2.unpack.popInt());
                  break;
                case "Bool":
                  h2.push(u2.unpack.popBoolean());
                  break;
                case "Long":
                  h2.push(u2.unmarshalLong());
                  break;
                case "LongArray":
                  h2.push(u2.unmarshalLongArray());
                  break;
                case "String":
                  h2.push(u2.unpack.popString());
                  break;
                case "StrArray":
                  h2.push(u2.unmarshalStrArray());
                  break;
                case "StrStrMap":
                  h2.push(u2.unmarshalStrStrMap());
                  break;
                case "StrLongMap":
                  h2.push(u2.unmarshalStrLongMap());
                  break;
                case "LongLongMap":
                  h2.push(u2.unmarshalLongLongMap());
                  break;
                case "KVArray":
                  h2.push(u2.unmarshalKVArray());
              }
          }), this.innerHeader ? m2.r[1].body = h2 : m2.r = h2, Un(m2);
        }, PacketDecoder;
      }();
      Lp.RES_CODE = 2;
      var Vp = function() {
        function Pack() {
          this.offset = 0, this.pageSize = 1024, this.capacity = 1048576, this.buffer = new Uint8Array(this.pageSize), this.view = new DataView(this.buffer.buffer);
        }
        var t2 = Pack.prototype;
        return t2.reset = function reset() {
          this.offset = 0, this.buffer = null, this.view = null;
        }, t2.size = function size() {
          return this.offset;
        }, t2.getBuffer = function getBuffer() {
          var t3;
          return slice(t3 = this.buffer).call(t3, 0, this.offset).buffer;
        }, t2.ensureCapacity = function ensureCapacity(t3) {
          var a2 = this.offset + t3;
          if (a2 > this.capacity)
            throw new Error("PackException over limit");
          if (a2 > this.buffer.byteLength) {
            var u2 = Math.ceil(a2 / this.pageSize) * this.pageSize, m2 = new Uint8Array(u2);
            m2.set(this.buffer), this.buffer = m2, this.view = new DataView(this.buffer.buffer);
          }
        }, t2.putRaw = function putRaw(t3) {
          this.ensureCapacity(t3.length);
          try {
            this.buffer.set(t3, this.offset), this.offset += t3.length;
          } catch (t4) {
            throw new Error("PackException raw");
          }
        }, t2.putByte = function putByte(t3) {
          this.ensureCapacity(1);
          try {
            this.view.setUint8(this.offset++, t3);
          } catch (t4) {
            throw new Error("PackException byte");
          }
        }, t2.putString = function putString(t3) {
          try {
            var a2 = encodeText(t3);
            this.putVarbin(a2);
          } catch (t4) {
            throw new Error("PackException string");
          }
        }, t2.putInt = function putInt(t3) {
          this.ensureCapacity(4);
          try {
            this.view.setInt32(this.offset, t3, true), this.offset += 4;
          } catch (t4) {
            throw new Error("PackException int");
          }
        }, t2.putVarInt = function putVarInt(t3) {
          var a2 = varintToBytes(t3);
          this.putRaw(a2);
        }, t2.putBoolean = function putBoolean(t3) {
          this.ensureCapacity(1);
          try {
            this.view.setUint8(this.offset++, t3 ? 1 : 0);
          } catch (t4) {
            throw new Error("PackException boolean");
          }
        }, t2.putLong = function putLong(t3) {
          this.ensureCapacity(8);
          try {
            var a2 = function setBigUint64(t4, a3) {
              a3 === void 0 && (a3 = false);
              var u2 = new Uint8Array(8), m2 = new DataView(u2.buffer), h2 = Number(t4 > Op - 1 ? t4 / Op : 0), g2 = Number(4294967295 & t4), M2 = a3 ? [4, 0] : [0, 4], I2 = M2[0], S2 = M2[1];
              return m2.setUint32(I2, h2, a3), m2.setUint32(S2, g2, a3), u2;
            }(t3, true);
            this.buffer.set(a2, this.offset), this.offset += 8;
          } catch (t4) {
            throw new Error("PackException long");
          }
        }, t2.putStringAsLong = function putStringAsLong(t3) {
          this.ensureCapacity(8);
          try {
            var a2 = function setBigUint64ForNumberOverflow(t4, a3) {
              var u2, m2;
              a3 === void 0 && (a3 = false);
              var h2 = new Uint8Array(8), g2 = new DataView(h2.buffer), M2 = reverse$1(u2 = BigNumber(t4).divide(Op).number).call(u2).join(""), I2 = reverse$1(m2 = BigNumber(t4).mod(Op).number).call(m2).join(""), S2 = Number(M2), T2 = Number(I2), C2 = a3 ? [4, 0] : [0, 4], b2 = C2[0], E2 = C2[1];
              return g2.setUint32(b2, S2, a3), g2.setUint32(E2, T2, a3), h2;
            }(t3, true);
            this.buffer.set(a2, this.offset), this.offset += 8;
          } catch (t4) {
            throw new Error("PackException stringAsLong");
          }
        }, t2.putShort = function putShort(t3) {
          this.ensureCapacity(2);
          try {
            this.view.setInt16(this.offset, t3, true), this.offset += 2;
          } catch (t4) {
            throw new Error("PackException short");
          }
        }, t2.putVarbin = function putVarbin(t3) {
          if (!t3)
            return this.ensureCapacity(1), this.putVarInt(0);
          if (t3.byteLength > Math.pow(2, 31) - 2)
            throw new Error("PackException varbin. too long");
          var a2 = varintToBytes(t3.length);
          this.ensureCapacity(a2.length + t3.length);
          try {
            this.buffer.set(a2, this.offset), this.offset += a2.length, this.buffer.set(t3, this.offset), this.offset += t3.length;
          } catch (t4) {
            throw new Error("PackException varbin");
          }
        }, Pack;
      }();
      function isConvertibleToNumber(t2) {
        if (typeof t2 != "number") {
          if (t2 == null)
            return false;
          t2 = Number(t2);
        }
        if (isNaN(t2))
          throw new Error("Number type conversion error");
        return true;
      }
      function isUndefinedOrNull(t2) {
        return t2 == null;
      }
      var Up, Dp = function() {
        function PacketEncoder(t3, a2, u2) {
          this.pack = new Vp(), this.packetLength = 0, this.serviceId = 0, this.commandId = 0, this.serialId = 0, this.tag = 0, this.serviceId = t3, this.commandId = a2, this.serialId = u2;
        }
        var t2 = PacketEncoder.prototype;
        return t2.marshalHeader = function marshalHeader() {
          this.pack.putVarInt(this.packetLength), this.pack.putByte(this.serviceId), this.pack.putByte(this.commandId), this.pack.putShort(this.serialId), this.pack.putByte(this.tag);
        }, t2.marshalProperty = function marshalProperty(t3) {
          var a2 = this, u2 = Ht(t3), m2 = filter(u2).call(u2, function(t4) {
            return !isUndefinedOrNull(t4);
          });
          this.pack.putVarInt(m2.length), forEach$1(m2).call(m2, function(u3) {
            a2.pack.putVarInt(Number(u3)), Dn(t3[u3]) || Object.prototype.toString.call(t3[u3]) === "[object Object]" ? a2.pack.putString(Un(t3[u3])) : a2.pack.putString(String(t3[u3]));
          });
        }, t2.marshalPropertyArray = function marshalPropertyArray(t3) {
          var a2 = this, u2 = t3.length;
          this.pack.putVarInt(u2), forEach$1(t3).call(t3, function(t4) {
            a2.marshalProperty(t4 == null ? void 0 : t4.v);
          });
        }, t2.marshalStrArray = function marshalStrArray(t3) {
          var a2 = this, u2 = filter(t3).call(t3, function(t4) {
            return !isUndefinedOrNull(t4);
          }), m2 = u2.length;
          this.pack.putVarInt(m2), forEach$1(u2).call(u2, function(t4) {
            a2.pack.putString(String(t4));
          });
        }, t2.marshalLongArray = function marshalLongArray(t3) {
          var a2 = this, u2 = filter(t3).call(t3, function(t4) {
            return isConvertibleToNumber(t4);
          }), m2 = u2.length;
          this.pack.putVarInt(m2), forEach$1(u2).call(u2, function(t4) {
            a2.putLong(t4);
          });
        }, t2.marshalStrStrMap = function marshalStrStrMap(t3) {
          var a2 = this, u2 = Ht(t3), m2 = filter(u2).call(u2, function(a3) {
            return !isUndefinedOrNull(t3[a3]) && !isUndefinedOrNull(a3);
          });
          this.pack.putVarInt(m2.length), forEach$1(m2).call(m2, function(u3) {
            a2.pack.putString(String(u3)), a2.pack.putString(String(t3[u3]));
          });
        }, t2.marshalStrLongMap = function marshalStrLongMap(t3) {
          var a2 = this, u2 = Ht(t3), m2 = filter(u2).call(u2, function(a3) {
            return isConvertibleToNumber(t3[a3]) && !isUndefinedOrNull(a3);
          });
          this.pack.putVarInt(m2.length), forEach$1(m2).call(m2, function(u3) {
            a2.pack.putString(String(u3)), a2.putLong(t3[u3]);
          });
        }, t2.marshalLongLongMap = function marshalLongLongMap(t3) {
          var a2 = this, u2 = Ht(t3), m2 = filter(u2).call(u2, function(a3) {
            var u3 = Number(a3);
            return isConvertibleToNumber(u3) && isConvertibleToNumber(t3[u3]);
          });
          this.pack.putVarInt(m2.length), forEach$1(m2).call(m2, function(u3) {
            var m3 = Number(u3);
            a2.putLong(m3), a2.putLong(t3[m3]);
          });
        }, t2.marshalKVArray = function marshalKVArray(t3) {
          var a2 = this, u2 = t3.length;
          this.pack.putVarInt(u2), forEach$1(t3).call(t3, function(t4) {
            a2.marshalStrStrMap(t4);
          });
        }, t2.putLong = function putLong(t3) {
          typeof t3 == "string" && t3.length > 15 ? this.pack.putStringAsLong(t3) : this.pack.putLong(Number(t3));
        }, t2.marshal = function marshal(t3, a2) {
          var u2 = this;
          return this.marshalHeader(), a2 && forEach$1(a2).call(a2, function(a3, m2) {
            var h2, g2 = a3.type, M2 = (h2 = t3[m2]) === null || h2 === void 0 ? void 0 : h2.v;
            if (!isUndefinedOrNull(M2))
              switch (g2) {
                case "PropertyArray":
                  u2.marshalPropertyArray(M2);
                  break;
                case "Property":
                  u2.marshalProperty(M2);
                  break;
                case "Byte":
                  if (!isConvertibleToNumber(M2))
                    return;
                  u2.pack.putByte(Number(M2));
                  break;
                case "Int":
                  if (!isConvertibleToNumber(M2))
                    return;
                  u2.pack.putInt(Number(M2));
                  break;
                case "Bool":
                  M2 === "false" ? M2 = false : M2 === "true" && (M2 = true), u2.pack.putBoolean(M2);
                  break;
                case "Long":
                  if (!isConvertibleToNumber(M2))
                    return;
                  u2.putLong(M2);
                  break;
                case "LongArray":
                  u2.marshalLongArray(M2);
                  break;
                case "String":
                  u2.pack.putString(String(M2));
                  break;
                case "StrArray":
                  u2.marshalStrArray(M2);
                  break;
                case "StrStrMap":
                  u2.marshalStrStrMap(M2);
                  break;
                case "StrLongMap":
                  u2.marshalStrLongMap(M2);
                  break;
                case "LongLongMap":
                  u2.marshalLongLongMap(M2);
                  break;
                case "KVArray":
                  u2.marshalKVArray(M2);
              }
          }), this.pack.getBuffer();
        }, t2.reset = function reset() {
          this.pack.reset();
        }, PacketEncoder;
      }(), qp = function(t2) {
        function BaseWebsocket(a3, u2) {
          var m2;
          return (m2 = t2.call(this) || this).url = u2, m2.websocket = null, m2.socketConnectTimer = 0, m2.core = a3, m2.url = u2, m2.status = "disconnected", m2.logger = a3.logger, m2.connect(), m2;
        }
        Nt(BaseWebsocket, t2);
        var a2 = BaseWebsocket.prototype;
        return a2.connect = function connect() {
          this.status !== "connecting" && this.status !== "connected" ? (this.status = "connecting", this._createWebsocket("wss://" + this.url + "/websocket")) : this.logger.warn("imsocket::socket is connecting or connected", this.status);
        }, a2.close = function close() {
          if (this.status = "disconnected", this.websocket) {
            this.logger.log("imsocket:: close websocket");
            try {
              this.websocket.close();
            } catch (t3) {
              this.logger.warn("imsocket::attempt to close websocket error", t3);
            }
            this.clean(), this.emit("disconnect");
          }
        }, a2.clean = function clean() {
          this.status = "disconnected", clearTimeout(this.socketConnectTimer), this.websocket && (this.socketUrl = void 0, this.websocket.onmessage = null, this.websocket.onopen = null, this.websocket.onerror = null, this.websocket.onclose = null, this.websocket = null);
        }, a2.onConnect = function onConnect() {
          this.status = "connected", this.emit("connect"), clearTimeout(this.socketConnectTimer);
        }, a2._createWebsocket = function _createWebsocket(t3) {
          var a3, u2 = this;
          this.socketConnectTimer = mo(function() {
            u2.logger.error("imsocket::Websocket connect timeout. url: ", t3), u2.emit("connectFailed", new Pl({ code: get(u2.core, "options.apiVersion") === "v2" ? Nl.V2NIM_ERROR_CODE_CONNECT_TIMEOUT : 415, detail: { reason: "imsocket::Websocket connect timeout. url: " + t3 } }));
          }, this.core.options.socketConnectTimeout || 8e3), this.socketUrl = t3, this.websocket = new Jl.WebSocket(t3), this.websocket.binaryType = "arraybuffer", this.websocket.onmessage = bind$1(a3 = this.onMessage).call(a3, this), this.websocket.onclose = function() {
            u2.logger.log("imsocket::Websocket onclose done"), u2.status === "connected" ? (u2.clean(), u2.emit("disconnect")) : (u2.clean(), u2.emit("connectFailed", new Pl({ code: get(u2.core, "options.apiVersion") === "v2" ? Nl.V2NIM_ERROR_CODE_CONNECT_FAILED : 414, detail: { reason: "imsocket::Websocket onclose done" } })));
          }, this.websocket.onerror = function(t4) {
            u2.logger.error("imsocket::Websocket onerror", t4), u2.status === "connected" ? (u2.clean(), u2.emit("disconnect")) : (u2.clean(), u2.emit("connectFailed", new Pl({ code: get(u2.core, "options.apiVersion") === "v2" ? Nl.V2NIM_ERROR_CODE_CONNECT_FAILED : 414, detail: { reason: "imsocket::Websocket onerror." } })));
          }, this.websocket.onopen = function() {
            u2.onConnect();
          };
        }, a2.onMessage = function onMessage(t3) {
          if (t3.data) {
            var a3 = new Lp(t3.data), u2 = { sid: -1, cid: -1, ser: -1, packetLength: -1 }, m2 = null;
            try {
              a3.unmarshalHeader(), u2 = a3.getHeader(), m2 = a3.getInnerHeader();
            } catch (a4) {
              this.reportBinaryError({ err: a4, sid: m2 ? m2.sid : u2 == null ? void 0 : u2.sid, cid: m2 ? m2.cid : u2 == null ? void 0 : u2.cid, rawBuf: t3.data, type: "decode" });
            }
            var h2 = m2 ? m2.sid : u2.sid, g2 = m2 ? m2.cid : u2.cid, M2 = h2 + "_" + g2, I2 = Vd[M2];
            if (I2 && I2.length > 0) {
              var S2, T2 = I2[0].config;
              try {
                S2 = a3.unmarshal(T2.response);
              } catch (m3) {
                var C2 = a3.getBodyDetail();
                this.reportBinaryError({ err: m3, rawBuf: t3.data, sid: h2, cid: g2, parseDetail: C2, type: "decode" }), a3.reset();
                var b2 = Dt(Dt({}, u2), { sid: h2, cid: g2, code: Nl.V2NIM_ERROR_CODE_UNPACK_ERROR });
                return this.logger.error('imsocket::onMessage "' + b2.sid + "_" + b2.cid + '", ser ' + b2.ser + ", packetLength " + b2.packetLength + " unmarshal error. " + C2 + " \n", m3), void this.emit("message", Un(b2));
              }
              this.emit("message", S2);
            } else
              this.core.logger.warn("imsocket::onMessage cmd not found", M2);
            a3.reset();
          }
        }, a2.send = function send(t3, a3, u2, m2, h2) {
          var g2, M2, I2 = new Dp(t3, a3, u2), S2 = Ld[m2], T2 = "";
          try {
            T2 = Un(h2), M2 = I2.marshal(JSON.parse(T2), S2.params);
          } catch (m3) {
            throw this.reportBinaryError({ err: m3, sid: t3, cid: a3, rawStr: T2, type: "encode" }), I2.reset(), new Pl({ code: Nl.V2NIM_ERROR_CODE_PACK_ERROR, detail: { reason: t3 + "-" + a3 + ", ser " + u2 + " marshal error", rawError: m3 } });
          }
          (g2 = this.websocket) === null || g2 === void 0 || g2.send(M2), I2.reset();
        }, a2.reportBinaryError = function reportBinaryError(t3) {
          var a3, u2, m2, h2 = t3.err, g2 = t3.rawStr, M2 = t3.sid, I2 = t3.cid, S2 = t3.type, T2 = t3.parseDetail, C2 = t3.rawBuf;
          if (C2) {
            try {
              m2 = function arrayBufferToBase64(t4) {
                if (typeof btoa != "function")
                  return "";
                for (var a4 = "", u3 = new Uint8Array(t4), m3 = u3.byteLength, h3 = 0; h3 < m3; h3++)
                  a4 += String.fromCharCode(u3[h3]);
                return u3 = null, btoa(a4);
              }(C2);
            } catch (t4) {
              m2 = "reportBinaryError::arrayBufferToBase64 parsing failed, error: " + (t4 == null ? void 0 : t4.message) + ", sid: " + M2 + ", cid: " + I2, this.core.logger.error(m2);
            }
            C2 = null;
          }
          this.core.reporter.reportTraceStart("exceptions", { user_id: (a3 = this.core.auth) === null || a3 === void 0 ? void 0 : a3.account, trace_id: (u2 = this.core.clientSocket.socket) === null || u2 === void 0 ? void 0 : u2.sessionId, start_time: to(), action: 2, exception_service: 9 });
          var b2 = h2 ? (h2.message + ";;;" || h2.code + ";;;") + (T2 ? "parseDetail: " + T2 + ";;;" : "") + (g2 ? " rawStr: " + g2 : "") + (m2 ? " rawBuf: " + m2 : "") : "";
          this.core.reporter.reportTraceUpdateV2("exceptions", { code: S2 === "encode" ? Nl.V2NIM_ERROR_CODE_PACK_ERROR : Nl.V2NIM_ERROR_CODE_UNPACK_ERROR, description: b2, operation_type: S2 === "encode" ? 3 : 4, target: M2 + "-" + I2 }, { asyncParams: Jl.net.getNetworkStatus() }), this.core.reporter.reportTraceEnd("exceptions", 1);
        }, BaseWebsocket;
      }(ho);
      function _createForOfIteratorHelperLoose$8(t2, a2) {
        var u2, m2 = es !== void 0 && $l(t2) || t2["@@iterator"];
        if (m2)
          return bind$1(u2 = (m2 = m2.call(t2)).next).call(u2, m2);
        if (Dn(t2) || (m2 = function _unsupportedIterableToArray$8(t3, a3) {
          if (t3) {
            var u3;
            if (typeof t3 == "string")
              return _arrayLikeToArray$8(t3, a3);
            var m3 = slice(u3 = {}.toString.call(t3)).call(u3, 8, -1);
            return m3 === "Object" && t3.constructor && (m3 = t3.constructor.name), m3 === "Map" || m3 === "Set" ? jl(t3) : m3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m3) ? _arrayLikeToArray$8(t3, a3) : void 0;
          }
        }(t2)) || a2 && t2 && typeof t2.length == "number") {
          m2 && (t2 = m2);
          var h2 = 0;
          return function() {
            return h2 >= t2.length ? { done: true } : { done: false, value: t2[h2++] };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _arrayLikeToArray$8(t2, a2) {
        (a2 == null || a2 > t2.length) && (a2 = t2.length);
        for (var u2 = 0, m2 = Array(a2); u2 < a2; u2++)
          m2[u2] = t2[u2];
        return m2;
      }
      !function(t2) {
        t2[t2.ACTIVE = 1] = "ACTIVE", t2[t2.KICKED = 2] = "KICKED", t2[t2.OFFLINE = 3] = "OFFLINE";
      }(Up || (Up = {}));
      var Bp, Fp = function() {
        function V2BinaryClientSocket(t3) {
          this.isReconnect = false, this.packetTimeout = 8e3, this.packetSer = 1, this.backoff = new Qd({ max: 8e3, min: 1600, jitter: 0.01 }), this.sendingCmdMap = new fc(), this.pingTimer = 0, this.hasNetworkListener = false, this.core = t3, this.auth = t3.auth, this.logger = t3.logger, this.reporter = t3.reporter, this.timerManager = t3.timerManager, this.eventBus = t3.eventBus, this.setListener();
        }
        var t2 = V2BinaryClientSocket.prototype;
        return t2.setListener = function setListener() {
          var t3 = this;
          this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", function() {
            t3.isReconnect = true;
          });
        }, t2.setSessionId = function setSessionId(t3) {
          this.socket && (this.socket.sessionId = t3);
        }, t2.connect = function connect(t3, a2) {
          var u2, m2;
          return a2 === void 0 && (a2 = false), __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var h2, g2, M2, I2;
            return Ql.wrap(function _callee$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    if (this.isReconnect = a2, (h2 = this.core.auth.getConnectStatus()) !== 1) {
                      S2.next = 7;
                      break;
                    }
                    return g2 = "clientSocket::connect status is " + h2 + ", and would not repeat connect", M2 = new Pl({ code: Nl.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: g2 } }), this.logger.warn(g2), S2.abrupt("return", zi.reject(M2));
                  case 7:
                    return this.auth.lifeCycle.processEvent("connect"), S2.prev = 8, S2.next = 11, this.auth.doLoginStepsManager.add(this.doConnect(t3));
                  case 11:
                    this.logger.log("clientSocketV2:: connect success with link url: " + t3 + ", isReconnect: " + a2), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "TCP", target: t3, code: 200, mixlink: true, succeed: true }, { asyncParams: Jl.net.getNetworkStatus() }), this.auth.lifeCycle.processEvent("connectSucc"), S2.next = 28;
                    break;
                  case 16:
                    if (S2.prev = 16, S2.t0 = S2.catch(8), I2 = S2.t0, this.core.reporter.reportTraceUpdateV2("login", { operation_type: "TCP", target: t3, code: I2.code || 0, description: "connectFailed:" + I2.message, mixlink: true, succeed: false }, { asyncParams: Jl.net.getNetworkStatus() }), I2.code !== Nl.V2NIM_ERROR_CODE_CANCELLED && I2.code !== Nl.V2NIM_ERROR_CODE_TIMEOUT) {
                      S2.next = 25;
                      break;
                    }
                    throw (u2 = this.socket) === null || u2 === void 0 || u2.close(), (m2 = this.socket) === null || m2 === void 0 || m2.removeAllListeners(), this.socket = void 0, S2.t0;
                  case 25:
                    throw this.logger.warn("clientSocketV2::connect failed with link url: " + t3, I2), this.auth.lifeCycle.processEvent("connectFail", I2), S2.t0;
                  case 28:
                  case "end":
                    return S2.stop();
                }
            }, _callee, this, [[8, 16]]);
          }));
        }, t2.doConnect = function doConnect(t3) {
          var a2 = this, u2 = false;
          return new zi(function(m2, h2) {
            var g2;
            a2.socket = new qp(a2.core, t3), a2.socket.on("connect", function() {
              a2.logger.log("clientSocketV2::socket on connect", t3), a2.core.reporterHookLinkKeep.start(), a2.core.reporterHookLinkKeep.update({ code: 0, description: "connection begin", operation_type: 0, target: t3 }), u2 = true, m2();
            }), a2.socket.on("message", bind$1(g2 = a2.onMessage).call(g2, a2)), a2.socket.on("disconnect", function(m3) {
              return __awaiter(a2, void 0, void 0, Ql.mark(function _callee2() {
                return Ql.wrap(function _callee2$(a3) {
                  for (; ; )
                    switch (a3.prev = a3.next) {
                      case 0:
                        return u2 = true, this.logger.log("clientSocketV2::socket on disconnect " + t3, m3), a3.next = 4, this.core.reporterHookLinkKeep.update({ code: (m3 == null ? void 0 : m3.code) || 0, description: (m3 == null ? void 0 : m3.reason) || "socket on disconnect", operation_type: 1, target: t3 });
                      case 4:
                        this.core.reporterHookLinkKeep.end(false), this.doDisconnect(Up.OFFLINE, "SocketOnDisconnect");
                      case 6:
                      case "end":
                        return a3.stop();
                    }
                }, _callee2, this);
              }));
            }), a2.socket.on("connectFailed", function(m3) {
              u2 ? a2.ping() : (a2.logger.error("clientSocketV2::connectFailed:" + t3 + ", reason:" + (m3 && m3.message)), a2.cleanSocket()), u2 = true, h2(m3);
            });
          });
        }, t2.cleanSocket = function cleanSocket() {
          this.socket && (typeof this.socket.removeAllListeners == "function" && this.socket.removeAllListeners(), typeof this.socket.close == "function" && this.socket.close(), this.socket = void 0);
        }, t2.resetSocketConfig = function resetSocketConfig() {
          this.backoff.reset(), this.initOnlineListener();
        }, t2.doDisconnect = function doDisconnect(t3, a2) {
          if (this.logger.log("clientSocketV2::doDisconnect: type " + t3 + ", reason ", a2), this.core.auth.getConnectStatus() !== 0) {
            var u2 = { 1: "close", 2: "kicked", 3: "broken" }[t3] || "";
            this.markAllCmdInvaild(new Pl({ code: Nl.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "Packet timeout due to instance disconnect", disconnect_reason: u2 } })), this.timerManager.destroy(), clearTimeout(this.pingTimer), this.cleanSocket(), t3 === Up.ACTIVE || t3 === Up.KICKED ? this.destroyOnlineListener() : t3 === Up.OFFLINE && (this.auth.lifeCycle.processEvent("connectionBroken", new Pl({ code: Nl.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "connection broken due to internal reasons" } })), this.logger.log("clientSocketV2::doDisconnect: pending reconnect " + this.isReconnect), this.isReconnect && this.auth.lifeCycle.processEvent("waiting"));
          } else
            this.logger.warn("clientSocketV2::doDisconnect: already disconnected");
        }, t2.sendCmd = function sendCmd(t3, a2, u2) {
          var m2 = this, h2 = this.core.auth.getLoginStatus(), g2 = ["v2Login", "login", "chatroomLogin", "v2ChatroomLogin"], M2 = { cmd: t3 };
          if (h2 !== 1 && !includes(g2).call(g2, t3))
            return this.logger.warn("clientSocketV2::NIM login status is " + h2 + ", so can not sendCmd " + t3), zi.reject(new Pl({ code: Nl.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: Dt({ reason: "Can not sendCmd due to no logined" }, M2) }));
          var I2 = t3 !== "heartbeat", S2 = I2 ? this.packetSer++ : 0, T2 = createCmd(t3, S2, this.logger, a2);
          if (!T2) {
            var C2 = new Pl({ code: Nl.V2NIM_ERROR_CODE_INTERNAL, detail: Dt(Dt({}, M2), { reason: "SendCmd::createCmd error: " + S2 + " " + t3 }) });
            return this.logger.error(C2), zi.reject(C2);
          }
          var b2 = T2.packet, E2 = T2.hasPacketResponse, k2 = T2.hasPacketTimer, w2 = Un(b2);
          I2 && (this.logger.getDebugMode() ? this.logger.debug("clientSocketV2::sendCmd: " + b2.SID + "_" + b2.CID + "," + t3 + ",ser:" + S2, w2) : this.logger.log("clientSocketV2::sendCmd: " + b2.SID + "_" + b2.CID + "," + t3 + ",ser:" + S2));
          var R2 = new Date().getTime();
          return new zi(function(h3, g3) {
            E2 && m2.sendingCmdMap.set(S2, { cmd: t3, params: a2, callback: [h3, g3], timer: k2 ? mo(function() {
              var a3 = new Pl({ code: Nl.V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT, detail: Dt({ ser: S2, reason: "Packet Timeout: ser " + S2 + " cmd " + t3, timetag: new Date().getTime() }, M2) });
              m2.markCmdInvalid(S2, a3, t3);
            }, u2 && u2.timeout ? u2.timeout : m2.packetTimeout) : null });
            try {
              m2.socket.send(b2.SID, b2.CID, S2, t3, b2.Q), E2 || h3(b2);
            } catch (a3) {
              var I3 = new Pl({ code: Nl.V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED, detail: Dt({ ser: S2, reason: "Unable to send packet" + (a3 && a3.message ? ": " + a3.message : ""), timetag: new Date().getTime(), rawError: a3 }, M2) });
              m2.markCmdInvalid(S2, I3, t3), g3(I3);
            }
          }).catch(function(t4) {
            return __awaiter(m2, void 0, void 0, Ql.mark(function _callee3() {
              var a3, u3;
              return Ql.wrap(function _callee3$(m3) {
                for (; ; )
                  switch (m3.prev = m3.next) {
                    case 0:
                      if (a3 = t4, u3 = [Nl.V2NIM_ERROR_CODE_DISCONNECT, Nl.V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT, Nl.V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED], includes(u3).call(u3, a3.code)) {
                        m3.next = 4;
                        break;
                      }
                      return m3.abrupt("return", zi.reject(a3));
                    case 4:
                      return this.reportSendCmdFailed(a3, { sid: b2.SID, cid: b2.CID, ser: S2 }, R2), m3.abrupt("return", zi.reject(a3));
                    case 6:
                    case "end":
                      return m3.stop();
                  }
              }, _callee3, this);
            }));
          });
        }, t2.reportSendCmdFailed = function reportSendCmdFailed(t3, a2, u2) {
          var m2;
          this.reporter.reportTraceStart("exceptions", { user_id: this.core.auth.getLoginUser(), trace_id: (m2 = this.socket) === null || m2 === void 0 ? void 0 : m2.sessionId, start_time: u2, action: 2, exception_service: 6 });
          var h2 = get(t3, "detail.disconnect_reason") || "", g2 = t3.code === Nl.V2NIM_ERROR_CODE_DISCONNECT ? Un({ disconnect_reason: h2 }) : t3.detail.reason;
          this.reporter.reportTraceUpdateV2("exceptions", { code: t3.code, description: g2, operation_type: 1, target: a2.sid + "-" + a2.cid, context: "" + a2.ser }, { asyncParams: Jl.net.getNetworkStatus() }), this.reporter.reportTraceEnd("exceptions", 1);
        }, t2.onMessage = function onMessage(t3) {
          var a2 = parseCmd(t3, this.logger);
          if (a2) {
            var u2 = a2[0], m2 = u2.raw.ser;
            u2.cmd !== "heartbeat" && (this.logger.getDebugMode() ? this.logger.debug("clientSocketV2::recvCmd " + u2.raw.sid + "_" + u2.raw.cid + "," + u2.cmd + ",ser:" + m2, t3) : this.logger.log("clientSocketV2::recvCmd " + u2.raw.sid + "_" + u2.raw.cid + "," + u2.cmd + ",ser:" + m2 + ",code:" + u2.raw.code));
            for (var h2, g2 = _createForOfIteratorHelperLoose$8(a2); !(h2 = g2()).done; ) {
              var M2 = h2.value;
              if (M2.error && this.logger.error("clientSocketV2::onMessage packet error", M2.raw.sid + "_" + M2.raw.cid + ", ser:" + m2 + ",", M2.error), M2.notFound)
                return void this.logger.warn("clientSocketV2::onMessage packet not found", M2.raw.sid + "_" + M2.raw.cid + ", ser:" + m2);
              this.packetHandler(M2);
            }
          }
        }, t2.packetHandler = function packetHandler(t3) {
          var a2, u2, m2 = this;
          if (t3) {
            var h2 = t3.raw.ser, g2 = this.sendingCmdMap.get(h2);
            if (g2 && g2.cmd === t3.cmd) {
              var M2 = g2.callback, I2 = g2.timer, S2 = g2.params;
              if (clearTimeout(I2), t3.params = S2, this.sendingCmdMap.delete(h2), t3.cmd === "heartbeat")
                return void M2[0]();
              var T2 = (a2 = this.core[t3.service]) === null || a2 === void 0 ? void 0 : a2.process(t3);
              T2 && typeof T2.then == "function" ? T2.then(function(t4) {
                M2[0](t4);
              }).catch(function(t4) {
                M2[1](t4);
              }) : (this.logger.log("clientSocketV2::handlerFn without promise", t3.service, t3.cmd), M2[0](t3));
            } else {
              var C2 = (u2 = this.core[t3.service]) === null || u2 === void 0 ? void 0 : u2.process(t3);
              C2 && typeof C2.then == "function" && C2.catch(function(t4) {
                m2.logger.error("clientSocketV2::no obj cache, no process handler", t4);
              });
            }
          }
        }, t2.markCmdInvalid = function markCmdInvalid(t3, a2, u2) {
          var m2 = this.sendingCmdMap.get(t3);
          if (m2) {
            var h2 = m2.callback, g2 = m2.timer;
            g2 && clearTimeout(g2), this.sendingCmdMap.delete(t3), this.logger.warn("clientSocketV2::packet " + t3 + ", " + u2 + " is invalid:", a2), h2[1](a2);
          }
        }, t2.markAllCmdInvaild = function markAllCmdInvaild(t3) {
          var a2, u2 = this;
          this.logger.log("markAllCmdInvaild", t3), forEach$1(a2 = this.sendingCmdMap).call(a2, function(a3) {
            var m2 = a3.callback, h2 = a3.timer, g2 = a3.cmd;
            u2.logger.log("clientSocketV2::markAllCmdInvaild:cmd " + g2), h2 && clearTimeout(h2), m2[1](t3);
          }), this.sendingCmdMap.clear();
        }, t2.ping = function ping() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a2 = this;
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return clearTimeout(this.pingTimer), u2.prev = 1, u2.next = 4, this.sendCmd("heartbeat");
                  case 4:
                    u2.next = 20;
                    break;
                  case 6:
                    if (u2.prev = 6, u2.t0 = u2.catch(1), u2.t0.code !== Nl.V2NIM_ERROR_CODE_DISCONNECT) {
                      u2.next = 11;
                      break;
                    }
                    return u2.abrupt("return");
                  case 11:
                    return u2.next = 13, this.testHeartBeat5Timeout();
                  case 13:
                    if (!u2.sent) {
                      u2.next = 20;
                      break;
                    }
                    return u2.next = 17, this.core.reporterHookLinkKeep.update({ code: 0, description: "Heartbeat-discovered link failure", operation_type: 1, target: (t3 = this.socket) === null || t3 === void 0 ? void 0 : t3.url });
                  case 17:
                    return this.core.reporterHookLinkKeep.end(true), this.doDisconnect(Up.OFFLINE, "PingError"), u2.abrupt("return");
                  case 20:
                    this.pingTimer = mo(function() {
                      a2.ping();
                    }, 3e4);
                  case 21:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this, [[1, 6]]);
          }));
        }, t2.testHeartBeat5Timeout = function testHeartBeat5Timeout() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var t3;
            return Ql.wrap(function _callee5$(a2) {
              for (; ; )
                switch (a2.prev = a2.next) {
                  case 0:
                    clearTimeout(this.pingTimer), t3 = 0;
                  case 2:
                    if (!(t3 < 5)) {
                      a2.next = 15;
                      break;
                    }
                    return a2.prev = 3, a2.next = 6, this.sendCmd("heartbeat", {}, { timeout: 3e3 });
                  case 6:
                    return a2.abrupt("return", false);
                  case 9:
                    a2.prev = 9, a2.t0 = a2.catch(3), this.logger.log("clientSocketV2::test heartbeat " + t3 + " Timeout");
                  case 12:
                    t3++, a2.next = 2;
                    break;
                  case 15:
                    return a2.abrupt("return", true);
                  case 16:
                  case "end":
                    return a2.stop();
                }
            }, _callee5, this, [[3, 9]]);
          }));
        }, t2.initOnlineListener = function initOnlineListener() {
          var t3 = this;
          this.hasNetworkListener || (this.logger.log("clientSocketV2::onlineListener:init"), this.hasNetworkListener = true, Jl.net.onNetworkStatusChange(function(a2) {
            t3.logger.log("clientSocketV2::onlineListener:network change", a2);
            var u2 = t3.auth.getConnectStatus(), m2 = t3.auth.getLoginStatus();
            a2.isConnected && m2 === 1 ? t3.ping() : a2.isConnected && u2 === 3 ? (t3.logger.log("clientSocketV2::onlineListener:online and connectStatus is waiting, do reLogin"), t3.auth.reconnect.clearReconnectTimer(), t3.auth.reconnect.doReLogin()) : a2.isConnected || t3.doDisconnect(Up.OFFLINE, "OfflineListener");
          }));
        }, t2.destroyOnlineListener = function destroyOnlineListener() {
          this.logger.log("clientSocketV2::onlineListener:destroy"), Jl.net.offNetworkStatusChange(), this.hasNetworkListener = false;
        }, V2BinaryClientSocket;
      }();
      function _createForOfIteratorHelperLoose$7(t2, a2) {
        var u2, m2 = es !== void 0 && $l(t2) || t2["@@iterator"];
        if (m2)
          return bind$1(u2 = (m2 = m2.call(t2)).next).call(u2, m2);
        if (Dn(t2) || (m2 = function _unsupportedIterableToArray$7(t3, a3) {
          if (t3) {
            var u3;
            if (typeof t3 == "string")
              return _arrayLikeToArray$7(t3, a3);
            var m3 = slice(u3 = {}.toString.call(t3)).call(u3, 8, -1);
            return m3 === "Object" && t3.constructor && (m3 = t3.constructor.name), m3 === "Map" || m3 === "Set" ? jl(t3) : m3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m3) ? _arrayLikeToArray$7(t3, a3) : void 0;
          }
        }(t2)) || a2 && t2 && typeof t2.length == "number") {
          m2 && (t2 = m2);
          var h2 = 0;
          return function() {
            return h2 >= t2.length ? { done: true } : { done: false, value: t2[h2++] };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _arrayLikeToArray$7(t2, a2) {
        (a2 == null || a2 > t2.length) && (a2 = t2.length);
        for (var u2 = 0, m2 = Array(a2); u2 < a2; u2++)
          m2[u2] = t2[u2];
        return m2;
      }
      !function(t2) {
        t2[t2.ACTIVE = 1] = "ACTIVE", t2[t2.KICKED = 2] = "KICKED", t2[t2.OFFLINE = 3] = "OFFLINE";
      }(Bp || (Bp = {}));
      var Gp = function() {
        function V2ClientSocket(t3) {
          this.isReconnect = false, this.packetTimeout = 8e3, this.packetSer = 1, this.backoff = new Qd({ max: 8e3, min: 1600, jitter: 0.01 }), this.sendingCmdMap = new fc(), this.pingTimer = 0, this.hasNetworkListener = false, this.core = t3, this.auth = t3.auth, this.logger = t3.logger, this.reporter = t3.reporter, this.timerManager = t3.timerManager, this.eventBus = t3.eventBus, this.setListener();
        }
        var t2 = V2ClientSocket.prototype;
        return t2.setListener = function setListener() {
          var t3 = this;
          this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", function() {
            t3.isReconnect = true;
          });
        }, t2.setSessionId = function setSessionId(t3) {
          this.socket && (this.socket.sessionId = t3);
        }, t2.connect = function connect(t3, a2) {
          var u2, m2;
          return a2 === void 0 && (a2 = false), __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var h2, g2, M2, I2;
            return Ql.wrap(function _callee$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    if (this.isReconnect = a2, (h2 = this.core.auth.getConnectStatus()) !== 1) {
                      S2.next = 7;
                      break;
                    }
                    return g2 = "clientSocket::connect status is " + h2 + ", and would not repeat connect", M2 = new Pl({ code: Nl.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: g2 } }), this.logger.warn(g2), S2.abrupt("return", zi.reject(M2));
                  case 7:
                    return this.auth.lifeCycle.processEvent("connect"), S2.prev = 8, S2.next = 11, this.auth.doLoginStepsManager.add(this.doConnect(t3));
                  case 11:
                    this.logger.log("clientSocketV2:: connect success with link url: " + t3 + ", isReconnect: " + a2), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "TCP", target: t3, code: 200, mixlink: true, succeed: true }, { asyncParams: Jl.net.getNetworkStatus() }), this.auth.lifeCycle.processEvent("connectSucc"), S2.next = 28;
                    break;
                  case 16:
                    if (S2.prev = 16, S2.t0 = S2.catch(8), I2 = S2.t0, this.core.reporter.reportTraceUpdateV2("login", { operation_type: "TCP", target: t3, code: I2.code || 0, description: "connectFailed:" + I2.message, mixlink: true, succeed: false }, { asyncParams: Jl.net.getNetworkStatus() }), I2.code !== Nl.V2NIM_ERROR_CODE_CANCELLED && I2.code !== Nl.V2NIM_ERROR_CODE_TIMEOUT) {
                      S2.next = 25;
                      break;
                    }
                    throw (u2 = this.socket) === null || u2 === void 0 || u2.close(), (m2 = this.socket) === null || m2 === void 0 || m2.removeAllListeners(), this.socket = void 0, S2.t0;
                  case 25:
                    throw this.logger.warn("clientSocketV2::connect failed with link url: " + t3, I2), this.auth.lifeCycle.processEvent("connectFail", I2), S2.t0;
                  case 28:
                  case "end":
                    return S2.stop();
                }
            }, _callee, this, [[8, 16]]);
          }));
        }, t2.doConnect = function doConnect(t3) {
          var a2 = this, u2 = false;
          return new zi(function(m2, h2) {
            var g2;
            a2.socket = new tp(a2.core, t3), a2.socket.on("connect", function() {
              a2.logger.log("clientSocketV2::socket on connect", t3), a2.core.reporterHookLinkKeep.start(), a2.core.reporterHookLinkKeep.update({ code: 0, description: "connection begin", operation_type: 0, target: t3 }), u2 = true, m2();
            }), a2.socket.on("message", bind$1(g2 = a2.onMessage).call(g2, a2)), a2.socket.on("disconnect", function(m3) {
              return __awaiter(a2, void 0, void 0, Ql.mark(function _callee2() {
                return Ql.wrap(function _callee2$(a3) {
                  for (; ; )
                    switch (a3.prev = a3.next) {
                      case 0:
                        return u2 = true, this.logger.log("clientSocketV2::socket on disconnect", m3), a3.next = 4, this.core.reporterHookLinkKeep.update({ code: (m3 == null ? void 0 : m3.code) || 0, description: (m3 == null ? void 0 : m3.reason) || "socket on disconnect", operation_type: 1, target: t3 });
                      case 4:
                        this.core.reporterHookLinkKeep.end(false), this.doDisconnect(Bp.OFFLINE, "SocketOnDisconnect");
                      case 6:
                      case "end":
                        return a3.stop();
                    }
                }, _callee2, this);
              }));
            }), a2.socket.on("handshakeFailed", function(t4) {
              u2 ? a2.ping() : (a2.logger.error('clientSocketV2::handshake failed: "' + (t4 && t4.message) + '"'), a2.cleanSocket()), u2 = true, h2(t4);
            });
          });
        }, t2.cleanSocket = function cleanSocket() {
          this.socket && (typeof this.socket.removeAllListeners == "function" && this.socket.removeAllListeners(), typeof this.socket.close == "function" && this.socket.close(), this.socket = void 0);
        }, t2.resetSocketConfig = function resetSocketConfig() {
          this.backoff.reset(), this.initOnlineListener();
        }, t2.doDisconnect = function doDisconnect(t3, a2) {
          if (this.logger.log("clientSocketV2::doDisconnect: type " + t3 + ", reason ", a2), this.core.auth.getConnectStatus() !== 0) {
            var u2 = { 1: "close", 2: "kicked", 3: "broken" }[t3] || "";
            this.markAllCmdInvaild(new Pl({ code: Nl.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "Packet timeout due to instance disconnect", disconnect_reason: u2 } })), this.timerManager.destroy(), clearTimeout(this.pingTimer), this.cleanSocket(), t3 === Bp.ACTIVE || t3 === Bp.KICKED ? this.destroyOnlineListener() : t3 === Bp.OFFLINE && (this.auth.lifeCycle.processEvent("connectionBroken", new Pl({ code: Nl.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "connection broken due to internal reasons" } })), this.logger.log("clientSocketV2::doDisconnect: pending reconnect " + this.isReconnect), this.isReconnect && this.auth.lifeCycle.processEvent("waiting"));
          } else
            this.logger.warn("clientSocketV2::doDisconnect: already disconnected");
        }, t2.sendCmd = function sendCmd(t3, a2, u2) {
          var m2 = this, h2 = this.core.auth.getLoginStatus(), g2 = ["v2Login", "login", "chatroomLogin", "v2ChatroomLogin"], M2 = { cmd: t3 };
          if (h2 !== 1 && !includes(g2).call(g2, t3))
            return this.logger.warn("clientSocketV2::NIM login status is " + h2 + ", so can not sendCmd " + t3), zi.reject(new Pl({ code: Nl.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: Dt({ reason: "Can not sendCmd due to no logined" }, M2) }));
          var I2 = t3 !== "heartbeat", S2 = I2 ? this.packetSer++ : 0, T2 = createCmd(t3, S2, this.logger, a2);
          if (!T2) {
            var C2 = new Pl({ code: Nl.V2NIM_ERROR_CODE_INTERNAL, detail: Dt(Dt({}, M2), { reason: "SendCmd::createCmd error: " + S2 + " " + t3 }) });
            return this.logger.error(C2), zi.reject(C2);
          }
          var b2 = T2.packet, E2 = T2.hasPacketResponse, k2 = T2.hasPacketTimer, w2 = Un(b2);
          I2 && (this.logger.getDebugMode() ? this.logger.debug("clientSocketV2::sendCmd: " + b2.SID + "_" + b2.CID + "," + t3 + ",ser:" + S2, w2) : this.logger.log("clientSocketV2::sendCmd: " + b2.SID + "_" + b2.CID + "," + t3 + ",ser:" + S2));
          var R2 = new Date().getTime();
          return new zi(function(h3, g3) {
            E2 && m2.sendingCmdMap.set(S2, { cmd: t3, params: a2, callback: [h3, g3], timer: k2 ? mo(function() {
              var a3 = new Pl({ code: Nl.V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT, detail: Dt({ ser: S2, reason: "Packet Timeout: ser " + S2 + " cmd " + t3, timetag: new Date().getTime() }, M2) });
              m2.markCmdInvalid(S2, a3, t3);
            }, u2 && u2.timeout ? u2.timeout : m2.packetTimeout) : null });
            try {
              m2.socket.send(w2), E2 || h3(b2);
            } catch (a3) {
              var I3 = new Pl({ code: Nl.V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED, detail: Dt({ ser: S2, reason: "Unable to send packet" + (a3 && a3.message ? ": " + a3.message : ""), timetag: new Date().getTime(), rawError: a3 }, M2) });
              m2.markCmdInvalid(S2, I3, t3), g3(I3);
            }
          }).catch(function(t4) {
            return __awaiter(m2, void 0, void 0, Ql.mark(function _callee3() {
              var a3, u3, m3, h3, g3;
              return Ql.wrap(function _callee3$(M3) {
                for (; ; )
                  switch (M3.prev = M3.next) {
                    case 0:
                      if (u3 = t4, m3 = [Nl.V2NIM_ERROR_CODE_DISCONNECT, Nl.V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT, Nl.V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED], includes(m3).call(m3, u3.code)) {
                        M3.next = 4;
                        break;
                      }
                      return M3.abrupt("return", zi.reject(u3));
                    case 4:
                      return this.reporter.reportTraceStart("exceptions", { user_id: this.core.auth.getLoginUser(), trace_id: (a3 = this.socket) === null || a3 === void 0 ? void 0 : a3.sessionId, start_time: R2, action: 2, exception_service: 6 }), h3 = get(u3, "detail.disconnect_reason") || "", g3 = u3.code === Nl.V2NIM_ERROR_CODE_DISCONNECT ? Un({ disconnect_reason: h3 }) : u3.detail.reason, this.reporter.reportTraceUpdateV2("exceptions", { code: u3.code, description: g3, operation_type: 1, target: b2.SID + "-" + b2.CID, context: "" + b2.SER }, { asyncParams: Jl.net.getNetworkStatus() }), this.reporter.reportTraceEnd("exceptions", 1), M3.abrupt("return", zi.reject(u3));
                    case 10:
                    case "end":
                      return M3.stop();
                  }
              }, _callee3, this);
            }));
          });
        }, t2.onMessage = function onMessage(t3) {
          var a2 = parseCmd(t3, this.logger);
          if (a2)
            for (var u2, m2 = _createForOfIteratorHelperLoose$7(a2); !(u2 = m2()).done; ) {
              var h2 = u2.value, g2 = h2.raw.ser;
              if (h2.error && this.logger.error("clientSocketV2::onMessage packet error", h2.raw.sid + "_" + h2.raw.cid + ", ser:" + g2 + ",", h2.error), h2.notFound)
                return void this.logger.warn("clientSocketV2::onMessage packet not found", h2.raw.sid + "_" + h2.raw.cid + ", ser:" + g2);
              h2.cmd !== "heartbeat" && (this.logger.getDebugMode() ? this.logger.debug("clientSocketV2::recvCmd " + h2.raw.sid + "_" + h2.raw.cid + "," + h2.cmd + ",ser:" + g2, h2.content) : this.logger.log("clientSocketV2::recvCmd " + h2.raw.sid + "_" + h2.raw.cid + "," + h2.cmd + ",ser:" + g2 + ";code:" + h2.raw.code)), this.packetHandler(h2);
            }
        }, t2.packetHandler = function packetHandler(t3) {
          var a2, u2, m2 = this;
          if (t3) {
            var h2 = t3.raw.ser, g2 = this.sendingCmdMap.get(h2);
            if (g2 && g2.cmd === t3.cmd) {
              var M2 = g2.callback, I2 = g2.timer, S2 = g2.params;
              if (clearTimeout(I2), t3.params = S2, this.sendingCmdMap.delete(h2), t3.cmd === "heartbeat")
                return void M2[0]();
              var T2 = (a2 = this.core[t3.service]) === null || a2 === void 0 ? void 0 : a2.process(t3);
              T2 && typeof T2.then == "function" ? T2.then(function(t4) {
                M2[0](t4);
              }).catch(function(t4) {
                M2[1](t4);
              }) : (this.logger.log("clientSocketV2::handlerFn without promise", t3.service, t3.cmd), M2[0](t3));
            } else {
              var C2 = (u2 = this.core[t3.service]) === null || u2 === void 0 ? void 0 : u2.process(t3);
              C2 && typeof C2.then == "function" && C2.catch(function(t4) {
                m2.logger.error("clientSocketV2::no obj cache, no process handler", t4);
              });
            }
          }
        }, t2.markCmdInvalid = function markCmdInvalid(t3, a2, u2) {
          var m2 = this.sendingCmdMap.get(t3);
          if (m2) {
            var h2 = m2.callback, g2 = m2.timer;
            g2 && clearTimeout(g2), this.sendingCmdMap.delete(t3), this.logger.warn("clientSocketV2::packet " + t3 + ", " + u2 + " is invalid:", a2), h2[1](a2);
          }
        }, t2.markAllCmdInvaild = function markAllCmdInvaild(t3) {
          var a2, u2 = this;
          this.logger.log("markAllCmdInvaild", t3), forEach$1(a2 = this.sendingCmdMap).call(a2, function(a3) {
            var m2 = a3.callback, h2 = a3.timer, g2 = a3.cmd;
            u2.logger.log("clientSocketV2::markAllCmdInvaild:cmd " + g2), h2 && clearTimeout(h2), m2[1](t3);
          }), this.sendingCmdMap.clear();
        }, t2.ping = function ping() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a2 = this;
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return clearTimeout(this.pingTimer), u2.prev = 1, u2.next = 4, this.sendCmd("heartbeat");
                  case 4:
                    u2.next = 20;
                    break;
                  case 6:
                    if (u2.prev = 6, u2.t0 = u2.catch(1), u2.t0.code !== Nl.V2NIM_ERROR_CODE_DISCONNECT) {
                      u2.next = 11;
                      break;
                    }
                    return u2.abrupt("return");
                  case 11:
                    return u2.next = 13, this.testHeartBeat5Timeout();
                  case 13:
                    if (!u2.sent) {
                      u2.next = 20;
                      break;
                    }
                    return u2.next = 17, this.core.reporterHookLinkKeep.update({ code: 0, description: "Heartbeat-discovered link failure", operation_type: 1, target: (t3 = this.socket) === null || t3 === void 0 ? void 0 : t3.url });
                  case 17:
                    return this.core.reporterHookLinkKeep.end(true), this.doDisconnect(Bp.OFFLINE, "PingError"), u2.abrupt("return");
                  case 20:
                    this.pingTimer = mo(function() {
                      a2.ping();
                    }, 3e4);
                  case 21:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this, [[1, 6]]);
          }));
        }, t2.testHeartBeat5Timeout = function testHeartBeat5Timeout() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var t3;
            return Ql.wrap(function _callee5$(a2) {
              for (; ; )
                switch (a2.prev = a2.next) {
                  case 0:
                    clearTimeout(this.pingTimer), t3 = 0;
                  case 2:
                    if (!(t3 < 5)) {
                      a2.next = 15;
                      break;
                    }
                    return a2.prev = 3, a2.next = 6, this.sendCmd("heartbeat", {}, { timeout: 3e3 });
                  case 6:
                    return a2.abrupt("return", false);
                  case 9:
                    a2.prev = 9, a2.t0 = a2.catch(3), this.logger.log("clientSocketV2::test heartbeat " + t3 + " Timeout");
                  case 12:
                    t3++, a2.next = 2;
                    break;
                  case 15:
                    return a2.abrupt("return", true);
                  case 16:
                  case "end":
                    return a2.stop();
                }
            }, _callee5, this, [[3, 9]]);
          }));
        }, t2.initOnlineListener = function initOnlineListener() {
          var t3 = this;
          this.hasNetworkListener || (this.logger.log("clientSocketV2::onlineListener:init"), this.hasNetworkListener = true, Jl.net.onNetworkStatusChange(function(a2) {
            t3.logger.log("clientSocketV2::onlineListener:network change", a2);
            var u2 = t3.auth.getConnectStatus(), m2 = t3.auth.getLoginStatus();
            a2.isConnected && m2 === 1 ? t3.ping() : a2.isConnected && u2 === 3 ? (t3.logger.log("clientSocketV2::onlineListener:online and connectStatus is waiting, do reLogin"), t3.auth.reconnect.clearReconnectTimer(), t3.auth.reconnect.doReLogin()) : a2.isConnected || t3.doDisconnect(Bp.OFFLINE, "OfflineListener");
          }));
        }, t2.destroyOnlineListener = function destroyOnlineListener() {
          this.logger.log("clientSocketV2::onlineListener:destroy"), Jl.net.offNetworkStatusChange(), this.hasNetworkListener = false;
        }, V2ClientSocket;
      }(), Hp = function() {
        function V2NIMLoginReconnect(t3) {
          this.currenRetryCount = 0, this.backoff = new Qd({ max: 8e3, min: 1600, jitter: 0.01 }), this.reconnectTimer = 0, this.core = t3, this.auth = t3.V2NIMLoginService;
        }
        var t2 = V2NIMLoginReconnect.prototype;
        return t2.reset = function reset() {
          this.currenRetryCount = 0, this.backoff.reset(), this.reconnectTimer && clearTimeout(this.reconnectTimer);
        }, t2.clearReconnectTimer = function clearReconnectTimer() {
          this.reconnectTimer && clearTimeout(this.reconnectTimer);
        }, t2.attempToReLogin = function attempToReLogin() {
          var t3 = this, a2 = this.backoff.duration();
          if (typeof this.reconnectDelayProvider == "function")
            try {
              var u2 = this.reconnectDelayProvider(a2);
              typeof u2 == "number" && u2 >= 0 && (a2 = u2 >= 1e3 ? u2 : u2 + 200 + Math.ceil(300 * Math.random()));
            } catch (t4) {
              this.core.logger.error("reconnect::connectDelayProvider excute failed,", t4);
            }
          return this.currenRetryCount++, this.core.logger.log("reconnect::reconnect timer is about to be set, delay " + a2 + " ms, current retry count is " + this.currenRetryCount), this.core.reporter.reportTraceStart("login", { user_id: this.auth.getLoginUser(), action: "auto_login", binary_websocket: this.auth.binaryWebsocket }), this.clearReconnectTimer(), this.reconnectTimer = mo(function() {
            t3.core.logger.log("reconnect::reconnect timer is now triggered");
            var a3 = t3.auth.getConnectStatus();
            a3 === 3 ? t3.doReLogin() : t3.core.logger.warn("reconnect::reconnect timer is over because connect status now is " + a3);
          }, a2), true;
        }, t2.doReLogin = function doReLogin() {
          var t3 = this;
          this.auth.loginOption.forceMode = false, this.auth.originLoginPromise = this.auth.doLogin(true);
          var a2 = this.auth.previousLoginManager.add(this.auth.originLoginPromise);
          return a2.then(function() {
            t3.core.reporter.reportTraceEnd("login", true);
          }).catch(function(a3) {
            var u2 = a3;
            if (t3.core.logger.warn("reconnect::try login but failed due to", u2), t3.core.reporter.reportTraceEnd("login", false), t3.auth.checkLoginTerminalCode(u2 && u2.code))
              return t3.auth.clientSocket.doDisconnect(Up.ACTIVE, "ReloginTerminated"), void t3.auth.lifeCycle.processEvent("exited", u2);
            u2 && u2.code === 399 && t3.auth.lbs.reset(), t3.auth.lifeCycle.processEvent("waiting");
          }), a2;
        }, t2._setReconnectDelayProvider = function _setReconnectDelayProvider(t3) {
          this.reconnectDelayProvider = t3;
        }, V2NIMLoginReconnect;
      }(), jp = function() {
        function V2NIMLoginLbs(t3) {
          this.socketLinkUrls = [], this.timer = 0, this.failedCount = 0, this.core = t3, this.auth = t3.V2NIMLoginService;
        }
        var t2 = V2NIMLoginLbs.prototype;
        return t2.getLbsInfos = function getLbsInfos() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var t3, a2, u2, m2;
            return Ql.wrap(function _callee$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    if (!(this.socketLinkUrls.length > 0)) {
                      h2.next = 5;
                      break;
                    }
                    return t3 = this.socketLinkUrls.shift(), this.socketLinkUrls = [], this.core.logger.log("V2NIMLoginService::getLbsInfos:use cache link", t3), h2.abrupt("return", zi.resolve(t3));
                  case 5:
                    return this.auth.lifeCycle.processEvent("addressing"), this.core.reporterHookLBS.start(this.core.account), a2 = uniq(this.auth.config.lbsUrls), h2.prev = 8, h2.next = 11, this.ladderLoad(a2);
                  case 11:
                    if ((u2 = h2.sent).status === 200 && u2.data) {
                      h2.next = 15;
                      break;
                    }
                    throw this.core.logger.error("V1NIMLoginService::getLbsInfos:error status", u2.status, u2), new Pl({ code: Nl.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "V2NIMLoginService::getLbsInfos failed, status " + u2.status } });
                  case 15:
                    this.success(u2), h2.next = 26;
                    break;
                  case 18:
                    if (h2.prev = 18, h2.t0 = h2.catch(8), m2 = h2.t0, this.core.logger.error("V2NIMLoginService::lbs getLbsInfos error, use default link: " + this.auth.config.linkUrl + ". error:", h2.t0), this.reportForFail(a2[0], m2.code, m2.message), !this.checkTerminator(m2.code)) {
                      h2.next = 25;
                      break;
                    }
                    throw h2.t0;
                  case 25:
                    this.socketLinkUrls = [this.auth.config.linkUrl];
                  case 26:
                    return h2.abrupt("return", this.socketLinkUrls.shift());
                  case 27:
                  case "end":
                    return h2.stop();
                }
            }, _callee, this, [[8, 18]]);
          }));
        }, t2.checkTerminator = function checkTerminator(t3) {
          return t3 === Nl.V2NIM_ERROR_CODE_CANCELLED || t3 === Nl.V2NIM_ERROR_CODE_TIMEOUT;
        }, t2.generateUrl = function generateUrl(t3) {
          return t3 + (indexOf(t3).call(t3, "?") > -1 ? "&" : "?") + "k=" + this.core.options.appkey + "&id=" + this.core.auth.getLoginUser() + "&sv=180&pv=1&networkType=0&lv=1";
        }, t2.requstLbs = function requstLbs(t3) {
          return this.auth.doLoginStepsManager.add(this.core.adapters.request(this.generateUrl(t3), { method: "GET", dataType: "json", timeout: 8e3 }));
        }, t2.setLadderTimer = function setLadderTimer(t3, a2, u2, m2) {
          var h2 = this;
          this.timer && clearTimeout(this.timer);
          var g2 = t3[a2];
          this.timer = mo(function() {
            g2 && (h2.setLadderTimer(t3, a2 + 1, u2, m2), h2.core.logger.log("V2NIMLoginService::getLbsInfos " + a2 + ":", g2), h2.reportForLbsStart(g2, a2), h2.requstLbs(g2).then(function(t4) {
              h2.reset(), u2(Dt(Dt({}, t4), { url: g2 }));
            }).catch(function(u3) {
              var M2;
              if (h2.core.logger.warn("V2NIMLoginService::getLbsInfos " + a2 + " failed:", u3), h2.failedCount += 1, h2.reportForFailOnce(g2, u3.code, ((M2 = u3.detail) === null || M2 === void 0 ? void 0 : M2.reason) || u3.message), h2.failedCount >= t3.length || h2.checkTerminator(u3.code))
                return h2.reset(), void m2(u3);
            }));
          }, 2e3);
        }, t2.ladderLoad = function ladderLoad(t3) {
          var a2 = this;
          return new zi(function(u2, m2) {
            t3.length > 1 && a2.setLadderTimer(t3, 1, u2, m2);
            var h2 = t3[0];
            a2.core.logger.log("V2NIMLoginService::getLbsInfos 0:", h2), a2.reportForLbsStart(h2, 0), a2.requstLbs(h2).then(function(t4) {
              a2.reset(), u2(Dt(Dt({}, t4), { url: h2 }));
            }).catch(function(u3) {
              var g2;
              a2.failedCount += 1, a2.core.logger.warn("V2NIMLoginService::getLbsInfos 0 failed:", u3), a2.reportForFailOnce(h2, u3.code, ((g2 = u3.detail) === null || g2 === void 0 ? void 0 : g2.reason) || u3.message), (a2.failedCount >= t3.length || a2.checkTerminator(u3.code)) && (a2.reset(), m2(u3));
            });
          });
        }, t2.success = function success(t3) {
          var a2, u2, m2, h2, g2 = t3.data.common, M2 = g2["mix.link"] || [], I2 = g2["link.default"] || [];
          this.socketLinkUrls = concat(a2 = concat(M2).call(M2, I2)).call(a2, this.auth.config.linkUrl), t3.data["nos-chunk"] && ((m2 = this.core.cloudStorage) === null || m2 === void 0 ? void 0 : m2.setOptions) && (this.core.logger.log("getLbsInfos success. lbs.nos-chunk", t3.data["nos-chunk"]), this.core.cloudStorage.setOptions({ chunkUploadHost: t3.data["nos-chunk"] })), Dn(t3.data.nosup) && t3.data.nosup.length > 0 && ((h2 = this.core.cloudStorage) === null || h2 === void 0 ? void 0 : h2.setOptions) && (this.core.logger.log("getLbsInfos success. lbs.nosup", t3.data.nosup), this.core.cloudStorage.setOptions({ commonUploadHostBackupList: t3.data.nosup, commonUploadHost: t3.data.nosup[0] })), this.core.logger.log("V2NIMLoginService::getLbsInfos success, socket link:", slice(u2 = this.socketLinkUrls).call(u2, 0), "chunkUploadHost: ", t3.data["nos-chunk"]), this.reportForLbsSuccess(t3.url, t3.data);
        }, t2.reportForLbsStart = function reportForLbsStart(t3, a2) {
          this.core.reporterHookLBS.updateBegin({ target: t3, index: a2 });
        }, t2.reportForLbsSuccess = function reportForLbsSuccess(t3, a2) {
          this.core.reporterHookLBS.updateComplete({ target: t3, code: 200, body: Un(a2) }), this.core.reporterHookLBS.end(true), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "HTTP", target: t3, code: 200, succeed: true }, { asyncParams: Jl.net.getNetworkStatus() });
        }, t2.reportForFailOnce = function reportForFailOnce(t3, a2, u2) {
          this.core.reporterHookLBS.updateComplete({ target: t3, code: a2, body: u2 });
        }, t2.reportForFail = function reportForFail(t3, a2, u2) {
          this.core.reporterHookLBS.end(false), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "HTTP", target: t3, description: u2, code: a2, succeed: false }, { asyncParams: Jl.net.getNetworkStatus() });
        }, t2.reset = function reset() {
          this.socketLinkUrls = [], this.failedCount = 0, clearTimeout(this.timer);
        }, V2NIMLoginLbs;
      }();
      var $p = function() {
        function V2NIMLoginAuthenticator(t3) {
          this.lastLoginClientKey = "__NIM_LAST_LOGIN_CLIENT__", this.loginClients = [], this.loginClientOfThisConnection = {}, this.core = t3, this.auth = t3.V2NIMLoginService;
        }
        var t2 = V2NIMLoginAuthenticator.prototype;
        return t2.verifyAuthentication = function verifyAuthentication(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a2, u2, m2, h2, g2, M2, I2, S2, T2, C2, b2;
            return Ql.wrap(function _callee$(E2) {
              for (; ; )
                switch (E2.prev = E2.next) {
                  case 0:
                    return E2.next = 2, this.auth.doLoginStepsManager.add(this.refreshLoginToken(this.auth.account));
                  case 2:
                    return u2 = E2.sent, E2.next = 5, this.auth.doLoginStepsManager.add(this.refreshThirdPartyExt(this.auth.account));
                  case 5:
                    return m2 = E2.sent, this.auth.token = u2, h2 = Jl.getSystemInfo(), g2 = { appkey: this.core.options.appkey, account: this.auth.account, token: u2, authType: this.auth.loginOption.authType, appLogin: t3 ? 0 : 1, clientType: 16, clientSession: this.auth.clientSession, clientId: this.auth.deviceId, sdkVersion: 100700, userAgent: this.core.options.loginSDKTypeParamCompat ? "Native/10.7.0" : slice(a2 = h2.userAgent.replace("{{appkey}}", this.core.options.appkey)).call(a2, 0, 299), libEnv: this.core.options.loginSDKTypeParamCompat ? void 0 : h2.libEnv, hostEnv: this.core.options.loginSDKTypeParamCompat ? 0 : h2.hostEnvEnum, sdkHumanVersion: this.core.options.flutterSdkVersion || "10.7.0", os: h2.os, browser: h2.browser, protocolVersion: 1, customClientType: this.auth.config.customClientType, customTag: this.auth.config.customTag, thirdPartyExtension: m2 }, M2 = h2.os.toLowerCase(), Jl.platform !== "UNIAPP" || M2 !== "ios" && M2 !== "android" ? Jl.platform === "React Native" && (this.core.logger.log("V2NIMLoginService deviceInfo", this.core.V2NIMLoginService.deviceInfo, "os", M2), g2.isReactNative = 1, g2.clientType = M2 === "ios" ? 2 : 1, g2.deviceInfo = Un(Dt({ IS_SUPPORT_HONOR: true }, this.core.V2NIMLoginService.deviceInfo))) : (g2.isReactNative = 1, g2.clientType = M2 === "ios" ? 2 : 1, h2.pushDeviceInfo && h2.pushDeviceInfo.MANUFACTURER && (g2.deviceInfo = Un(Dt({ IS_SUPPORT_HONOR: true }, h2.pushDeviceInfo)))), this.core.logger.log("V2NIMLoginService::do login ", g2.account, g2.clientSession, g2.appLogin), E2.prev = 12, E2.next = 15, this.auth.doLoginStepsManager.add(this.auth.clientSocket.sendCmd("v2Login", { tag: g2 }));
                  case 15:
                    I2 = E2.sent, E2.next = 26;
                    break;
                  case 18:
                    if (E2.prev = 18, E2.t0 = E2.catch(12), S2 = E2.t0, this.core.reporter.reportTraceUpdateV2("login", { operation_type: "protocol", target: "26-3", code: S2.code || 0, succeed: false, description: S2.message }, { asyncParams: Jl.net.getNetworkStatus() }), S2.code !== Nl.V2NIM_ERROR_CODE_CANCELLED && S2.code !== Nl.V2NIM_ERROR_CODE_TIMEOUT) {
                      E2.next = 24;
                      break;
                    }
                    throw S2;
                  case 24:
                    throw this.processLoginFailed(S2), S2;
                  case 26:
                    return T2 = I2.content, C2 = T2.data, b2 = T2.loginClients, this.changeLoginClient(1, b2), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "protocol", target: "26-3", code: 200, succeed: true }, { asyncParams: Jl.net.getNetworkStatus() }), this.loginClientOfThisConnection = formatLoginInfo(C2), this.core.clientSocket.setSessionId(C2.consid), Jl.localStorage.setItem(this.lastLoginClientKey, Un(Dt({ account: this.auth.account }, this.loginClientOfThisConnection))), E2.abrupt("return", this.loginClientOfThisConnection);
                  case 33:
                  case "end":
                    return E2.stop();
                }
            }, _callee, this, [[12, 18]]);
          }));
        }, t2.refreshLoginToken = function refreshLoginToken(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a2, u2, m2;
            return Ql.wrap(function _callee2$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    if (this.auth.loginOption.authType !== 0) {
                      h2.next = 2;
                      break;
                    }
                    return h2.abrupt("return", this.auth.token);
                  case 2:
                    if (typeof this.auth.loginOption.tokenProvider == "function") {
                      h2.next = 4;
                      break;
                    }
                    return h2.abrupt("return", this.auth.token);
                  case 4:
                    return h2.prev = 4, h2.next = 7, this.auth.loginOption.tokenProvider(t3);
                  case 7:
                    if (typeof (a2 = h2.sent) != "string") {
                      h2.next = 12;
                      break;
                    }
                    return h2.abrupt("return", a2);
                  case 12:
                    throw this.core.logger.error("V2NIMLoginService::excute tokenProvider complete but got Unexpected value:", a2), new Pl({ code: Nl.V2NIM_ERROR_CODE_CALLBACK_FAILED, detail: { reason: "Excute tokenProvider complete but got Unexpected value", rawData: a2 } });
                  case 14:
                    h2.next = 23;
                    break;
                  case 16:
                    throw h2.prev = 16, h2.t0 = h2.catch(4), u2 = h2.t0, m2 = u2, u2.code !== Nl.V2NIM_ERROR_CODE_CALLBACK_FAILED && (this.core.logger.error("V2NIMLoginService::excute tokenProvider error:", u2), m2 = new Pl({ code: Nl.V2NIM_ERROR_CODE_CALLBACK_FAILED, desc: "Excute tokenProvider error", detail: { rawError: h2.t0 } })), this.processLoginFailed(u2), m2;
                  case 23:
                  case "end":
                    return h2.stop();
                }
            }, _callee2, this, [[4, 16]]);
          }));
        }, t2.refreshThirdPartyExt = function refreshThirdPartyExt(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a2, u2, m2;
            return Ql.wrap(function _callee3$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    if (typeof this.auth.loginOption.loginExtensionProvider == "function") {
                      h2.next = 2;
                      break;
                    }
                    return h2.abrupt("return", "");
                  case 2:
                    return h2.prev = 2, h2.next = 5, this.auth.loginOption.loginExtensionProvider(t3);
                  case 5:
                    if (typeof (a2 = h2.sent) != "string") {
                      h2.next = 10;
                      break;
                    }
                    return h2.abrupt("return", a2);
                  case 10:
                    throw this.core.logger.error("V2NIMLoginService::excute loginExtensionProvider complete but got Unexpected value:", a2), new Pl({ code: Nl.V2NIM_ERROR_CODE_CALLBACK_FAILED, detail: { reason: "Excute loginExtensionProvider complete but got Unexpected value", rawData: a2 } });
                  case 12:
                    h2.next = 25;
                    break;
                  case 14:
                    if (h2.prev = 14, h2.t0 = h2.catch(2), u2 = h2.t0, m2 = u2, u2.code !== Nl.V2NIM_ERROR_CODE_CALLBACK_FAILED && (this.core.logger.error("V2NIMLoginService::excute loginExtensionProvider error:", u2), m2 = new Pl({ code: Nl.V2NIM_ERROR_CODE_CALLBACK_FAILED, detail: { reason: "Excute loginExtensionProvider error", rawError: h2.t0 } })), this.auth.loginOption.authType !== 2) {
                      h2.next = 24;
                      break;
                    }
                    throw this.processLoginFailed(u2), m2;
                  case 24:
                    return h2.abrupt("return", "");
                  case 25:
                  case "end":
                    return h2.stop();
                }
            }, _callee3, this, [[2, 14]]);
          }));
        }, t2.processLoginFailed = function processLoginFailed(t3) {
          this.auth.clientSocket.doDisconnect(Up.ACTIVE, t3), this.checkLoginTerminalCode(t3.code) && (this.auth.authenticator.reset(), this.auth.authenticator.clearLastLoginClient()), this.auth.lifeCycle.processEvent("loginFail", t3);
        }, t2.changeLoginClient = function changeLoginClient(t3, a2) {
          var u2 = this, m2 = map$6(a2).call(a2, function(t4) {
            return formatLoginInfo(t4);
          });
          if (t3 === 1)
            this.loginClients = m2, this.auth.emit("onLoginClientChanged", t3, this.loginClients);
          else if (t3 === 2) {
            var h2 = filter(m2).call(m2, function(t4) {
              var a3, m3 = filter(a3 = u2.loginClients).call(a3, function(a4) {
                return a4.clientId === t4.clientId;
              });
              return u2.loginClients.push(t4), m3.length === 0;
            });
            h2.length > 0 && this.auth.emit("onLoginClientChanged", t3, h2);
          } else if (t3 === 3) {
            var g2 = filter(m2).call(m2, function(t4) {
              var a3;
              return function remove(t5, a4) {
                a4 = a4 || function() {
                  return true;
                };
                for (var u3 = [], m3 = (t5 = t5 || []).length, h3 = 0, g3 = 0; g3 < m3; g3++)
                  a4(t5[g3 - h3]) && (u3.push(splice(t5).call(t5, g3 - h3, 1)[0]), h3 += 1);
                return u3;
              }(u2.loginClients, function(a4) {
                return a4.clientId === t4.clientId && a4.consid === t4.consid;
              }), filter(a3 = u2.loginClients).call(a3, function(a4) {
                return a4.clientId === t4.clientId;
              }).length === 0;
            });
            g2.length > 0 && this.auth.emit("onLoginClientChanged", t3, g2);
          }
        }, t2.checkAutoLogin = function checkAutoLogin(t3) {
          if (t3)
            return false;
          var a2 = Jl.localStorage.getItem(this.lastLoginClientKey);
          if (!a2)
            return false;
          var u2 = "", m2 = "";
          try {
            var h2 = JSON.parse(a2);
            u2 = get(h2, "clientId"), m2 = get(h2, "account");
          } catch (t4) {
            return false;
          }
          return u2 === this.auth.deviceId && m2 === this.auth.account;
        }, t2.checkLoginTerminalCode = function checkLoginTerminalCode(t3) {
          var a2 = [Nl.V2NIM_ERROR_CODE_CANCELLED, Nl.V2NIM_ERROR_CODE_TIMEOUT, Nl.V2NIM_ERROR_CODE_HANDSHAKE, 302, 317, Nl.V2NIM_ERROR_CODE_FORBIDDEN, Nl.V2NIM_ERROR_CODE_NOT_FOUND, Nl.V2NIM_ERROR_CODE_PARAMETER_ERROR, Nl.V2NIM_ERROR_CODE_MULTI_LOGIN_FORBIDDEN, 422, Nl.V2NIM_ERROR_CODE_IM_DISABLED, Nl.V2NIM_ERROR_CODE_APPKEY_NOT_EXIST, Nl.V2NIM_ERROR_CODE_BUNDLEID_CHECK_FAILED, Nl.V2NIM_ERROR_CODE_APPKEY_BLOCKED, Nl.V2NIM_ERROR_CODE_INVALID_TOKEN, Nl.V2NIM_ERROR_CODE_ROBOT_NOT_ALLOWED, Nl.V2NIM_ERROR_CODE_ACCOUNT_NOT_EXIST, Nl.V2NIM_ERROR_CODE_ACCOUNT_BANNED, Nl.V2NIM_ERROR_CODE_USER_PROFILE_NOT_EXIST];
          return includes(a2).call(a2, t3);
        }, t2.reset = function reset() {
          this.loginClients = [], this.loginClientOfThisConnection = {};
        }, t2.clearLastLoginClient = function clearLastLoginClient() {
          Jl.localStorage.removeItem(this.lastLoginClientKey);
        }, V2NIMLoginAuthenticator;
      }(), zp = function() {
        function V2NIMLoginLifeCycle(t3) {
          this.name = "V2NIMLoginLifeCycle", this.loginStatus = 0, this.connectStatus = 0, this.core = t3, this.auth = t3.V2NIMLoginService, this.logger = t3.logger;
        }
        var t2 = V2NIMLoginLifeCycle.prototype;
        return t2.processEvent = function processEvent(t3, a2, u2) {
          var m2 = this.getConnectStatus();
          switch (t3) {
            case "addressing":
              this.logger.log(this.name + "::addressing"), this.setLoginStatus(2), this.setConnectStatus(2);
              break;
            case "connect":
              this.logger.log(this.name + "::connecting"), this.setLoginStatus(2), this.setConnectStatus(2);
              break;
            case "connectSucc":
              this.logger.log(this.name + "::connect success"), this.setLoginStatus(2), this.setConnectStatus(1);
              break;
            case "connectFail":
              this.logger.log(this.name + "::connect fail", a2), this.setLoginStatus(3), this.setConnectStatus(0, a2);
              break;
            case "connectionBroken":
              this.logger.log(this.name + "::connectionBroken:", a2), this.setLoginStatus(3), this.setConnectStatus(0, a2), this.core.eventBus.emit("V2NIMLoginService/loginLifeCycleDisconnected", a2);
              break;
            case "loginSucc":
              this.logger.log(this.name + "::login success, verify authentication success"), this.setLoginStatus(1), this.core.eventBus.emit("V2NIMLoginService/loginLifeCycleLoginSucc", u2);
              break;
            case "loginFail":
              if (this.logger.log(this.name + "::login fail due to verify authentication failed:", a2), !a2)
                return;
              this.setLoginStatus(this.auth.authenticator.checkLoginTerminalCode(a2.code) ? 0 : 3), this.setConnectStatus(0, a2), this.auth.emit("onLoginFailed", a2);
              break;
            case "logout":
              this.logger.log(this.name + "::logout"), this.setLoginStatus(0), this.setConnectStatus(0), this.core.eventBus.emit("V2NIMLoginService/loginLifeCycleLogout");
              break;
            case "kicked":
              this.logger.log(this.name + "::kicked", u2), this.setLoginStatus(0), this.setConnectStatus(0, a2), this.core.eventBus.emit("V2NIMLoginService/loginLifeCycleKicked");
              break;
            case "exited":
              this.logger.log(this.name + "::exited", a2), this.setLoginStatus(0), this.setConnectStatus(0, a2);
              break;
            case "waiting":
              this.logger.log(this.name + "::waiting to reconnect"), this.setLoginStatus(3), this.setConnectStatus(3), m2 !== 2 && this.auth.reconnect.attempToReLogin();
          }
        }, t2.getConnectStatus = function getConnectStatus() {
          return this.connectStatus;
        }, t2.getLoginStatus = function getLoginStatus() {
          return this.loginStatus;
        }, t2.setLoginStatus = function setLoginStatus(t3) {
          t3 !== this.loginStatus && (this.loginStatus = t3, this.auth.emit("onLoginStatus", t3));
        }, t2.setConnectStatus = function setConnectStatus(t3, a2) {
          if (t3 !== this.connectStatus) {
            var u2 = this.connectStatus;
            this.connectStatus = t3, this.auth.emit("onConnectStatus", t3), this.delegateConnectEvent(u2, t3, a2);
          }
        }, t2.delegateConnectEvent = function delegateConnectEvent(t3, a2, u2) {
          t3 === 1 && a2 === 0 && u2 && this.auth.emit("onDisconnected", u2), t3 === 2 && a2 === 0 && u2 && this.auth.emit("onConnectFailed", u2);
        }, V2NIMLoginLifeCycle;
      }(), Wp = function() {
        function V2NIMLoginDataSync(t3) {
          this.core = t3, this.auth = t3.V2NIMLoginService, this.datas = [], this.mainSyncFlag = false, this.conversationSyncFlag = false;
        }
        var t2 = V2NIMLoginDataSync.prototype;
        return t2.switchDataSync = function switchDataSync(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a2, u2, m2, h2, g2, M2, I2;
            return Ql.wrap(function _callee$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    u2 = t3.type, m2 = t3.state, h2 = t3.error, g2 = t3.subType, u2 === 1 && m2 === 3 && (g2 === "mainSync" ? this.mainSyncFlag = true : g2 === "conversationSync" && (this.conversationSyncFlag = true)), M2 = filter(a2 = this.datas).call(a2, function(t4) {
                      return t4.type === u2;
                    }), (I2 = M2.length > 0 ? M2[0] : null) ? (I2.state = m2, I2.error = h2) : this.datas.push({ type: u2, state: m2, error: h2 }), u2 === 1 && (m2 === 2 ? this.auth.emit("onDataSync", u2, m2, h2) : m2 === 3 && this.mainSyncFlag && this.conversationSyncFlag && (this.auth.emit("onDataSync", u2, m2, h2), this.mainSyncFlag = false, this.conversationSyncFlag = false));
                  case 6:
                  case "end":
                    return S2.stop();
                }
            }, _callee, this);
          }));
        }, t2.reset = function reset() {
          this.datas = [], this.mainSyncFlag = false, this.conversationSyncFlag = false;
        }, V2NIMLoginDataSync;
      }();
      function pick(t2, a2) {
        t2 = t2 || {};
        var u2 = {};
        return forEach$1(a2 = a2 || []).call(a2, function(a3) {
          t2[a3] !== void 0 && (u2[a3] = t2[a3]);
        }), u2;
      }
      var Kp = ["https://lbs.netease.im/lbs/webconf.jsp"], Yp = { retryCount: 3, timeout: 6e4, forceMode: false, authType: 0, syncLevel: 0 }, Qp = function(t2) {
        function V2NIMLoginServiceImpl(a3, u2) {
          var m2;
          u2 === void 0 && (u2 = {}), (m2 = t2.call(this, "V2NIMLoginService", a3) || this).account = "", m2.previousLoginAccount = "", m2.token = "", m2.deviceId = "", m2.clientSession = "", m2.processId = "", m2.kickedDetail = null, m2.binaryWebsocket = true, m2.core._registerDep(dp, "misc"), registerParser({ cmdMap: hp, cmdConfig: fp }), a3.options.apiVersion === "v2" && (registerParser({ cmdMap: gp, cmdConfig: yp }), m2.core.auth = Qe(m2)), m2.previousLoginManager = new Ru(), m2.doLoginStepsManager = new Ru(), m2.loginTimerManager = new zl(), m2.loginOption = Dt({}, Yp), m2.config = { lbsUrls: Kp, linkUrl: "weblink.netease.im:443" }, m2.setOptions(u2), a3.V2NIMLoginService = Qe(m2);
          var h2, g2 = m2.core.options.binaryWebsocket, M2 = Jl.platform === "BROWSER" && typeof TextDecoder == "function" && typeof TextEncoder == "function" && typeof Uint8Array == "function";
          return typeof g2 == "boolean" && (M2 = M2 && g2), M2 ? (m2.binaryWebsocket = true, h2 = new Fp(m2.core)) : (m2.binaryWebsocket = false, h2 = new Gp(m2.core)), m2.clientSocket = h2, m2.core.options.apiVersion === "v2" && (m2.core.clientSocket = h2), m2.lifeCycle = new zp(a3), m2.reconnect = new Hp(a3), m2.lbs = new jp(a3), m2.authenticator = new $p(a3), m2.dataSync = new Wp(a3), m2;
        }
        Nt(V2NIMLoginServiceImpl, t2);
        var a2 = V2NIMLoginServiceImpl.prototype;
        return a2.setOptions = function setOptions(t3) {
          validate({ lbsUrls: { type: "array", itemType: "string", min: 1, required: false }, linkUrl: { type: "string", allowEmpty: false, required: false } }, t3, "", true), this.config = assignOptions(this.config, t3);
          var a3 = "", u2 = "";
          this.config.isFixedDeviceId ? (a3 = Jl.localStorage.getItem("__NIM_DEVC_ID__") || Iu(), u2 = Jl.localStorage.getItem("__NIM_CLIENT_SESSION_ID__") || Iu(), Jl.localStorage.setItem("__NIM_DEVC_ID__", a3), Jl.localStorage.setItem("__NIM_CLIENT_SESSION_ID__", u2)) : (a3 = Iu(), u2 = Iu()), this.deviceId = a3, this.clientSession = u2, this.core.reporter.setConfig({ common: { dev_id: a3 } });
        }, a2.reset = function reset() {
          this.account = "", this.token = "", this.processId = "", this.lbs.reset(), this.reconnect.reset(), this.authenticator.reset(), this.authenticator.clearLastLoginClient(), this.dataSync.reset();
        }, a2.login = function login(t3, a3, u2) {
          return u2 === void 0 && (u2 = {}), __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var m2, h2, g2 = this;
            return Ql.wrap(function _callee$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    if (this._checkApiVersion(), m2 = Jl.getSystemInfo() || {}, h2 = m2.os ? m2.os.toLowerCase() : "", Jl.platform !== "React Native" || h2 !== "android" || !this.hasSettingService || !this.core.V2NIMSettingService.offlinePushPlugin) {
                      M2.next = 13;
                      break;
                    }
                    return M2.prev = 4, M2.next = 7, this.core.V2NIMSettingService.getRNDeviceInfo();
                  case 7:
                    this.deviceInfo = M2.sent, M2.next = 13;
                    break;
                  case 10:
                    M2.prev = 10, M2.t0 = M2.catch(4), this.logger.error(M2.t0);
                  case 13:
                    if (t3) {
                      M2.next = 15;
                      break;
                    }
                    throw new Vl({ detail: { reason: "Empty account" } });
                  case 15:
                    if (validate({ retryCount: { type: "number", min: 0, required: false }, forceMode: { type: "boolean", required: false }, authType: { type: "enum", values: [0, 1, 2], required: false }, syncLevel: { type: "enum", values: [1, 0], required: false } }, u2, "", true), u2.authType !== 0 || a3) {
                      M2.next = 18;
                      break;
                    }
                    throw new Vl({ detail: { reason: "When authType is 0, token cannot be empty" } });
                  case 18:
                    if (this.previousLoginAccount !== "" && this.previousLoginAccount !== t3 && this.core._clearModuleData(), this.getLoginStatus() !== 0) {
                      M2.next = 23;
                      break;
                    }
                    this.logger.log("V2NIMLoginService::login:allowLogin:" + t3, u2), M2.next = 29;
                    break;
                  case 23:
                    if (this.getLoginStatus() !== 1) {
                      M2.next = 27;
                      break;
                    }
                    return M2.abrupt("return", this.smoothForLogined(t3, a3, u2));
                  case 27:
                    if (this.getLoginStatus() !== 2) {
                      M2.next = 29;
                      break;
                    }
                    return M2.abrupt("return", this.smoothForLogining(t3, a3, u2));
                  case 29:
                    return this.account = t3, this.previousLoginAccount = t3, this.token = a3, this.processId = Iu(), this.loginOption = assignOptions(Yp, u2), this.kickedDetail = null, this.loginTimerManager.destroy(), this.loginTimerManager.addTimer(function() {
                      var t4 = new Pl({ code: Nl.V2NIM_ERROR_CODE_TIMEOUT, detail: { reason: "Login API timeout" } });
                      g2.doLoginStepsManager.clear(t4), g2.previousLoginManager.clear(t4), g2.originLoginPromise = void 0, g2.lifeCycle.processEvent("exited", t4);
                    }, this.loginOption.timeout > 0 ? this.loginOption.timeout : 6e4, 1), M2.prev = 37, M2.next = 40, this.multiTryDoLogin();
                  case 40:
                    this.loginTimerManager.destroy(), M2.next = 47;
                    break;
                  case 43:
                    throw M2.prev = 43, M2.t1 = M2.catch(37), this.loginTimerManager.destroy(), M2.t1;
                  case 47:
                  case "end":
                    return M2.stop();
                }
            }, _callee, this, [[4, 10], [37, 43]]);
          }));
        }, a2.getChatroomLinkAddress = function getChatroomLinkAddress(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var u2, m2;
            return Ql.wrap(function _callee2$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ roomId: { type: "string", regExp: /^\d+$/, required: true, allowEmpty: false }, miniProgram: { type: "boolean", required: false } }, { roomId: t3, miniProgram: a3 }, "", true), u2 = getMiniappEnv() !== "unknow environment", a3 = a3 === void 0 ? u2 : a3, h2.next = 5, this.clientSocket.sendCmd("v2GetChatroomLinkAddress", { roomId: t3, miniProgram: a3 });
                  case 5:
                    return m2 = h2.sent, h2.abrupt("return", m2.content.linkAddress);
                  case 7:
                  case "end":
                    return h2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.multiTryDoLogin = function multiTryDoLogin(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee3$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    a3 = new Pl({ code: Nl.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "loginFailed" } }), u2 = 0;
                  case 2:
                    if (!(u2 <= this.loginOption.retryCount)) {
                      g2.next = 32;
                      break;
                    }
                    return m2 = "V2NIMLoginService::times of login try: " + u2, u2 > 0 ? this.logger.warn(m2) : this.logger.log(m2), g2.prev = 5, this.originLoginPromise = t3 || this.doLogin(false), t3 = void 0, g2.next = 10, this.previousLoginManager.add(this.originLoginPromise);
                  case 10:
                    return h2 = g2.sent, this.core.reporter.reportTraceEnd("login", true), this.doLoginStepsManager.clear(), this.previousLoginManager.clear(), this.originLoginPromise = void 0, g2.abrupt("return", h2);
                  case 18:
                    if (g2.prev = 18, g2.t0 = g2.catch(5), a3 = g2.t0 || a3, this.logger.error("V2NIMLoginService::login failed, times of login try: " + u2 + ", err.code: " + (a3 == null ? void 0 : a3.code) + ', err.message: "' + (a3 == null ? void 0 : a3.message) + '"'), a3.code !== Nl.V2NIM_ERROR_CODE_CANCELLED && this.core.reporter.reportTraceEnd("login", false), this.reconnect.clearReconnectTimer(), !this.checkLoginTerminalCode(a3 && a3.code)) {
                      g2.next = 28;
                      break;
                    }
                    throw this.lifeCycle.processEvent("exited", a3), a3;
                  case 28:
                    a3 && a3.code === 399 && this.lbs.reset();
                  case 29:
                    u2++, g2.next = 2;
                    break;
                  case 32:
                    throw this.lifeCycle.processEvent("exited", a3), a3;
                  case 34:
                  case "end":
                    return g2.stop();
                }
            }, _callee3, this, [[5, 18]]);
          }));
        }, a2.doLogin = function doLogin(t3) {
          var a3, u2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var m2, h2, g2;
            return Ql.wrap(function _callee4$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return m2 = !!t3 || this.authenticator.checkAutoLogin(this.loginOption.forceMode), this.core.reporter.reportTraceCancel("login"), this.core.reporter.reportTraceStart("login", m2 ? { user_id: this.account, action: "auto_login", process_id: this.processId, binary_websocket: this.binaryWebsocket } : { user_id: this.account, action: "manual_login", process_id: this.processId, binary_websocket: this.binaryWebsocket }), this.core.reporter.reportTraceUpdateV2("login", { code: 0, description: Un(this.loginOption), operation_type: "conf_init", succeed: true, duration: 0, target: "" }, { asyncParams: Jl.net.getNetworkStatus() }), M2.next = 6, this.doLoginStepsManager.add(this.lbs.getLbsInfos());
                  case 6:
                    return h2 = M2.sent, M2.next = 9, this.doLoginStepsManager.add(this.clientSocket.connect(h2, t3));
                  case 9:
                    return M2.next = 11, this.doLoginStepsManager.add(this.authenticator.verifyAuthentication(m2));
                  case 11:
                    if (g2 = M2.sent, this.lifeCycle.processEvent("loginSucc", void 0, Dt(Dt({}, g2), { isReconnect: t3 })), this.processId = Iu(), this.clientSocket.resetSocketConfig(), this.reconnect.reset(), this.clientSocket.ping(), this.core.abtest.abtRequest(), typeof ((a3 = this.core.V2NIMClientAntispamUtil) === null || a3 === void 0 ? void 0 : a3.downloadLocalAntiSpamVocabs) == "function" && this.core.V2NIMClientAntispamUtil.downloadLocalAntiSpamVocabs(), typeof ((u2 = this.core.cloudStorage) === null || u2 === void 0 ? void 0 : u2.init) != "function") {
                      M2.next = 28;
                      break;
                    }
                    return M2.prev = 20, M2.next = 23, this.core.cloudStorage.init();
                  case 23:
                    M2.next = 28;
                    break;
                  case 25:
                    M2.prev = 25, M2.t0 = M2.catch(20), this.logger.warn("doLogin::cloudStorage init error", M2.t0);
                  case 28:
                    return M2.abrupt("return", g2);
                  case 29:
                  case "end":
                    return M2.stop();
                }
            }, _callee4, this, [[20, 25]]);
          }));
        }, a2.smoothForLogined = function smoothForLogined(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var m2;
            return Ql.wrap(function _callee5$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    if (m2 = this.checkIsSameLogin(t3, a3, u2), this.logger.warn("V2NIMLoginService::smoothForLogined:Logined, isSameLogin " + m2), !m2) {
                      h2.next = 6;
                      break;
                    }
                    return h2.abrupt("return");
                  case 6:
                    return h2.next = 8, this.logout();
                  case 8:
                    return h2.abrupt("return", this.login(t3, a3, u2));
                  case 9:
                  case "end":
                    return h2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.smoothForLogining = function smoothForLogining(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var m2;
            return Ql.wrap(function _callee6$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    if (m2 = this.checkIsSameLogin(t3, a3, u2), this.logger.warn("V2NIMLoginService::smoothForLogining:Logining progress exists, abort the previous login attempt and start next attempt, isSameLogin " + m2), this.previousLoginManager.clear(), this.reconnect.reset(), this.account = t3, this.previousLoginAccount = t3, this.token = a3, this.loginOption = assignOptions(this.loginOption, u2), !m2) {
                      h2.next = 18;
                      break;
                    }
                    if (this.originLoginPromise) {
                      h2.next = 11;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "NoPreviousLoginExists" } });
                  case 11:
                    return this.reconnect.reset(), h2.next = 14, zi.resolve();
                  case 14:
                    return h2.next = 16, this.multiTryDoLogin(this.originLoginPromise);
                  case 16:
                    h2.next = 25;
                    break;
                  case 18:
                    return this.doLoginStepsManager.clear(), this.clientSocket.doDisconnect(Up.ACTIVE, "Aborted"), this.reset(), this.lifeCycle.processEvent("logout"), h2.next = 24, zi.resolve();
                  case 24:
                    return h2.abrupt("return", this.login(t3, a3, u2));
                  case 25:
                  case "end":
                    return h2.stop();
                }
            }, _callee6, this);
          }));
        }, a2.checkIsSameLogin = function checkIsSameLogin(t3, a3, u2) {
          return this.account === t3 && this.loginOption.authType === u2.authType && (u2.authType !== 0 || this.token === a3);
        }, a2.logout = function logout() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            var t3, a3;
            return Ql.wrap(function _callee7$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    this._checkApiVersion(), this.doLoginStepsManager.clear(), this.previousLoginManager.clear(), this.loginTimerManager.destroy(), this.originLoginPromise = void 0, t3 = this.getConnectStatus(), a3 = this.getLoginStatus(), u2.t0 = a3, u2.next = u2.t0 === 1 ? 10 : u2.t0 === 2 ? 25 : u2.t0 === 3 ? 29 : u2.t0 === 0 ? 33 : 35;
                    break;
                  case 10:
                    return u2.prev = 10, u2.next = 13, this.clientSocket.sendCmd("v2Logout", void 0, { timeout: 1e3 });
                  case 13:
                    this.clientSocket.doDisconnect(Up.ACTIVE, "UserActiveDisconnect"), this.core._clearModuleData(), this.lifeCycle.processEvent("logout"), u2.next = 24;
                    break;
                  case 18:
                    u2.prev = 18, u2.t1 = u2.catch(10), this.logger.error("Instance::disconnect sendCmd:logout error", u2.t1), this.clientSocket.doDisconnect(Up.ACTIVE, "UserActiveDisconnect"), this.core._clearModuleData(), this.lifeCycle.processEvent("logout");
                  case 24:
                    return u2.abrupt("break", 37);
                  case 25:
                  case 29:
                    return this.clientSocket.doDisconnect(Up.ACTIVE, "UserActiveDisconnect"), this.core._clearModuleData(), this.lifeCycle.processEvent("logout"), u2.abrupt("break", 37);
                  case 33:
                    throw this.core._clearModuleData(), new Pl({ code: Nl.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: "Illegal logout. loginStatus " + a3 + ". connectStatus " + t3 } });
                  case 35:
                    throw this.core._clearModuleData(), new Pl({ code: Nl.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: "Illegal logout. illegal status: loginStatus " + a3 + ". connectStatus " + t3 } });
                  case 37:
                  case "end":
                    return u2.stop();
                }
            }, _callee7, this, [[10, 18]]);
          }));
        }, a2.getConnectStatus = function getConnectStatus() {
          return this.lifeCycle.getConnectStatus();
        }, a2.getLoginStatus = function getLoginStatus() {
          return this.lifeCycle.getLoginStatus();
        }, a2.getLoginUser = function getLoginUser() {
          return this.account;
        }, a2.getLoginClients = function getLoginClients() {
          var t3;
          return map$6(t3 = function uniqBy(t4, a3) {
            t4 = t4 || [], a3 = a3 || "";
            for (var u2 = [], m2 = [], h2 = 0; h2 < t4.length; h2++) {
              var g2 = t4[h2][a3];
              indexOf(m2).call(m2, g2) === -1 && (m2.push(g2), u2.push(t4[h2]));
            }
            return u2;
          }(this.authenticator.loginClients, "clientId")).call(t3, function(t4) {
            return pick(t4, ["type", "os", "timestamp", "customTag", "customClientType", "clientId", "clientIP"]);
          });
        }, a2.getCurrentLoginClient = function getCurrentLoginClient() {
          var t3;
          if ((t3 = this.authenticator.loginClientOfThisConnection) === null || t3 === void 0 ? void 0 : t3.clientId)
            return pick(this.authenticator.loginClientOfThisConnection, ["type", "os", "timestamp", "customTag", "customClientType", "clientId", "clientIP"]);
        }, a2.getDataSync = function getDataSync() {
          var t3 = this.dataSync.datas;
          return t3 && t3.length > 0 ? map$6(t3).call(t3, function(t4) {
            return { type: t4.type, state: t4.state };
          }) : null;
        }, a2.setReconnectDelayProvider = function setReconnectDelayProvider(t3) {
          this.reconnect._setReconnectDelayProvider(t3);
        }, a2.kickOffline = function kickOffline(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var a3;
            return Ql.wrap(function _callee8$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this._checkApiVersion(), validate({ clientId: { type: "string", allowEmpty: false } }, t3, "", true), u2.next = 4, this.clientSocket.sendCmd("v2KickOffline", { clientIds: [t3.clientId] });
                  case 4:
                    if (a3 = u2.sent, get(a3, "content.clientIds.length") !== 0) {
                      u2.next = 8;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_REQUEST_FAILED });
                  case 8:
                  case "end":
                    return u2.stop();
                }
            }, _callee8, this);
          }));
        }, a2.getKickedOfflineDetail = function getKickedOfflineDetail() {
          return this.kickedDetail;
        }, a2.checkLoginTerminalCode = function checkLoginTerminalCode(t3) {
          return this.authenticator.checkLoginTerminalCode(t3);
        }, a2.checkIllegalState = function checkIllegalState() {
          if (!this.getLoginUser())
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_ILLEGAL_STATE });
        }, a2._checkApiVersion = function _checkApiVersion() {
          if (this.core.options.apiVersion !== "v2")
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: 'apiVersion is not "v2"' } });
        }, a2.v2LoginHandler = function v2LoginHandler(t3) {
          if (t3.error)
            throw this.clientSocket.doDisconnect(Up.ACTIVE, t3.error), t3.error;
          return t3;
        }, a2.v2LoginClientChangeHandler = function v2LoginClientChangeHandler(t3) {
          this.authenticator.changeLoginClient(Uu(t3.content.state), t3.content.datas);
        }, a2.nimLoginClientChangeHandler = function nimLoginClientChangeHandler(t3) {
          this.authenticator.changeLoginClient(Uu(t3.content.state), t3.content.datas);
        }, a2.qchatLoginClientChangeHandler = function qchatLoginClientChangeHandler(t3) {
          var a3 = Uu(t3.content.state);
          a3 = a3 === 1 ? 2 : 3, this.authenticator.changeLoginClient(a3, [t3.content.data]);
        }, a2.v2BeKickedHandler = function v2BeKickedHandler(t3) {
          if (t3.error)
            this.core.logger.error("v2BeKickedHandler error, ", t3.error);
          else {
            var a3 = function formatBeKickedTag(t4) {
              return format({ reason: { type: "number" }, clientType: { type: "number" }, customClientType: { type: "number" } }, t4);
            }(t3.content);
            this.core.logger.warn("v2Bekicked::", a3), this.kickedDetail = a3, this.clientSocket.doDisconnect(Up.KICKED, a3), this.core._clearModuleData(), this.lifeCycle.processEvent("kicked", new Pl({ code: Nl.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "disconnect due to kicked" } }), a3), this.emit("onKickedOffline", a3);
          }
        }, a2.emit = function emit(a3) {
          for (var u2, m2, h2 = this.name + "::emit " + a3.toString(), g2 = arguments.length, M2 = new Array(g2 > 1 ? g2 - 1 : 0), I2 = 1; I2 < g2; I2++)
            M2[I2 - 1] = arguments[I2];
          if (a3 === "onLoginFailed" || a3 === "onDisconnected" || a3 === "onConnectFailed") {
            var S2 = M2[0];
            this.logger.log("" + h2, S2.toString());
          } else if (a3 === "onDataSync") {
            var T2 = M2[2];
            this.logger.log("" + h2, M2[0], M2[1], T2 && T2.toString());
          } else {
            var C2, b2;
            (C2 = this.logger).log.apply(C2, concat(b2 = ["" + h2]).call(b2, M2));
          }
          return (u2 = t2.prototype.emit).call.apply(u2, concat(m2 = [this, a3]).call(m2, M2));
        }, Ye(V2NIMLoginServiceImpl, [{ key: "hasSettingService", get: function get2() {
          var t3;
          return !!((t3 = this.core.V2NIMSettingService) === null || t3 === void 0 ? void 0 : t3.name);
        } }]), V2NIMLoginServiceImpl;
      }(ip), Jp = Qi.entries;
      _export({ target: "Object", stat: true }, { entries: function entries(t2) {
        return Jp(t2);
      } });
      var Xp = j.Object.entries, Zp = function() {
        function V2NIMConversationModelImpl() {
          this.map = new fc(), this.readTimeMap = new fc();
        }
        var t2 = V2NIMConversationModelImpl.prototype;
        return t2.set = function set(t3) {
          var a2 = this;
          forEach$1(t3).call(t3, function(t4) {
            t4 = a2.processConversation(t4), map$6(a2).set(t4.conversationId, t4);
          });
        }, t2.reset = function reset() {
          map$6(this).clear();
        }, t2.count = function count() {
          return map$6(this).size;
        }, t2.sort = function sort$1() {
          var t3, a2 = this, u2 = jl(values(t3 = map$6(this)).call(t3));
          sort(u2).call(u2, function(t4, a3) {
            return a3.sortOrder - t4.sortOrder;
          }), map$6(this).clear(), forEach$1(u2).call(u2, function(t4) {
            map$6(a2).set(t4.conversationId, t4);
          });
        }, t2.processConversation = function processConversation(t3) {
          return typeof t3.lastMessage == "string" && delete t3.lastMessage, t3.localExtension === void 0 && (t3.localExtension = ""), t3;
        }, t2.getById = function getById(t3) {
          return map$6(this).get(t3);
        }, t2.getAll = function getAll() {
          var t3, a2 = jl(values(t3 = map$6(this)).call(t3));
          return sort(a2).call(a2, function(t4, a3) {
            return a3.sortOrder - t4.sortOrder;
          });
        }, t2.getByOption = function getByOption(t3, a2, u2) {
          var m2, h2 = u2.conversationTypes, g2 = u2.onlyUnread, M2 = u2.conversationGroupIds, I2 = [];
          forEach$1(m2 = map$6(this)).call(m2, function(t4) {
            if ((!(h2 && h2.length > 0) || includes(h2).call(h2, t4.type)) && (!g2 || t4.unreadCount) && (!u2.ignoreMuted || !t4.mute)) {
              if (M2) {
                var a3 = t4.groupIds, m3 = (a3 == null ? void 0 : a3.length) || 0;
                if (M2.length === 0 && m3 > 0)
                  return;
                if (M2.length > 0 && m3 === 0)
                  return;
                if (M2.length > 0 && m3 > 0 && !some(M2).call(M2, function(t5) {
                  return a3 && includes(a3).call(a3, t5);
                }))
                  return;
              }
              I2.push(t4);
            }
          }), I2 = sort(I2).call(I2, function(t4, a3) {
            return a3.sortOrder - t4.sortOrder;
          });
          var S2 = 0;
          t3 > 0 && (S2 = findIndexWithinTargetValue(I2, "sortOrder", t3), I2[S2] && I2[S2].sortOrder === t3 && (S2 += 1));
          var T2 = slice(I2).call(I2, S2).length;
          return (I2 = slice(I2).call(I2, S2, S2 + a2)).length > 0 ? { offset: T2 > a2 ? I2[I2.length - 1].sortOrder : 0, finished: !(T2 > a2), conversationList: I2 } : { offset: 0, finished: true, conversationList: I2 };
        }, t2.upsert = function upsert(t3) {
          var a2 = t3.conversationId, u2 = map$6(this).get(a2);
          if (!u2)
            return t3 = this.processConversation(Dt({}, t3)), map$6(this).set(a2, t3), t3.unreadCount > 0;
          var m2 = t3.unreadCount !== u2.unreadCount, h2 = Dt({}, u2, t3);
          return h2 = this.processConversation(h2), map$6(this).set(a2, h2), m2;
        }, t2.bulkUpsert = function bulkUpsert(t3) {
          var a2 = this, u2 = false;
          return forEach$1(t3).call(t3, function(t4) {
            a2.upsert(t4) && (u2 = true);
          }), u2;
        }, t2.deleteById = function deleteById(t3) {
          var a2 = this.getById(t3);
          if (a2)
            return map$6(this).delete(t3), a2;
        }, t2.updateReadTime = function updateReadTime(t3, a2) {
          this.readTimeMap.set(t3, a2);
        }, t2.getReadTime = function getReadTime(t3) {
          return this.readTimeMap.get(t3) || 0;
        }, V2NIMConversationModelImpl;
      }(), em = w("".startsWith), tm = w("".slice), rm = Math.min, nm = correctIsRegexpLogic("startsWith");
      _export({ target: "String", proto: true, forced: !nm }, { startsWith: function startsWith2(t2) {
        var a2 = toString(requireObjectCoercible(this));
        notARegexp(t2);
        var u2 = toLength(rm(arguments.length > 1 ? arguments[1] : void 0, a2.length)), m2 = toString(t2);
        return em ? em(a2, m2, u2) : tm(a2, u2, u2 + m2.length) === m2;
      } });
      var am = entryVirtual("String").startsWith, im = String.prototype, startsWith = function(t2) {
        var a2 = t2.startsWith;
        return typeof t2 == "string" || t2 === im || $(im, t2) && a2 === im.startsWith ? am : a2;
      }, om = function() {
        function V2NIMConversationIdUtilImpl(t3) {
          this.name = "V2NIMConversationIdUtil", this.core = t3;
        }
        var t2 = V2NIMConversationIdUtilImpl.prototype;
        return t2.p2pConversationId = function p2pConversationId(t3) {
          return this.core.account + "|1|" + t3;
        }, t2.teamConversationId = function teamConversationId(t3) {
          return this.core.account + "|2|" + t3;
        }, t2.superTeamConversationId = function superTeamConversationId(t3) {
          return this.core.account + "|3|" + t3;
        }, t2.messageConversationId = function messageConversationId(t3) {
          return t3.conversationType === 1 ? t3.senderId === this.core.account ? this.p2pConversationId(t3.receiverId) : this.p2pConversationId(t3.senderId) : t3.conversationType === 2 ? this.teamConversationId(t3.receiverId) : this.superTeamConversationId(t3.receiverId);
        }, t2.parseConversationType = function parseConversationType(t3) {
          try {
            if (t3 && startsWith(t3).call(t3, this.core.account + "|")) {
              var a2 = t3.replace(this.core.account + "|", "");
              return Number(a2[0]);
            }
            return this.core.logger.warn("conversationId is not start with " + this.core.account), 0;
          } catch (t4) {
            return 0;
          }
        }, t2.parseConversationTargetId = function parseConversationTargetId(t3) {
          try {
            if (t3 && startsWith(t3).call(t3, this.core.account + "|")) {
              var a2 = t3.replace(this.core.account + "|", "");
              return slice(a2).call(a2, 2);
            }
            return this.core.logger.warn("conversationId is not start with " + this.core.account), "";
          } catch (t4) {
            return "";
          }
        }, t2.convertToV1ConversationId = function convertToV1ConversationId(t3) {
          var a2 = this.parseConversationType(t3);
          return (a2 === 1 ? "p2p" : a2 === 2 ? "team" : "superTeam") + "|" + this.parseConversationTargetId(t3);
        }, V2NIMConversationIdUtilImpl;
      }();
      function isEqual(t2, a2) {
        var u2 = typeof t2;
        if (u2 !== typeof a2)
          return false;
        if (u2 === "object") {
          if (Object.prototype.toString.call(t2) !== Object.prototype.toString.call(a2))
            return false;
          if (Dn(t2)) {
            if (t2.length !== a2.length)
              return false;
            for (var m2 = 0; m2 < t2.length; m2++)
              if (!isEqual(t2[m2], a2[m2]))
                return false;
            return true;
          }
          if (t2 instanceof RegExp && a2 instanceof RegExp)
            return t2.toString() === a2.toString();
          if (t2 instanceof Date && a2 instanceof Date)
            return t2.getTime() === a2.getTime();
          if (t2 === null && a2 === null)
            return true;
          if (Ht(t2).length !== Ht(a2).length)
            return false;
          for (var h2 in t2)
            if (!isEqual(t2[h2], a2[h2]))
              return false;
          return true;
        }
        return t2 === a2;
      }
      var sm = { "31_1": "v2TeamCreate", "32_1": "v2SuperTeamCreate", "31_5": "v2TeamInviteMembers", "32_5": "v2SuperTeamInviteMembers", "31_6": "v2TeamKickMembers", "32_6": "v2SuperTeamKickMembers", "31_8": "v2TeamLeave", "32_7": "v2SuperTeamLeave", "31_7": "v2TeamUpdateInfo", "32_8": "v2SuperTeamUpdateInfo", "31_9": "v2TeamGetInfo", "32_9": "v2SuperTeamGetInfo", "31_12": "v2TeamDismiss", "32_4": "v2SuperTeamDismiss", "31_13": "v2TeamApplyToJoin", "32_20": "v2SuperTeamApplyToJoin", "31_14": "v2TeamAcceptJoinApplication", "32_21": "v2SuperTeamAcceptJoinApplication", "31_15": "v2TeamRejectJoinApplication", "32_22": "v2SuperTeamRejectJoinApplication", "31_16": "v2TeamAddManagers", "32_26": "v2SuperTeamAddManagers", "31_17": "v2TeamRemoveManagers", "32_27": "v2SuperTeamRemoveManagers", "31_18": "v2TeamTransferOwner", "32_31": "v2SuperTeamTransferOwner", "31_19": "v2TeamUpdateSelfMemberInfo", "32_10": "v2SuperTeamUpdateSelfMemberInfo", "31_20": "v2TeamUpdateMember", "32_30": "v2SuperTeamUpdateMember", "31_21": "v2TeamAcceptInvitation", "32_23": "v2SuperTeamAcceptInvitation", "31_22": "v2TeamRejectInvite", "32_24": "v2SuperTeamRejectInvite", "31_33": "v2TeamGetMemberInvitor", "32_35": "v2SuperTeamGetMemberInvitor", "31_25": "v2TeamMemberSetChatBannedStatus", "32_29": "v2SuperTeamMemberSetChatBannedStatus", "31_32": "v2TeamSetChatBannedMode", "32_28": "v2SuperTeamSetChatBannedMode", "31_34": "v2TeamGetByIds", "32_36": "v2SuperTeamGetByIds", "31_35": "v2TeamMemberGetListByIds", "32_37": "v2SuperTeamMemberGetListByIds", "31_36": "v2TeamMemberGetList", "8_101": "v2TeamCreateMultiSync", "8_109": "v2TeamSync", "8_119": "v2TeamMemberUpdateMultiSync", "8_126": "v2TeamMembersOfSelfInSync", "21_101": "v2SuperTeamCreateMultiSync", "21_109": "v2SuperTeamSync", "21_110": "v2SuperTeamMemberUpdateMultiSync", "21_111": "v2SuperTeamMembersOfSelfInSync" }, cm = { antispamBusinessId: 1 }, lm = "V2NIMTeamService", um = { teamId: 1, name: 3, teamType: { id: 4, retConverter: function retConverter(t2) {
        return +t2 == 0 ? 1 : +t2;
      } }, ownerAccountId: 5, memberLimit: { id: 6, retType: "number" }, isValidTeam: { id: 8, retConverter: function retConverter(t2, a2) {
        return +t2 == 1 && (a2[13] === void 0 || +a2[13] == 1);
      } }, memberCount: { id: 9, retType: "number" }, memberUpdateTime: { id: 10, retType: "number" }, createTime: { id: 11, retType: "number" }, updateTime: { id: 12, retType: "number" }, intro: 14, announcement: 15, joinMode: { id: 16, retType: "number" }, serverExtension: 18, customerExtension: 19, avatar: 20, agreeMode: { id: 21, retType: "number" }, inviteMode: { id: 22, retType: "number" }, updateInfoMode: { id: 23, retType: "number" }, updateExtensionMode: { id: 24, retType: "number" }, chatBannedMode: { id: 101, retType: "number" } }, dm = { teamId: 1, accountId: 3, memberRole: { id: 4, retType: "number" }, teamNick: 5, bits: { id: 7, retType: "number" }, inTeam: { id: 9, retType: "boolean" }, joinTime: { id: 10, retType: "number" }, updateTime: { id: 11, retType: "number" }, serverExtension: 12, chatBanned: { id: 13, retType: "boolean" }, invitorAccountId: 14, followAccountIds: { id: 16, retConverter: function retConverter(t2) {
        try {
          return JSON.parse(t2);
        } catch (t3) {
          return [];
        }
      } } }, pm = { teamId: 1, accountId: 3, memberRole: { id: 4, retType: "number" }, teamNick: 5, bits: { id: 7, retType: "number" }, inTeam: { id: 9, retType: "boolean" }, updateTime: { id: 11, retType: "number" }, serverExtension: 12, chatBanned: { id: 13, retType: "boolean" }, invitorAccountId: 14, joinTime: { id: 15, retType: "number" }, followAccountIds: { id: 17, retConverter: function retConverter(t2) {
        try {
          return JSON.parse(t2);
        } catch (t3) {
          return [];
        }
      } } }, mm = { accountIds: { id: 1, converter: function converter(t2) {
        return Un(t2);
      } }, operation: 2 }, hm = { v2TeamCreate: { sid: 31, cid: 1, service: lm, params: [{ type: "Property", name: "team", reflectMapper: um }, { type: "StrArray", name: "inviteeAccountIds" }, { type: "String", name: "postscript" }, { type: "Property", name: "antispamConfig", reflectMapper: cm }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(um) }, { type: "StrArray", name: "failedList" }] }, v2SuperTeamCreate: { sid: 32, cid: 1, service: lm, params: [{ type: "Property", name: "team", reflectMapper: um }, { type: "StrArray", name: "inviteeAccountIds" }, { type: "String", name: "postscript" }, { type: "Property", name: "antispamConfig", reflectMapper: cm }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(um) }, { type: "StrArray", name: "failedList" }] }, v2TeamInviteMembers: { sid: 31, cid: 5, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }, { type: "String", name: "ps" }], response: [{ type: "Long", name: "time" }, { type: "StrArray", name: "abortedAccidList" }] }, v2SuperTeamInviteMembers: { sid: 32, cid: 5, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }, { type: "String", name: "ps" }], response: [{ type: "StrArray", name: "abortedAccidList" }, { type: "Long", name: "time" }] }, v2TeamUpdateInfo: { sid: 31, cid: 7, service: lm, params: [{ type: "Property", name: "team", reflectMapper: um }, { type: "Property", name: "antispamConfig", reflectMapper: cm }], response: [{ type: "Long", name: "teamId" }, { type: "Long", name: "timestamp" }] }, v2SuperTeamUpdateInfo: { sid: 32, cid: 8, service: lm, params: [{ type: "Property", name: "team", reflectMapper: um }, { type: "Property", name: "antispamConfig", reflectMapper: cm }], response: [{ type: "Long", name: "timestamp" }] }, v2TeamLeave: { sid: 31, cid: 8, service: lm, params: [{ type: "Long", name: "teamId" }] }, v2SuperTeamLeave: { sid: 32, cid: 7, service: lm, params: [{ type: "Long", name: "teamId" }] }, v2TeamGetInfo: { sid: 31, cid: 9, service: lm, params: [{ type: "Long", name: "teamId" }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(um) }] }, v2SuperTeamGetInfo: { sid: 32, cid: 9, service: lm, params: [{ type: "Long", name: "teamId" }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(um) }] }, v2TeamGetByIds: { sid: 31, cid: 34, service: lm, params: [{ type: "LongArray", name: "teamIds" }], response: [{ type: "PropertyArray", name: "teams", reflectMapper: invertSerializeItem(um) }, { type: "LongArray", name: "tids" }] }, v2SuperTeamGetByIds: { sid: 32, cid: 36, service: lm, params: [{ type: "LongArray", name: "teamIds" }], response: [{ type: "PropertyArray", name: "teams", reflectMapper: invertSerializeItem(um) }, { type: "LongArray", name: "tids" }] }, v2TeamDismiss: { sid: 31, cid: 12, service: lm, params: [{ type: "Long", name: "teamId" }] }, v2SuperTeamDismiss: { sid: 32, cid: 4, service: lm, params: [{ type: "Long", name: "teamId" }] }, v2TeamAcceptInvitation: { sid: 31, cid: 21, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(um) }] }, v2SuperTeamAcceptInvitation: { sid: 32, cid: 23, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(um) }] }, v2TeamRejectInvite: { sid: 31, cid: 22, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, v2SuperTeamRejectInvite: { sid: 32, cid: 24, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, v2TeamKickMembers: { sid: 31, cid: 6, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2SuperTeamKickMembers: { sid: 32, cid: 6, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2TeamApplyToJoin: { sid: 31, cid: 13, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "ps" }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(um) }, { type: "Int", name: "isInTeam" }] }, v2SuperTeamApplyToJoin: { sid: 32, cid: 20, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "ps" }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(um) }, { type: "Int", name: "isInTeam" }] }, v2TeamAcceptJoinApplication: { sid: 31, cid: 14, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }] }, v2SuperTeamAcceptJoinApplication: { sid: 32, cid: 21, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }] }, v2TeamRejectJoinApplication: { sid: 31, cid: 15, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, v2SuperTeamRejectJoinApplication: { sid: 32, cid: 22, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, v2TeamAddManagers: { sid: 31, cid: 16, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2SuperTeamAddManagers: { sid: 32, cid: 26, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2TeamRemoveManagers: { sid: 31, cid: 17, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2SuperTeamRemoveManagers: { sid: 32, cid: 27, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2TeamTransferOwner: { sid: 31, cid: 18, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "account" }, { type: "Bool", name: "leave" }] }, v2SuperTeamTransferOwner: { sid: 32, cid: 31, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "account" }, { type: "Bool", name: "leave" }] }, v2TeamUpdateSelfMemberInfo: { sid: 31, cid: 19, service: lm, params: [{ type: "Property", name: "teamMember", reflectMapper: dm }, { type: "Property", name: "specialFollowUpdate", reflectMapper: mm }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(dm) }] }, v2SuperTeamUpdateSelfMemberInfo: { sid: 32, cid: 10, service: lm, params: [{ type: "Property", name: "teamMember", reflectMapper: pm }, { type: "Property", name: "specialFollowUpdate", reflectMapper: mm }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(pm) }] }, v2TeamUpdateMember: { sid: 31, cid: 20, service: lm, params: [{ type: "Property", name: "teamMember", reflectMapper: dm }] }, v2SuperTeamUpdateMember: { sid: 32, cid: 30, service: lm, params: [{ type: "Property", name: "teamMember", reflectMapper: pm }] }, v2TeamGetMemberInvitor: { sid: 31, cid: 33, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }], response: [{ type: "StrStrMap", name: "accountsMap" }] }, v2SuperTeamGetMemberInvitor: { sid: 32, cid: 35, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }], response: [{ type: "StrStrMap", name: "accountsMap" }] }, v2TeamMemberSetChatBannedStatus: { sid: 31, cid: 25, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "accountId" }, { type: "Int", name: "chatBanned" }] }, v2SuperTeamMemberSetChatBannedStatus: { sid: 32, cid: 29, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accountId" }, { type: "Int", name: "chatBanned" }] }, v2TeamSetChatBannedMode: { sid: 31, cid: 32, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "Int", name: "chatBannedMode" }] }, v2SuperTeamSetChatBannedMode: { sid: 32, cid: 28, service: lm, params: [{ type: "Long", name: "teamId" }, { type: "Int", name: "chatBannedMode" }] }, v2TeamMemberGetListByIds: { sid: 31, cid: 35, service: lm, params: [{ type: "StrArray", name: "tag" }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(dm) }] }, v2SuperTeamMemberGetListByIds: { sid: 32, cid: 37, service: lm, params: [{ type: "StrArray", name: "tag" }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(pm) }] }, v2TeamMemberGetList: { sid: 31, cid: 36, service: lm, params: [{ type: "Property", name: "tag", reflectMapper: { teamId: 1, teamType: 2, roleQueryType: 3, onlyChatBanned: { id: 4, converter: function converter(t2) {
        return +t2;
      } }, nextToken: 5, limit: 6, direction: 7 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(dm) }, { type: "Property", name: "pageInfo", reflectMapper: { 1: "hasMore", 2: "nextToken" } }] }, v2TeamSync: { sid: 8, cid: 109, service: lm, response: [{ type: "Long", name: "timetag" }, { type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(um) }] }, v2TeamCreateMultiSync: { sid: 8, cid: 101, service: lm, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(um) }] }, v2TeamMemberUpdateMultiSync: { sid: 8, cid: 119, service: lm, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(dm) }] }, v2TeamMembersOfSelfInSync: { sid: 8, cid: 126, service: lm, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(dm) }, { type: "Long", name: "timetag" }] }, v2SuperTeamSync: { sid: 21, cid: 109, service: lm, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(um) }, { type: "Bool", name: "isAll" }, { type: "Long", name: "timetag" }] }, v2SuperTeamCreateMultiSync: { sid: 21, cid: 101, service: lm, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(um) }] }, v2SuperTeamMemberUpdateMultiSync: { sid: 21, cid: 110, service: lm, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(pm) }] }, v2SuperTeamMembersOfSelfInSync: { sid: 21, cid: 111, service: lm, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(pm) }, { type: "Long", name: "timetag" }] } };
      function formatTeamNotificationAttachData(t2, a2) {
        if (!t2)
          return {};
        var u2 = t2;
        return u2.tinfo && (u2.tinfo = function formatTeamFromTinfo(t3) {
          return deserialize(t3, invertSerializeItem(um));
        }(u2.tinfo), u2.tinfo.teamType = a2), u2.uinfos, u2.mute !== void 0 && (u2.mute = Uu(u2.mute)), u2;
      }
      function generateTeamByTeamId(t2, a2, u2) {
        return u2 === void 0 && (u2 = {}), Dt({ teamId: t2, teamType: a2, name: "", ownerAccountId: "", memberLimit: 0, memberCount: 0, createTime: 0, updateTime: 0, intro: "", announcement: "", avatar: "", joinMode: 0, agreeMode: 0, inviteMode: 0, updateInfoMode: 0, updateExtensionMode: 0, chatBannedMode: 0, isValidTeam: true }, u2);
      }
      function generateMemberByTeamId(t2, a2, u2, m2) {
        return m2 === void 0 && (m2 = {}), Dt({ teamId: t2, teamType: a2, accountId: u2, joinTime: 0, inTeam: true, memberRole: 0, chatBanned: false }, m2);
      }
      function processTeamMembers(t2, a2) {
        return a2 === void 0 && (a2 = 1), map$6(t2).call(t2, function(t3) {
          return function processTeamMember(t4, a3) {
            return a3 === void 0 && (a3 = 1), t4.teamType = a3, t4.chatBanned = t4.chatBanned !== void 0 && t4.chatBanned, t4;
          }(t3, a2);
        });
      }
      function completeMessage(t2, a2) {
        var u2, m2 = Dt(Dt({}, a2), { conversationId: t2.V2NIMConversationIdUtil.messageConversationId(a2), isSelf: a2.senderId === t2.account, sendingState: 1, messageStatus: { errorCode: ((u2 = a2 == null ? void 0 : a2.messageStatus) === null || u2 === void 0 ? void 0 : u2.errorCode) || 200 } });
        return m2.threadReply && (m2.threadReply = Dt(Dt({}, m2.threadReply), { conversationType: m2.conversationType, conversationId: m2.conversationId })), m2.threadRoot && (m2.threadRoot = Dt(Dt({}, m2.threadRoot), { conversationType: m2.conversationType, conversationId: m2.conversationId })), m2;
      }
      function completeMessageRefer(t2, a2) {
        return Dt(Dt({}, a2), { conversationId: t2.V2NIMConversationIdUtil.messageConversationId(a2) });
      }
      function formatMessageRefer(t2, a2) {
        var u2 = a2.createTime, m2 = a2.senderId, h2 = a2.receiverId, g2 = a2.conversationType;
        return { conversationType: g2, conversationId: t2.V2NIMConversationIdUtil.messageConversationId({ conversationType: g2, senderId: m2, receiverId: h2 }), senderId: a2.senderId, receiverId: a2.receiverId, messageServerId: a2.messageServerId, createTime: u2, messageClientId: a2.messageClientId };
      }
      function formatRevokeMessage(t2, a2) {
        var u2 = { 7: 1, 8: 2, 12: 3, 13: 1, 14: 2 }[a2.sysMsgType];
        return { postscript: a2.postscript, revokeType: { 7: 1, 8: 2, 12: 3, 13: 4, 14: 5 }[a2.sysMsgType] || 0, revokeAccountId: a2.opeAccount || a2.senderId, callbackExtension: a2.callbackExtension, serverExtension: a2.attach || "", messageRefer: { conversationType: u2, conversationId: t2.V2NIMConversationIdUtil.messageConversationId(Dt(Dt({}, a2), { conversationType: u2, senderId: a2.senderId, receiverId: a2.receiverId })), senderId: a2.senderId, receiverId: a2.receiverId, messageServerId: a2.messageServerId, createTime: a2.deleteMsgCreatetime, messageClientId: a2.messageClientId } };
      }
      function formatClearHistoryNotification(t2, a2) {
        return { conversationId: a2.conversationType === 1 ? t2.V2NIMConversationIdUtil.p2pConversationId(a2.receiverId) : a2.conversationType === 2 ? t2.V2NIMConversationIdUtil.teamConversationId(a2.teamId) : t2.V2NIMConversationIdUtil.superTeamConversationId(a2.teamId), deleteTime: a2.deleteTime, serverExtension: a2.serverExtension };
      }
      function convertNotificationType(t2, a2) {
        var u2 = { 0: 0, 401: 401, 1: 1, 402: 402, 2: 2, 403: 403, 3: 3, 404: 404, 4: 4, 405: 405, 5: 5, 410: 410, 6: 6, 406: 406, 7: 7, 407: 407, 8: 8, 408: 408, 9: 9, 411: 411, 10: 10, 409: 409 };
        return u2[a2] === void 0 && t2.logger.warn("[V2NIMMessageService] undefined notification type: " + a2), typeof u2[a2] == "number" ? u2[a2] : -1;
      }
      function formatMessageAttachment(t2, a2) {
        return t2.messageType === 5 ? function formatNotificationMessage(t3, a3) {
          var u2, m2, h2, g2, M2, I2 = a3.attachment || {};
          if (a3.attachment && "type" in a3.attachment)
            return a3;
          var S2 = void 0;
          if ((u2 = I2.data) === null || u2 === void 0 ? void 0 : u2.tinfo) {
            var T2 = I2.id, C2 = I2.data, b2 = T2 > 400 ? 2 : 1, E2 = formatTeamNotificationAttachData(Dt({}, C2), b2).tinfo;
            S2 = {}, E2.teamId, S2 = __rest(E2, ["teamId"]);
          }
          var k2 = Dt(Dt(Dt(Dt({ raw: I2.raw, type: convertNotificationType(t3, I2.id) }, S2 ? { updatedTeamInfo: S2 } : {}), { targetIds: ((m2 = I2.data) === null || m2 === void 0 ? void 0 : m2.ids) || (((h2 = I2.data) === null || h2 === void 0 ? void 0 : h2.id) ? [I2.data.id] : []) }), typeof ((g2 = I2.data) === null || g2 === void 0 ? void 0 : g2.attach) == "string" ? { serverExtension: I2.data.attach } : {}), typeof ((M2 = I2.data) === null || M2 === void 0 ? void 0 : M2.mute) == "number" ? { chatBanned: I2.data.mute !== 0 } : {});
          return Dt(Dt({}, a3), { attachment: k2 });
        }(a2, t2) : t2.messageType === 100 ? function formatCustomMessage(t3, a3) {
          var u2, m2, h2;
          if (typeof ((u2 = a3.attachment) === null || u2 === void 0 ? void 0 : u2.raw) == "string" && ((h2 = (m2 = t3.V2NIMMessageService) === null || m2 === void 0 ? void 0 : m2.customAttachmentParsers) === null || h2 === void 0 ? void 0 : h2.length) > 0) {
            var g2 = a3.subType || 0, M2 = t3.V2NIMMessageService.customAttachmentParsers, I2 = a3.attachment.raw;
            some(M2).call(M2, function(u3) {
              try {
                var m3 = u3(g2, I2);
                if (isPlainObject(m3))
                  return m3.raw = I2, a3.attachment = m3, true;
              } catch (a4) {
                return t3.logger.warn("customAttachmentParser: subType " + g2 + ", raw: " + I2 + ". parse error with " + a4), false;
              }
              return false;
            });
          }
          return a3;
        }(a2, t2) : t2;
      }
      function attachmentToRaw(t2, a2) {
        if (!a2)
          return "";
        switch (t2) {
          case 100:
            return a2.raw || "";
          case 1:
          case 3:
          case 2:
          case 6:
            return function mediaAttachmentToRaw(t3) {
              var a3 = t3, u2 = a3.width, m2 = a3.height, h2 = a3.duration;
              a3.path, a3.file, a3.raw, a3.ctx, a3.payload, a3.bucketName, a3.objectName, a3.token;
              var g2 = a3.ext, M2 = __rest(a3, ["width", "height", "duration", "path", "file", "raw", "ctx", "payload", "bucketName", "objectName", "token", "ext"]), I2 = typeof g2 == "string" && g2[0] === "." ? slice(g2).call(g2, 1) : g2;
              return Un(Dt(Dt(Dt(Dt(Dt({}, M2), g2 === void 0 ? {} : { ext: I2 }), u2 === void 0 ? {} : { w: u2 }), m2 === void 0 ? {} : { h: m2 }), h2 === void 0 ? {} : { dur: h2 }));
            }(a2);
          case 4:
            return function locationAttachmentToRaw(t3) {
              return Un({ lat: t3.latitude, lng: t3.longitude, title: t3.address });
            }(a2);
          case 12:
            return function callAttachmentToRaw(t3) {
              t3.raw;
              var a3 = __rest(t3, ["raw"]);
              try {
                var u2;
                return Un(Dt(Dt({}, a3), { durations: map$6(u2 = t3.durations).call(u2, function(t4) {
                  return { accid: t4.accountId, duration: t4.duration };
                }) }));
              } catch (a4) {
                return Un(t3);
              }
            }(a2);
          default:
            return a2.raw || Un(a2);
        }
      }
      function rawToAttachment(t2, a2) {
        var u2;
        try {
          switch (u2 = JSON.parse(t2), a2) {
            case 100:
              return { raw: t2 };
            case 4:
              return function locationRawToAttachment(t3, a3) {
                return { latitude: a3.lat, longitude: a3.lng, address: a3.title, raw: t3 };
              }(t2, u2);
            case 2:
            case 3:
            case 1:
            case 6:
              return function mediaRawToAttachment(t3, a3) {
                var u3 = a3.w, m2 = a3.h, h2 = a3.dur, g2 = a3.ext, M2 = __rest(a3, ["w", "h", "dur", "ext"]), I2 = typeof g2 == "string" && g2[0] !== "." ? "." + g2 : g2;
                return Dt(Dt(Dt(Dt(Dt(Dt({}, M2), g2 === void 0 ? {} : { ext: I2 }), u3 === void 0 ? {} : { width: u3 }), m2 === void 0 ? {} : { height: m2 }), h2 === void 0 ? {} : { duration: h2 }), { raw: t3 });
              }(t2, u2);
            case 12:
              return function callRawToAttachment(t3, a3) {
                var u3;
                return Dt(Dt({}, a3), { durations: map$6(u3 = a3.durations).call(u3, function(t4) {
                  return { accountId: t4.accid, duration: t4.duration };
                }), raw: t3 });
              }(t2, u2);
            default:
              return typeof u2 == "object" && u2 ? Dt(Dt({}, u2), { raw: t2 }) : { raw: t2 };
          }
        } catch (a3) {
          return typeof u2 == "object" && u2 ? Dt(Dt({}, u2), { raw: t2 }) : { raw: t2 };
        }
      }
      var gm = "V2NIMMessageService", vm = { "30_1": "v2SendP2pMessage", "31_2": "v2SendTeamMessage", "30_31": "v2MessageP2pModify", "31_37": "v2MessageTeamModify", "32_38": "v2MessageSuperTeamModify", "7_33": "v2MessageOnModified", "4_27": "v2MessageSyncModified", "4_28": "v2MessageSuperTeamSyncModified", "4_5": "v2BatchMarkRead", "4_12": "syncP2PMessagReceipts", "30_11": "v2SendP2PMessageReceipt", "31_28": "v2SendTeamMessageReceipts", "32_2": "v2SendSuperTeamMessage", "7_12": "onP2PMessageReceipts", "8_31": "onTeamMessageReceipts", "31_29": "v2GetTeamMessageReceipts", "31_30": "v2GetTeamMessageReceiptDetail", "7_2": "onMsg", "8_3": "onMsg", "7_101": "onMsg", "8_102": "onMsg", "21_3": "onMsg", "21_102": "onMsg", "4_4": "syncOfflineMsgs", "4_9": "syncRoamingMsgs", "4_17": "syncRoamingMsgs", "30_13": "v2RevokeMessage", "32_17": "v2RevokeSuperTeamMessage", "7_14": "onRevokeMessage", "7_15": "syncRevokeMessage", "21_18": "onRevokeMessage", "21_117": "onRevokeMessage", "30_23": "v2DeleteMessage", "30_24": "v2DeleteMessages", "4_21": "syncOnDeleteMessages", "7_123": "onDeleteMessage", "7_124": "onDeleteMessages", "29_17": "v2DownloadLocalAntiSpamVocabs" }, fm = { conversationType: { id: 0, converter: conversationTypeV2ToV1, retConverter: conversationTypeV1ToV2 }, receiverId: 1, senderId: 2, fromClientType: 4, fromDeviceId: 5, fromNick: 6, createTime: { id: 7, retType: "number" }, messageType: { id: 8, retType: "number" }, text: 9, attachment: { id: 10, converter: function converter(t2, a2) {
        return attachmentToRaw(a2.messageType, t2);
      }, retConverter: function retConverter(t2, a2) {
        return rawToAttachment(t2, Number(a2[8]));
      } }, messageClientId: 11, messageServerId: 12, resend: { id: 13, converter: boolToInt, retType: "boolean" }, userUpdateTime: { id: 14, retType: "number" }, serverExtension: 15, pushPayload: { id: 16, access: "pushConfig.pushPayload" }, pushContent: { id: 17, access: "pushConfig.pushContent" }, forcePushAccountIds: { id: 18, access: "pushConfig.forcePushAccountIds", def: function def(t2) {
        if (t2["pushConfig.forcePush"])
          return "#%@all@%#";
      }, converter: function converter(t2, a2) {
        if (a2["pushConfig.forcePush"]) {
          if (t2.length === 0)
            return "#%@all@%#";
          try {
            return Un(t2);
          } catch (t3) {
            return "#%@all@%#";
          }
        }
      }, retConverter: function retConverter(t2) {
        if (t2 === "#%@all@%#")
          return t2;
        if (t2)
          try {
            return JSON.parse(t2);
          } catch (t3) {
            return [];
          }
      } }, forcePushContent: { id: 19, access: "pushConfig.forcePushContent" }, forcePush: { id: 20, access: "pushConfig.forcePush", converter: boolToInt, retType: "boolean" }, antispamCustomMessageEnabled: { id: 21, def: function def(t2) {
        return get(t2, "antispamConfig.antispamCustomMessage") ? 1 : void 0;
      }, retConverter: function retConverter() {
      } }, antispamCustomMessage: { id: 22, access: "antispamConfig.antispamCustomMessage" }, antispamBusinessId: { id: 23, access: "antispamConfig.antispamBusinessId" }, clientAntispamHit: { id: 24, access: "clientAntispamHit", converter: boolToInt, retType: "boolean" }, antispamEnabled: { id: 25, access: "antispamConfig.antispamEnabled", converter: boolToInt, retType: "boolean" }, needAck: { id: 26, access: "messageConfig.readReceiptEnabled", converter: boolToInt, retType: "boolean" }, lastMessageUpdateEnabled: { id: 28, access: "messageConfig.lastMessageUpdateEnabled", converter: boolToInt, retType: "boolean" }, threadReplySenderId: { id: 29, access: "threadReply.senderId" }, threadReplyReceiverId: { id: 30, access: "threadReply.receiverId" }, threadReplyTime: { id: 31, access: "threadReply.createTime", retType: "number" }, threadReplyServerId: { id: 32, access: "threadReply.messageServerId" }, threadReplyClientId: { id: 33, access: "threadReply.messageClientId" }, threadRootSenderId: { id: 34, access: "threadRoot.senderId" }, threadRootReceiverId: { id: 35, access: "threadRoot.receiverId" }, threadRootTime: { id: 36, access: "threadRoot.createTime", retType: "number" }, threadRootServerId: { id: 37, access: "threadRoot.messageServerId" }, threadRootClientId: { id: 38, access: "threadRoot.messageClientId" }, callbackExtension: 40, subType: { id: 41, retType: "number" }, antispamCheating: { id: 42, access: "antispamConfig.antispamCheating" }, routeEnvironment: { id: 43, access: "routeConfig.routeEnvironment" }, antispamExtension: { id: 44, access: "antispamConfig.antispamExtension" }, antispamResult: 45, __clientExt: { id: 46, converter: objectToJSONString, retConverter: stringToJSONObject }, robotFunction: { id: 47, access: "robotConfig.function" }, robotTopic: { id: 48, access: "robotConfig.topic" }, robotCustomContent: { id: 49, access: "robotConfig.customContent" }, robotAccount: { id: 50, access: "robotConfig.accountId" }, _conversationOnlineSyncNotify: { id: 51 }, _conversationOnlineSyncData: { id: 52 }, aiAgentMsgDirection: { id: 55, access: "aiConfig.aiStatus", retAccess: "aiConfig.aiStatus", retType: "number" }, aiAgentAccount: { id: 56, access: "aiConfig.accountId", retAccess: "aiConfig.accountId" }, aiAgentContent: { id: 57, access: "aiConfig.content", converter: objectToJSONString, retConverter: emptyFunc }, aiAgentMessages: { id: 58, access: "aiConfig.messages", converter: objectToJSONString, retConverter: emptyFunc }, aiAgentPromptVariables: { id: 59, access: "aiConfig.promptVariables", retConverter: emptyFunc }, aiAgentModelConfigParams: { id: 60, access: "aiConfig.modelConfigParams", converter: objectToJSONString, retConverter: emptyFunc }, errorCode: { id: 61, access: "messageStatus.errorCode", retType: "number" }, modifyTime: { id: 62, retType: "number" }, modifyAccountId: 63, historyEnabled: { id: 100, access: "messageConfig.historyEnabled", converter: boolToInt, retType: "boolean" }, roamingEnabled: { id: 101, access: "messageConfig.roamingEnabled", converter: boolToInt, retType: "boolean" }, onlineSyncEnabled: { id: 102, access: "messageConfig.onlineSyncEnabled", converter: boolToInt, retType: "boolean" }, routeEnabled: { id: 105, access: "routeConfig.routeEnabled", converter: boolToInt, retType: "boolean" }, pushEnable: { id: 107, access: "pushConfig.pushEnabled", converter: boolToInt, retType: "boolean" }, offlineEnabled: { id: 108, access: "messageConfig.offlineEnabled", converter: boolToInt, retType: "boolean" }, unreadEnabled: { id: 109, access: "messageConfig.unreadEnabled", converter: boolToInt, retType: "boolean" }, pushNickEnabled: { id: 110, access: "pushConfig.pushNickEnabled", converter: boolToInt, retType: "boolean" }, msgAckSnapshot: { id: 112, retType: "number" }, receiverIds: { id: 154, access: "targetConfig.receiverIds", converter: objectToJSONString, retConverter: function retConverter() {
      } }, inclusive: { id: 155, access: "targetConfig.inclusive", converter: function converter(t2) {
        return t2 ? 1 : 2;
      }, retConverter: function retConverter() {
      } }, newMemberVisible: { id: 156, access: "targetConfig.newMemberVisible", converter: function converter(t2) {
        return t2 ? 1 : 2;
      }, retConverter: function retConverter() {
      } } }, ym = invertSerializeItem(fm), _m = { conversationType: { id: 1, access: "messageRefer.conversationType", retType: "number" }, senderId: { id: 2, access: "messageRefer.senderId" }, receiverId: { id: 3, access: "messageRefer.receiverId" }, messageServerId: { id: 4, access: "messageRefer.messageServerId" }, messageClientId: { id: 5, access: "messageRefer.messageClientId" }, createTime: { id: 6, access: "messageRefer.createTime", retType: "number" }, deleteTime: { id: 7, retType: "number" }, serverExtension: 8 };
      invertSerializeItem(_m);
      var Mm = { version: 1, md5: 2, nosurl: 3, thesaurus: 4 }, Im = { createTime: { id: 0, retType: "number" }, sysMsgType: 1, receiverId: 2, senderId: 3, postscript: 4, attach: 5, pushContent: 8, pushPayload: 9, messageClientId: 10, messageServerId: 11, deleteMsgCreatetime: { id: 14, retType: "number" }, opeAccount: 16, env: 21, callbackExtension: 22 }, Sm = { receiverId: 0, messageServerId: 1, readCount: { id: 100, retType: "number" }, unreadCount: { id: 101, retType: "number" }, messageClientId: 102, latestReadAccount: 103 }, Tm = { v2BatchMarkRead: { sid: 4, cid: 5, service: gm, hasPacketResponse: false, params: [{ type: "Byte", name: "sid" }, { type: "Byte", name: "cid" }, { type: "LongArray", name: "ids" }] }, v2SendP2pMessage: { sid: 30, cid: 1, service: gm, params: [{ type: "Property", name: "tag", reflectMapper: fm }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(fm) }] }, onMsg: { sid: 7, cid: 2, service: gm, response: [{ type: "Property", name: "msg", reflectMapper: invertSerializeItem(fm) }] }, syncOfflineMsgs: { sid: 4, cid: 4, service: gm, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(fm) }] }, syncRoamingMsgs: { sid: 4, cid: 9, service: gm, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(fm) }] }, v2SendP2PMessageReceipt: { sid: 30, cid: 11, service: gm, params: [{ type: "Property", name: "tag", reflectMapper: fm }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(fm) }] }, v2RevokeMessage: { sid: 30, cid: 13, service: gm, params: [{ type: "Property", name: "tag", reflectMapper: Im }] }, v2DeleteMessage: { sid: 30, cid: 23, service: gm, params: [{ type: "Property", name: "tag", reflectMapper: _m }], response: [{ type: "Long", name: "timetag" }] }, v2DeleteMessages: { sid: 30, cid: 24, service: gm, params: [{ type: "PropertyArray", name: "tag", reflectMapper: _m }], response: [{ type: "Long", name: "timetag" }] }, v2SendTeamMessage: { sid: 31, cid: 2, service: gm, params: [{ type: "Property", name: "tag", reflectMapper: fm }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(fm) }] }, v2SendTeamMessageReceipts: { sid: 31, cid: 28, service: gm, params: [{ type: "PropertyArray", name: "tag", reflectMapper: Sm }], response: [{ type: "PropertyArray", name: "tag", reflectMapper: invertSerializeItem(Sm) }] }, v2SendSuperTeamMessage: { sid: 32, cid: 2, service: gm, params: [{ type: "Property", name: "tag", reflectMapper: fm }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(fm) }] }, v2RevokeSuperTeamMessage: { sid: 32, cid: 17, service: gm, params: [{ type: "Property", name: "tag", reflectMapper: Im }] }, syncP2PMessagReceipts: { sid: 4, cid: 12, service: gm, response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(fm) }] }, onP2PMessageReceipts: { sid: 7, cid: 12, service: gm, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(fm) }] }, v2GetTeamMessageReceipts: { sid: 31, cid: 29, service: gm, params: [{ type: "PropertyArray", name: "tag", reflectMapper: Sm }], response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(Sm) }] }, v2GetTeamMessageReceiptDetail: { sid: 31, cid: 30, service: gm, params: [{ type: "Property", name: "tag", reflectMapper: Sm, select: ["receiverId", "messageServerId"] }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Sm) }, { type: "StrArray", name: "readAccountList" }, { type: "StrArray", name: "unreadAccountList" }] }, onTeamMessageReceipts: { sid: 8, cid: 31, service: gm, response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(Sm) }] }, onRevokeMessage: { sid: 7, cid: 14, service: gm, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Im) }] }, syncRevokeMessage: { sid: 7, cid: 15, service: gm, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(Im) }] }, syncOnDeleteMessages: { sid: 4, cid: 21, service: gm, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(_m) }] }, onDeleteMessage: { sid: 7, cid: 123, service: gm, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(_m) }] }, onDeleteMessages: { sid: 7, cid: 124, service: gm, response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(_m) }] }, v2DownloadLocalAntiSpamVocabs: { sid: 29, cid: 17, service: gm, params: [{ type: "Property", name: "tag", reflectMapper: Mm }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Mm) }] }, v2MessageP2pModify: { sid: 30, cid: 31, service: gm, params: [{ type: "Property", name: "tag", reflectMapper: fm }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(fm) }] }, v2MessageTeamModify: { sid: 31, cid: 37, service: gm, params: [{ type: "Property", name: "tag", reflectMapper: fm }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(fm) }] }, v2MessageSuperTeamModify: { sid: 32, cid: 38, service: gm, params: [{ type: "Property", name: "tag", reflectMapper: fm }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(fm) }] }, v2MessageOnModified: { sid: 7, cid: 33, service: gm, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(fm) }] }, v2MessageSyncModified: { sid: 4, cid: 27, service: gm, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(fm) }, { type: "Long", name: "time" }] }, v2MessageSuperTeamSyncModified: { sid: 4, cid: 28, service: gm, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(fm) }, { type: "Long", name: "time" }] } };
      function conversationTypeV2ToV1(t2) {
        return t2 === 1 ? 0 : t2 === 2 ? 1 : t2 === 3 ? 5 : void 0;
      }
      function conversationTypeV1ToV2(t2) {
        var a2 = Uu(t2);
        return a2 === 0 ? 1 : a2 === 1 ? 2 : a2 === 5 ? 3 : 0;
      }
      var Cm, bm = { type: { type: "number" }, lastMessageState: { type: "number" }, unreadCount: { type: "number" }, stickTop: { type: "boolean" }, sortOrder: { type: "number" }, version: { type: "number" }, deleteFlag: { type: "boolean" }, createTime: { type: "number" }, updateTime: { type: "number" } };
      function formatConversationFields(t2, a2) {
        return a2 && a2.length > 0 ? map$6(a2).call(a2, function(a3) {
          return formatConversationField(t2, a3);
        }) : [];
      }
      function formatLastMessageFromMessage(t2, a2, u2, m2) {
        var h2, g2;
        u2 === void 0 && (u2 = 0);
        var M2 = a2 = formatMessageAttachment(a2, t2), I2 = M2.messageType, S2 = M2.subType, T2 = M2.text, C2 = M2.attachment, b2 = M2.serverExtension, E2 = "";
        if (a2.senderId !== t2.account) {
          E2 = get(a2, "fromNick");
          var k2 = (g2 = (h2 = t2.V2NIMFriendService) === null || h2 === void 0 ? void 0 : h2.model) === null || g2 === void 0 ? void 0 : g2.getFriend(a2.senderId);
          k2 && k2.alias && (E2 = k2.alias);
        }
        return JSON.parse(Un({ lastMessageState: u2, messageRefer: formatMessageRefer(t2, a2), messageType: I2, subType: S2, text: T2, attachment: C2, serverExtension: b2, callbackExtension: a2.callbackExtension, sendingState: m2, senderName: E2 }));
      }
      function formatConversationField(t2, a2) {
        var u2 = format(bm, a2);
        if (u2.groupIds ? u2.groupIds = JSON.parse(u2.groupIds) : delete u2.groupIds, typeof u2.lastMessage == "string")
          if (u2.lastMessage === "")
            ;
          else if (u2.lastMessageState === 1) {
            var m2 = formatRevokeMessage(t2, deserialize(JSON.parse(u2.lastMessage), invertSerializeItem(Im)));
            u2.lastMessage = function formatLastMessageFromNotification(t3, a3) {
              var u3 = a3.messageRefer, m3 = a3.revokeAccountId, h3 = a3.revokeType, g2 = a3.callbackExtension, M2 = a3.serverExtension, I2 = a3.postscript, S2 = function calcSenderNameFromNotification(t4, a4, u4, m4) {
                var h4, g3, M3, I3, S3, T2, C2, b2;
                if (a4 !== t4.account) {
                  var E2 = (g3 = (h4 = t4.V2NIMFriendService) === null || h4 === void 0 ? void 0 : h4.model) === null || g3 === void 0 ? void 0 : g3.getFriend(a4);
                  if (E2 && E2.alias)
                    return E2.alias;
                  if (u4 === 2) {
                    var k2 = (I3 = (M3 = t4.V2NIMTeamService) === null || M3 === void 0 ? void 0 : M3.memberModel) === null || I3 === void 0 ? void 0 : I3.getById(m4, 1, a4);
                    if (k2 && k2.teamNick)
                      return k2.teamNick;
                  } else if (u4 === 3) {
                    var w2 = (T2 = (S3 = t4.V2NIMTeamService) === null || S3 === void 0 ? void 0 : S3.memberModel) === null || T2 === void 0 ? void 0 : T2.getById(m4, 1, a4);
                    if (w2 && w2.teamNick)
                      return w2.teamNick;
                  }
                  var R2 = (b2 = (C2 = t4.V2NIMUserService) === null || C2 === void 0 ? void 0 : C2.model) === null || b2 === void 0 ? void 0 : b2.getUser(a4);
                  return R2 && R2.name ? R2.name : void 0;
                }
              }(t3, a3.revokeAccountId, a3.messageRefer.conversationType, a3.messageRefer.receiverId) || "";
              return JSON.parse(Un({ lastMessageState: 1, messageRefer: u3, revokeAccountId: m3, revokeType: h3, callbackExtension: g2, serverExtension: M2, text: I2 || "", senderName: S2 }));
            }(t2, m2);
          } else if (u2.lastMessageState === 0) {
            var h2 = deserialize(JSON.parse(u2.lastMessage), invertSerializeItem(fm));
            u2.lastMessage = formatLastMessageFromMessage(t2, h2, u2.lastMessageState, h2.senderId === t2.account ? 1 : void 0);
          } else
            u2.lastMessageState === 2 && delete u2.lastMessage;
        return u2;
      }
      function formatConversationByField(t2) {
        var a2 = t2.version, u2 = t2.deleteFlag;
        return { conversation: __rest(t2, ["version", "deleteFlag"]), version: a2, deleteFlag: u2 };
      }
      !function(t2) {
        t2[t2.createConversation = 1] = "createConversation", t2[t2.deleteConversation = 2] = "deleteConversation", t2[t2.updateConversation = 3] = "updateConversation", t2[t2.setConversationTop = 4] = "setConversationTop", t2[t2.clearConversationUnread = 5] = "clearConversationUnread", t2[t2.addConversationToGroup = 6] = "addConversationToGroup", t2[t2.removeConversationFromGroup = 7] = "removeConversationFromGroup", t2[t2.modifyConversationOnSendMessage = 8] = "modifyConversationOnSendMessage", t2[t2.modifyConversationOnDeleteMessage = 9] = "modifyConversationOnDeleteMessage", t2[t2.modifyConversationOnRecallMessage = 10] = "modifyConversationOnRecallMessage", t2[t2.modifyConversationOnClearMessage = 11] = "modifyConversationOnClearMessage", t2[t2.oneClickClearConversationUnread = 12] = "oneClickClearConversationUnread", t2[t2.modifyConversationOnUpdateMessage = 13] = "modifyConversationOnUpdateMessage";
      }(Cm || (Cm = {}));
      var Em = { type: { type: "number" }, oneClickClearUnreadType: { type: "number" }, oneClickClearUnreadConversationType: { type: "object" }, oneClickClearUnreadVersion: { type: "number" }, deleteConversationClearMessage: { type: "boolean" } };
      function formatConversationNotify(t2) {
        return format(Em, t2);
      }
      var km = function() {
        function V2NIMConversationVersionCacheImpl(t3, a2) {
          this.fieldVersion = {}, this.conversationIdsForBackFill = {}, this.tempPacket = [], this.isSyncing = false, this.nextCursor = 0, this.core = t3, this.service = a2;
        }
        var t2 = V2NIMConversationVersionCacheImpl.prototype;
        return t2.reset = function reset() {
          this.tempPacket = [], this.fieldVersion = {}, this.conversationIdsForBackFill = {}, this.isSyncing = false, this.nextCursor = 0;
        }, t2.doSync = function doSync() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var t3, a2, u2, m2;
            return Ql.wrap(function _callee$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return this.isSyncing = true, this.service.emit("onSyncStarted"), h2.prev = 2, h2.next = 5, this.core.sendCmd("v2ConversationSync", { tag: { cursor: this.nextCursor } });
                  case 5:
                    t3 = h2.sent, h2.next = 18;
                    break;
                  case 8:
                    if (h2.prev = 8, h2.t0 = h2.catch(2), (a2 = h2.t0).code !== Nl.V2NIM_ERROR_CODE_CANCELLED) {
                      h2.next = 13;
                      break;
                    }
                    return h2.abrupt("return");
                  case 13:
                    return this.isSyncing = false, this.service.emit("onSyncFailed", a2), this.core.V2NIMLoginService.dataSync.switchDataSync({ type: 1, state: 3, error: a2, subType: "conversationSync" }), this.processTempPacket(), h2.abrupt("return");
                  case 18:
                    u2 = Uu(get(t3, "content.info.syncType")) === 0, m2 = get(t3, "content.info.nextCursor"), this.doSyncAndSuccess(u2, m2);
                  case 21:
                  case "end":
                    return h2.stop();
                }
            }, _callee, this, [[2, 8]]);
          }));
        }, t2.doSyncAndSuccess = function doSyncAndSuccess(t3, a2) {
          var u2;
          t3 && sort(u2 = this.service.model).call(u2);
          this.isSyncing = false, this.nextCursor = Uu(a2) || 0, this.service.unread.resetTotalAfterSyncDone(), this.service.unread.digestUnreadCountChange(), this.service.emit("onSyncFinished"), this.core.V2NIMLoginService.dataSync.switchDataSync({ type: 1, state: 3, subType: "conversationSync" }), this.processTempPacket();
        }, t2.setBackFillIds = function setBackFillIds(t3) {
          var a2 = this;
          return forEach$1(t3).call(t3, function(t4) {
            if (t4.lastMessageState === 2 && a2.service.hasMessageService) {
              a2.conversationIdsForBackFill[t4.conversationId] = true;
              var u2 = a2.core.V2NIMMessageService.model.getLastMessageOfConversation(t4.conversationId);
              t4.lastMessage = u2 ? formatLastMessageFromMessage(a2.core, u2, t4.lastMessageState, u2.sendingState) : "";
            } else
              a2.conversationIdsForBackFill[t4.conversationId] = false;
            delete t4.lastMessageState;
          }), t3;
        }, t2.recvConversationFromSyncAction = function recvConversationFromSyncAction(t3) {
          var a2 = this, u2 = get(t3, "content.info").syncType, m2 = formatConversationFields(this.core, get(t3, "content.datas"));
          (u2 = Uu(u2)) === 0 ? (forEach$1(m2).call(m2, function(t4) {
            a2.initFieldVersion(t4.conversationId, t4.version);
          }), m2 = this.setBackFillIds(m2), this.setModel(m2)) : (m2 = this.setBackFillIds(m2), this.recvConversationForCreated(m2) < m2.length && this.recvConversationForChanged(m2));
        }, t2.recvConversation = function recvConversation(t3) {
          var a2 = this;
          if (this.isSyncing)
            this.tempPacket.push(t3);
          else {
            var u2 = formatConversationFields(this.core, get(t3, "content.datas")), m2 = filter(u2).call(u2, function(t4) {
              return !!t4.conversationId;
            }), h2 = formatConversationNotify(get(t3, "content.info")), g2 = map$6(m2).call(m2, function(t4) {
              return "id:" + t4.conversationId + ", ver:" + t4.version;
            }).join(";");
            if (this.core.logger.getDebugMode() ? this.core.logger.debug("V2NIMConversation::recvConversation: " + g2 + ".", h2, m2) : this.core.logger.log("V2NIMConversation::recvConversation: " + g2 + ".", h2), h2.type === 2) {
              var M2 = map$6(m2).call(m2, function(t4) {
                return delete a2.fieldVersion[t4.conversationId], a2.service.model.deleteById(t4.conversationId), t4.conversationId;
              });
              return this.service.emit("onConversationDeleted", M2), void this.service.unread.digestUnreadCountChange();
            }
            if (h2.type !== 12)
              h2.type, m2 = this.setBackFillIds(m2), this.recvConversationForCreated(m2) < m2.length && this.recvConversationForChanged(m2);
            else
              this.compareAndClearUnreadInModel(h2.oneClickClearUnreadVersion, h2.oneClickClearUnreadType, { conversationGroupIds: h2.oneClickClearUnreadGroupId ? [h2.oneClickClearUnreadGroupId] : void 0, conversationTypes: h2.oneClickClearUnreadConversationType });
          }
        }, t2.recvConversationForCreated = function recvConversationForCreated(t3) {
          var a2 = this, u2 = filter(t3).call(t3, function(t4) {
            return !a2.fieldVersion[t4.conversationId];
          }), m2 = reduce(u2).call(u2, function(t4, u3) {
            if (!a2.fieldVersion[u3.conversationId]) {
              a2.initFieldVersion(u3.conversationId, u3.version), t4 = !!a2.updateModel(u3) || t4;
              var m3 = a2.service.model.getById(u3.conversationId);
              return m3 && a2.service.triggerConversationCreated(m3), t4;
            }
            return t4;
          }, false);
          return m2 && this.service.unread.digestUnreadCountChange(), u2.length;
        }, t2.recvConversationForChanged = function recvConversationForChanged(t3) {
          var a2, u2 = this, m2 = this.bulkCompare(t3);
          if (m2.length !== 0) {
            this.bulkUpdateModel(m2);
            var h2 = filter(a2 = map$6(m2).call(m2, function(t4) {
              return u2.service.model.getById(t4.conversationId);
            })).call(a2, function(t4) {
              return !!t4;
            });
            this.service.triggerConversationChanged(h2);
          }
        }, t2.processTempPacket = function processTempPacket() {
          var t3, a2 = this;
          forEach$1(t3 = this.tempPacket).call(t3, function(t4) {
            a2.recvConversation(t4);
          }), this.tempPacket = [];
        }, t2.bulkCompare = function bulkCompare(t3) {
          var a2, u2 = this;
          return filter(a2 = map$6(t3).call(t3, function(t4) {
            return u2.compare(t4);
          })).call(a2, function(t4) {
            return !!t4;
          });
        }, t2.compare = function compare(t3) {
          var a2 = this, u2 = t3.version, m2 = t3.conversationId, h2 = t3.deleteFlag, g2 = t3.type, M2 = ["stickTop", "groupIds", "serverExtension", "localExtension", "lastMessage", "lastMessageState", "unreadCount", "sortOrder", "createTime", "updateTime"], I2 = {}, S2 = 0;
          return forEach$1(M2).call(M2, function(h3) {
            var g3 = h3;
            if (t3[g3] !== void 0) {
              var M3 = a2.fieldVersion[m2];
              M3 && typeof M3[g3] == "number" && M3[g3] >= u2 || (a2.fieldVersion[m2] = a2.fieldVersion[m2] || {}, a2.fieldVersion[m2][g3] = u2, I2[g3] = t3[g3], S2 += 1);
            }
          }), S2 ? Dt(Dt({}, I2), { conversationId: m2, deleteFlag: h2, version: u2, type: g2 }) : void 0;
        }, t2.bulkUpdateModel = function bulkUpdateModel(t3) {
          var a2 = this, u2 = false;
          forEach$1(t3).call(t3, function(t4) {
            a2.updateModel(t4) && (u2 = true);
          }), u2 && this.service.unread.digestUnreadCountChange();
        }, t2.initFieldVersion = function initFieldVersion(t3, a2) {
          this.fieldVersion[t3] = { stickTop: a2, groupIds: a2, serverExtension: a2, lastMessage: a2, lastMessageState: a2, unreadCount: a2, sortOrder: a2, createTime: a2, updateTime: a2 };
        }, t2.initConversation = function initConversation(t3, a2) {
          var u2 = to();
          return Dt({ conversationId: t3, type: this.core.V2NIMConversationIdUtil.parseConversationType(t3), stickTop: false, localExtension: "", serverExtension: "", unreadCount: 0, createTime: u2, updateTime: u2, sortOrder: u2 }, a2);
        }, t2.updateModel = function updateModel(t3) {
          var a2 = formatConversationByField(t3), u2 = a2.deleteFlag, m2 = a2.conversation;
          if (u2) {
            var h2 = this.service.model.deleteById(m2.conversationId);
            return !!(h2 && h2.unreadCount > 0);
          }
          return this.service.model.upsert(m2);
        }, t2.setModel = function setModel(t3) {
          var a2, u2 = map$6(a2 = filter(t3).call(t3, function(t4) {
            return !t4.deleteFlag;
          })).call(a2, function(t4) {
            return formatConversationByField(t4).conversation;
          });
          this.service.model.set(u2);
        }, t2.updateModelWithLastMessage = function updateModelWithLastMessage(t3, a2, u2, m2) {
          var h2 = this.service.model.getById(t3), g2 = a2 ? formatLastMessageFromMessage(this.core, a2, u2, m2) : void 0;
          if (!isEqual(h2 == null ? void 0 : h2.lastMessage, g2))
            if (h2) {
              var M2 = Dt(Dt({}, h2), { sortOrder: g2 ? h2.stickTop ? g2.messageRefer.createTime + 1e15 : g2.messageRefer.createTime : h2.sortOrder, lastMessage: g2 });
              this.service.model.upsert(M2), this.service.triggerConversationChanged([M2]);
            } else {
              this.initFieldVersion(t3, -1);
              var I2 = this.initConversation(t3, { lastMessage: g2 });
              this.service.model.upsert(I2), this.service.triggerConversationCreated(I2);
            }
        }, t2.updateModelByRevoke = function updateModelByRevoke(t3) {
          var a2 = this, u2 = [];
          forEach$1(t3).call(t3, function(t4) {
            var m2 = t4.postscript, h2 = t4.messageRefer, g2 = __rest(t4, ["postscript", "messageRefer"]), M2 = h2.conversationId, I2 = a2.service.model.getById(M2);
            I2 && I2.lastMessage && I2.lastMessage.messageRefer.messageClientId === h2.messageClientId && I2.lastMessage.lastMessageState !== 1 && (I2.lastMessage.lastMessageState = 1, m2 && (I2.lastMessage.text = m2), Dt(I2.lastMessage, g2), a2.service.model.upsert(I2), u2.push(I2));
          }), u2.length > 0 && this.service.triggerConversationChanged(u2);
        }, t2.compareAndUpdateModel = function compareAndUpdateModel(t3) {
          var a2 = this;
          this.core.logger.log("V2NIMConversation::compareAndUpdateModel", map$6(t3).call(t3, function(t4) {
            return t4.conversationId;
          }));
          var u2 = false, m2 = [];
          forEach$1(t3).call(t3, function(t4) {
            var h2 = a2.compare(t4);
            if (h2) {
              var g2 = a2.service.model.getById(t4.conversationId);
              a2.updateModel(h2) && (u2 = true);
              var M2 = a2.service.model.getById(t4.conversationId);
              M2 && (g2 ? m2.push(M2) : a2.service.triggerConversationCreated(M2));
            }
          }), m2.length > 0 && this.service.triggerConversationChanged(m2), u2 && this.service.unread.digestUnreadCountChange();
        }, t2.compareAndDeleteModel = function compareAndDeleteModel(t3) {
          var a2 = this;
          this.core.logger.log("V2NIMConversation::compareAndDeleteModel", t3);
          var u2 = reduce(t3).call(t3, function(t4, u3) {
            delete a2.fieldVersion[u3];
            var m2 = a2.service.model.deleteById(u3);
            return !!!!(m2 && m2.unreadCount > 0) || t4;
          }, false);
          this.service.emit("onConversationDeleted", t3), u2 && this.service.unread.digestUnreadCountChange();
        }, t2.compareAndDeleteGroupInModel = function compareAndDeleteGroupInModel(t3, a2) {
          var u2, m2 = this;
          this.core.logger.log("V2NIMConversation::compareAndDeleteGroupInModel", t3, a2);
          var h2 = [];
          forEach$1(u2 = Ht(this.fieldVersion)).call(u2, function(u3) {
            var g2 = m2.fieldVersion[u3];
            if (g2.groupIds === void 0 || t3 > g2.groupIds) {
              g2.groupIds = t3;
              var M2 = m2.service.model.getById(u3);
              if (M2 && M2.groupIds && M2.groupIds.length > 0) {
                var I2, S2 = filter(I2 = M2.groupIds).call(I2, function(t4) {
                  return t4 !== a2;
                });
                if (S2.length !== M2.groupIds.length) {
                  var T2 = Dt(Dt({}, M2), { groupIds: S2 });
                  m2.service.model.upsert(T2), T2 && h2.push(T2);
                }
              }
            }
          }), h2.length > 0 && this.service.triggerConversationChanged(h2);
        }, t2.compareAndClearUnreadInModel = function compareAndClearUnreadInModel(t3, a2, u2) {
          var m2 = this;
          this.core.logger.log("V2NIMConversation::compareAndClearUnreadInModel", t3, a2, u2);
          var h2 = [], g2 = [];
          if (a2 === 1)
            g2 = this.service.model.getAll();
          else if (u2) {
            var M2 = this.service.model.count();
            g2 = this.service.model.getByOption(0, M2, u2).conversationList;
          }
          forEach$1(g2).call(g2, function(a3) {
            var u3 = a3.conversationId, g3 = m2.fieldVersion[u3];
            if (g3.unreadCount === void 0 || t3 > g3.unreadCount) {
              g3.unreadCount = t3;
              var M3 = a3.unreadCount, I2 = Dt(Dt({}, a3), { unreadCount: 0 });
              m2.service.model.upsert(I2), M3 > 0 && h2.push(I2);
            }
          }), h2.length > 0 && this.service.triggerConversationChanged(h2), this.service.unread.digestUnreadCountChange();
        }, t2.backfillLastMsg = function backfillLastMsg(t3, a2) {
          var u2 = this, m2 = t3 = uniq(t3);
          (a2 || (m2 = filter(t3).call(t3, function(t4) {
            return u2.conversationIdsForBackFill[t4];
          }), m2.length !== 0)) && forEach$1(m2).call(m2, function(t4) {
            var a3 = get(u2.service.model.getById(t4), "lastMessage.messageRefer.messageClientId"), m3 = u2.service.hasMessageService ? u2.core.V2NIMMessageService.model.getLastMessageOfConversation(t4) : void 0;
            (m3 && m3.messageClientId) !== a3 && (u2.conversationIdsForBackFill[t4] = false, m3 ? u2.updateModelWithLastMessage(t4, m3, 2, m3.sendingState) : u2.updateModelWithLastMessage(t4, void 0, 2, 0));
          });
        }, V2NIMConversationVersionCacheImpl;
      }(), wm = { "28_1": "v2ConversationCreate", "28_2": "v2ConversationDelete", "28_3": "v2ConversationUpdate", "28_4": "v2ConversationSetTop", "28_5": "v2ConversationUnreadClear", "28_6": "v2ConversationGet", "28_7": "v2ConversationGetByIds", "28_8": "v2ConversationGetList", "28_17": "v2ConversationsDelete", "28_18": "v2ConversationsUnreadClear", "28_19": "v2ConversationSync", "28_20": "v2ConversationNotifySync", "28_21": "v2ConversationNotifySyncOnline", "28_23": "v2ConversationClearTotalUnread", "28_24": "v2ConversationClearTypeUnread", "28_25": "v2ConversationClearGroupUnread", "4_14": "syncConversationReadTime", "4_20": "syncSuperTeamReadTime", "4_22": "v2SyncSessionsWithMoreRoaming", "4_25": "v2SyncSessionReliableInfo", "30_16": "v2MarkConversationReadTime", "32_25": "v2MarkSuperTeamReadTime", "7_116": "v2MultiDeviceConversationReadTime", "21_125": "v2MultiDeviceSuperTeamReadTime" }, Rm = "V2NIMConversationService", Am = { conversationId: 1, type: 2, serverExtension: 3, groupIds: 4, lastMessage: 5, lastMessageState: 6, unreadCount: 7, stickTop: 8, sortOrder: 9, version: 10, deleteFlag: 11, createTime: 12, updateTime: 13 }, Nm = { type: 1, oneClickClearUnreadType: 2, oneClickClearUnreadConversationType: 3, oneClickClearUnreadGroupId: 4, oneClickClearUnreadVersion: 5, deleteConversationClearMessage: 6 }, xm = { v2ConversationCreate: { sid: 28, cid: 1, service: Rm, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Am) }] }, v2ConversationDelete: { sid: 28, cid: 2, service: Rm, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1, clearMessage: 2 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Am) }] }, v2ConversationUpdate: { sid: 28, cid: 3, service: Rm, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1, serverExtension: 2 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Am) }] }, v2ConversationSetTop: { sid: 28, cid: 4, service: Rm, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1, stickTop: 2 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Am) }] }, v2ConversationUnreadClear: { sid: 28, cid: 5, service: Rm, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Am) }] }, v2ConversationGet: { sid: 28, cid: 6, service: Rm, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Am) }] }, v2ConversationGetByIds: { sid: 28, cid: 7, service: Rm, params: [{ type: "Property", name: "tag", reflectMapper: { conversationIds: 1 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(Am) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGetList: { sid: 28, cid: 8, service: Rm, params: [{ type: "Property", name: "tag", reflectMapper: { cursor: 1, limit: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(Am) }, { type: "Property", name: "info", reflectMapper: { 1: "hasMore", 2: "offset" } }] }, v2ConversationsDelete: { sid: 28, cid: 17, service: Rm, params: [{ type: "Property", name: "tag", reflectMapper: { conversationIds: 1, clearMessage: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(Am) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationsUnreadClear: { sid: 28, cid: 18, service: Rm, params: [{ type: "Property", name: "tag", reflectMapper: { conversationIds: 1 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(Am) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationSync: { sid: 28, cid: 19, service: Rm, params: [{ type: "Property", name: "tag", reflectMapper: { cursor: 1 } }], response: [{ type: "Property", name: "info", reflectMapper: { 1: "nextCursor", 2: "syncType" } }] }, v2ConversationNotifySync: { sid: 28, cid: 20, service: Rm, response: [{ type: "Property", name: "info", reflectMapper: { 1: "nextCursor", 2: "syncType" } }, { type: "PropertyArray", name: "datas", reflectMapper: invert(Am) }] }, v2ConversationNotifySyncOnline: { sid: 28, cid: 21, service: Rm, response: [{ type: "Property", name: "info", reflectMapper: invert(Nm) }, { type: "PropertyArray", name: "datas", reflectMapper: invert(Am) }] }, v2ConversationClearTotalUnread: { sid: 28, cid: 23, service: Rm, response: [{ type: "Property", name: "info", reflectMapper: invert(Nm) }] }, v2ConversationClearTypeUnread: { sid: 28, cid: 24, service: Rm, params: [{ type: "Property", name: "tag", reflectMapper: { conversationType: 1 } }], response: [{ type: "Property", name: "info", reflectMapper: invert(Nm) }] }, v2ConversationClearGroupUnread: { sid: 28, cid: 25, service: Rm, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1 } }], response: [{ type: "Property", name: "info", reflectMapper: invert(Nm) }] }, syncConversationReadTime: { sid: 4, cid: 14, service: Rm, response: [{ type: "StrLongMap", name: "p2p" }, { type: "LongLongMap", name: "team" }, { type: "Long", name: "timetag" }] }, syncSuperTeamReadTime: { sid: 4, cid: 20, service: Rm, response: [{ type: "LongLongMap", name: "superTeam" }] }, v2SyncSessionsWithMoreRoaming: { sid: 4, cid: 22, service: Rm, response: [] }, v2SyncSessionReliableInfo: { sid: 4, cid: 25, service: Rm, response: [] }, v2MarkConversationReadTime: { sid: 30, cid: 16, service: Rm, params: [{ type: "Byte", name: "scene" }, { type: "String", name: "to" }, { type: "Long", name: "timetag" }] }, v2MarkSuperTeamReadTime: { sid: 32, cid: 25, service: Rm, params: [{ type: "Long", name: "to" }, { type: "Long", name: "timetag" }] }, v2MultiDeviceConversationReadTime: { sid: 30, cid: 116, service: Rm, response: [{ type: "Byte", name: "scene" }, { type: "String", name: "to" }, { type: "Long", name: "timetag" }] }, v2MultiDeviceSuperTeamReadTime: { sid: 21, cid: 125, service: Rm, response: [{ type: "Long", name: "to" }, { type: "Long", name: "timetag" }] } }, Om = function() {
        function V2NIMConversationUnreadImpl(t3, a2) {
          this.totalUnreadCount = void 0, this.unreadCountByFilter = {}, this.core = t3, this.service = a2;
        }
        var t2 = V2NIMConversationUnreadImpl.prototype;
        return t2.reset = function reset() {
          this.totalUnreadCount = void 0, this.unreadCountByFilter = {};
        }, t2.getTotalUnreadCount = function getTotalUnreadCount() {
          return this.totalUnreadCount;
        }, t2.resetTotalAfterSyncDone = function resetTotalAfterSyncDone() {
          var t3, a2 = reduce(t3 = this.service.model.getAll()).call(t3, function(t4, a3) {
            return t4 + (a3.unreadCount || 0);
          }, 0), u2 = this.totalUnreadCount;
          return u2 !== void 0 && u2 === a2 || (this.totalUnreadCount = a2, this.service.emit("onTotalUnreadCountChanged", a2)), a2;
        }, t2.digestUnreadCountChange = function digestUnreadCountChange() {
          this._digest();
        }, t2._digest = function _digest() {
          var t3, a2 = this, u2 = this.totalUnreadCount, m2 = reduce(t3 = this.service.model.getAll()).call(t3, function(t4, a3) {
            return t4 + (a3.unreadCount || 0);
          }, 0);
          this.core.logger.log("V2NIMConversation::digestUnreadCountChange:oldUnreadCount " + u2 + ", newUnreadCount " + m2), u2 !== m2 && (this.totalUnreadCount = m2, this.service.emit("onTotalUnreadCountChanged", m2));
          var h2 = Ht(this.unreadCountByFilter);
          forEach$1(h2).call(h2, function(t4) {
            var u3 = JSON.parse(t4), m3 = a2.getUnreadCountByFilter(u3), h3 = a2.unreadCountByFilter[t4];
            a2.unreadCountByFilter[t4] = m3, u3.equals = bind$1(equals).call(equals, u3), h3 !== m3 && a2.service.emit("onUnreadCountChangedByFilter", u3, m3);
          });
        }, t2.getUnreadCountByIds = function getUnreadCountByIds(t3) {
          var a2 = this;
          return reduce(t3).call(t3, function(t4, u2) {
            var m2 = a2.service.model.getById(u2);
            return t4 + (m2 && m2.unreadCount || 0);
          }, 0);
        }, t2.getUnreadCountByFilter = function getUnreadCountByFilter(t3) {
          var a2, u2 = this.service.model.count(), m2 = this.service.model.getByOption(0, u2, { conversationTypes: t3.conversationTypes, conversationGroupIds: t3.conversationGroupId ? [t3.conversationGroupId] : void 0, ignoreMuted: t3.ignoreMuted });
          return reduce(a2 = m2.conversationList).call(a2, function(t4, a3) {
            return t4 + (a3.unreadCount || 0);
          }, 0);
        }, t2.addFilter = function addFilter(t3) {
          var a2 = generateFilterKey(t3);
          if (this.unreadCountByFilter[a2] !== void 0)
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_RESOURCE_ALREADY_EXIST });
          var u2 = JSON.parse(a2), m2 = this.getUnreadCountByFilter(u2);
          this.unreadCountByFilter[a2] = m2, this.service.emit("onUnreadCountChangedByFilter", u2, m2);
        }, t2.deleteFilter = function deleteFilter(t3) {
          var a2 = generateFilterKey(t3);
          if (this.unreadCountByFilter[a2] === void 0)
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST });
          delete this.unreadCountByFilter[a2];
        }, V2NIMConversationUnreadImpl;
      }();
      function generateFilterKey(t2) {
        var a2 = t2.conversationTypes;
        return a2 && (a2 = sort(a2).call(a2)), Un({ conversationGroupId: t2.conversationGroupId, conversationTypes: a2, ignoreMuted: t2.ignoreMuted });
      }
      function equals(t2) {
        return Un(this) === generateFilterKey(t2);
      }
      var Pm = { createTime: { type: "number" }, updateTime: { type: "number" } };
      function formatConversationGroups(t2) {
        return t2 && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return formatConversationGroup(t3);
        }) : [];
      }
      function formatConversationGroup(t2) {
        return format(Pm, t2);
      }
      function formatFailedMap(t2) {
        var a2, u2 = JSON.parse(t2);
        return map$6(a2 = Ht(u2)).call(a2, function(t3) {
          return { conversationId: t3, error: new Pl({ code: u2[t3] }) };
        });
      }
      var Lm, Vm = { type: { type: "number" }, deleteVersion: { type: "number" }, conversationIds: { type: "object" } };
      function formatConversationGroupNotify(t2) {
        return format(Vm, t2);
      }
      !function(t2) {
        t2[t2.createConversationGroup = 1] = "createConversationGroup", t2[t2.deleteConversationGroup = 2] = "deleteConversationGroup", t2[t2.updateConversationGroup = 3] = "updateConversationGroup", t2[t2.addConversationToGroup = 4] = "addConversationToGroup", t2[t2.removeConversationFromGroup = 5] = "removeConversationFromGroup";
      }(Lm || (Lm = {}));
      var Um = function(t2) {
        function V2NIMConversationServiceImpl(a3, u2) {
          var m2;
          return u2 === void 0 && (u2 = {}), (m2 = t2.call(this, "V2NIMConversationService", a3) || this).config = {}, m2.model = new Zp(), m2.versionCache = new km(m2.core, Qe(m2)), m2.unread = new Om(m2.core, Qe(m2)), m2.core._registerDep(om, "V2NIMConversationIdUtil"), m2.core.options.apiVersion !== "v2" ? Qe(m2) : (registerParser({ cmdMap: wm, cmdConfig: xm }), m2.setOptions(u2), m2.setListener(), m2);
        }
        Nt(V2NIMConversationServiceImpl, t2);
        var a2 = V2NIMConversationServiceImpl.prototype;
        return a2.setOptions = function setOptions(t3) {
          this.config = Dt(this.config, t3);
        }, a2.setListener = function setListener() {
          var t3 = this;
          this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", function() {
            t3.versionCache.doSync();
          }), this.core.eventBus.on("V2NIMConversationService/conversationOnlineSyncNotify", function(a3, u2) {
            var m2;
            ((m2 = u2 == null ? void 0 : u2.messageConfig) === null || m2 === void 0 ? void 0 : m2.lastMessageUpdateEnabled) !== false && (a3.content.info = deserialize(a3.content.info, invert(Nm)), a3.content.data = deserialize(a3.content.data, invert(Am)), u2 && (a3.content.data.lastMessage = formatLastMessageFromMessage(t3.core, u2, 0)), a3.content.datas = [a3.content.data], t3.v2ConversationNotifySyncOnlineHandler.call(t3, a3));
          }), this.core.eventBus.on("V2NIMConversationService/sendMessage", function(a3, u2) {
            var m2, h2;
            u2 === 1 && ((m2 = a3.messageConfig) === null || m2 === void 0 ? void 0 : m2.historyEnabled) === true || ((h2 = a3 == null ? void 0 : a3.messageConfig) === null || h2 === void 0 ? void 0 : h2.lastMessageUpdateEnabled) !== false && t3.versionCache.updateModelWithLastMessage(a3.conversationId, a3, 2, u2);
          }), this.core.eventBus.on("V2NIMConversationService/deleteMessages", function(a3) {
            var u2 = map$6(a3).call(a3, function(t4) {
              return t4.messageRefer.conversationId;
            });
            t3.versionCache.backfillLastMsg(u2, true);
          }), this.core.eventBus.on("V2NIMConversationService/revokeMessages", function(a3) {
            t3.versionCache.updateModelByRevoke(a3);
          }), this.core.eventBus.on("V2NIMConversationService/checkBackFill", function(a3) {
            t3.versionCache.backfillLastMsg(a3, false);
          }), this.core.eventBus.on("V2NIMConversationService/setMute", function(a3, u2) {
            var m2 = t3.model.getById(a3);
            m2 && m2.mute !== u2 && (m2.mute = u2, t3.model.upsert(m2), t3.emit("onConversationChanged", [m2]));
          });
        }, a2.reset = function reset() {
          this.versionCache.reset(), this.model.reset(), this.unread.reset();
        }, a2.emit = function emit(a3) {
          for (var u2, m2, h2, g2, M2 = this.name + "::emit " + a3.toString(), I2 = arguments.length, S2 = new Array(I2 > 1 ? I2 - 1 : 0), T2 = 1; T2 < I2; T2++)
            S2[T2 - 1] = arguments[T2];
          if (a3 === "onConversationCreated") {
            var C2 = S2[0];
            this.logger.log("" + M2, "id:" + C2.conversationId + ";unread:" + C2.unreadCount + ";lastMsg:" + ((h2 = C2.lastMessage) === null || h2 === void 0 ? void 0 : h2.messageRefer.messageClientId) + "/" + ((g2 = C2.lastMessage) === null || g2 === void 0 ? void 0 : g2.messageRefer.messageServerId));
          } else if (a3 === "onConversationChanged") {
            var b2 = S2[0];
            this.logger.log("" + M2, map$6(b2).call(b2, function(t3) {
              var a4, u3;
              return "id:" + t3.conversationId + ";unread:" + t3.unreadCount + ";lastMsg:" + ((a4 = t3.lastMessage) === null || a4 === void 0 ? void 0 : a4.messageRefer.messageClientId) + "/" + ((u3 = t3.lastMessage) === null || u3 === void 0 ? void 0 : u3.messageRefer.messageServerId);
            }));
          } else {
            var E2, k2;
            (E2 = this.logger).log.apply(E2, concat(k2 = ["" + M2]).call(k2, S2));
          }
          return (u2 = t2.prototype.emit).call.apply(u2, concat(m2 = [this, a3]).call(m2, S2));
        }, a2.getConversationList = function getConversationList(t3, a3) {
          this.checkV2(), validate({ offset: { type: "number", min: 0 } }, { offset: t3 }, "", true), validate({ limit: { type: "number", min: 1 } }, { limit: a3 }, "", true), this.core.V2NIMLoginService.checkIllegalState();
          var u2 = this.model.getByOption(t3, a3, {});
          return u2.conversationList = this.computedFieldForConversations(u2.conversationList), zi.resolve(u2);
        }, a2.getConversationListByOption = function getConversationListByOption(t3, a3, u2) {
          this.checkV2(), validate({ offset: { type: "number", min: 0 } }, { offset: t3 }, "", true), validate({ limit: { type: "number", min: 1 } }, { limit: a3 }, "", true), validate({ option: { type: "object", required: true, rules: { conversationTypes: { type: "array", itemType: "number", required: false }, onlyUnread: { type: "boolean", required: false }, conversationGroupIds: { type: "array", itemType: "string", required: false } } } }, { option: u2 }, "", true), this.core.V2NIMLoginService.checkIllegalState();
          var m2 = this.model.getByOption(t3, a3, u2);
          return m2.conversationList = this.computedFieldForConversations(m2.conversationList), zi.resolve(m2);
        }, a2.getConversation = function getConversation(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a3;
            return Ql.wrap(function _callee$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    if (this.checkV2(), validateConversationId(this.core.account, t3), this.core.V2NIMLoginService.checkIllegalState(), !(a3 = this.model.getById(t3))) {
                      u2.next = 8;
                      break;
                    }
                    return u2.abrupt("return", this.computedFieldForConversation(a3));
                  case 8:
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST });
                  case 9:
                  case "end":
                    return u2.stop();
                }
            }, _callee, this);
          }));
        }, a2.getConversationListByIds = function getConversationListByIds(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a3, u2, m2 = this;
            return Ql.wrap(function _callee2$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return this.checkV2(), validate({ conversationIds: { type: "array", itemType: "string", min: 1 } }, { conversationIds: t3 }, "", true), this.core.V2NIMLoginService.checkIllegalState(), u2 = filter(a3 = map$6(t3).call(t3, function(t4) {
                      return m2.model.getById(t4);
                    })).call(a3, function(t4) {
                      return !!t4;
                    }), u2 = this.computedFieldForConversations(u2), h2.abrupt("return", u2);
                  case 6:
                  case "end":
                    return h2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.createConversation = function createConversation(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee3$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return this.checkV2(), validateConversationId(this.core.account, t3), g2.next = 4, this.core.sendCmd("v2ConversationCreate", { tag: { conversationId: t3 } });
                  case 4:
                    if (a3 = g2.sent, u2 = get(a3, "content.data"), m2 = formatConversationField(this.core, u2), this.versionCache.compareAndUpdateModel([m2]), !(h2 = this.model.getById(t3))) {
                      g2.next = 13;
                      break;
                    }
                    return g2.abrupt("return", this.computedFieldForConversation(h2));
                  case 13:
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST });
                  case 14:
                  case "end":
                    return g2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.deleteConversation = function deleteConversation(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.checkV2(), validateConversationId(this.core.account, t3), validate({ clearMessage: { type: "boolean", required: false } }, { clearMessage: a3 }, "", true), u2.prev = 3, u2.next = 6, this.core.sendCmd("v2ConversationDelete", { tag: { conversationId: t3, clearMessage: Number(a3 || false) } });
                  case 6:
                    u2.next = 11;
                    break;
                  case 8:
                    u2.prev = 8, u2.t0 = u2.catch(3), this.logger.warn("V2NIMConversationService:deleteConversation: delete conversation failed: " + t3);
                  case 11:
                    this.model.getById(t3) && (a3 && this.core.eventBus.emit("V2NIMConversationService/deleteConversation", [t3]), this.versionCache.compareAndDeleteModel([t3]));
                  case 12:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this, [[3, 8]]);
          }));
        }, a2.deleteConversationListByIds = function deleteConversationListByIds(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var u2, m2, h2, g2 = this;
            return Ql.wrap(function _callee5$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return this.checkV2(), validate({ conversationIds: { type: "array", itemType: "string", min: 1 } }, { conversationIds: t3 }, "", true), validate({ clearMessage: { type: "boolean", required: false } }, { clearMessage: a3 }, "", true), M2.next = 5, this.core.sendCmd("v2ConversationsDelete", { tag: { conversationIds: Un(t3), clearMessage: Number(a3 || false) } });
                  case 5:
                    return u2 = M2.sent, m2 = formatFailedMap(get(u2, "content.info.failedMap")), (h2 = filter(m2).call(m2, function(t4) {
                      return t4.error.code !== Nl.V2NIM_ERROR_CODE_CONVERSATION_NOT_EXIST || !g2.model.getById(t4.conversationId);
                    })).length < t3.length && (a3 && this.core.eventBus.emit("V2NIMConversationService/deleteConversation", t3), this.versionCache.compareAndDeleteModel(t3)), M2.abrupt("return", h2);
                  case 10:
                  case "end":
                    return M2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.stickTopConversation = function stickTopConversation(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var u2, m2, h2;
            return Ql.wrap(function _callee6$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return this.checkV2(), validateConversationId(this.core.account, t3), validate({ stickTop: { type: "boolean" } }, { stickTop: a3 }, "", true), g2.next = 5, this.core.sendCmd("v2ConversationSetTop", { tag: { conversationId: t3, stickTop: Number(a3) } });
                  case 5:
                    u2 = g2.sent, m2 = get(u2, "content.data"), h2 = formatConversationField(this.core, m2), this.versionCache.compareAndUpdateModel([h2]);
                  case 9:
                  case "end":
                    return g2.stop();
                }
            }, _callee6, this);
          }));
        }, a2.updateConversation = function updateConversation(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            var u2, m2, h2;
            return Ql.wrap(function _callee7$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return this.checkV2(), validateConversationId(this.core.account, t3), validate({ updateInfo: { type: "object", required: true, rules: { serverExtension: { type: "string" } } } }, { updateInfo: a3 }, "", true), g2.next = 5, this.core.sendCmd("v2ConversationUpdate", { tag: Dt({ conversationId: t3 }, a3) });
                  case 5:
                    u2 = g2.sent, m2 = get(u2, "content.data"), h2 = formatConversationField(this.core, m2), this.versionCache.compareAndUpdateModel([h2]);
                  case 9:
                  case "end":
                    return g2.stop();
                }
            }, _callee7, this);
          }));
        }, a2.updateConversationLocalExtension = function updateConversationLocalExtension(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var u2, m2;
            return Ql.wrap(function _callee8$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    if (this.checkV2(), validateConversationId(this.core.account, t3), validate({ localExtension: { type: "string" } }, { localExtension: a3 }, "", true), u2 = this.model.getById(t3)) {
                      h2.next = 6;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST });
                  case 6:
                    if (u2.localExtension !== a3) {
                      h2.next = 8;
                      break;
                    }
                    return h2.abrupt("return");
                  case 8:
                    m2 = Dt(Dt({}, u2), { localExtension: a3 }), this.model.upsert(m2), this.triggerConversationChanged([m2]);
                  case 11:
                  case "end":
                    return h2.stop();
                }
            }, _callee8, this);
          }));
        }, a2.getTotalUnreadCount = function getTotalUnreadCount() {
          return this.checkV2(), this.unread.getTotalUnreadCount() || 0;
        }, a2.getUnreadCountByIds = function getUnreadCountByIds(t3) {
          this.checkV2(), validate({ conversationIds: { type: "array", itemType: "string", min: 1 } }, { conversationIds: t3 }, "", true);
          var a3 = this.unread.getUnreadCountByIds(t3);
          return zi.resolve(a3);
        }, a2.getUnreadCountByFilter = function getUnreadCountByFilter(t3) {
          this.checkV2(), this.valiteFilter(t3);
          var a3 = this.unread.getUnreadCountByFilter(t3);
          return zi.resolve(a3);
        }, a2.clearTotalUnreadCount = function clearTotalUnreadCount() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            var t3, a3;
            return Ql.wrap(function _callee9$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.checkV2(), u2.next = 3, this.core.sendCmd("v2ConversationClearTotalUnread");
                  case 3:
                    t3 = u2.sent, a3 = formatConversationNotify(get(t3, "content.info")), this.versionCache.compareAndClearUnreadInModel(a3.oneClickClearUnreadVersion, a3.oneClickClearUnreadType);
                  case 6:
                  case "end":
                    return u2.stop();
                }
            }, _callee9, this);
          }));
        }, a2.clearUnreadCountByIds = function clearUnreadCountByIds(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            var a3, u2, m2;
            return Ql.wrap(function _callee10$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return this.checkV2(), validate({ conversationIds: { type: "array", itemType: "string", min: 1 } }, { conversationIds: t3 }, "", true), h2.next = 4, this.core.sendCmd("v2ConversationsUnreadClear", { tag: { conversationIds: Un(t3) } });
                  case 4:
                    return a3 = h2.sent, u2 = formatConversationFields(this.core, get(a3, "content.datas")), m2 = formatFailedMap(get(a3, "content.info.failedMap")), this.versionCache.compareAndUpdateModel(u2), h2.abrupt("return", m2);
                  case 9:
                  case "end":
                    return h2.stop();
                }
            }, _callee10, this);
          }));
        }, a2.clearUnreadCountByGroupId = function clearUnreadCountByGroupId(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            return Ql.wrap(function _callee11$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this.checkV2(), validate({ groupId: { type: "string" } }, { groupId: t3 }, "", true), a3.next = 4, this.core.sendCmd("v2ConversationClearGroupUnread", { tag: { groupId: t3 } });
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee11, this);
          }));
        }, a2.clearUnreadCountByTypes = function clearUnreadCountByTypes(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            var a3, u2;
            return Ql.wrap(function _callee12$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this.checkV2(), validate({ types: { type: "array", itemType: "number", min: 1 } }, { types: t3 }, "", true), m2.next = 4, this.core.sendCmd("v2ConversationClearTypeUnread", { tag: { conversationType: Un(t3) } });
                  case 4:
                    a3 = m2.sent, u2 = formatConversationNotify(get(a3, "content.info")), this.versionCache.compareAndClearUnreadInModel(u2.oneClickClearUnreadVersion, u2.oneClickClearUnreadType, { conversationTypes: u2.oneClickClearUnreadConversationType });
                  case 7:
                  case "end":
                    return m2.stop();
                }
            }, _callee12, this);
          }));
        }, a2.markConversationRead = function markConversationRead(t3) {
          var a3, u2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            var m2, h2, g2, M2, I2;
            return Ql.wrap(function _callee13$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    if (this.checkV2(), this.checkLogin(), validateConversationId(this.core.account, t3), m2 = this.model.getById(t3)) {
                      S2.next = 6;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Conversation not exist" } });
                  case 6:
                    if (h2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(t3), g2 = this.core.V2NIMConversationIdUtil.parseConversationType(t3), M2 = this.model.getReadTime(t3), !((u2 = (a3 = m2 == null ? void 0 : m2.lastMessage) === null || a3 === void 0 ? void 0 : a3.messageRefer) === null || u2 === void 0 ? void 0 : u2.createTime)) {
                      S2.next = 13;
                      break;
                    }
                    I2 = m2.lastMessage.messageRefer.createTime, S2.next = 19;
                    break;
                  case 13:
                    if (!this.core.timeOrigin.checkNodeReliable()) {
                      S2.next = 17;
                      break;
                    }
                    I2 = this.core.timeOrigin.getNTPTime(), S2.next = 19;
                    break;
                  case 17:
                    return this.logger.log("markConversationRead", "NTP time is not reliable", t3), S2.abrupt("return", M2 || 0);
                  case 19:
                    if (!(M2 >= I2)) {
                      S2.next = 22;
                      break;
                    }
                    return this.logger.log("markConversationRead", "currentReadTime >= readTime", t3, M2, I2), S2.abrupt("return", M2);
                  case 22:
                    if (g2 !== 3) {
                      S2.next = 27;
                      break;
                    }
                    return S2.next = 25, this.core.sendCmd("v2MarkSuperTeamReadTime", { timetag: I2, to: h2 });
                  case 25:
                    S2.next = 29;
                    break;
                  case 27:
                    return S2.next = 29, this.core.sendCmd("v2MarkConversationReadTime", { scene: g2 === 1 ? 0 : g2 === 2 ? 1 : 2, timetag: I2, to: h2 });
                  case 29:
                    return this.model.updateReadTime(t3, I2), S2.abrupt("return", I2);
                  case 31:
                  case "end":
                    return S2.stop();
                }
            }, _callee13, this);
          }));
        }, a2.getConversationReadTime = function getConversationReadTime(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee14() {
            return Ql.wrap(function _callee14$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this.checkV2(), validateConversationId(this.core.account, t3), a3.abrupt("return", this.model.getReadTime(t3));
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee14, this);
          }));
        }, a2.subscribeUnreadCountByFilter = function subscribeUnreadCountByFilter(t3) {
          var a3;
          this.checkV2(), this.checkLogin(), this.valiteFilter(t3), ((a3 = t3.conversationTypes) === null || a3 === void 0 ? void 0 : a3.length) === 0 && delete t3.conversationTypes, this.unread.addFilter(t3);
        }, a2.unsubscribeUnreadCountByFilter = function unsubscribeUnreadCountByFilter(t3) {
          var a3;
          this.checkV2(), this.checkLogin(), this.valiteFilter(t3), ((a3 = t3.conversationTypes) === null || a3 === void 0 ? void 0 : a3.length) === 0 && delete t3.conversationTypes, this.unread.deleteFilter(t3);
        }, a2.v2ConversationNotifySyncHandler = function v2ConversationNotifySyncHandler(t3) {
          this.versionCache.recvConversationFromSyncAction(t3);
        }, a2.v2ConversationNotifySyncOnlineHandler = function v2ConversationNotifySyncOnlineHandler(t3) {
          this.versionCache.recvConversation(t3);
        }, a2.syncConversationReadTimeHandler = function syncConversationReadTimeHandler(t3) {
          var a3, u2, m2;
          if ((a3 = t3 == null ? void 0 : t3.content) === null || a3 === void 0 ? void 0 : a3.p2p)
            for (var h2 = 0, g2 = Xp(t3.content.p2p); h2 < g2.length; h2++) {
              var M2 = g2[h2], I2 = M2[0], S2 = M2[1];
              this.model.updateReadTime(this.core.V2NIMConversationIdUtil.p2pConversationId(I2), S2), this.emit("onConversationReadTimeUpdated", this.core.V2NIMConversationIdUtil.p2pConversationId(I2), S2);
            }
          if ((m2 = (u2 = t3 == null ? void 0 : t3.content) === null || u2 === void 0 ? void 0 : u2.team) === null || m2 === void 0 ? void 0 : m2.m_map)
            for (var T2 = 0, C2 = Xp(t3.content.team.m_map); T2 < C2.length; T2++) {
              var b2 = C2[T2], E2 = b2[0], k2 = b2[1];
              this.model.updateReadTime(this.core.V2NIMConversationIdUtil.teamConversationId(E2), k2), this.emit("onConversationReadTimeUpdated", this.core.V2NIMConversationIdUtil.teamConversationId(E2), k2);
            }
        }, a2.syncSuperTeamReadTimeHandler = function syncSuperTeamReadTimeHandler(t3) {
          var a3, u2;
          if ((u2 = (a3 = t3 == null ? void 0 : t3.content) === null || a3 === void 0 ? void 0 : a3.superTeam) === null || u2 === void 0 ? void 0 : u2.m_map)
            for (var m2 = 0, h2 = Xp(t3.content.superTeam.m_map); m2 < h2.length; m2++) {
              var g2 = h2[m2], M2 = g2[0], I2 = g2[1];
              this.model.updateReadTime(this.core.V2NIMConversationIdUtil.superTeamConversationId(M2), I2), this.emit("onConversationReadTimeUpdated", this.core.V2NIMConversationIdUtil.superTeamConversationId(M2), I2);
            }
        }, a2.v2MultiDeviceConversationReadTimeHandler = function v2MultiDeviceConversationReadTimeHandler(t3) {
          var a3;
          ((a3 = t3 == null ? void 0 : t3.content) === null || a3 === void 0 ? void 0 : a3.to) && (t3.content.scene === 0 ? (this.model.updateReadTime(this.core.V2NIMConversationIdUtil.p2pConversationId(t3.content.to), t3.content.timetag), this.emit("onConversationReadTimeUpdated", this.core.V2NIMConversationIdUtil.p2pConversationId(t3.content.to), t3.content.timetag)) : (this.model.updateReadTime(this.core.V2NIMConversationIdUtil.teamConversationId(t3.content.to), t3.content.timetag), this.emit("onConversationReadTimeUpdated", this.core.V2NIMConversationIdUtil.teamConversationId(t3.content.to), t3.content.timetag)));
        }, a2.v2MultiDeviceSuperTeamReadTimeHandler = function v2MultiDeviceSuperTeamReadTimeHandler(t3) {
          var a3;
          ((a3 = t3 == null ? void 0 : t3.content) === null || a3 === void 0 ? void 0 : a3.to) && (this.model.updateReadTime(this.core.V2NIMConversationIdUtil.superTeamConversationId(t3.content.to), t3.content.timetag), this.emit("onConversationReadTimeUpdated", this.core.V2NIMConversationIdUtil.superTeamConversationId(t3.content.to), t3.content.timetag));
        }, a2.valiteFilter = function valiteFilter(t3) {
          if (validate({ filter: { type: "object", required: true, rules: { conversationTypes: { type: "array", itemType: "number", required: false }, conversationGroupId: { type: "string", allowEmpty: false, required: false }, ignoreMuted: { type: "boolean", required: false } } } }, { filter: t3 }, "", true), t3.conversationTypes === void 0 && t3.conversationGroupId === void 0 && t3.ignoreMuted !== true)
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Filter cannot be empty" } });
        }, a2.computedFieldForConversations = function computedFieldForConversations(t3) {
          var a3 = this;
          return map$6(t3).call(t3, function(t4) {
            return a3.computedFieldForConversation(t4);
          });
        }, a2.computedFieldForConversation = function computedFieldForConversation(t3) {
          var a3, u2, m2, h2, g2;
          if (t3.type === 0)
            return t3;
          var M2 = this.core.V2NIMConversationIdUtil.parseConversationType(t3.conversationId), I2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(t3.conversationId), S2 = {};
          if (((a3 = this.core.V2NIMSettingService) === null || a3 === void 0 ? void 0 : a3.name) && (S2.mute = this.core.V2NIMSettingService.getConversationMuteStatus(t3.conversationId)), M2 === 1 && this.hasUserService) {
            var T2, C2 = this.core.V2NIMUserService.model.getUser(I2), b2 = this.hasFriendService ? this.core.V2NIMFriendService.model.getFriend(I2) : void 0;
            t3.conversationId !== ((u2 = t3.lastMessage) === null || u2 === void 0 ? void 0 : u2.messageRefer.conversationId) || ((m2 = t3.lastMessage) === null || m2 === void 0 ? void 0 : m2.lastMessageState) !== 0 && ((h2 = t3.lastMessage) === null || h2 === void 0 ? void 0 : h2.lastMessageState) !== 2 || (T2 = (g2 = t3.lastMessage) === null || g2 === void 0 ? void 0 : g2.senderName), S2.name = (b2 == null ? void 0 : b2.alias) || (C2 == null ? void 0 : C2.name) || T2 || I2, S2.avatar = (C2 == null ? void 0 : C2.avatar) || "";
          } else if (M2 === 2 && this.hasTeamService) {
            var E2 = this.core.V2NIMTeamService.model.getById(I2, 1);
            S2.name = (E2 == null ? void 0 : E2.name) || I2, S2.avatar = (E2 == null ? void 0 : E2.avatar) || "";
          } else if (M2 === 3 && this.hasTeamService) {
            var k2 = this.core.V2NIMTeamService.model.getById(I2, 2);
            S2.name = (k2 == null ? void 0 : k2.name) || I2, S2.avatar = (k2 == null ? void 0 : k2.avatar) || "";
          }
          return Dt(t3, S2), t3;
        }, a2.triggerConversationChanged = function triggerConversationChanged(t3) {
          t3 = this.computedFieldForConversations(t3), t3 = JSON.parse(Un(t3)), forEach$1(t3).call(t3, function(t4) {
            t4.lastMessage || (t4.lastMessage = void 0), delete t4.lastMessageState;
          }), this.emit("onConversationChanged", t3);
        }, a2.triggerConversationCreated = function triggerConversationCreated(t3) {
          t3 = this.computedFieldForConversation(t3), delete (t3 = JSON.parse(Un(t3))).lastMessageState, this.emit("onConversationCreated", t3);
        }, Ye(V2NIMConversationServiceImpl, [{ key: "hasUserService", get: function get2() {
          var t3;
          return !!((t3 = this.core.V2NIMUserService) === null || t3 === void 0 ? void 0 : t3.name);
        } }, { key: "hasFriendService", get: function get2() {
          var t3;
          return !!((t3 = this.core.V2NIMFriendService) === null || t3 === void 0 ? void 0 : t3.name);
        } }, { key: "hasTeamService", get: function get2() {
          var t3;
          return !!((t3 = this.core.V2NIMTeamService) === null || t3 === void 0 ? void 0 : t3.name);
        } }, { key: "hasMessageService", get: function get2() {
          var t3;
          return !!((t3 = this.core.V2NIMMessageService) === null || t3 === void 0 ? void 0 : t3.name);
        } }]), V2NIMConversationServiceImpl;
      }(ip), Dm = { "28_9": "v2ConversationGroupCreate", "28_10": "v2ConversationGroupDelete", "28_11": "v2ConversationGroupUpdate", "28_12": "v2ConversationGroupGet", "28_13": "v2ConversationGroupsGet", "28_14": "v2ConversationGroupListGet", "28_15": "v2ConversationGroupAddTo", "28_16": "v2ConversationGroupRemoveFrom", "28_22": "v2ConversationGroupNotifySyncOnline" }, qm = "V2NIMConversationGroupService", Bm = { groupId: 1, name: 2, serverExtension: 3, createTime: 4, updateTime: 5 }, Fm = { v2ConversationGroupCreate: { sid: 28, cid: 9, service: qm, params: [{ type: "Property", name: "tag", reflectMapper: { conversationIds: 1, name: 2, serverExtension: 3 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Bm) }, { type: "PropertyArray", name: "conversations", reflectMapper: invert(Am) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGroupDelete: { sid: 28, cid: 10, service: qm, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1 } }], response: [{ type: "Property", name: "info", reflectMapper: { 1: "type", 2: "deleteVersion", 3: "groupList" } }] }, v2ConversationGroupUpdate: { sid: 28, cid: 11, service: qm, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1, name: 2, serverExtension: 3 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Bm) }] }, v2ConversationGroupGet: { sid: 28, cid: 12, service: qm, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Bm) }] }, v2ConversationGroupsGet: { sid: 28, cid: 13, service: qm, params: [{ type: "Property", name: "tag", reflectMapper: { groupIds: 1 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(Bm) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGroupListGet: { sid: 28, cid: 14, service: qm, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(Bm) }] }, v2ConversationGroupAddTo: { sid: 28, cid: 15, service: qm, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1, conversationIds: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(Am) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGroupRemoveFrom: { sid: 28, cid: 16, service: qm, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1, conversationIds: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(Am) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGroupNotifySyncOnline: { sid: 28, cid: 22, service: qm, response: [{ type: "Property", name: "info", reflectMapper: { 1: "type", 2: "deleteVersion", 3: "conversationIds" } }, { type: "Property", name: "data", reflectMapper: invert(Bm) }] } }, Gm = function(t2) {
        function V2NIMConversationGroupServiceImpl(a3, u2) {
          var m2;
          return u2 === void 0 && (u2 = {}), (m2 = t2.call(this, "V2NIMConversationGroupService", a3) || this).config = {}, m2.core._registerDep(Um, "V2NIMConversationService"), m2.core.options.apiVersion !== "v2" ? Qe(m2) : (registerParser({ cmdMap: Dm, cmdConfig: Fm }), m2.setOptions(u2), m2);
        }
        Nt(V2NIMConversationGroupServiceImpl, t2);
        var a2 = V2NIMConversationGroupServiceImpl.prototype;
        return a2.setOptions = function setOptions(t3) {
          this.config = Dt(this.config, t3);
        }, a2.emit = function emit(a3) {
          for (var u2, m2, h2 = this.name + "::emit " + a3.toString(), g2 = arguments.length, M2 = new Array(g2 > 1 ? g2 - 1 : 0), I2 = 1; I2 < g2; I2++)
            M2[I2 - 1] = arguments[I2];
          if (a3 === "onConversationsAddedToGroup") {
            var S2 = M2[0], T2 = M2[1];
            this.logger.log("" + h2, "groupId:" + S2, "conversations:" + map$6(T2).call(T2, function(t3) {
              return t3.conversationId;
            }).join(","));
          } else {
            var C2, b2;
            (C2 = this.logger).log.apply(C2, concat(b2 = ["" + h2]).call(b2, M2));
          }
          return (u2 = t2.prototype.emit).call.apply(u2, concat(m2 = [this, a3]).call(m2, M2));
        }, a2.createConversationGroup = function createConversationGroup(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var m2, h2, g2, M2, I2, S2 = this;
            return Ql.wrap(function _callee$(T2) {
              for (; ; )
                switch (T2.prev = T2.next) {
                  case 0:
                    return this.checkV2(), validate({ name: { type: "string", allowEmpty: false } }, { name: t3 }, "", true), validate({ serverExtension: { type: "string", required: false } }, { serverExtension: a3 }, "", true), validate({ conversationIds: { type: "array", itemType: "string", required: false } }, { conversationIds: u2 }, "", true), T2.next = 6, this.core.sendCmd("v2ConversationGroupCreate", { tag: { name: t3, serverExtension: a3 || "", conversationIds: u2 && Un(u2) } });
                  case 6:
                    return m2 = T2.sent, h2 = formatConversationGroup(get(m2, "content.data")), g2 = formatConversationFields(this.core, get(m2, "content.conversations")), M2 = formatFailedMap(get(m2, "content.info.failedMap")), this.emit("onConversationGroupCreated", h2), g2.length > 0 && (this.core.V2NIMConversationService.versionCache.compareAndUpdateModel(g2), this.emit("onConversationsAddedToGroup", h2.groupId, filter(I2 = map$6(g2).call(g2, function(t4) {
                      return S2.core.V2NIMConversationService.model.getById(t4.conversationId);
                    })).call(I2, function(t4) {
                      return !!t4;
                    }))), T2.abrupt("return", { group: h2, failedList: M2 });
                  case 13:
                  case "end":
                    return T2.stop();
                }
            }, _callee, this);
          }));
        }, a2.deleteConversationGroup = function deleteConversationGroup(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a3, u2;
            return Ql.wrap(function _callee2$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this.checkV2(), validate({ groupId: { type: "string", allowEmpty: false } }, { groupId: t3 }, "", true), m2.next = 4, this.core.sendCmd("v2ConversationGroupDelete", { tag: { groupId: t3 } });
                  case 4:
                    a3 = m2.sent, u2 = formatConversationGroupNotify(get(a3, "content.info")), this.core.V2NIMConversationService.versionCache.compareAndDeleteGroupInModel(u2.deleteVersion, t3), this.emit("onConversationGroupDeleted", t3);
                  case 8:
                  case "end":
                    return m2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.updateConversationGroup = function updateConversationGroup(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var m2, h2;
            return Ql.wrap(function _callee3$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    if (this.checkV2(), validate({ groupId: { type: "string", allowEmpty: false } }, { groupId: t3 }, "", true), validate({ name: { type: "string", required: false } }, { name: a3 }, "", true), validate({ serverExtension: { type: "string", required: false } }, { serverExtension: u2 }, "", true), a3 !== void 0 || u2 !== void 0) {
                      g2.next = 6;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER });
                  case 6:
                    return g2.next = 8, this.core.sendCmd("v2ConversationGroupUpdate", { tag: { groupId: t3, name: a3, serverExtension: u2 } });
                  case 8:
                    m2 = g2.sent, h2 = formatConversationGroup(get(m2, "content.data")), this.emit("onConversationGroupChanged", h2);
                  case 11:
                  case "end":
                    return g2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.addConversationsToGroup = function addConversationsToGroup(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var u2, m2, h2, g2, M2, I2, S2 = this;
            return Ql.wrap(function _callee4$(T2) {
              for (; ; )
                switch (T2.prev = T2.next) {
                  case 0:
                    return this.checkV2(), validate({ groupId: { type: "string", allowEmpty: false } }, { groupId: t3 }, "", true), validate({ conversationIds: { type: "array", itemType: "string", min: 1, allowEmpty: false } }, { conversationIds: a3 }, "", true), T2.next = 5, this.core.sendCmd("v2ConversationGroupAddTo", { tag: { groupId: t3, conversationIds: Un(a3) } });
                  case 5:
                    return m2 = T2.sent, h2 = get(m2, "content.info.failedMap") || "", g2 = [], h2 && (g2 = formatFailedMap(h2)), M2 = formatConversationFields(this.core, get(m2, "content.datas")), this.core.V2NIMConversationService.versionCache.compareAndUpdateModel(M2), (I2 = filter(u2 = map$6(M2).call(M2, function(t4) {
                      return S2.core.V2NIMConversationService.model.getById(t4.conversationId);
                    })).call(u2, function(t4) {
                      return !!t4;
                    })).length > 0 && this.emit("onConversationsAddedToGroup", t3, I2), T2.abrupt("return", g2);
                  case 14:
                  case "end":
                    return T2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.removeConversationsFromGroup = function removeConversationsFromGroup(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var u2, m2, h2, g2;
            return Ql.wrap(function _callee5$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return this.checkV2(), validate({ groupId: { type: "string", allowEmpty: false } }, { groupId: t3 }, "", true), validate({ conversationIds: { type: "array", itemType: "string", min: 1, allowEmpty: false } }, { conversationIds: a3 }, "", true), M2.next = 5, this.core.sendCmd("v2ConversationGroupRemoveFrom", { tag: { groupId: t3, conversationIds: Un(a3) } });
                  case 5:
                    return u2 = M2.sent, m2 = get(u2, "content.info.failedMap") || "", h2 = [], m2 && (h2 = formatFailedMap(m2)), g2 = formatConversationFields(this.core, get(u2, "content.datas")), this.core.V2NIMConversationService.versionCache.compareAndUpdateModel(g2), this.emit("onConversationsRemovedFromGroup", t3, map$6(g2).call(g2, function(t4) {
                      return t4.conversationId;
                    })), M2.abrupt("return", h2);
                  case 13:
                  case "end":
                    return M2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.getConversationGroup = function getConversationGroup(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var a3;
            return Ql.wrap(function _callee6$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.checkV2(), validate({ groupId: { type: "string", allowEmpty: false } }, { groupId: t3 }, "", true), u2.next = 4, this.core.sendCmd("v2ConversationGroupGet", { tag: { groupId: t3 } });
                  case 4:
                    return a3 = u2.sent, u2.abrupt("return", formatConversationGroup(get(a3, "content.data")));
                  case 6:
                  case "end":
                    return u2.stop();
                }
            }, _callee6, this);
          }));
        }, a2.getConversationGroupList = function getConversationGroupList() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            var t3;
            return Ql.wrap(function _callee7$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this.checkV2(), a3.next = 3, this.core.sendCmd("v2ConversationGroupListGet");
                  case 3:
                    return t3 = a3.sent, a3.abrupt("return", formatConversationGroups(get(t3, "content.datas")));
                  case 5:
                  case "end":
                    return a3.stop();
                }
            }, _callee7, this);
          }));
        }, a2.getConversationGroupListByIds = function getConversationGroupListByIds(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var a3, u2, m2;
            return Ql.wrap(function _callee8$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return this.checkV2(), validate({ groupIds: { type: "array", itemType: "string", min: 1 } }, { groupIds: t3 }, "", true), h2.next = 4, this.core.sendCmd("v2ConversationGroupsGet", { tag: { groupIds: t3 && Un(t3) } });
                  case 4:
                    return u2 = h2.sent, m2 = formatConversationGroups(get(u2, "content.datas")), h2.abrupt("return", filter(a3 = map$6(t3).call(t3, function(t4) {
                      return filter(m2).call(m2, function(a4) {
                        return a4.groupId === t4;
                      })[0];
                    })).call(a3, function(t4) {
                      return !!t4;
                    }));
                  case 7:
                  case "end":
                    return h2.stop();
                }
            }, _callee8, this);
          }));
        }, a2.v2ConversationGroupNotifySyncOnlineHandler = function v2ConversationGroupNotifySyncOnlineHandler(t3) {
          var a3, u2 = this, m2 = formatConversationGroupNotify(get(t3, "content.info")), h2 = m2.type, g2 = m2.deleteVersion, M2 = m2.conversationIds, I2 = formatConversationGroup(get(t3, "content.data"));
          if (this.core.logger.log("v2ConversationGroupNotifySyncOnlineHandler", m2, I2), h2 === 1)
            this.emit("onConversationGroupCreated", I2), M2 && M2.length > 0 && this.emit("onConversationsAddedToGroup", I2.groupId, filter(a3 = map$6(M2).call(M2, function(t4) {
              return u2.core.V2NIMConversationService.model.getById(t4);
            })).call(a3, function(t4) {
              return !!t4;
            }));
          else if (h2 === 2)
            this.emit("onConversationGroupDeleted", I2.groupId), this.core.V2NIMConversationService.versionCache.compareAndDeleteGroupInModel(g2, I2.groupId);
          else if (h2 === 3)
            this.emit("onConversationGroupChanged", I2);
          else if (h2 === 4) {
            var S2, T2 = filter(S2 = map$6(M2).call(M2, function(t4) {
              return u2.core.V2NIMConversationService.model.getById(t4);
            })).call(S2, function(t4) {
              return !!t4;
            });
            this.emit("onConversationsAddedToGroup", I2.groupId, T2);
          } else
            h2 === 5 && this.emit("onConversationsRemovedFromGroup", I2.groupId, M2);
        }, V2NIMConversationGroupServiceImpl;
      }(ip), Hm = function() {
        function V2NIMMessageModel() {
          this.messages = new fc(), this.maxSize = 2e3;
        }
        var t2 = V2NIMMessageModel.prototype;
        return t2.reset = function reset() {
          this.messages.clear();
        }, t2.getMessageById = function getMessageById(t3) {
          if (t3)
            return this.messages.get(t3);
        }, t2.getMessagesByConversationId = function getMessagesByConversationId(t3) {
          var a2, u2 = [];
          return forEach$1(a2 = this.messages).call(a2, function(a3) {
            a3.conversationId === t3 && u2.push(a3);
          }), u2;
        }, t2.getLastMessageOfConversation = function getLastMessageOfConversation(t3) {
          var a2 = this.getMessagesByConversationId(t3);
          if (a2.length !== 0)
            return reduce(a2).call(a2, function(t4, a3) {
              return a3.createTime > t4.createTime ? a3 : t4;
            }, a2[0]);
        }, t2.upsertMessages = function upsertMessages(t3) {
          var a2, u2, m2, h2 = this;
          forEach$1(t3).call(t3, function(t4) {
            h2.messages.set(t4.messageClientId, t4);
          });
          var g2 = this.messages.size;
          if (!(g2 <= this.maxSize))
            for (var M2 = sort(a2 = filter(u2 = jl(values(m2 = this.messages).call(m2))).call(u2, function(t4) {
              return t4.sendingState !== 3;
            })).call(a2, function(t4, a3) {
              return t4.createTime - a3.createTime;
            }), I2 = g2 - this.maxSize > 100 ? g2 - this.maxSize : 100, S2 = 0; S2 < I2; S2++) {
              var T2 = M2[S2];
              T2 && this.messages.delete(T2.messageClientId);
            }
        }, t2.deleteMessage = function deleteMessage(t3) {
          this.messages.delete(t3);
        }, t2.deleteMessages = function deleteMessages(t3, a2) {
          var u2, m2 = this;
          forEach$1(u2 = this.messages).call(u2, function(u3) {
            t3 === u3.conversationId && (!a2 || a2 && u3.createTime < a2) && m2.messages.delete(u3.messageClientId);
          });
        }, V2NIMMessageModel;
      }(), jm = { accountId: { type: "string", allowEmpty: false }, content: { type: "object", required: false, rules: { msg: { type: "string", allowEmpty: false }, type: { type: "number", allowEmpty: false } } }, messages: { type: "array", required: false, rules: { msg: { type: "string", allowEmpty: false }, type: { type: "number" }, role: { type: "enum", values: ["assistant", "user", "system"] } } }, promptVariables: { type: "jsonstr", required: false }, modelConfigParams: { type: "object", required: false, rules: { prompt: { type: "string", required: false }, maxTokens: { type: "number", required: false }, topP: { type: "number", required: false }, temperature: { type: "number", required: false } } } }, $m = Dt({ requestId: { type: "string", allowEmpty: false } }, jm), zm = [1, 3, 2, 0], Wm = [2, 7, 12, 100, 6, 1, -1, 4, 5, 11, 0, 10, 3], Km = { routeEnabled: { type: "boolean", required: false }, routeEnvironment: { type: "string", required: false } }, Ym = { pushEnabled: { type: "boolean", required: false }, pushNickEnabled: { type: "boolean", required: false }, pushContent: { type: "string", required: false }, pushPayload: { type: "string", required: false }, forcePush: { type: "boolean", required: false }, forceContent: { type: "string", required: false }, forcePushAccountIds: { type: "array", required: false, itemType: "string" } }, Qm = { antispamEnabled: { type: "boolean", required: false }, antispamBusinessId: { type: "string", required: false }, antispamCustomMessage: { type: "string", required: false }, antispamCheating: { type: "string", required: false }, antispamExtension: { type: "string", required: false } }, Jm = { messageConfig: { type: "object", required: false, rules: { readReceiptEnabled: { type: "boolean", required: false }, lastMessageUpdateEnabled: { type: "boolean", required: false }, historyEnabled: { type: "boolean", required: false }, roamingEnabled: { type: "boolean", required: false }, onlineSyncEnabled: { type: "boolean", required: false }, offlineEnabled: { type: "boolean", required: false }, unreadEnabled: { type: "boolean", required: false } } }, routeConfig: { type: "object", required: false, rules: Km }, pushConfig: { type: "object", required: false, rules: Ym }, antiSpamConfig: { type: "object", required: false, rules: Qm }, robotConfig: { type: "object", required: false, rules: { accountId: { type: "string", required: false }, topic: { type: "string", required: false }, function: { type: "string", required: false }, customContent: { type: "string", required: false } } }, aiConfig: { type: "object", required: false, rules: jm }, targetConfig: { type: "object", required: false, rules: { receiverIds: { type: "array", itemType: "string" }, inclusive: { type: "boolean" }, newMemberVisible: { type: "boolean", required: false } } }, clientAntispamEnabled: { type: "boolean", required: false }, clientAntispamReplace: { type: "string", required: false } }, Xm = { message: { type: "object", rules: { text: { type: "string", required: false }, messageType: { type: "enum", values: Wm }, messageClientId: { type: "string", allowEmpty: false } } }, params: { type: "object", rules: Jm, required: false }, replyMessage: { type: "object", rules: { conversationType: { type: "enum", values: [1, 3, 2, 0] }, receiverId: { type: "string", allowEmpty: false }, senderId: { type: "string", allowEmpty: false }, messageClientId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false }, createTime: { type: "number" } } } }, Zm = { conversationId: { type: "string", allowEmpty: false }, message: { type: "object", rules: { text: { type: "string", required: false }, messageType: { type: "enum", values: Wm }, messageClientId: { type: "string", allowEmpty: false }, attachment: { type: "object", required: false, rules: { file: { type: "file", required: false } } } } }, params: { type: "object", required: false, rules: Jm } }, eh = { message: { type: "object", rules: { messageClientId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false }, conversationType: { type: "enum", values: zm }, createTime: { type: "number" } } }, params: { type: "object", rules: { postscript: { type: "string", required: false }, serverExtension: { type: "string", required: false }, pushContent: { type: "string", required: false }, pushPayload: { type: "string", required: false }, env: { type: "string", required: false } }, required: false } }, th = { conversationId: { type: "string", allowEmpty: false }, messageTypes: { type: "array", required: false, itemType: "enum", values: Wm }, beginTime: { type: "number", required: false }, endTime: { type: "number", required: false }, limit: { type: "number", min: 1, required: false }, direction: { type: "enum", values: [1, 0], required: false }, anchorMessage: { type: "object", required: false, rules: { messageServerId: { type: "string", allowEmpty: false }, createTime: { type: "number" } } } }, rh = { conversationType: { type: "enum", values: zm }, receiverId: { type: "string", allowEmpty: false }, senderId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false }, messageClientId: { type: "string", allowEmpty: false } }, nh = { messageRefers: { type: "array", required: true, rules: rh } }, ah = { conversationId: { type: "string", allowEmpty: false }, conversationType: { type: "enum", values: zm }, receiverId: { type: "string", allowEmpty: false }, senderId: { type: "string", allowEmpty: false }, messageClientId: { type: "string", allowEmpty: false }, createTime: { type: "number" } }, ih = { messages: { type: "array", rules: ah } }, oh = { conversationId: { type: "string", allowEmpty: false }, serverExtension: { type: "string", required: false }, onlineSync: { type: "boolean", required: false }, deleteRoam: { type: "boolean", required: false } }, sh = { serverExtension: { type: "string", required: false } }, ch = { messageClientId: { type: "string", allowEmpty: false }, conversationType: { type: "enum", values: [1] }, receiverId: { type: "string", allowEmpty: false }, createTime: { type: "number" } }, lh = { messages: { type: "array", rules: { messageClientId: { type: "string", allowEmpty: false }, conversationType: { type: "enum", values: [2] }, receiverId: { type: "string", allowEmpty: false }, createTime: { type: "number" } }, min: 1 } }, uh = { voiceUrl: { type: "string", required: false, allowEmpty: false }, file: { type: "file", required: false }, voicePath: { type: "string", required: false, allowEmpty: false }, mimeType: { type: "string", required: false, allowEmpty: false }, sampleRate: { type: "string", required: false, allowEmpty: false }, duration: { type: "number", required: true, min: 0 }, sceneName: { type: "string", required: false } }, dh = { message: { type: "object", rules: { conversationType: { type: "enum", values: zm }, receiverId: { type: "string", allowEmpty: false }, senderId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false }, messageClientId: { type: "string", allowEmpty: false }, createTime: { type: "number" } } }, index: { type: "number", min: 1 }, serverExtension: { type: "string", required: false }, pushConfig: { type: "object", required: false, rules: { pushEnabled: { type: "boolean", required: false }, needBadge: { type: "boolean", required: false }, title: { type: "string", required: false, allowEmpty: false }, content: { type: "string", required: false, allowEmpty: false }, pushPayload: { type: "string", required: false, allowEmpty: false } } } }, ph = { messages: { type: "array", rules: { conversationType: { type: "enum", values: [1, 3, 2, 0] }, receiverId: { type: "string", allowEmpty: false }, senderId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false }, messageClientId: { type: "string", allowEmpty: false }, createTime: { type: "number" } } } }, mh = { params: { type: "object", rules: { collectionType: { type: "number", min: 1 }, collectionData: { type: "string", allowEmpty: false }, serverExtension: { type: "string", required: false }, uniqueId: { type: "string", required: false } } } }, gh = { collections: { type: "array", min: 1, rules: { collectionId: { type: "string", allowEmpty: false }, createTime: { type: "number" } } } }, vh = { serverExtension: { type: "string", required: false }, collection: { type: "object", rules: { collectionId: { type: "string", allowEmpty: false }, collectionType: { type: "number" }, createTime: { type: "number" } } } }, fh = { beginTime: { type: "number", required: false }, endTime: { type: "number", required: false }, limit: { type: "number", min: 1, required: false }, direction: { type: "enum", required: false, values: [1, 0] }, collectionType: { type: "number", required: false }, anchorCollection: { type: "object", required: false, rules: { collectionId: { type: "string", allowEmpty: false, required: false }, createTime: { type: "number", required: false } } } }, yh = { keyword: { type: "string", allowEmpty: false }, beginTime: { type: "number", required: false }, endTime: { type: "number", required: false }, sortOrder: { type: "enum", values: [1, 0], required: false }, conversationLimit: { type: "number", min: 0, required: false }, messageLimit: { type: "number", min: 1, required: false }, p2pAccountIds: { type: "array", required: false, itemType: "string" }, teamIds: { type: "array", required: false, itemType: "string" }, senderAccountIds: { type: "array", required: false, itemType: "string" }, messageTypes: { type: "array", required: false, itemType: "enum", values: Wm }, messageSubtypes: { type: "array", required: false, itemType: "number" } }, _h = { message: { type: "object", rules: { receiverId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false }, conversationType: { type: "enum", values: [2] } } } }, Mh = { messages: { type: "array", rules: { receiverId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false }, conversationType: { type: "enum", values: [2] } }, min: 1 } }, Ih = { sceneName: { type: "string", required: false }, name: { type: "string", required: false } }, Sh = Dt(Dt({}, Ih), { duration: { type: "number", required: false } }), Th = Dt(Dt({}, Sh), { width: { type: "number", required: false }, height: { type: "number", required: false } }), Ch = Dt(Dt({}, Ih), { width: { type: "number", required: false }, height: { type: "number", required: false } }), bh = { messageRefer: { type: "object", required: true, rules: rh }, beginTime: { type: "number", required: false }, endTime: { type: "number", required: false }, limit: { type: "number", min: 1, required: false }, direction: { type: "enum", values: [1, 0], required: false }, excludeMessageServerId: { type: "string", required: false, allowEmpty: false } }, Eh = { senderId: { type: "string", allowEmpty: false }, receiverId: { type: "string", allowEmpty: false }, createTime: { type: "number" }, messageClientId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false } }, kh = { subType: { type: "number", min: 0, required: false }, text: { type: "string", required: false }, attachment: { type: "object", required: false }, serverExtension: { type: "string", required: false }, routeConfig: { type: "object", required: false, rules: Km }, pushConfig: { type: "object", required: false, rules: Ym }, antiSpamConfig: { type: "object", required: false, rules: Qm }, clientAntispamEnabled: { type: "boolean", required: false }, clientAntispamReplace: { type: "string", required: false } }, wh = function() {
        function ReceiptUtil(t3, a2) {
          this.p2pMessageReceipts = {}, this.core = t3, this.service = a2;
        }
        var t2 = ReceiptUtil.prototype;
        return t2.sendP2PMessageReceipt = function sendP2PMessageReceipt(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            return Ql.wrap(function _callee$(a2) {
              for (; ; )
                switch (a2.prev = a2.next) {
                  case 0:
                    if (validate(ch, t3, "", true), t3.senderId !== this.core.account) {
                      a2.next = 3;
                      break;
                    }
                    throw new Vl({ detail: { reason: "sendP2PMessageReceipt. sender: " + t3.senderId + " is not allowed to send msg receipt" } });
                  case 3:
                    if (!(this.p2pMessageReceipts[t3.conversationId] > t3.createTime)) {
                      a2.next = 5;
                      break;
                    }
                    return a2.abrupt("return");
                  case 5:
                    return a2.next = 7, this.core.sendCmd("v2SendP2PMessageReceipt", { tag: { receiverId: t3.senderId, messageClientId: t3.messageClientId, createTime: t3.createTime } });
                  case 7:
                    this.p2pMessageReceipts[t3.conversationId] = t3.createTime;
                  case 8:
                  case "end":
                    return a2.stop();
                }
            }, _callee, this);
          }));
        }, t2.isPeerRead = function isPeerRead(t3) {
          if (t3.conversationType !== 1)
            return false;
          if (t3.senderId !== this.core.account)
            return false;
          if (t3.senderId === this.core.account && t3.receiverId === this.core.account)
            return true;
          var a2 = this.core.V2NIMConversationIdUtil.messageConversationId(t3), u2 = this.p2pMessageReceipts[a2] || 0;
          return t3.createTime <= u2;
        }, t2.getP2PMessageReceipt = function getP2PMessageReceipt(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            return Ql.wrap(function _callee2$(a2) {
              for (; ; )
                switch (a2.prev = a2.next) {
                  case 0:
                    if (validateConversationId(this.core.account, t3), this.core.V2NIMConversationIdUtil.parseConversationType(t3) === 1) {
                      a2.next = 4;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getP2PMessageReceipt: conversationId is not p2p conversationId" } });
                  case 4:
                    return a2.abrupt("return", { conversationId: t3, timestamp: this.p2pMessageReceipts[t3] || 0 });
                  case 5:
                  case "end":
                    return a2.stop();
                }
            }, _callee2, this);
          }));
        }, t2.getTeamMessageReceipts = function getTeamMessageReceipts(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a2, u2, m2 = this;
            return Ql.wrap(function _callee3$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    if (validate(Mh, { messages: t3 }, "", true), !some(t3).call(t3, function(t4) {
                      return t4.senderId !== m2.core.account;
                    })) {
                      h2.next = 3;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getTeamMessageReceipts: exist messages senderId is not current user" } });
                  case 3:
                    if (!some(t3).call(t3, function(a3) {
                      return a3.receiverId !== t3[0].receiverId;
                    })) {
                      h2.next = 5;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "getTeamMessageReceipts: exist messages receiverId is not same" } });
                  case 5:
                    return h2.next = 7, this.core.sendCmd("v2GetTeamMessageReceipts", { tag: t3 });
                  case 7:
                    return u2 = h2.sent, h2.abrupt("return", map$6(a2 = u2.content.data).call(a2, function(t4) {
                      return Dt(Dt({}, t4), { conversationId: m2.core.V2NIMConversationIdUtil.teamConversationId(t4.receiverId) });
                    }));
                  case 9:
                  case "end":
                    return h2.stop();
                }
            }, _callee3, this);
          }));
        }, t2.getTeamMessageReceiptDetail = function getTeamMessageReceiptDetail(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a2;
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    if (validate(_h, { message: t3 }, "", true), t3.senderId === this.core.account) {
                      u2.next = 3;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getTeamMessageReceiptDetail::senderId " + t3.senderId + " incorrect" } });
                  case 3:
                    return u2.next = 5, this.core.sendCmd("v2GetTeamMessageReceiptDetail", { tag: t3 });
                  case 5:
                    return a2 = u2.sent, u2.abrupt("return", { readReceipt: { conversationId: this.core.V2NIMConversationIdUtil.teamConversationId(t3.receiverId), messageClientId: t3.messageClientId, messageServerId: t3.messageServerId, readCount: a2.content.readAccountList.length, unreadCount: a2.content.unreadAccountList.length }, readAccountList: a2.content.readAccountList, unreadAccountList: a2.content.unreadAccountList });
                  case 7:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this);
          }));
        }, t2.sendTeamMessageReceipts = function sendTeamMessageReceipts(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var a2 = this;
            return Ql.wrap(function _callee5$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    if (!some(t3).call(t3, function(a3) {
                      return a3.conversationId !== t3[0].conversationId;
                    })) {
                      u2.next = 2;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "getTeamMessageReceipts: conversationId not same" } });
                  case 2:
                    if (validate(lh, { messages: t3 }, "", true), !some(t3).call(t3, function(t4) {
                      return t4.senderId === a2.core.account;
                    })) {
                      u2.next = 5;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getTeamMessageReceipts: exist messages senderId is not current user" } });
                  case 5:
                    return u2.next = 7, this.core.sendCmd("v2SendTeamMessageReceipts", { tag: t3 });
                  case 7:
                    return u2.abrupt("return");
                  case 8:
                  case "end":
                    return u2.stop();
                }
            }, _callee5, this);
          }));
        }, t2.syncP2PMessagReceiptsHandler = function syncP2PMessagReceiptsHandler(t3) {
          var a2, u2 = this, m2 = map$6(a2 = t3.content.data).call(a2, function(t4) {
            var a3 = u2.core.V2NIMConversationIdUtil.p2pConversationId(t4.senderId), m3 = t4.createTime;
            return u2.p2pMessageReceipts[a3] = m3, { conversationId: a3, timestamp: m3 };
          });
          this.service.emit("onReceiveP2PMessageReadReceipts", m2);
        }, t2.onP2PMessageReceiptsHandler = function onP2PMessageReceiptsHandler(t3) {
          var a2 = this.core.V2NIMConversationIdUtil.p2pConversationId(t3.content.data.senderId), u2 = t3.content.data.createTime;
          this.p2pMessageReceipts[a2] = u2, this.service.emit("onReceiveP2PMessageReadReceipts", [{ conversationId: a2, timestamp: u2 }]);
        }, t2.onTeamMessageReceiptsHandler = function onTeamMessageReceiptsHandler(t3) {
          var a2, u2 = this, m2 = map$6(a2 = t3.content.data).call(a2, function(t4) {
            return { conversationId: u2.core.V2NIMConversationIdUtil.teamConversationId(t4.receiverId), messageServerId: t4.messageServerId, messageClientId: t4.messageClientId, readCount: t4.readCount, unreadCount: t4.unreadCount, latestReadAccount: t4.latestReadAccount };
          });
          this.service.emit("onReceiveTeamMessageReadReceipts", m2);
        }, ReceiptUtil;
      }(), Rh = function() {
        function FileUtil(t3) {
          this.core = t3;
        }
        var t2 = FileUtil.prototype;
        return t2.doSendFile = function doSendFile(t3, a2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2, m2, h2, g2, M2, I2, S2, T2;
            return Ql.wrap(function _callee$(C2) {
              for (; ; )
                switch (C2.prev = C2.next) {
                  case 0:
                    return u2 = t3.attachment, C2.prev = 1, C2.next = 4, this.core.V2NIMStorageService._uploadFile({ taskId: t3.messageClientId, uploadParams: { fileObj: (u2 == null ? void 0 : u2.file) || (u2 == null ? void 0 : u2.path), sceneName: u2 == null ? void 0 : u2.sceneName } }, a2, { fileType: t3.messageType });
                  case 4:
                    for (S2 in (h2 = C2.sent)[0], g2 = h2[1], M2 = Dt(Dt({}, u2), { uploadState: 1 }), g2.w !== void 0 && (M2.width = M2.width || g2.w), g2.h !== void 0 && (M2.height = M2.height || g2.h), g2.dur !== void 0 && (M2.duration = M2.duration || g2.dur), M2.ext = M2.ext && indexOf(m2 = M2.ext).call(m2, ".") === -1 ? "." + M2.ext : M2.ext, I2 = ["w", "h", "dur", "ext", "name"], g2)
                      includes(I2).call(I2, S2) || (M2[S2] = g2[S2]);
                    M2.raw, M2.file, M2.path, T2 = __rest(M2, ["raw", "file", "path"]), t3.attachment = JSON.parse(Un(T2)), t3.attachment && (t3.attachment.raw = attachmentToRaw(t3.messageType, t3.attachment)), C2.next = 23;
                    break;
                  case 19:
                    throw C2.prev = 19, C2.t0 = C2.catch(1), t3.attachment && (t3.attachment.uploadState = 2), C2.t0;
                  case 23:
                  case "end":
                    return C2.stop();
                }
            }, _callee, this, [[1, 19]]);
          }));
        }, t2.cancelMessageAttachmentUpload = function cancelMessageAttachmentUpload(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a2;
            return Ql.wrap(function _callee2$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    if (validate({ messageClientId: { type: "string", allowEmpty: false } }, t3, "", true), includes(a2 = [2, 6, 1, 3]).call(a2, t3.messageType)) {
                      u2.next = 3;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "cancelMessageAttachmentUpload: messageType " + t3.messageType + " incorrect" } });
                  case 3:
                    if (t3.sendingState !== 2 && t3.sendingState !== 1) {
                      u2.next = 5;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST, detail: { reason: "cancelMessageAttachmentUpload: message is already failed or succeeded" } });
                  case 5:
                    return u2.next = 7, this.core.V2NIMStorageService._cancelUploadFile(t3.messageClientId);
                  case 7:
                  case "end":
                    return u2.stop();
                }
            }, _callee2, this);
          }));
        }, FileUtil;
      }(), Ah = "V2NIMNotificationService", Nh = { "30_7": "v2SendCustomNotification", "32_16": "v2SendCustomNotificationWithSuperTeam", "7_3": "onSysNotification", "21_19": "onSysNotification", "4_6": "v2SyncOfflineSysNotifications", "4_18": "v2SyncOfflineSysNotifications", "7_14": "v2NotificationRevoke", "21_18": "v2NotificationRevoke", "21_117": "v2NotificationRevoke", "4_19": "v2NotificationSyncRevoke", "7_15": "v2NotificationSyncRevoke", "4_16": "syncBroadcastMsg", "7_17": "onBroadcastMsg" }, xh = { timestamp: { id: 0, retType: "number" }, type: { id: 1, retType: "number" }, receiverId: 2, senderId: 3, postscript: 4, content: 5, idServer: 6, offlineEnabled: { id: 7, converter: boolToInt, retConverter: function retConverter(t2, a2) {
        return a2[6] !== "0" && !!Uu(t2);
      }, access: "notificationConfig.offlineEnabled" }, pushContent: { id: 8, access: "pushConfig.pushContent" }, pushPayload: { id: 9, access: "pushConfig.pushPayload" }, deletedIdClient: 10, deletedIdServer: 11, antispamEnabled: { id: 12, converter: boolToInt, retType: "boolean", access: "antispamConfig.antispamEnabled" }, antispamCustomNotification: { id: 13, access: "antispamConfig.antispamCustomNotification" }, deletedMsgCreateTime: 14, deletedMsgFromNick: 15, opeAccount: 16, forcePushAccountIds: { id: 18, access: "pushConfig.forcePushAccountIds", def: function def(t2) {
        if (t2.type === 101 && t2["pushConfig.forcePush"])
          return "#%@all@%#";
      }, converter: function converter(t2, a2) {
        if (a2["pushConfig.forcePush"])
          return t2 ? Un(t2) : "#%@all@%#";
      } }, forcePushContent: { id: 19, access: "pushConfig.forcePushContent" }, forcePush: { id: 20, converter: boolToInt, retType: "boolean", access: "pushConfig.forcePush" }, routeEnvironment: { id: 21, access: "routeConfig.routeEnvironment" }, callbackExt: 22, clientNotificationId: { id: 23, access: "notificationConfig.clientNotificationId" }, conversationOnlineSyncNotify: 24, conversationOnlineSyncData: 25, routeEnabled: { id: 105, converter: boolToInt, retType: "boolean", access: "routeConfig.routeEnabled" }, pushEnabled: { id: 107, converter: boolToInt, retType: "boolean", access: "pushConfig.pushEnabled" }, unreadEnabled: { id: 109, converter: boolToInt, retType: "boolean", access: "notificationConfig.unreadEnabled" }, pushNickEnabled: { id: 110, converter: boolToInt, retType: "boolean", access: "pushConfig.pushNickEnabled" } }, Oh = { id: 1, senderId: 2, timestamp: { id: 4, retType: "number" }, content: 5 }, Ph = { v2SendCustomNotification: { sid: 30, cid: 7, service: Ah, params: [{ type: "Property", name: "tag", reflectMapper: xh }] }, v2SendCustomNotificationWithSuperTeam: { sid: 32, cid: 16, service: Ah, params: [{ type: "Property", name: "tag", reflectMapper: xh }] }, onSysNotification: { sid: 7, cid: 3, service: Ah, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(xh) }] }, syncBroadcastMsg: { sid: 4, cid: 16, service: Ah, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(Oh) }] }, onBroadcastMsg: { sid: 7, cid: 17, service: Ah, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Oh) }] }, v2SyncOfflineSysNotifications: { sid: 4, cid: 9, service: Ah, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(xh) }] }, v2NotificationRevoke: { sid: 7, cid: 14, service: Ah, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(xh) }] }, v2NotificationSyncRevoke: { sid: 7, cid: 15, service: Ah, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(xh) }, { type: "Long", name: "timetag" }, { type: "Byte", name: "type" }] } }, Lh = "YSFService", Vh = { "4_5": "ysfBatchMarkRead", "101_1": "ysfSendMessage", "101_2": "ysfOnMsg", "4_100": "ysfSyncOfflineMsgs", "101_3": "ysfOnSysNotification", "101_7": "ysfSendCustomNotification", "4_101": "ysfSyncSysNotification" }, Uh = { ysfBatchMarkRead: { sid: 4, cid: 5, service: Lh, hasPacketResponse: false, params: [{ type: "Byte", name: "sid" }, { type: "Byte", name: "cid" }, { type: "LongArray", name: "ids" }] }, ysfSendMessage: { sid: 101, cid: 1, service: Lh, params: [{ type: "Property", name: "tag", reflectMapper: fm }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(fm) }] }, ysfOnMsg: { sid: 101, cid: 2, service: Lh, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(fm) }] }, ysfSyncOfflineMsgs: { sid: 4, cid: 100, service: Lh, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(fm) }] }, ysfOnSysNotification: { sid: 101, cid: 3, service: Lh, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(xh) }] }, ysfSendCustomNotification: { sid: 101, cid: 7, service: Lh, params: [{ type: "Property", name: "tag", reflectMapper: xh }] }, ysfSyncSysNotification: { sid: 4, cid: 101, service: Lh, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(xh) }] } }, Dh = { content: { type: "string", allowEmpty: false }, params: { type: "object", required: false, rules: { notificationConfig: { type: "object", required: false, rules: { offlineEnabled: { type: "boolean", required: false }, unreadEnabled: { type: "boolean", required: false } } }, pushConfig: { type: "object", required: false, rules: { pushEnabled: { type: "boolean", required: false }, pushNickEnabled: { type: "boolean", required: false }, pushContent: { type: "string", required: false }, pushPayload: { type: "string", required: false }, forcePush: { type: "boolean", required: false }, forcePushContent: { type: "string", required: false }, forcePushAccounts: { type: "array", required: false, itemType: "string" } } }, antispamConfig: { type: "object", required: false, rules: { antispamEnabled: { type: "boolean", required: false }, antispamCustomNotification: { type: "string", required: false } } }, routeConfig: { type: "object", required: false, rules: { routeEnabled: { type: "boolean", required: false }, routeEnvironment: { type: "string", required: false } } } } } }, qh = function() {
        function NotificationUtil(t2) {
          this.core = t2;
        }
        return NotificationUtil.prototype.generateNotificationTag = function generateNotificationTag(t2, a2, u2) {
          var m2;
          u2 === void 0 && (u2 = {});
          var h2 = this.core.V2NIMConversationIdUtil.parseConversationType(t2), g2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(t2), M2 = to(), I2 = ((m2 = {})[1] = 100, m2[2] = 101, m2[3] = 103, m2);
          return Dt(Dt({}, u2), { notificationConfig: Dt({ unreadEnabled: true, offlineEnabled: true }, u2 == null ? void 0 : u2.notificationConfig), pushConfig: Dt({ pushEnabled: true, pushNickEnabled: true }, u2 == null ? void 0 : u2.pushConfig), antispamConfig: Dt({ antispamEnabled: true }, u2 == null ? void 0 : u2.antispamConfig), routeConfig: Dt({ routeEnabled: true }, u2 == null ? void 0 : u2.routeConfig), timestamp: M2, type: I2[h2], receiverId: g2, content: a2 });
        }, NotificationUtil;
      }();
      function getFileOrPath(t2) {
        var a2 = typeof t2 == "object" ? t2 : void 0, u2 = typeof t2 == "string" ? t2 : void 0;
        if (!a2 && !u2)
          throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "getFileOrPath::incorrect file and path" } });
        if (typeof u2 == "string") {
          if (indexOf(u2).call(u2, "nim-external") === 0) {
            var m2 = document.getElementById(u2);
            if (!(m2 && m2.files && m2.files[0]))
              throw new Pl({ code: Nl.V2NIM_ERROR_CODE_FILE_NOT_FOUND, detail: { reason: "getFileOrPath::file not exist: " + u2 } });
            a2 = m2.files[0];
          } else if (Jl.platform === "BROWSER")
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "getFileOrPath::incorrect path: " + u2 } });
        }
        if (typeof a2 == "object" && a2.size === void 0)
          throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "getFileOrPath::file no size" } });
        return { file: a2, path: u2 };
      }
      var Bh, Fh, Gh = { attachment: { type: "object", rules: { url: { type: "string", allowEmpty: false } } }, thumbSize: { type: "object", rules: { width: { type: "number", required: false, min: 0 }, height: { type: "number", required: false, min: 0 } } } }, Hh = function(t2) {
        function V2NIMStorageUtil(a3) {
          var u2;
          return (u2 = t2.call(this, "V2NIMStorageUtil", a3) || this).core = a3, u2;
        }
        Nt(V2NIMStorageUtil, t2);
        var a2 = V2NIMStorageUtil.prototype;
        return a2.imageThumbUrl = function imageThumbUrl(t3, a3) {
          return t3 + "?imageView&thumbnail=" + a3 + "z" + a3;
        }, a2.videoCoverUrl = function videoCoverUrl(t3, a3) {
          return t3 + "?vframe&offset=" + a3;
        }, a2.getImageThumbUrl = function getImageThumbUrl(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2, m2;
            return Ql.wrap(function _callee$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return this.checkV2(), validate(Gh, { attachment: u2 = t3, thumbSize: a3 }, "", true), a3.width = a3.width || 0, a3.height = a3.height || 0, a3.width === 0 && a3.height === 0 && (a3.width = 150), m2 = u2.url, h2.prev = 7, h2.next = 10, this.core.V2NIMStorageService.shortUrlToLong(u2.url);
                  case 10:
                    m2 = h2.sent, h2.next = 16;
                    break;
                  case 13:
                    h2.prev = 13, h2.t0 = h2.catch(7), this.core.logger.warn("shortUrlToLong error:", h2.t0);
                  case 16:
                    return h2.abrupt("return", { url: this.core.cloudStorage.getThumbUrl(m2, a3) });
                  case 17:
                  case "end":
                    return h2.stop();
                }
            }, _callee, this, [[7, 13]]);
          }));
        }, a2.getVideoCoverUrl = function getVideoCoverUrl(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var u2, m2;
            return Ql.wrap(function _callee2$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return this.checkV2(), validate(Gh, { attachment: u2 = t3, thumbSize: a3 }, "", true), a3.width = a3.width || 0, a3.height = a3.height || 0, a3.width === 0 && a3.height === 0 && (a3.width = 150), m2 = u2.url, h2.prev = 7, h2.next = 10, this.core.V2NIMStorageService.shortUrlToLong(u2.url);
                  case 10:
                    m2 = h2.sent, h2.next = 16;
                    break;
                  case 13:
                    h2.prev = 13, h2.t0 = h2.catch(7), this.core.logger.warn("shortUrlToLong error:", h2.t0);
                  case 16:
                    return h2.abrupt("return", { url: this.core.cloudStorage.getVideoCoverUrl(m2, a3) });
                  case 17:
                  case "end":
                    return h2.stop();
                }
            }, _callee2, this, [[7, 13]]);
          }));
        }, V2NIMStorageUtil;
      }(ip), jh = { file: { md5: "$(Etag)", size: "$(ObjectSize)" }, image: { md5: "$(Etag)", size: "$(ObjectSize)", w: "$(ImageInfo.Width)", h: "$(ImageInfo.Height)", orientation: "$(ImageInfo.Orientation)" }, audio: { md5: "$(Etag)", size: "$(ObjectSize)", dur: "$(AVinfo.Audio.Duration)" }, video: { md5: "$(Etag)", size: "$(ObjectSize)", dur: "$(AVinfo.Video.Duration)", w: "$(AVinfo.Video.Width)", h: "$(AVinfo.Video.Height)" } }, $h = { accessKeyId: "", secretAccessKey: "", sessionToken: "", region: "", maxRetries: 0, bucket: "", objectName: "", token: "", shortUrl: "" };
      function getUploadResponseFormat(t2) {
        return t2 === void 0 && (t2 = "file"), Un(jh[t2] || {}).replace(/"/gi, '\\"');
      }
      !function(t2) {
        t2[t2.nos = 1] = "nos", t2[t2.s3 = 2] = "s3";
      }(Bh || (Bh = {})), function(t2) {
        t2[t2.dontNeed = -1] = "dontNeed", t2[t2.time = 2] = "time", t2[t2.urls = 3] = "urls";
      }(Fh || (Fh = {}));
      var zh = { chunkUploadHost: "https://wannos-web.127.net", chunkUploadHostBackupList: ["https://fileup.chatnos.com", "https://oss.chatnos.com"], commonUploadHost: "https://fileup.chatnos.com", commonUploadHostBackupList: ["https://oss.chatnos.com"], chunkMaxSize: 4194304e4, commonMaxSize: 104857600, uploadReplaceFormat: "https://{host}/{object}", cdn: { defaultCdnDomain: "nim-nosdn.netease.im", cdnDomain: "", bucket: "", objectNamePrefix: "" }, downloadUrl: "https://{bucket}-nosdn.netease.im/{object}", downloadHostList: ["nos.netease.com"], nosCdnEnable: true, isNeedToGetUploadPolicyFromServer: true };
      function pickBy(t2, a2) {
        t2 = t2 || {}, a2 = a2 || function() {
          return true;
        };
        var u2 = {};
        for (var m2 in t2)
          a2(t2[m2]) && (u2[m2] = t2[m2]);
        return u2;
      }
      var Wh = function() {
        function NOS(t3, a2) {
          this.nosCdnHostTimer = 0, this.nosErrorCount = 0, this.core = t3, this.cloudStorage = a2;
        }
        var t2 = NOS.prototype;
        return t2.reset = function reset() {
          this.nosErrorCount = 0;
        }, t2.getNosAccessToken = function getNosAccessToken(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a2, u2, m2;
            return Ql.wrap(function _callee$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return h2.next = 2, this.core.sendCmd("getNosAccessToken", { tag: t3 });
                  case 2:
                    return a2 = h2.sent, u2 = get(a2, "content.nosAccessTokenTag.token"), m2 = t3.url, h2.abrupt("return", { token: u2, url: indexOf(m2).call(m2, "?") !== -1 ? m2 + "&token=" + u2 : m2 + "?token=" + u2 });
                  case 6:
                  case "end":
                    return h2.stop();
                }
            }, _callee, this);
          }));
        }, t2.deleteNosAccessToken = function deleteNosAccessToken(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            return Ql.wrap(function _callee2$(a2) {
              for (; ; )
                switch (a2.prev = a2.next) {
                  case 0:
                    return a2.next = 2, this.core.sendCmd("deleteNosAccessToken", { tag: t3 });
                  case 2:
                  case "end":
                    return a2.stop();
                }
            }, _callee2, this);
          }));
        }, t2.nosUpload = function nosUpload(t3, a2) {
          var u2, m2, h2, g2, M2, I2, S2, T2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var C2, b2, E2, k2, w2, R2, A2, N2, x2, O2, P2, L2, V2, U2, D2, q2, B2, G2, H2;
            return Ql.wrap(function _callee3$(j2) {
              for (; ; )
                switch (j2.prev = j2.next) {
                  case 0:
                    if (C2 = get(this.core, "config.cdn.bucket"), b2 = { tag: t3.nosScenes || C2 || "nim" }, t3.nosSurvivalTime && (b2.expireSec = t3.nosSurvivalTime), E2 = this.core.adapters.getFileUploadInformation(t3), !(!a2 && !E2)) {
                      j2.next = 18;
                      break;
                    }
                    return j2.prev = 6, j2.next = 9, this.core.sendCmd("getNosToken", { responseBody: getUploadResponseFormat(t3.type), nosToken: b2 });
                  case 9:
                    k2 = j2.sent, j2.next = 18;
                    break;
                  case 12:
                    if (j2.prev = 12, j2.t0 = j2.catch(6), this.core.logger.error("uploadFile:: getNosToken error", j2.t0), !(j2.t0 instanceof Pl)) {
                      j2.next = 17;
                      break;
                    }
                    throw j2.t0;
                  case 17:
                    throw new Dl({ code: get(this.core, "options.apiVersion") === "v2" ? Nl.V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED : 400, detail: { reason: "getNosToken error", rawError: j2.t0, curProvider: 1 } });
                  case 18:
                    return w2 = this.config.uploadReplaceFormat.replace("{host}", this.config.cdn.cdnDomain || this.config.cdn.defaultCdnDomain).replace("{object}", E2 ? (u2 = E2.uploadInfo) === null || u2 === void 0 ? void 0 : u2.objectName : a2 ? a2 == null ? void 0 : a2.objectName : k2.content.nosToken.objectName), R2 = "", a2 && a2.shortUrl && (R2 = a2.shortUrl), ((g2 = (h2 = (m2 = E2 == null ? void 0 : E2.uploadInfo) === null || m2 === void 0 ? void 0 : m2.payload) === null || h2 === void 0 ? void 0 : h2.mixStoreToken) === null || g2 === void 0 ? void 0 : g2.shortUrl) && (R2 = E2.uploadInfo.payload.mixStoreToken.shortUrl), A2 = R2 || w2, j2.prev = 23, x2 = E2 ? { token: (M2 = E2 == null ? void 0 : E2.uploadInfo) === null || M2 === void 0 ? void 0 : M2.token, bucket: (I2 = E2 == null ? void 0 : E2.uploadInfo) === null || I2 === void 0 ? void 0 : I2.bucketName, objectName: (S2 = E2 == null ? void 0 : E2.uploadInfo) === null || S2 === void 0 ? void 0 : S2.objectName } : a2 || k2.content.nosToken, this.core.logger.log("uploadFile:: uploadFile params", { nosToken: x2, chunkUploadHost: this.config.chunkUploadHost, chunkUploadHostBackupList: this.config.chunkUploadHostBackupList, commonUploadHost: this.config.commonUploadHost, commonUploadHostBackupList: this.config.commonUploadHostBackupList, platform: Jl.platform }), O2 = Jl.platform === "BROWSER" ? this.config.chunkUploadHost : this.config.commonUploadHost + "/" + (x2 && x2.bucket), this.core.reporterHookCloudStorage.update({ remote_addr: O2, operation_type: a2 ? 2 : 0 }), j2.next = 30, this.core.adapters.uploadFile(Dt(Dt(Dt({}, t3), { nosToken: x2, chunkUploadHost: this.config.chunkUploadHost, chunkUploadHostBackupList: this.config.chunkUploadHostBackupList, commonUploadHost: this.config.commonUploadHost, commonUploadHostBackupList: this.config.commonUploadHostBackupList, maxSize: t3.maxSize || this.config.chunkMaxSize }), a2 ? { payload: { mixStoreToken: a2 } } : {}));
                  case 30:
                    N2 = j2.sent, j2.next = 65;
                    break;
                  case 33:
                    if (j2.prev = 33, j2.t1 = j2.catch(23), this.core.logger.error("uploadFile::nos uploadFile error:", j2.t1), P2 = get(this.core, "options.apiVersion") === "v2", j2.t1.code !== Nl.V2NIM_ERROR_CODE_CANCELLED && j2.t1.errCode !== 10499) {
                      j2.next = 39;
                      break;
                    }
                    throw new Dl({ code: P2 ? Nl.V2NIM_ERROR_CODE_CANCELLED : 400, detail: { reason: get(j2.t1, "message") || "Request abort", rawError: j2.t1, curProvider: 1 } });
                  case 39:
                    if (!P2 || j2.t1.errCode !== Nl.V2NIM_ERROR_CODE_FILE_OPEN_FAILED) {
                      j2.next = 41;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_FILE_OPEN_FAILED, detail: { reason: get(j2.t1, "message") || "Read file failed", rawError: j2.t1, curProvider: 1 } });
                  case 41:
                    return j2.next = 43, Jl.net.getNetworkStatus();
                  case 43:
                    if (L2 = j2.sent, L2.net_connect !== false) {
                      j2.next = 47;
                      break;
                    }
                    throw new Dl({ code: get(this.core, "options.apiVersion") === "v2" ? Nl.V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED : 400, detail: { reason: "No network", rawError: j2.t1, curProvider: 1 } });
                  case 47:
                    if (!a2) {
                      j2.next = 64;
                      break;
                    }
                    if (!(this.nosErrorCount <= 0)) {
                      j2.next = 60;
                      break;
                    }
                    j2.prev = 49, this.cloudStorage.mixStorage._addCircuitTimer(), j2.next = 56;
                    break;
                  case 53:
                    throw j2.prev = 53, j2.t2 = j2.catch(49), new Dl({ code: get(this.core, "options.apiVersion") === "v2" ? Nl.V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED : 400, detail: { reason: "All upload attempts failed", rawError: j2.t2, curProvider: this.cloudStorage.mixStorage.curProvider, mixStorePolicy: this.cloudStorage.mixStorage.mixStorePolicy, file: t3.file || t3.filePath } });
                  case 56:
                    return this.nosErrorCount = get(this.cloudStorage, "mixStorePolicy.nosPolicy.uploadConfig.retryPolicy.retry"), j2.abrupt("return", this.cloudStorage._uploadFile(t3));
                  case 60:
                    return this.nosErrorCount--, j2.abrupt("return", this.nosUpload(t3, a2));
                  case 62:
                    j2.next = 65;
                    break;
                  case 64:
                    throw new Dl({ code: get(this.core, "options.apiVersion") === "v2" ? Nl.V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED : 400, detail: { reason: "NOS attempts failed", rawError: j2.t1, curProvider: 1 } });
                  case 65:
                    if (V2 = N2 == null ? void 0 : N2.type, (U2 = V2 && indexOf(V2).call(V2, "/") > -1 ? slice(V2).call(V2, 0, indexOf(V2).call(V2, "/")) : "") || (U2 = t3.type || ""), (D2 = { image: "imageInfo", video: "vinfo", audio: "vinfo" })[U2]) {
                      j2.next = 71;
                      break;
                    }
                    return j2.abrupt("return", Dt({ url: A2 }, N2));
                  case 71:
                    return j2.prev = 71, j2.next = 74, this.core.adapters.request(w2 + "?" + D2[U2], { method: "GET", dataType: "json", timeout: 5e3 }, { exception_service: 3 });
                  case 74:
                    q2 = j2.sent, j2.next = 81;
                    break;
                  case 77:
                    return j2.prev = 77, j2.t3 = j2.catch(71), this.core.logger.error("uploadFile:: fetch file info error", j2.t3), j2.abrupt("return", Dt({ url: A2 }, N2));
                  case 81:
                    if (!q2) {
                      j2.next = 88;
                      break;
                    }
                    return B2 = q2.data, G2 = D2[U2] === "imageInfo" ? B2 : (T2 = B2 == null ? void 0 : B2.GetVideoInfo) === null || T2 === void 0 ? void 0 : T2.VideoInfo, H2 = { url: A2, name: N2.name, size: N2.size, ext: N2.ext, w: G2 == null ? void 0 : G2.Width, h: G2 == null ? void 0 : G2.Height, orientation: G2 == null ? void 0 : G2.Orientation, dur: G2 == null ? void 0 : G2.Duration, audioCodec: G2 == null ? void 0 : G2.AudioCodec, videoCodec: G2 == null ? void 0 : G2.VideoCodec, container: G2 == null ? void 0 : G2.Container }, j2.abrupt("return", pickBy(H2, function(t4) {
                      return t4 !== void 0;
                    }));
                  case 88:
                    return j2.abrupt("return", Dt({ url: A2 }, N2));
                  case 89:
                  case "end":
                    return j2.stop();
                }
            }, _callee3, this, [[6, 12], [23, 33], [49, 53], [71, 77]]);
          }));
        }, t2._getNosCdnHost = function _getNosCdnHost() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a2, u2, m2, h2 = this;
            return Ql.wrap(function _callee4$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return g2.prev = 0, g2.next = 3, this.core.sendCmd("getNosCdnHost");
                  case 3:
                    a2 = g2.sent, g2.next = 10;
                    break;
                  case 6:
                    return g2.prev = 6, g2.t0 = g2.catch(0), this.core.logger.error("getNosCdnHost::error", g2.t0), g2.abrupt("return");
                  case 10:
                    if (a2) {
                      g2.next = 12;
                      break;
                    }
                    return g2.abrupt("return");
                  case 12:
                    u2 = (t3 = a2 == null ? void 0 : a2.content) === null || t3 === void 0 ? void 0 : t3.nosConfigTag, (m2 = Uu(u2 == null ? void 0 : u2.expire)) !== 0 && u2.cdnDomain ? m2 === -1 ? (this.config.cdn.bucket = u2.bucket, this.config.cdn.cdnDomain = u2.cdnDomain, this.config.cdn.objectNamePrefix = u2.objectNamePrefix) : (this.config.cdn.bucket = u2.bucket, this.config.cdn.cdnDomain = u2.cdnDomain, this.config.cdn.objectNamePrefix = u2.objectNamePrefix, this.nosCdnHostTimer = this.core.timerManager.addTimer(function() {
                      h2._getNosCdnHost();
                    }, 1e3 * m2)) : (this.config.cdn.bucket = "", this.config.cdn.cdnDomain = "", this.config.cdn.objectNamePrefix = "");
                  case 15:
                  case "end":
                    return g2.stop();
                }
            }, _callee4, this, [[0, 6]]);
          }));
        }, Ye(NOS, [{ key: "config", get: function get2() {
          return this.cloudStorage.config;
        } }]), NOS;
      }(), Kh = { "6_2": "getNosToken", "6_22": "getOriginUrl", "6_24": "getNosAccessToken", "6_25": "deleteNosAccessToken", "6_26": "getNosCdnHost", "6_27": "getGrayscaleConfig", "6_28": "getMixStorePolicy", "6_29": "getMixStoreToken", "6_30": "getFileAuthToken" }, Yh = { nosToken: { objectName: 1, token: 2, bucket: 3, expireTime: 4, expireSec: 7, tag: 8, shortUrl: 9 }, mixStoreTokenReqTag: { provider: 0, tokenCount: 1, nosSurvivalTime: 2, tag: 3, returnBody: 4, policyVersion: 5 }, nosConfigTag: { bucket: 1, cdnDomain: 2, expire: 3, objectNamePrefix: 4 }, grayConfigTag: { config: 0, ttl: 1 }, mixStorePolicyTag: { providers: 0, ttl: 1, mixEnable: 2, nosPolicy: 3, s3Policy: 4, policyVersion: 5 }, mixStoreTokenResTag: { provider: 0, accessKeyId: 1, secretAccessKey: 2, sessionToken: 3, token: 4, expireTime: 5, bucket: 6, objectName: 7, fileExpireSec: 8, tag: 9, shortUrl: 10, region: 11 }, nosSafeUrlTag: { safeUrl: 0, originUrl: 1 }, mixStoreAuthTokenReqTag: { type: 1, urls: 2 }, mixStoreAuthTokenResTag: { type: 1, tokens: 2, token: 3, ttl: 4 }, nosAccessTokenTag: { token: 0, url: 1, userAgent: 2, ext: 3 } }, Qh = { getNosToken: { sid: 6, cid: 2, service: "cloudStorage", params: [{ type: "String", name: "responseBody" }, { type: "Property", name: "nosToken", entity: "nosToken", reflectMapper: Yh.nosToken }], response: [{ type: "Property", name: "nosToken", reflectMapper: invert(Yh.nosToken) }] }, getOriginUrl: { sid: 6, cid: 22, service: "cloudStorage", params: [{ type: "Property", name: "nosSafeUrlTag", reflectMapper: Yh.nosSafeUrlTag }], response: [{ type: "Property", name: "nosSafeUrlTag", reflectMapper: invert(Yh.nosSafeUrlTag) }] }, getNosCdnHost: { sid: 6, cid: 26, service: "cloudStorage", response: [{ type: "Property", name: "nosConfigTag", reflectMapper: invert(Yh.nosConfigTag) }] }, getGrayscaleConfig: { sid: 6, cid: 27, service: "cloudStorage", params: [{ type: "Property", name: "config" }], response: [{ type: "Property", name: "grayConfigTag", reflectMapper: invert(Yh.grayConfigTag) }] }, getMixStorePolicy: { sid: 6, cid: 28, service: "cloudStorage", params: [{ type: "LongArray", name: "supportType" }], response: [{ type: "Property", name: "mixStorePolicyTag", reflectMapper: invert(Yh.mixStorePolicyTag) }] }, getMixStoreToken: { sid: 6, cid: 29, service: "cloudStorage", params: [{ type: "Property", name: "mixStoreTokenReqTag", reflectMapper: Yh.mixStoreTokenReqTag }], response: [{ type: "Property", name: "mixStoreTokenResTag", reflectMapper: invert(Yh.mixStoreTokenResTag) }] }, getFileAuthToken: { sid: 6, cid: 30, service: "cloudStorage", params: [{ type: "Property", name: "mixStoreAuthTokenReqTag", reflectMapper: Yh.mixStoreAuthTokenReqTag }], response: [{ type: "Property", name: "mixStoreAuthTokenResTag", reflectMapper: invert(Yh.mixStoreAuthTokenResTag) }] }, getNosAccessToken: { sid: 6, cid: 24, service: "cloudStorage", params: [{ type: "Property", name: "tag", reflectMapper: Yh.nosAccessTokenTag }], response: [{ type: "Property", name: "tag", reflectMapper: invert(Yh.nosAccessTokenTag) }] }, deleteNosAccessToken: { sid: 6, cid: 25, service: "cloudStorage", params: [{ type: "Property", name: "tag", reflectMapper: Yh.nosAccessTokenTag }] } }, Jh = function() {
        function MixStorage(t3, a2) {
          this.GRAYKEY = "AllGrayscaleConfig", this.MIXSTOREKEY = "AllMixStorePolicy", this.grayConfig = { mixStoreEnable: false, timeStamp: 0, ttl: 0 }, this.mixStorePolicy = { providers: [], timeStamp: 0, ttl: 0, s3Policy: null, nosPolicy: null, policyVersion: void 0 }, this.curProvider = 1, this.mixStoreErrorCount = 10, this.circuitTimer = 0, this.core = t3, this.cloudStorage = a2, this.logger = t3.logger;
        }
        var t2 = MixStorage.prototype;
        return t2.reset = function reset() {
          this.grayConfig = null, this.mixStorePolicy = { providers: [], timeStamp: 0, ttl: 0, s3Policy: null, nosPolicy: null, policyVersion: void 0 }, this.curProvider = 1, this.mixStoreErrorCount = 10;
        }, t2.getGrayscaleConfig = function getGrayscaleConfig(t3) {
          var a2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2, m2;
            return Ql.wrap(function _callee$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    if (Jl.localStorage)
                      try {
                        Jl.localStorage.getItem && Jl.localStorage.getItem(this.GRAYKEY) && (this.grayConfig = JSON.parse(Jl.localStorage.getItem(this.GRAYKEY))[t3]);
                      } catch (t4) {
                        Jl.localStorage.getItem(this.GRAYKEY) && this.core.logger.error("uploadFile:: JSON.parse grayscaleConfig error ", t4);
                      }
                    if (this.grayConfig && !(this.grayConfig.timeStamp + 1e3 * this.grayConfig.ttl < new Date().getTime())) {
                      h2.next = 17;
                      break;
                    }
                    return h2.next = 4, this.core.sendCmd("getGrayscaleConfig", { config: {} });
                  case 4:
                    if (!(u2 = h2.sent).content || !u2.content.grayConfigTag) {
                      h2.next = 16;
                      break;
                    }
                    this.logger.log("uploadFile::getAppGrayConfigRequest success ");
                    try {
                      this.grayConfig = JSON.parse(u2.content.grayConfigTag.config), this.grayConfig.ttl = JSON.parse(u2.content.grayConfigTag.ttl);
                    } catch (t4) {
                      this.logger.error("getGrayscaleConfig error", t4);
                    }
                    if (this.grayConfig) {
                      h2.next = 10;
                      break;
                    }
                    return h2.abrupt("return");
                  case 10:
                    m2 = Jl.localStorage.getItem(this.GRAYKEY) ? JSON.parse(Jl.localStorage.getItem(this.GRAYKEY)) : {}, this.grayConfig.timeStamp = new Date().getTime(), m2[t3] = this.grayConfig, Jl.localStorage.setItem(this.GRAYKEY, Un(m2)), h2.next = 17;
                    break;
                  case 16:
                    this.logger.log("uploadFile:: result grayConfig:", u2.content);
                  case 17:
                    if (!((a2 = this.grayConfig) === null || a2 === void 0 ? void 0 : a2.mixStoreEnable)) {
                      h2.next = 20;
                      break;
                    }
                    return h2.next = 20, this._getMixStorePolicy(t3);
                  case 20:
                  case "end":
                    return h2.stop();
                }
            }, _callee, this);
          }));
        }, t2._getMixStorePolicy = function _getMixStorePolicy(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a2, u2, m2, h2, g2, M2, I2;
            return Ql.wrap(function _callee2$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    if (a2 = new Date().getTime(), Jl.localStorage)
                      try {
                        this.mixStorePolicy = JSON.parse(Jl.localStorage.getItem(this.MIXSTOREKEY))[t3], this.curProvider = Uu(this.mixStorePolicy.providers[0]), this.mixStorePolicy.timeStamp && this.mixStorePolicy.timeStamp + 1e3 * this.mixStorePolicy.ttl > a2 && (m2 = this.mixStorePolicy.timeStamp + 1e3 * this.mixStorePolicy.ttl - a2, this.core.timerManager.addTimer(bind$1(u2 = this._getMixStorePolicy).call(u2, this, t3), m2));
                      } catch (a3) {
                        Jl.localStorage.getItem(this.MIXSTOREKEY) && JSON.parse(Jl.localStorage.getItem(this.MIXSTOREKEY))[t3] && this.core.logger.error("uploadFile:: JSON.parse mixStorePolicy error ", a3);
                      }
                    if (this.mixStorePolicy && !(this.mixStorePolicy.timeStamp + 1e3 * this.mixStorePolicy.ttl <= a2)) {
                      S2.next = 31;
                      break;
                    }
                    return S2.prev = 3, S2.next = 6, this.core.sendCmd("getMixStorePolicy", { supportType: this.cloudStorage.aws.s3 ? [1, 2] : [1] });
                  case 6:
                    g2 = S2.sent, M2 = g2.content.mixStorePolicyTag, this.mixStorePolicy = { providers: [], timeStamp: 0, ttl: 0, s3Policy: null, nosPolicy: null, policyVersion: void 0 }, this.mixStorePolicy.policyVersion = M2.policyVersion, this.mixStorePolicy.ttl = Number(M2.ttl), this.mixStorePolicy.providers = M2.providers.split(","), this.circuitTimer && this.core.timerManager.deleteTimer(this.circuitTimer), this.curProvider = Uu(this.mixStorePolicy.providers[0]), this.mixStorePolicy.nosPolicy = M2.nosPolicy ? JSON.parse(M2.nosPolicy) : null, this.mixStorePolicy.s3Policy = M2.s3Policy ? JSON.parse(M2.s3Policy) : null, this.mixStorePolicy.s3Policy === null ? this.mixStorePolicy.providers = ["1"] : this.mixStorePolicy.nosPolicy === null ? this.mixStorePolicy.providers = ["2"] : this.mixStorePolicy.providers = this.mixStorePolicy.s3Policy.priority < this.mixStorePolicy.nosPolicy.priority ? ["2", "1"] : ["1", "2"], this.core.timerManager.addTimer(bind$1(h2 = this._getMixStorePolicy).call(h2, this, t3), 1e3 * this.mixStorePolicy.ttl), I2 = Jl.localStorage.getItem(this.MIXSTOREKEY) ? JSON.parse(Jl.localStorage.getItem(this.MIXSTOREKEY)) : {}, this.mixStorePolicy.timeStamp = new Date().getTime(), I2[t3] = this.mixStorePolicy, Jl.localStorage.setItem(this.MIXSTOREKEY, Un(I2)), S2.next = 31;
                    break;
                  case 24:
                    if (S2.prev = 24, S2.t0 = S2.catch(3), this.logger.error("getMixStorePolicy error", S2.t0), this.mixStoreErrorCount !== 0) {
                      S2.next = 29;
                      break;
                    }
                    throw new Error("getMixStorePolicy all count error");
                  case 29:
                    this._getMixStorePolicy(t3), this.mixStoreErrorCount--;
                  case 31:
                    this.mixStorePolicy.nosPolicy && (this.cloudStorage.nos.nosErrorCount = this.mixStorePolicy.nosPolicy.uploadConfig.retryPolicy.retry);
                  case 32:
                  case "end":
                    return S2.stop();
                }
            }, _callee2, this, [[3, 24]]);
          }));
        }, t2._addCircuitTimer = function _addCircuitTimer() {
          var t3 = this, a2 = this.mixStorePolicy.providers, u2 = a2[(indexOf(a2).call(a2, String(this.curProvider)) + 1) % a2.length];
          if (!u2)
            throw new Error("uploadFile nextProvider error");
          if (u2 === a2[0])
            throw new Error("uploadFile all policy fail");
          if (this.logger.log("uploadFile:: upload policy will change,now policy:" + this.curProvider + " nextProvider:" + u2), this.curProvider = Uu(u2), this.mixStorePolicy.nosPolicy && this.mixStorePolicy.s3Policy) {
            var m2 = this.mixStorePolicy[this.curProvider === 1 ? "nosPolicy" : "s3Policy"].uploadConfig.retryPolicy.circuit;
            if (!m2 || m2 === 0)
              throw new Error("uploadFile circuit error");
            this.circuitTimer = this.core.timerManager.addTimer(function() {
              t3.logger.log("uploadFile:: upload policy will change,now policy:" + t3.curProvider + " nextProvider:" + Uu(t3.mixStorePolicy.providers[0])), t3.curProvider = Uu(t3.mixStorePolicy.providers[0]), t3.core.timerManager.deleteTimer(t3.circuitTimer);
            }, 1e3 * m2);
          }
          throw new Error("uploadFile will not retry again");
        }, t2.getFileAuthToken = function getFileAuthToken(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a2;
            return Ql.wrap(function _callee3$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return u2.next = 2, this.core.sendCmd("getFileAuthToken", { mixStoreAuthTokenReqTag: t3 });
                  case 2:
                    return a2 = u2.sent, u2.abrupt("return", a2.content.mixStoreAuthTokenResTag);
                  case 4:
                  case "end":
                    return u2.stop();
                }
            }, _callee3, this);
          }));
        }, MixStorage;
      }(), Xh = gu.trim, Zh = w("".charAt), eg = h.parseFloat, tg = h.Symbol, rg = tg && tg.iterator, ng = 1 / eg(uu + "-0") != -1 / 0 || rg && !fails(function() {
        eg(Object(rg));
      }) ? function parseFloat2(t2) {
        var a2 = Xh(toString(t2)), u2 = eg(a2);
        return u2 === 0 && Zh(a2, 0) == "-" ? -0 : u2;
      } : eg;
      _export({ global: true, forced: parseFloat != ng }, { parseFloat: ng });
      var ag = j.parseFloat, ig = -1, og = function() {
        function AWS(t3, a2) {
          this.s3 = null, this.core = t3, this.cloudStorage = a2, this.logger = t3.logger;
        }
        var t2 = AWS.prototype;
        return t2.s3Upload = function s3Upload(t3, a2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var u2, m2, h2, g2, M2, I2, S2, T2, C2, b2, E2, k2, w2, R2, A2 = this;
            return Ql.wrap(function _callee2$(N2) {
              for (; ; )
                switch (N2.prev = N2.next) {
                  case 0:
                    if (ig += 1, !t3.file) {
                      N2.next = 5;
                      break;
                    }
                    u2 = t3.file, N2.next = 20;
                    break;
                  case 5:
                    if (typeof t3.fileInput != "string") {
                      N2.next = 15;
                      break;
                    }
                    if (this.logger.warn("fileInput will abandon,Please use file or filepath"), !((m2 = document.getElementById(t3.fileInput)) && m2.files && m2.files[0])) {
                      N2.next = 12;
                      break;
                    }
                    u2 = m2.files[0], N2.next = 13;
                    break;
                  case 12:
                    throw new Error("Can not get file from fileInput");
                  case 13:
                    N2.next = 20;
                    break;
                  case 15:
                    if (!(t3.fileInput && t3.fileInput.files && t3.fileInput.files[0])) {
                      N2.next = 19;
                      break;
                    }
                    u2 = t3.fileInput.files[0], N2.next = 20;
                    break;
                  case 19:
                    throw new Error("Can not get file from fileInput " + t3.fileInput);
                  case 20:
                    if (this.mixStorePolicy.s3Policy) {
                      N2.next = 22;
                      break;
                    }
                    throw new Error("dont get s3 policy");
                  case 22:
                    return h2 = { accessKeyId: a2.accessKeyId, secretAccessKey: a2.secretAccessKey, sessionToken: a2.sessionToken, region: a2.region, maxRetries: this.mixStorePolicy.s3Policy.uploadConfig.retryPolicy.retry }, g2 = this.s3, M2 = decodeURIComponent(a2.bucket), I2 = decodeURIComponent(a2.objectName), S2 = u2, T2 = "https://" + M2 + ".s3.amazonaws.com/" + I2, C2 = {}, (b2 = this.mixStorePolicy.s3Policy) && b2.uploadConfig && Dn(b2.uploadConfig.uploadUrl) && b2.uploadConfig.uploadUrl.length > 0 && (E2 = b2.uploadConfig.uploadUrl.length, ig %= E2, C2.endpoint = b2.uploadConfig.uploadUrl[ig], C2.s3ForcePathStyle = true, T2 = C2.endpoint + "/" + M2 + "/" + I2), this.core.reporterHookCloudStorage.update({ remote_addr: T2, operation_type: 1 }), (k2 = new g2(C2)).config.update(h2), w2 = { Bucket: M2, Key: I2, Body: S2, Metadata: { token: a2.token }, ContentType: S2.type || "application/octet-stream" }, this.core.logger.log("uploadFile:: s3 upload params:", w2), (R2 = k2.upload(w2)).on("httpUploadProgress", function(a3) {
                      var u3 = ag((a3.loaded / a3.total).toFixed(2));
                      t3.onUploadProgress && t3.onUploadProgress({ total: a3.total, loaded: a3.loaded, percentage: u3, percentageText: Math.round(100 * u3) + "%" });
                    }), N2.abrupt("return", new zi(function(u3, m3) {
                      var h3 = new Date().getTime();
                      R2.send(function(g3, T3) {
                        return __awaiter(A2, void 0, void 0, Ql.mark(function _callee() {
                          var C3, b3, E3, k3, w3, R3, A3, N3;
                          return Ql.wrap(function _callee$(x2) {
                            for (; ; )
                              switch (x2.prev = x2.next) {
                                case 0:
                                  if (!g3 || g3.code !== "RequestAbortedError") {
                                    x2.next = 5;
                                    break;
                                  }
                                  this.logger.error("uploadFile:", "api::s3:upload file abort.", g3), m3(new Dl({ code: get(this.core, "options.apiVersion") === "v2" ? Nl.V2NIM_ERROR_CODE_CANCELLED : 400, detail: { reason: "S3RequestAbortedError", rawError: g3, curProvider: 2 } })), x2.next = 41;
                                  break;
                                case 5:
                                  if (!g3) {
                                    x2.next = 26;
                                    break;
                                  }
                                  return this.logger.error("uploadFile:", "api::s3:upload file failed.", g3), this.core.reporter.reportTraceStart("exceptions", { user_id: this.core.options.account || ((b3 = (C3 = this.core) === null || C3 === void 0 ? void 0 : C3.auth) === null || b3 === void 0 ? void 0 : b3.account), trace_id: (E3 = this.core.clientSocket.socket) === null || E3 === void 0 ? void 0 : E3.sessionId, start_time: h3, action: 1, exception_service: 4 }), this.core.reporter.reportTraceUpdateV2("exceptions", { code: typeof g3.status == "number" ? g3.status : typeof g3.code == "number" ? g3.code : 0, description: g3.message || "" + g3.code, operation_type: 1, target: Un({ bucket: M2, object: I2 }) }, { asyncParams: Jl.net.getNetworkStatus() }), this.core.reporter.reportTraceEnd("exceptions", 1), x2.next = 12, Jl.net.getNetworkStatus();
                                case 12:
                                  if (k3 = x2.sent, k3.net_connect !== false) {
                                    x2.next = 16;
                                    break;
                                  }
                                  return x2.abrupt("return", m3(new Dl({ code: get(this.core, "options.apiVersion") === "v2" ? Nl.V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED : 400, detail: { reason: "No network", rawError: g3, curProvider: this.cloudStorage.mixStorage.curProvider } })));
                                case 16:
                                  x2.prev = 16, this.cloudStorage.mixStorage._addCircuitTimer(), x2.next = 23;
                                  break;
                                case 20:
                                  return x2.prev = 20, x2.t0 = x2.catch(16), x2.abrupt("return", m3(new Dl({ code: get(this.core, "options.apiVersion") === "v2" ? Nl.V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED : 400, detail: { reason: "All upload attempts failed", rawError: x2.t0, curProvider: this.cloudStorage.mixStorage.curProvider, mixStorePolicy: this.mixStorePolicy, file: t3.file || t3.filePath } })));
                                case 23:
                                  u3(this.cloudStorage._uploadFile(t3)), x2.next = 41;
                                  break;
                                case 26:
                                  if (w3 = (w3 = (w3 = this.mixStorePolicy.s3Policy.cdnSchema).replace("{cdnDomain}", this.mixStorePolicy.s3Policy.dlcdn)).replace("{objectName}", T3.Key), R3 = { size: S2.size, name: S2.name, url: a2.shortUrl ? a2.shortUrl : w3, ext: S2.name.split(".")[1] || "unknown" }, A3 = t3.type || "", (N3 = { image: "imageInfo" })[A3]) {
                                    x2.next = 36;
                                    break;
                                  }
                                  return x2.abrupt("return", u3(R3));
                                case 36:
                                  return x2.t1 = u3, x2.next = 39, this.getS3FileInfo({ url: w3, infoSuffix: N3[A3], s3Result: R3 });
                                case 39:
                                  return x2.t2 = x2.sent, x2.abrupt("return", (0, x2.t1)(x2.t2));
                                case 41:
                                case "end":
                                  return x2.stop();
                              }
                          }, _callee, this, [[16, 20]]);
                        }));
                      }), t3.onUploadStart && t3.onUploadStart(R2);
                    }));
                  case 39:
                  case "end":
                    return N2.stop();
                }
            }, _callee2, this);
          }));
        }, t2.getS3FileInfo = function getS3FileInfo(t3) {
          var a2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var u2, m2, h2, g2, M2, I2, S2;
            return Ql.wrap(function _callee3$(T2) {
              for (; ; )
                switch (T2.prev = T2.next) {
                  case 0:
                    return u2 = t3.url, m2 = t3.infoSuffix, h2 = t3.s3Result, T2.prev = 1, T2.next = 4, this.core.adapters.request(u2 + "?" + m2, { method: "GET", dataType: "text", timeout: 5e3 }, { exception_service: 3 });
                  case 4:
                    g2 = T2.sent, T2.next = 11;
                    break;
                  case 7:
                    return T2.prev = 7, T2.t0 = T2.catch(1), this.core.logger.error("uploadFile:: fetch file info error", T2.t0), T2.abrupt("return", h2);
                  case 11:
                    if (!g2) {
                      T2.next = 18;
                      break;
                    }
                    return M2 = g2.data, I2 = m2 === "imageInfo" ? M2 : (a2 = M2 == null ? void 0 : M2.GetVideoInfo) === null || a2 === void 0 ? void 0 : a2.VideoInfo, S2 = Dt(Dt({}, h2), { w: I2 == null ? void 0 : I2.Width, h: I2 == null ? void 0 : I2.Height, orientation: I2 == null ? void 0 : I2.Orientation, dur: I2 == null ? void 0 : I2.Duration, audioCodec: I2 == null ? void 0 : I2.AudioCodec, videoCodec: I2 == null ? void 0 : I2.VideoCodec, container: I2 == null ? void 0 : I2.Container }), T2.abrupt("return", pickBy(S2, function(t4) {
                      return t4 !== void 0;
                    }));
                  case 18:
                    return this.core.logger.error("uploadFile:: fetch s3 file info no result", u2 + "?" + m2), T2.abrupt("return", h2);
                  case 20:
                  case "end":
                    return T2.stop();
                }
            }, _callee3, this, [[1, 7]]);
          }));
        }, Ye(AWS, [{ key: "mixStorePolicy", get: function get2() {
          return this.cloudStorage.mixStorage.mixStorePolicy;
        } }]), AWS;
      }(), sg = function() {
        function CloudStorageService(t3, a2) {
          a2 === void 0 && (a2 = {}), this.config = {}, this.uploadTaskMap = {}, this.name = "cloudStorage", this.logger = t3.logger, this.core = t3, this.nos = new Wh(t3, this), this.mixStorage = new Jh(t3, this), this.aws = new og(t3, this), registerParser({ cmdMap: Kh, cmdConfig: Qh }), this.setOptions(a2), this.setListeners();
        }
        var t2 = CloudStorageService.prototype;
        return t2.setOptions = function setOptions(t3) {
          t3 === void 0 && (t3 = {});
          var a2 = t3.storageKeyPrefix || "NIMClient";
          this.mixStorage.GRAYKEY = a2 + "-AllGrayscaleConfig", this.mixStorage.MIXSTOREKEY = a2 + "-AllMixStorePolicy";
          var u2 = t3.s3, m2 = __rest(t3, ["s3"]), h2 = Dt({}, zh, this.config);
          if (m2 && Object.prototype.hasOwnProperty.call(m2, "cdn")) {
            var g2 = Dt(Dt({}, h2.cdn), m2.cdn);
            this.config = Dt({}, h2, m2), this.config.cdn = g2;
          } else
            this.config = Dt({}, h2, m2);
          u2 && (this.aws.s3 = u2);
        }, t2.setListeners = function setListeners() {
          var t3, a2, u2, m2;
          this.core.eventBus.on("kicked", bind$1(t3 = this._clearUnCompleteTask).call(t3, this)), this.core.eventBus.on("disconnect", bind$1(a2 = this._clearUnCompleteTask).call(a2, this)), this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLogout", bind$1(u2 = this._clearUnCompleteTask).call(u2, this)), this.core.eventBus.on("V2NIMLoginService/loginLifeCycleKicked", bind$1(m2 = this._clearUnCompleteTask).call(m2, this));
        }, t2._clearUnCompleteTask = function _clearUnCompleteTask() {
          var t3, a2 = this;
          forEach$1(t3 = Ht(this.uploadTaskMap)).call(t3, function(t4) {
            var u2 = a2.uploadTaskMap[t4];
            u2 && u2.abort && u2.abort();
          }), this.uploadTaskMap = {};
        }, t2.init = function init() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            return Ql.wrap(function _callee$(t3) {
              for (; ; )
                switch (t3.prev = t3.next) {
                  case 0:
                    if (this.mixStorage.reset(), this.nos.reset(), !this.config.isNeedToGetUploadPolicyFromServer) {
                      t3.next = 5;
                      break;
                    }
                    return t3.next = 5, this.mixStorage.getGrayscaleConfig(this.core.options.appkey);
                  case 5:
                    return t3.next = 7, this.nos._getNosCdnHost();
                  case 7:
                  case "end":
                    return t3.stop();
                }
            }, _callee, this);
          }));
        }, t2.processCallback = function processCallback(t3, a2) {
          var u2 = this, m2 = t3.onUploadProgress, h2 = t3.onUploadDone, g2 = t3.onUploadStart;
          return { onUploadStart: typeof g2 == "function" ? function(t4) {
            u2.uploadTaskMap[a2] = t4;
            try {
              g2(t4);
            } catch (t5) {
              u2.logger.error("CloudStorage::uploadFile:options.onUploadStart execute error", t5);
            }
          } : function(t4) {
            u2.uploadTaskMap[a2] = t4;
          }, onUploadProgress: typeof m2 == "function" ? function(t4) {
            u2.core.reporterHookCloudStorage.update({ transferred_size: t4.loaded, full_size: t4.total });
            try {
              m2(t4);
            } catch (t5) {
              u2.logger.error("CloudStorage::uploadFile:options.onUploadProgress execute error", t5);
            }
          } : function(t4) {
            u2.core.reporterHookCloudStorage.update({ transferred_size: t4.loaded, full_size: t4.total });
          }, onUploadDone: typeof h2 == "function" ? function(t4) {
            u2.core.reporterHookCloudStorage.end(0);
            try {
              h2(t4);
            } catch (t5) {
              u2.logger.error("CloudStorage::uploadFile:options.onUploadDone execute error", t5);
            }
          } : function() {
            u2.core.reporterHookCloudStorage.end(0);
          }, taskKey: a2 };
        }, t2.uploadFile = function uploadFile(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a2, u2, m2, h2, g2, M2, I2, S2;
            return Ql.wrap(function _callee2$(T2) {
              for (; ; )
                switch (T2.prev = T2.next) {
                  case 0:
                    if (validate({ maxSize: { type: "number", required: false }, type: { type: "enum", values: ["file", "image", "audio", "video"] } }, t3), t3.fileInput || t3.file || t3.filePath) {
                      T2.next = 3;
                      break;
                    }
                    throw new Error("uploadFile needs target file object or a filePath");
                  case 3:
                    if (!t3.type || t3.type === "file") {
                      T2.next = 7;
                      break;
                    }
                    if (!(a2 = get(t3, "file.type")) || typeof a2 != "string" || indexOf(a2).call(a2, t3.type) !== -1) {
                      T2.next = 7;
                      break;
                    }
                    throw new Error('The meta type "' + a2 + '" does not match "' + t3.type + '"');
                  case 7:
                    return this.core.reporterHookCloudStorage.start(), t3.file ? this.core.reporterHookCloudStorage.update({ full_size: t3.file.size }) : typeof t3.fileInput == "string" ? (u2 = document.getElementById(t3.fileInput)) && u2.files && u2.files[0] && this.core.reporterHookCloudStorage.update({ full_size: u2.files[0].size }) : t3.fileInput && t3.fileInput.files && t3.fileInput.files[0] && this.core.reporterHookCloudStorage.update({ full_size: t3.fileInput.files[0].size }), m2 = Iu(), h2 = this.processCallback(t3, m2), g2 = h2.onUploadStart, M2 = h2.onUploadProgress, I2 = h2.onUploadDone, t3.onUploadStart = g2, t3.onUploadProgress = M2, t3.onUploadDone = I2, S2 = null, T2.prev = 15, T2.next = 18, this._uploadFile(t3);
                  case 18:
                    S2 = T2.sent, t3.md5 && (S2.md5 = t3.md5), delete this.uploadTaskMap[m2], T2.next = 28;
                    break;
                  case 23:
                    throw T2.prev = 23, T2.t0 = T2.catch(15), delete this.uploadTaskMap[m2], this.core.reporterHookCloudStorage.end((T2.t0 && T2.t0.code) === Nl.V2NIM_ERROR_CODE_CANCELLED ? 3 : 1), T2.t0;
                  case 28:
                    return S2 && (S2.size = S2.size === void 0 ? void 0 : Number(S2.size), S2.w = S2.w === void 0 ? void 0 : Number(S2.w), S2.h = S2.h === void 0 ? void 0 : Number(S2.h), S2.dur = S2.dur === void 0 ? void 0 : Number(S2.dur)), S2.url = decodeURIComponent(S2.url), t3.onUploadDone({ size: S2.size, name: S2.name, url: S2.url, ext: S2.name.split(".")[1] || "unknown" }), T2.abrupt("return", S2);
                  case 32:
                  case "end":
                    return T2.stop();
                }
            }, _callee2, this, [[15, 23]]);
          }));
        }, t2._uploadFile = function _uploadFile(t3) {
          var a2, u2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var m2, h2, g2, M2;
            return Ql.wrap(function _callee3$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    if (get(this.mixStorage, "grayConfig.mixStoreEnable") && get(this.mixStorage, "mixStorePolicy.providers.length")) {
                      I2.next = 3;
                      break;
                    }
                    return this.logger.log("uploadFile:: uploadFile begin, use old nos"), I2.abrupt("return", this.nos.nosUpload(t3));
                  case 3:
                    if (this.logger.log("uploadFile::_uploadFile, grayConfig enable:" + get(this.mixStorage, "grayConfig.mixStoreEnable") + " curProvider:" + get(this.mixStorage, "curProvider")), m2 = this.core.adapters.getFileUploadInformation(t3), h2 = true, m2 ? m2.complete === false && this.mixStorage.curProvider === 2 && (h2 = false) : h2 = false, this.aws.s3 || (this.mixStorage.curProvider = 1), g2 = $h, h2) {
                      I2.next = 23;
                      break;
                    }
                    return I2.prev = 10, I2.next = 13, this.core.sendCmd("getMixStoreToken", { mixStoreTokenReqTag: { provider: this.mixStorage.curProvider, tokenCount: 1, tag: "qchat", nosSurvivalTime: t3.nosSurvivalTime, returnBody: getUploadResponseFormat(t3.type), policyVersion: this.mixStorage.mixStorePolicy.policyVersion } });
                  case 13:
                    M2 = I2.sent, g2 = M2.content.mixStoreTokenResTag, I2.next = 23;
                    break;
                  case 17:
                    if (I2.prev = 17, I2.t0 = I2.catch(10), this.core.logger.error("uploadFile:: getMixStoreToken error", I2.t0), !(I2.t0 instanceof Pl)) {
                      I2.next = 22;
                      break;
                    }
                    throw I2.t0;
                  case 22:
                    throw new Dl({ code: get(this.core, "options.apiVersion") === "v2" ? Nl.V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED : 400, detail: { reason: "getMixStoreToken error", rawError: I2.t0, curProvider: this.mixStorage.curProvider, mixStorePolicy: this.mixStorage.mixStorePolicy } });
                  case 23:
                    if (h2) {
                      I2.next = 27;
                      break;
                    }
                    return I2.abrupt("return", this.mixStorage.curProvider === 2 ? this.aws.s3Upload(t3, g2) : this.nos.nosUpload(t3, g2));
                  case 27:
                    return I2.abrupt("return", this.nos.nosUpload(t3, (u2 = (a2 = m2 == null ? void 0 : m2.uploadInfo) === null || a2 === void 0 ? void 0 : a2.payload) === null || u2 === void 0 ? void 0 : u2.mixStoreToken));
                  case 28:
                  case "end":
                    return I2.stop();
                }
            }, _callee3, this, [[10, 17]]);
          }));
        }, t2.getThumbUrl = function getThumbUrl(t3, a2) {
          var u2, m2, h2, g2, M2;
          if (!new RegExp(/http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- ./?%&=]*)?/).test(t3))
            return this.logger.error("illegal file url:" + t3), t3;
          var I2 = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/.exec(t3);
          I2[0], I2[1], I2[2], I2[3], I2[4];
          var S2 = I2[5];
          if (I2[6], I2[7], (u2 = this.grayConfig) === null || u2 === void 0 ? void 0 : u2.mixStoreEnable) {
            var T2 = this._getUrlType(t3);
            if (T2 === 2 && this.mixStorePolicy.s3Policy && get(this.mixStorePolicy, "s3Policy.thumbPolicy.imagethumb"))
              return ((h2 = (m2 = this.mixStorePolicy.s3Policy) === null || m2 === void 0 ? void 0 : m2.thumbPolicy) === null || h2 === void 0 ? void 0 : h2.imagethumb).replace("{cdnDomain}", this.mixStorePolicy.s3Policy.dlcdn).replace("{objectName}", S2).replace("{x}", a2.width.toString()).replace("{y}", a2.height.toString());
            if (T2 === 1 && this.mixStorePolicy.nosPolicy && get(this.mixStorePolicy, "nosPolicy.thumbPolicy.imagethumb"))
              return ((M2 = (g2 = this.mixStorePolicy.nosPolicy) === null || g2 === void 0 ? void 0 : g2.thumbPolicy) === null || M2 === void 0 ? void 0 : M2.imagethumb).replace("{cdnDomain}", this.mixStorePolicy.nosPolicy.dlcdn).replace("{objectName}", S2).replace("{x}", a2.width.toString()).replace("{y}", a2.height.toString());
          }
          return includes(t3).call(t3, "?") ? t3 + "&imageView&thumbnail=" + a2.width + "x" + a2.height : t3 + "?imageView&thumbnail=" + a2.width + "x" + a2.height;
        }, t2.getVideoCoverUrl = function getVideoCoverUrl(t3, a2) {
          var u2, m2, h2, g2, M2;
          if (!new RegExp(/http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- ./?%&=]*)?/).test(t3))
            return this.logger.error("illegal file url:" + t3), t3;
          var I2 = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/.exec(t3);
          I2[0], I2[1], I2[2], I2[3], I2[4];
          var S2 = I2[5];
          if (I2[6], I2[7], (u2 = this.grayConfig) === null || u2 === void 0 ? void 0 : u2.mixStoreEnable) {
            var T2 = this._getUrlType(t3);
            if (T2 === 2 && this.mixStorePolicy.s3Policy && get(this.mixStorePolicy, "s3Policy.thumbPolicy.vframe"))
              return ((h2 = (m2 = this.mixStorePolicy.s3Policy) === null || m2 === void 0 ? void 0 : m2.thumbPolicy) === null || h2 === void 0 ? void 0 : h2.vframe).replace("{cdnDomain}", this.mixStorePolicy.s3Policy.dlcdn).replace("{objectName}", S2).replace("{x}", a2.width.toString()).replace("{y}", a2.height.toString()).replace("{offset}", "0").replace("{type}", "png");
            if (T2 === 1 && this.mixStorePolicy.nosPolicy && get(this.mixStorePolicy, "nosPolicy.thumbPolicy.vframe"))
              return ((M2 = (g2 = this.mixStorePolicy.nosPolicy) === null || g2 === void 0 ? void 0 : g2.thumbPolicy) === null || M2 === void 0 ? void 0 : M2.vframe).replace("{cdnDomain}", this.mixStorePolicy.nosPolicy.dlcdn).replace("{objectName}", S2).replace("{x}", a2.width.toString()).replace("{y}", a2.height.toString()).replace("{offset}", "0").replace("{type}", "png");
          }
          return includes(t3).call(t3, "?") ? t3 + "&vframe&offset=0&resize=" + a2.width + "x" + a2.height + "&type=png" : t3 + "?vframe&offset=0&resize=" + a2.width + "x" + a2.height + "&type=png";
        }, t2.getPrivateUrl = function getPrivateUrl(t3) {
          var a2;
          if (!new RegExp(/http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- ./?%&=]*)?/).test(t3))
            return this.logger.error("illegal file url:" + t3), "";
          var u2 = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/.exec(t3);
          u2[0];
          var m2 = u2[1];
          u2[2];
          var h2 = u2[3];
          u2[4];
          var g2 = u2[5];
          if (u2[6], u2[7], (a2 = this.grayConfig) === null || a2 === void 0 ? void 0 : a2.mixStoreEnable) {
            var M2 = this._getUrlType(t3);
            return M2 === 2 && this.mixStorePolicy.s3Policy && (t3 = this.mixStorePolicy.s3Policy.cdnSchema.replace("{cdnDomain}", this.mixStorePolicy.s3Policy.dlcdn).replace("{objectName}", g2)), M2 === 1 && this.mixStorePolicy.nosPolicy && (t3 = this.mixStorePolicy.nosPolicy.cdnSchema.replace("{cdnDomain}", this.mixStorePolicy.nosPolicy.dlcdn).replace("{objectName}", g2)), t3;
          }
          var I2 = this.config, S2 = I2.downloadUrl, T2 = I2.downloadHostList, C2 = I2.nosCdnEnable, b2 = this.config.cdn.cdnDomain, E2 = this.config.cdn.objectNamePrefix ? decodeURIComponent(this.config.cdn.objectNamePrefix) : "", k2 = decodeURIComponent(g2), w2 = indexOf(k2).call(k2, E2);
          if (b2 && w2 > -1 && C2)
            return "" + m2 + b2 + "/" + slice(k2).call(k2, w2);
          if (includes(T2).call(T2, h2) && includes(g2).call(g2, "/")) {
            var R2 = indexOf(g2).call(g2, "/"), A2 = g2.substring(0, R2), N2 = g2.substring(R2 + 1);
            return S2.replace("{bucket}", A2).replace("{object}", N2);
          }
          var x2 = filter(T2).call(T2, function(t4) {
            return typeof h2 == "string" && includes(h2).call(h2, t4);
          })[0], O2 = x2 ? h2.replace(x2, "").replace(/\W/g, "") : null;
          return O2 ? S2.replace("{bucket}", O2).replace("{object}", g2) : t3;
        }, t2.getOriginUrl = function getOriginUrl(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a2;
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    if (typeof t3 == "string" && includes(t3).call(t3, "_im_url=1")) {
                      u2.next = 2;
                      break;
                    }
                    return u2.abrupt("return", t3);
                  case 2:
                    return u2.next = 4, this.core.sendCmd("getOriginUrl", { nosSafeUrlTag: { safeUrl: t3 } });
                  case 4:
                    return a2 = u2.sent, u2.abrupt("return", a2.content.nosSafeUrlTag.originUrl);
                  case 6:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this);
          }));
        }, t2.getFileToken = function getFileToken(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var a2, u2, m2, h2, g2, M2 = this;
            return Ql.wrap(function _callee5$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    if (validate({ type: { type: "number", min: 2, max: 3 }, urls: { type: "array", required: false, itemType: "string" } }, t3), a2 = this.mixStorePolicy.nosPolicy ? this.mixStorePolicy.nosPolicy.authPolicy.policyType : null, u2 = this.mixStorePolicy.s3Policy ? this.mixStorePolicy.s3Policy.authPolicy.policyType : null, a2 !== String(-1) || u2 !== String(-1)) {
                      I2.next = 8;
                      break;
                    }
                    throw this.logger.error("don't need token"), new Error("don't need token");
                  case 8:
                    if (t3.type !== 2) {
                      I2.next = 17;
                      break;
                    }
                    if (!(a2 && indexOf(a2).call(a2, String(2)) >= 0 || u2 && indexOf(u2).call(u2, String(2)) > 0)) {
                      I2.next = 13;
                      break;
                    }
                    return I2.abrupt("return", this.mixStorage.getFileAuthToken(t3));
                  case 13:
                    throw this.logger.error("don't support time token "), new Error("don't support type time token ");
                  case 15:
                    I2.next = 33;
                    break;
                  case 17:
                    if (t3.urls && t3.urls.length) {
                      I2.next = 20;
                      break;
                    }
                    throw this.logger.error("urls is required when urls token"), new Error("urls is required when urls token");
                  case 20:
                    if (h2 = [], g2 = [], forEach$1(m2 = t3.urls).call(m2, function(t4) {
                      var a3 = M2._getUrlType(t4);
                      a3 === 1 && g2.push(t4), a3 === 2 && h2.push(t4);
                    }), (!u2 || h2.length !== 0 && indexOf(u2).call(u2, String(3)) < 0) && (this.logger.warn("s3 url don't support url token"), h2 = []), (!a2 || g2.length !== 0 && indexOf(a2).call(a2, String(3)) < 0) && (this.logger.warn("nos url don't support url token"), g2 = []), h2.length !== 0 || g2.length !== 0) {
                      I2.next = 30;
                      break;
                    }
                    throw this.logger.error("not support urls"), new Error("not support urls");
                  case 30:
                    if (h2.length !== 0 && g2.length !== 0) {
                      I2.next = 33;
                      break;
                    }
                    return t3.urls = Un(t3.urls), I2.abrupt("return", this.mixStorage.getFileAuthToken(t3));
                  case 33:
                  case "end":
                    return I2.stop();
                }
            }, _callee5, this);
          }));
        }, t2._getUrlType = function _getUrlType(t3) {
          var a2, u2;
          return this.mixStorePolicy.nosPolicy && some(a2 = this.mixStorePolicy.nosPolicy.dlcdns).call(a2, function(a3) {
            return indexOf(t3).call(t3, a3) >= 0;
          }) ? 1 : this.mixStorePolicy.s3Policy && some(u2 = this.mixStorePolicy.s3Policy.dlcdns).call(u2, function(a3) {
            return indexOf(t3).call(t3, a3) >= 0;
          }) ? 2 : null;
        }, t2.getNosAccessToken = function getNosAccessToken(t3) {
          return validate({ url: { type: "string", allowEmpty: false } }, t3), this.nos.getNosAccessToken(t3);
        }, t2.deleteNosAccessToken = function deleteNosAccessToken(t3) {
          return validate({ token: { type: "string", allowEmpty: false } }, t3), this.nos.deleteNosAccessToken(t3);
        }, t2.process = function process(t3) {
          var a2 = get(t3, "error.detail.ignore");
          return t3.error && !a2 ? zi.reject(t3.error) : zi.resolve(t3);
        }, Ye(CloudStorageService, [{ key: "grayConfig", get: function get2() {
          return this.mixStorage.grayConfig;
        } }, { key: "mixStorePolicy", get: function get2() {
          return this.mixStorage.mixStorePolicy;
        } }]), CloudStorageService;
      }();
      var cg, lg, ug, dg, pg = function(t2) {
        function V2NIMStorageServiceImpl(a3) {
          var u2;
          return (u2 = t2.call(this, "V2NIMStorageService", a3) || this).sceneMap = { nim_default_profile_icon: { sceneName: "nim_default_profile_icon", expireTime: 0 }, nim_default_im: { sceneName: "nim_default_im", expireTime: 0 }, nim_system_nos_scene: { sceneName: "nim_system_nos_scene", expireTime: 0 }, nim_security: { sceneName: "nim_security", expireTime: 0 } }, u2.uploadingMessageInfo = {}, u2.core = a3, u2.core._registerDep(sg, "cloudStorage"), u2.core._registerDep(Hh, "V2NIMStorageUtil"), u2;
        }
        Nt(V2NIMStorageServiceImpl, t2);
        var a2 = V2NIMStorageServiceImpl.prototype;
        return a2.addCustomStorageScene = function addCustomStorageScene(t3, a3) {
          return this.checkV2(), validate({ sceneName: { type: "string", allowEmpty: false }, expireTime: { type: "number", min: 0 } }, { sceneName: t3, expireTime: a3 }, "", true), this.sceneMap[t3] = { sceneName: t3, expireTime: a3 }, { sceneName: t3, expireTime: a3 };
        }, a2.getStorageSceneList = function getStorageSceneList() {
          return this.checkV2(), Xi(this.sceneMap);
        }, a2.getStorageScene = function getStorageScene(t3) {
          return t3 && this.sceneMap[t3] || this.sceneMap.nim_default_im;
        }, a2.hasStorageScene = function hasStorageScene(t3) {
          return this.sceneMap[t3] !== void 0;
        }, a2.createUploadFileTask = function createUploadFileTask(t3) {
          var a3;
          if (this.checkV2(), typeof t3.fileObj == "string" && indexOf(a3 = t3.fileObj).call(a3, "nim-external") === 0) {
            var u2 = document.getElementById(t3.fileObj);
            u2 && u2.files && u2.files[0] && (t3.fileObj = u2.files[0]);
          }
          return { taskId: Iu(), uploadParams: t3 };
        }, a2.uploadFile = function uploadFile(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2;
            return Ql.wrap(function _callee$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this.checkV2(), validate({ taskId: { type: "string", allowEmpty: false } }, t3, "fileTask", true), m2.next = 4, this._uploadFile(t3, a3);
                  case 4:
                    return u2 = m2.sent, m2.abrupt("return", u2[0]);
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee, this);
          }));
        }, a2.uploadFileWithMetaInfo = function uploadFileWithMetaInfo(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var u2;
            return Ql.wrap(function _callee2$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this.checkV2(), validate({ taskId: { type: "string", allowEmpty: false } }, t3, "fileTask", true), m2.next = 4, this._uploadFile(t3, a3);
                  case 4:
                    return u2 = m2.sent, m2.abrupt("return", (h2 = u2[1], g2 = void 0, M2 = void 0, I2 = void 0, S2 = void 0, T2 = void 0, C2 = void 0, b2 = void 0, E2 = void 0, k2 = void 0, w2 = void 0, R2 = void 0, A2 = void 0, g2 = h2.url, M2 = h2.name, I2 = h2.size, S2 = h2.ext, T2 = h2.md5, C2 = h2.h, b2 = h2.w, E2 = h2.orientation, k2 = h2.dur, w2 = h2.audioCodec, R2 = h2.videoCodec, A2 = h2.container, JSON.parse(Un({ url: g2, name: M2, size: I2, ext: S2, md5: T2, height: C2, width: b2, orientation: E2, duration: k2, audioCodec: w2, videoCodec: R2, container: A2 }))));
                  case 6:
                  case "end":
                    return m2.stop();
                }
              var h2, g2, M2, I2, S2, T2, C2, b2, E2, k2, w2, R2, A2;
            }, _callee2, this);
          }));
        }, a2._uploadFile = function _uploadFile(t3, a3, u2) {
          var m2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var h2, g2, M2, I2, S2, T2, C2, b2, E2, k2, w2 = this;
            return Ql.wrap(function _callee3$(R2) {
              for (; ; )
                switch (R2.prev = R2.next) {
                  case 0:
                    if (this.core.cloudStorage && this.core.cloudStorage.uploadFile) {
                      R2.next = 2;
                      break;
                    }
                    throw new Error('Service "cloudStorage" does not exist');
                  case 2:
                    if (h2 = t3.uploadParams, g2 = t3.taskId, M2 = getFileOrPath(h2.fileObj), I2 = M2.file, S2 = M2.path, T2 = (u2 || {}).fileType, !this.uploadingMessageInfo[g2]) {
                      R2.next = 7;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_RESOURCE_ALREADY_EXIST, detail: { reason: "V2NIMStorageService.uploadFile: repeat upload" } });
                  case 7:
                    if (R2.prev = 7, C2 = {}, I2 ? C2.file = I2 : S2 && ((S2 == null ? void 0 : indexOf(S2).call(S2, "nim-external")) === 0 ? C2.fileInput = S2 : C2.filePath = S2), b2 = this.getStorageScene(h2.sceneName), C2.nosScenes = b2.sceneName, C2.nosSurvivalTime = b2.expireTime, C2.type = T2 === 1 ? "image" : T2 === 2 ? "audio" : T2 === 3 ? "video" : "file", !C2.file || !this.core.pluginMap["browser-md5-file"]) {
                      R2.next = 19;
                      break;
                    }
                    return R2.next = 17, this.getFileMd5(this.core.pluginMap["browser-md5-file"], g2, C2.file);
                  case 17:
                    E2 = R2.sent, C2.md5 = E2;
                  case 19:
                    return C2.onUploadProgress = function(t4) {
                      typeof a3 == "function" && a3(Math.round(100 * t4.percentage));
                    }, C2.onUploadStart = function(t4) {
                      var a4;
                      if ((a4 = w2.uploadingMessageInfo[g2]) === null || a4 === void 0 ? void 0 : a4.abort)
                        return t4.abort(), void delete w2.uploadingMessageInfo[g2];
                      w2.uploadingMessageInfo[g2] = { abort: false, task: t4 };
                    }, this.uploadingMessageInfo[g2] = { abort: false }, R2.next = 24, this.core.cloudStorage.uploadFile(C2);
                  case 24:
                    if (k2 = R2.sent, !((m2 = this.uploadingMessageInfo[g2]) === null || m2 === void 0 ? void 0 : m2.abort)) {
                      R2.next = 27;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_CANCELLED, detail: { reason: "upload file aborted" } });
                  case 27:
                    return delete this.uploadingMessageInfo[g2], R2.abrupt("return", [k2.url, k2]);
                  case 31:
                    throw R2.prev = 31, R2.t0 = R2.catch(7), delete this.uploadingMessageInfo[g2], this.core.logger.error("sendFile:: upload File error or abort.", R2.t0), R2.t0;
                  case 36:
                  case "end":
                    return R2.stop();
                }
            }, _callee3, this, [[7, 31]]);
          }));
        }, a2.cancelUploadFile = function cancelUploadFile(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            return Ql.wrap(function _callee4$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this.checkV2(), a3.next = 3, this._cancelUploadFile(t3.taskId);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee4, this);
          }));
        }, a2._cancelUploadFile = function _cancelUploadFile(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var a3;
            return Ql.wrap(function _callee5$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    if (this.checkV2(), !((a3 = this.uploadingMessageInfo[t3]) == null ? void 0 : a3.task)) {
                      u2.next = 16;
                      break;
                    }
                    return u2.prev = 3, this.logger.log("V2NIMStorageService.cancelUploadFile: uploadInfo task exist"), u2.next = 7, a3.task.abort();
                  case 7:
                    delete this.uploadingMessageInfo[t3], u2.next = 14;
                    break;
                  case 10:
                    u2.prev = 10, u2.t0 = u2.catch(3), delete this.uploadingMessageInfo[t3], this.core.logger.error("cancelMessageAttachmentUpload::abort error.", u2.t0);
                  case 14:
                    u2.next = 22;
                    break;
                  case 16:
                    if (!a3) {
                      u2.next = 21;
                      break;
                    }
                    this.logger.log("V2NIMStorageService.cancelUploadFile: uploadInfo task not exist"), a3.abort = true, u2.next = 22;
                    break;
                  case 21:
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST, detail: { reason: "V2NIMStorageService.cancelUploadFile: uploadInfo not exist" } });
                  case 22:
                  case "end":
                    return u2.stop();
                }
            }, _callee5, this, [[3, 10]]);
          }));
        }, a2.getFileMd5 = function getFileMd5(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var m2 = this;
            return Ql.wrap(function _callee6$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return h2.abrupt("return", new zi(function(h3, g2) {
                      var M2, I2 = new t3();
                      ((M2 = m2.uploadingMessageInfo[a3]) === null || M2 === void 0 ? void 0 : M2.abort) ? g2(new Pl({ code: Nl.V2NIM_ERROR_CODE_CANCELLED, detail: { reason: "upload file aborted" } })) : m2.uploadingMessageInfo[a3] = { abort: false, task: I2 };
                      try {
                        I2.md5(u2, function(t4, a4) {
                          t4 === "aborted" ? g2(new Pl({ code: Nl.V2NIM_ERROR_CODE_CANCELLED, detail: { reason: t4 } })) : t4 ? g2(new Pl({ code: Nl.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "md5 calculate error in callback", rawError: t4 } })) : h3(a4);
                        });
                      } catch (t4) {
                        g2(new Pl({ code: Nl.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "md5 calculate error", rawError: t4 } }));
                      }
                    }));
                  case 1:
                  case "end":
                    return h2.stop();
                }
            }, _callee6);
          }));
        }, a2.shortUrlToLong = function shortUrlToLong(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            return Ql.wrap(function _callee7$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this.checkV2(), a3.abrupt("return", this.core.cloudStorage.getOriginUrl(t3));
                  case 2:
                  case "end":
                    return a3.stop();
                }
            }, _callee7, this);
          }));
        }, a2.getImageThumbUrl = function getImageThumbUrl(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            return Ql.wrap(function _callee8$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return u2.abrupt("return", this.core.V2NIMStorageUtil.getImageThumbUrl(t3, a3));
                  case 1:
                  case "end":
                    return u2.stop();
                }
            }, _callee8, this);
          }));
        }, a2.getVideoCoverUrl = function getVideoCoverUrl(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            return Ql.wrap(function _callee9$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return u2.abrupt("return", this.core.V2NIMStorageUtil.getVideoCoverUrl(t3, a3));
                  case 1:
                  case "end":
                    return u2.stop();
                }
            }, _callee9, this);
          }));
        }, V2NIMStorageServiceImpl;
      }(ip), mg = function(t2) {
        function V2NIMMessageCreatorImpl(a3) {
          var u2;
          return (u2 = t2.call(this, "V2NIMMessageCreator", a3) || this).name = "V2NIMMessageCreator", u2.defaultNosSceneName = "nim_default_im", u2.core = a3, u2;
        }
        Nt(V2NIMMessageCreatorImpl, t2);
        var a2 = V2NIMMessageCreatorImpl.prototype;
        return a2.createMessage = function createMessage(t3, a3) {
          return Dt(Dt(Dt({ messageClientId: Iu(), messageType: t3, createTime: to(), sendingState: 0, messageStatus: { errorCode: 200 }, isSelf: true }, a3), a3.attachment ? { attachment: Dt(Dt({}, a3.attachment), { raw: attachmentToRaw(t3, a3.attachment) }) } : {}), { senderId: "", receiverId: "", conversationType: 0, conversationId: "", messageServerId: "", messageConfig: Dt({ unreadEnabled: true, roamingEnabled: true, readReceiptEnabled: false, lastMessageUpdateEnabled: true, historyEnabled: true, onlineSyncEnabled: true, offlineEnabled: true }, a3.messageConfig), pushConfig: Dt({ pushEnabled: true, pushNickEnabled: true, forcePush: false }, a3.pushConfig), routeConfig: Dt({ routeEnabled: true }, a3.routeConfig), antispamConfig: Dt({ antispamEnabled: true }, a3.antispamConfig) });
        }, a2.createTextMessage = function createTextMessage(t3) {
          return this.checkV2(), validate({ text: { type: "string", allowEmpty: false } }, { text: t3 }, "", true), this.createMessage(0, { text: t3 });
        }, a2.createImageMessage = function createImageMessage(t3, a3, u2, m2, h2) {
          this.checkV2(), validate(Ch, { name: a3, sceneName: u2, width: m2, height: h2 }, "", true);
          var g2 = this.createGenericFileMessageAttachment(t3, a3, u2, void 0, m2, h2, "jpeg");
          return this.createMessage(1, { attachment: g2, attachmentUploadState: 0 });
        }, a2.createAudioMessage = function createAudioMessage(t3, a3, u2, m2) {
          this.checkV2(), validate(Sh, { name: a3, sceneName: u2, duration: m2 }, "", true);
          var h2 = this.createGenericFileMessageAttachment(t3, a3, u2, m2, void 0, void 0, "aac");
          return this.createMessage(2, { attachment: h2, attachmentUploadState: 0 });
        }, a2.createVideoMessage = function createVideoMessage(t3, a3, u2, m2, h2, g2) {
          this.checkV2(), validate(Th, { name: a3, sceneName: u2, duration: m2, width: h2, height: g2 }, "", true);
          var M2 = this.createGenericFileMessageAttachment(t3, a3, u2, m2, h2, g2, "mp4");
          return this.createMessage(3, { attachment: M2, attachmentUploadState: 0 });
        }, a2.createFileMessage = function createFileMessage(t3, a3, u2) {
          this.checkV2(), validate(Ih, { name: a3, sceneName: u2 }, "", true);
          var m2 = this.createGenericFileMessageAttachment(t3, a3, u2, void 0, void 0, void 0, "txt");
          return this.createMessage(6, { attachment: m2, attachmentUploadState: 0 });
        }, a2.createGenericFileMessageAttachment = function createGenericFileMessageAttachment(t3, a3, u2, m2, h2, g2, M2) {
          if (u2 = u2 || this.defaultNosSceneName, !this.core.V2NIMStorageService.hasStorageScene)
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "V2NIMStorageService not exist" } });
          if (!this.core.V2NIMStorageService.hasStorageScene(u2))
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "sceneName: " + u2 + " has not been added" } });
          var I2 = getFileOrPath(t3), S2 = I2.file, T2 = I2.path, C2 = Dt(Dt(Dt({ name: a3, uploadState: 0, sceneName: u2 || this.defaultNosSceneName }, m2 ? { duration: m2 } : {}), h2 ? { width: h2 } : {}), g2 ? { height: g2 } : {});
          if (S2) {
            var b2, E2 = lastIndexOf(b2 = S2.name).call(b2, "."), k2 = E2 === -1 ? S2.name : S2.name.substring(0, E2);
            C2.name = C2.name || k2, C2.size = S2.size, C2.ext = "." + (getFileExtension(S2.name) || getFileExtension(a3 || "") || M2);
          } else if (T2) {
            var w2 = lastIndexOf(T2).call(T2, "/"), R2 = lastIndexOf(T2).call(T2, "."), A2 = R2 === -1 ? T2.substring(w2 + 1) : T2.substring(w2 + 1, R2);
            C2.name = C2.name || A2, C2.ext = "." + (getFileExtension(T2) || getFileExtension(a3 || "") || M2);
          }
          return C2 = JSON.parse(Un(C2)), T2 ? C2.path = T2 : S2 && (C2.file = S2), C2;
        }, a2.createLocationMessage = function createLocationMessage(t3, a3, u2) {
          return this.checkV2(), validate({ latitude: { type: "number", allowEmpty: false }, longitude: { type: "number", allowEmpty: false }, address: { type: "string", allowEmpty: false } }, { latitude: t3, longitude: a3, address: u2 }, "", true), this.createMessage(4, { attachment: { latitude: t3, longitude: a3, address: u2 } });
        }, a2.createCustomMessage = function createCustomMessage(t3, a3) {
          return this.checkV2(), validate({ text: { type: "string" } }, { text: t3 }, "", true), validate({ rawAttachment: { type: "string" } }, { rawAttachment: a3 }, "", true), this.createMessage(100, { text: t3, attachment: { raw: a3 } });
        }, a2.createCustomMessageWithAttachment = function createCustomMessageWithAttachment(t3, a3) {
          return this.checkV2(), validate({ raw: { type: "string" } }, t3, "attachment", true), validate({ subType: { type: "number", min: 0, required: false } }, { subType: a3 }, "", true), this.createMessage(100, a3 ? { attachment: t3, subType: a3 } : { attachment: t3 });
        }, a2.createCallMessage = function createCallMessage(t3, a3, u2, m2, h2) {
          return this.checkV2(), validate({ type: { type: "number", allowEmpty: false } }, { type: t3 }, "", true), validate({ channelId: { type: "string", allowEmpty: false } }, { channelId: a3 }, "", true), validate({ status: { type: "number", allowEmpty: false } }, { status: u2 }, "", true), validate({ durations: { type: "array", allowEmpty: false } }, { durations: m2 }, "", true), this.createMessage(12, { text: h2 || "", attachment: { type: t3, channelId: a3, durations: m2, status: u2 } });
        }, a2.createForwardMessage = function createForwardMessage(t3) {
          this.checkV2();
          var a3 = [11, 5, 7, 10];
          if (!t3 || includes(a3).call(a3, t3.messageType))
            return null;
          var u2 = { messageClientId: Iu(), messageType: t3.messageType };
          return t3.text && (u2.text = t3.text), t3.attachment && (u2.attachment = t3.attachment), t3.attachment && "uploadState" in t3.attachment && (u2.attachmentUploadState = t3.attachment.uploadState), this.createMessage(t3.messageType, u2);
        }, a2.createTipsMessage = function createTipsMessage(t3) {
          return this.checkV2(), validate({ text: { type: "string", allowEmpty: false } }, { text: t3 }, "", true), this.createMessage(10, { text: t3 });
        }, V2NIMMessageCreatorImpl;
      }(ip), hg = function() {
        function V2NIMMessageAttachmentCreatorImpl() {
          this.name = "V2NIMMessageAttachmentCreator";
        }
        var t2 = V2NIMMessageAttachmentCreatorImpl.prototype;
        return t2.createLocationMessageAttachment = function createLocationMessageAttachment(t3, a2, u2) {
          return { latitude: typeof t3 == "number" ? t3 : 0, longitude: typeof a2 == "number" ? a2 : 0, address: typeof u2 == "string" ? u2 : "" };
        }, t2.createCustomMessageAttachment = function createCustomMessageAttachment(t3) {
          return { raw: typeof t3 == "string" ? t3 : "" };
        }, V2NIMMessageAttachmentCreatorImpl;
      }(), vg = entryVirtual("Array").keys, fg = Array.prototype, yg = { DOMTokenList: true, NodeList: true }, keys = function(t2) {
        var a2 = t2.keys;
        return t2 === fg || $(fg, t2) && a2 === fg.keys || de(yg, Tr(t2)) ? vg : a2;
      }, _g = function() {
        function V2NIMClientAntispamUtilImpl(t3) {
          this.config = { enable: true }, this.name = "V2NIMClientAntispamUtil", this.core = t3;
        }
        var t2 = V2NIMClientAntispamUtilImpl.prototype;
        return t2.setOptions = function setOptions(t3) {
          this.config = Dt(this.config, t3);
        }, t2.reset = function reset(t3) {
          t3 === "destroy" && (this.vocabInfo = void 0);
        }, t2.downloadLocalAntiSpamVocabs = function downloadLocalAntiSpamVocabs() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var t3;
            return Ql.wrap(function _callee$(a2) {
              for (; ; )
                switch (a2.prev = a2.next) {
                  case 0:
                    if (this.config.enable) {
                      a2.next = 2;
                      break;
                    }
                    return a2.abrupt("return");
                  case 2:
                    if (!this.vocabInfo) {
                      a2.next = 4;
                      break;
                    }
                    return a2.abrupt("return");
                  case 4:
                    return a2.prev = 4, a2.next = 7, this.core.sendCmd("v2DownloadLocalAntiSpamVocabs", { tag: { version: 0, md5: "" } });
                  case 7:
                    t3 = a2.sent, this.vocabInfo = Dt(Dt({}, t3.content.data), { thesaurus: JSON.parse(t3.content.data.thesaurus).thesaurus }), a2.next = 14;
                    break;
                  case 11:
                    a2.prev = 11, a2.t0 = a2.catch(4), this.core.logger.warn("V2NIMLocalAntispamUtil::downloadLocalAntiSpamVocabs error", a2.t0);
                  case 14:
                  case "end":
                    return a2.stop();
                }
            }, _callee, this, [[4, 11]]);
          }));
        }, t2.checkTextAntispam = function checkTextAntispam(t3, a2) {
          if (a2 === void 0 && (a2 = "**"), !this.config.enable)
            return { operateType: 0, replacedText: t3 };
          if (validate({ text: { type: "string", required: true, allowEmpty: false }, replace: { type: "string" } }, { text: t3, replace: a2 }, "", true), !this.vocabInfo)
            return { operateType: 0, replacedText: t3 };
          for (var u2 = t3, m2 = 0; m2 < this.vocabInfo.thesaurus.length; m2++) {
            var h2 = this.filterContent(u2, this.vocabInfo.thesaurus[m2], a2);
            if (u2 = h2.replacedText, h2.operateType === 2 || h2.operateType === 3)
              return h2;
          }
          return { operateType: u2 === t3 ? 0 : 1, replacedText: u2 };
        }, t2.filterContent = function filterContent(t3, a2, u2) {
          for (var m2 = 0; m2 < keys(a2).length; m2++) {
            var h2 = keys(a2)[m2], g2 = h2.match || a2.match, M2 = h2.operate || a2.operate, I2 = void 0;
            try {
              I2 = this.matchContent(t3, h2.key, g2, M2, u2);
            } catch (t4) {
            }
            if (I2 && (t3 = I2.replacedText, I2.operateType === 2 || I2.operateType === 3))
              return I2;
          }
          return { operateType: 1, replacedText: t3 };
        }, t2.matchContent = function matchContent(t3, a2, u2, m2, h2) {
          var g2 = false, M2 = "";
          if (u2 === 1)
            indexOf(t3).call(t3, a2) >= 0 && (g2 = true, M2 = a2);
          else if (u2 === 2) {
            new RegExp(a2, "g").test(t3) && (g2 = true);
          }
          if (g2 && M2 !== "")
            switch (m2) {
              case 1:
                return { operateType: 1, replacedText: t3.replace(M2, h2) };
              case 2:
                return { operateType: 2, replacedText: t3 };
              case 3:
                return { operateType: 3, replacedText: t3 };
            }
          return { operateType: 0, replacedText: t3 };
        }, V2NIMClientAntispamUtilImpl;
      }(), Mg = function(t2) {
        function YSFServiceImpl(a3) {
          var u2;
          return (u2 = t2.call(this, "YSFService", a3) || this).core._registerDep(om, "V2NIMConversationIdUtil"), u2.core._registerDep(mg, "V2NIMMessageCreator"), u2.core._registerDep(hg, "V2NIMMessageAttachmentCreator"), u2.core._registerDep(_g, "V2NIMClientAntispamUtil"), u2.core._registerDep(pg, "V2NIMStorageService"), u2.sendUtil = new Ig(u2.core, Qe(u2)), u2.fileUtil = new Rh(u2.core), u2.model = new Hm(), u2.notificationUtil = new qh(u2.core), registerParser({ cmdMap: Vh, cmdConfig: Uh }), u2;
        }
        Nt(YSFServiceImpl, t2);
        var a2 = YSFServiceImpl.prototype;
        return a2.emit = function emit(a3) {
          for (var u2, m2, h2, g2 = this.name + "::emit " + a3.toString(), M2 = arguments.length, I2 = new Array(M2 > 1 ? M2 - 1 : 0), S2 = 1; S2 < M2; S2++)
            I2[S2 - 1] = arguments[S2];
          if (a3 === "onSendMessage") {
            var T2 = I2[0];
            this.logger.log("" + g2, T2.messageClientId + "/" + T2.messageServerId + ";createTime:" + T2.createTime + ";", "sendingState:" + T2.sendingState + ";attachmentUploadState:" + (T2.attachmentUploadState || 0) + ";messageStatus:" + ((h2 = T2.messageStatus) === null || h2 === void 0 ? void 0 : h2.errorCode));
          } else if (a3 === "onReceiveMessages") {
            var C2 = I2[0];
            this.logger.log("" + g2, map$6(C2).call(C2, function(t3) {
              return t3.messageClientId + "/" + t3.messageServerId + ";createTime:" + t3.createTime;
            }));
          } else if (a3 === "onReceiveCustomNotifications") {
            var b2 = I2[0];
            this.logger.log("" + g2, map$6(b2).call(b2, function(t3) {
              return "sender:" + t3.senderId + ";receiver:" + t3.receiverId + ";ctype:" + t3.conversationType + ";time:" + t3.timestamp;
            }));
          } else {
            var E2, k2;
            (E2 = this.logger).log.apply(E2, concat(k2 = ["" + g2]).call(k2, I2));
          }
          return (u2 = t2.prototype.emit).call.apply(u2, concat(m2 = [this, a3]).call(m2, I2));
        }, a2.sendMessage = function sendMessage(t3, a3, u2, m2) {
          return u2 === void 0 && (u2 = {}), __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var h2, g2, M2, I2, S2, T2;
            return Ql.wrap(function _callee$(C2) {
              for (; ; )
                switch (C2.prev = C2.next) {
                  case 0:
                    return validate({ message: { type: "object" } }, { message: t3 }, "", true), t3.messageClientId = t3.messageClientId || Iu(), validate(Zm, { conversationId: a3, message: t3, params: u2 }, "", true), validateConversationId(this.core.account, a3), h2 = this.core.timeOrigin.getTimeNode(), g2 = this.sendUtil.prepareMessage(t3, a3, u2), M2 = g2.messageBeforeSend, I2 = g2.clientAntispamResult, S2 = g2.hiddenParams, C2.next = 8, this.sendUtil.doSendMessage({ apiCallingTimeNode: h2, messageBeforeSend: M2, clientAntispamResult: I2, hiddenParams: S2, progress: m2 });
                  case 8:
                    return (T2 = C2.sent).message.senderId === T2.message.receiverId && this.markMsgsAck([T2.message]), C2.abrupt("return", T2);
                  case 11:
                  case "end":
                    return C2.stop();
                }
            }, _callee, this);
          }));
        }, a2.sendCustomNotification = function sendCustomNotification(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var m2;
            return Ql.wrap(function _callee2$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return this.checkV2(), validateConversationId(this.core.account, t3), validate(Dh, { content: a3, params: u2 }, "", true), (m2 = this.notificationUtil.generateNotificationTag(t3, a3, u2)).type = 100, h2.next = 7, this.core.sendCmd("ysfSendCustomNotification", { tag: m2 });
                  case 7:
                  case "end":
                    return h2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.sendMessageHandler = function sendMessageHandler(t3) {
        }, a2.cancelMessageAttachmentUpload = function cancelMessageAttachmentUpload(t3) {
          return this.fileUtil.cancelMessageAttachmentUpload(t3);
        }, a2.markMsgsAck = function markMsgsAck(t3) {
          var a3;
          if (t3 && t3.length > 0) {
            var u2 = filter(a3 = map$6(t3).call(t3, function(t4) {
              return t4.messageServerId;
            })).call(a3, function(t4) {
              return t4 && t4 !== "0";
            });
            u2.length !== 0 && this.core.sendCmd("ysfBatchMarkRead", { sid: 101, cid: 2, ids: u2 });
          }
        }, a2.markNotificationAck = function markNotificationAck(t3) {
          var a3;
          if (t3 && t3.length > 0) {
            var u2 = filter(a3 = map$6(t3).call(t3, function(t4) {
              return t4.idServer;
            })).call(a3, function(t4) {
              return t4 && t4 !== "0";
            });
            u2.length !== 0 && this.core.sendCmd("ysfBatchMarkRead", { sid: 101, cid: 3, ids: u2 });
          }
        }, a2.ysfOnMsgHandler = function ysfOnMsgHandler(t3) {
          var a3 = t3.content.data, u2 = formatMessageAttachment(completeMessage(this.core, a3), this.core);
          delete u2.__clientExt, this.emit("onReceiveMessages", [u2]), this.model.upsertMessages([u2]), this.markMsgsAck([u2]);
        }, a2.ysfSyncOfflineMsgsHandler = function ysfSyncOfflineMsgsHandler(t3) {
          var a3 = this, u2 = t3.content.datas;
          u2 = map$6(u2).call(u2, function(t4) {
            return formatMessageAttachment(completeMessage(a3.core, t4), a3.core);
          }), this.markMsgsAck(u2), this.emit("onReceiveMessages", u2), this.model.upsertMessages(u2);
        }, a2.ysfOnSysNotificationHandler = function ysfOnSysNotificationHandler(t3) {
          this.markNotificationAck([t3.content.data]);
          var a3 = this.processSystemNotification(t3.content.data);
          a3 && this.emit("onReceiveCustomNotifications", [a3]);
        }, a2.processSystemNotification = function processSystemNotification(t3) {
          var a3 = Dt(Dt({}, t3), { conversationType: 1 });
          return delete a3.type, a3;
        }, a2.ysfSyncSysNotificationHandler = function ysfSyncSysNotificationHandler(t3) {
          var a3, u2, m2, h2 = this;
          this.markNotificationAck(t3.content.datas);
          var g2 = filter(a3 = map$6(u2 = sort(m2 = t3.content.datas).call(m2, function(t4, a4) {
            return t4.timestamp - a4.timestamp;
          })).call(u2, function(t4) {
            return h2.processSystemNotification(t4);
          })).call(a3, function(t4) {
            return t4;
          });
          g2 && this.emit("onReceiveCustomNotifications", g2);
        }, YSFServiceImpl;
      }(ip), Ig = function() {
        function SendUtil(t3, a2) {
          this.uploadingMessageInfo = {}, this.core = t3, this.service = a2;
        }
        var t2 = SendUtil.prototype;
        return t2.prepareMessage = function prepareMessage(t3, a2, u2, m2) {
          var h2 = this.checkIfResend(t3), g2 = this.generateSendMessage({ message: t3, params: u2, resend: h2, conversationId: a2, replyMessage: m2 }), M2 = Dt({}, u2.targetConfig ? { targetConfig: u2.targetConfig } : {}), I2 = this.checkIfAntispam(u2, g2), S2 = I2.clientAntispamResult, T2 = I2.text;
          return g2.text = T2, g2.clientAntispamHit = !!S2 && S2.operateType === 3, { messageBeforeSend: g2, clientAntispamResult: S2, hiddenParams: M2 };
        }, t2.checkIfAntispam = function checkIfAntispam(t3, a2) {
          var u2, m2 = a2.text;
          if (t3.clientAntispamEnabled && (a2.messageType === 0 || a2.messageType === 10)) {
            if ((u2 = this.core.V2NIMClientAntispamUtil.checkTextAntispam ? this.core.V2NIMClientAntispamUtil.checkTextAntispam(a2.text || "", t3.clientAntispamReplace) : { operateType: 0, replacedText: "" }).operateType === 1)
              m2 = u2.replacedText;
            else if (u2.operateType === 2)
              throw this.service.emit("onSendMessage", Dt(Dt({}, a2), { sendingState: 2, messageStatus: { errorCode: Nl.V2NIM_ERROR_CODE_CLIENT_ANTISPAM } })), new Pl({ code: Nl.V2NIM_ERROR_CODE_CLIENT_ANTISPAM, detail: { reason: "sendMessage: text intercepted by client antispam" } });
          }
          return { clientAntispamResult: u2, text: m2 };
        }, t2.doMsgReceiveReport = function doMsgReceiveReport(t3, a2) {
          if (t3.senderId !== this.core.account) {
            var u2 = get(t3, "__clientExt.statistics.apiCallingTime") || 0, m2 = get(t3, "__clientExt.statistics.sendTime") || 0, h2 = get(t3, "__clientExt.statistics.attachUploadDuration") || 0, g2 = this.core.timeOrigin.getNTPTime(), M2 = t3.createTime, I2 = this.core.timeOrigin.checkNodeReliable(a2.__receiveTimeNode) ? this.core.timeOrigin.getNTPTime(a2.__receiveTimeNode) : g2;
            this.core.reporter.report("msgReceive", { msgId: t3.messageServerId, clientId: t3.messageClientId, serverTime: t3.createTime, receiveTime: I2, fromAccid: t3.conversationType === 1 ? t3.senderId : "", toAccid: t3.receiverId, type: conversationTypeV2ToV1(t3.conversationType), tid: t3.conversationType === 1 ? "" : t3.receiverId, apiCallingTime: u2, sendTime: m2, attachUploadDuration: h2, callbackTime: g2, preHandleTime: g2, result: 200, failReason: "", rt: g2 - M2 });
          }
        }, t2.checkIfResend = function checkIfResend(t3) {
          var a2 = this.service.model.getMessageById(t3.messageClientId), u2 = false;
          if (t3.messageServerId || t3.sendingState === 1)
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "sendMessage: message has already been sent" } });
          if ((a2 == null ? void 0 : a2.sendingState) === 1)
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "sendMessage: message has already been sent" } });
          return a2 && (u2 = true), u2;
        }, t2.doSendMessage = function doSendMessage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a2, u2, m2, h2, g2, M2, I2, S2, T2, C2, b2, E2, k2;
            return Ql.wrap(function _callee$(w2) {
              for (; ; )
                switch (w2.prev = w2.next) {
                  case 0:
                    if (a2 = t3.apiCallingTimeNode, u2 = t3.messageBeforeSend, m2 = t3.clientAntispamResult, h2 = t3.hiddenParams, g2 = t3.progress, M2 = {}, !(I2 = this.service instanceof Mg)) {
                      w2.next = 7;
                      break;
                    }
                    S2 = "ysfSendMessage", w2.next = 20;
                    break;
                  case 7:
                    if (u2.conversationType !== 1) {
                      w2.next = 11;
                      break;
                    }
                    S2 = "v2SendP2pMessage", w2.next = 20;
                    break;
                  case 11:
                    if (u2.conversationType !== 2) {
                      w2.next = 15;
                      break;
                    }
                    S2 = "v2SendTeamMessage", w2.next = 20;
                    break;
                  case 15:
                    if (u2.conversationType !== 3) {
                      w2.next = 19;
                      break;
                    }
                    S2 = "v2SendSuperTeamMessage", w2.next = 20;
                    break;
                  case 19:
                    throw new Vl({ detail: { reason: "conversationType: " + u2.conversationType + " is not supported" } });
                  case 20:
                    if (this.service.sendMessageHandler(u2), !I2 && this.core.eventBus.emit("forwardSend/V2NIMMessageService/sendMsg", u2), !u2.attachment || !("uploadState" in u2.attachment) || u2.attachment.url || u2.attachment.uploadState !== 0 && u2.attachment.uploadState !== 2) {
                      w2.next = 48;
                      break;
                    }
                    return T2 = to(), w2.prev = 24, u2.attachmentUploadState = 3, u2.attachment.uploadState = 3, this.service.emit("onSendMessage", u2), w2.next = 30, this.service.fileUtil.doSendFile(u2, g2);
                  case 30:
                    u2.attachmentUploadState = 1, u2.attachment.uploadState = 1, this.service.emit("onSendMessage", u2), w2.next = 45;
                    break;
                  case 35:
                    throw w2.prev = 35, w2.t0 = w2.catch(24), u2.attachmentUploadState = 2, u2.attachment.uploadState = 2, u2.sendingState = 2, u2.messageStatus = { errorCode: w2.t0.code || Nl.V2NIM_ERROR_CODE_UNKNOWN }, this.service.emit("onSendMessage", u2), M2.attachUploadDuration = to() - T2, this.doSendMessageFailed(a2, M2, u2, w2.t0), w2.t0;
                  case 45:
                    M2.attachUploadDuration = to() - T2, w2.next = 49;
                    break;
                  case 48:
                    this.service.emit("onSendMessage", u2);
                  case 49:
                    return this.core.timeOrigin.checkNodeReliable(a2) && (M2.apiCallingTime = this.core.timeOrigin.getNTPTime(a2), M2.sendTime = this.core.timeOrigin.getNTPTime(), u2.__clientExt = { statistics: M2 }), w2.prev = 50, w2.next = 53, this.core.sendCmd(S2, { tag: Dt({}, u2, h2) });
                  case 53:
                    C2 = w2.sent, w2.next = 63;
                    break;
                  case 56:
                    throw w2.prev = 56, w2.t1 = w2.catch(50), this.doSendMessageFailed(a2, M2, u2, w2.t1), u2.sendingState = 2, u2.messageStatus = { errorCode: w2.t1.code || Nl.V2NIM_ERROR_CODE_UNKNOWN }, this.service.emit("onSendMessage", u2), w2.t1;
                  case 63:
                    return b2 = get(C2, "content.data.errorCode"), E2 = Dt(Dt(Dt({}, u2), C2.content.data), { sendingState: 1, messageStatus: { errorCode: b2 && b2 !== 200 ? b2 : 200 } }), this.service.sendMessageHandler(E2), !I2 && this.core.eventBus.emit("forwardSend/V2NIMMessageService/sendMsg", E2), this.doMsgSendReport(a2, M2, u2), (k2 = E2.antispamResult) && (E2.messageStatus.errorCode = Nl.V2NIM_ERROR_CODE_SERVER_ANTISPAM), delete E2.antispamResult, this.service.emit("onSendMessage", E2), w2.abrupt("return", Dt(Dt({ message: E2 }, k2 ? { antispamResult: k2 } : {}), m2 ? { clientAntispamResult: m2 } : {}));
                  case 73:
                  case "end":
                    return w2.stop();
                }
            }, _callee, this, [[24, 35], [50, 56]]);
          }));
        }, t2.doSendMessageFailed = function doSendMessageFailed(t3, a2, u2, m2) {
          var h2 = Dt(Dt({}, u2), { sendingState: 2 });
          this.core.eventBus.emit("forwardSend/V2NIMMessageService/sendMsg", h2), this.service.sendMessageHandler(h2), this.doMsgSendReport(t3, a2, u2, m2);
        }, t2.doMsgSendReport = function doMsgSendReport(t3, a2, u2, m2) {
          a2.apiCallingTime = this.core.timeOrigin.getNTPTime(t3), a2.sendTime = this.core.timeOrigin.getNTPTime();
          var h2 = this.core.timeOrigin.getNTPTime(), g2 = get(m2, "detail.reason");
          this.core.reporter.report("msgSend", { msgId: u2.messageServerId, clientId: u2.messageClientId, msgTime: u2.createTime, fromAccid: u2.conversationType === 1 ? u2.senderId : "", toAccid: u2.receiverId, type: conversationTypeV2ToV1(u2.conversationType), tid: u2.conversationType === 1 ? "" : u2.receiverId, result: m2 ? m2.code : 200, failReason: g2 || (m2 == null ? void 0 : m2.message) || "", rt: h2 - a2.apiCallingTime, apiCallingTime: a2.apiCallingTime, sendTime: a2.sendTime, attachUploadDuration: a2.attachUploadDuration, apiCallbackTime: h2 });
        }, t2.generateSendMessage = function generateSendMessage(t3) {
          var a2, u2, m2 = t3.conversationId, h2 = t3.replyMessage, g2 = t3.resend, M2 = t3.message, I2 = t3.params, S2 = {};
          if (h2) {
            var T2 = h2.threadRoot;
            S2 = { threadReply: { senderId: h2.senderId, receiverId: h2.receiverId, messageServerId: h2.messageServerId, createTime: h2.createTime, messageClientId: h2.messageClientId, conversationType: h2.conversationType, conversationId: h2.conversationId }, threadRoot: { senderId: T2 ? T2.senderId : h2.senderId, receiverId: T2 ? T2.receiverId : h2.receiverId, messageServerId: T2 ? T2.messageServerId : h2.messageServerId, createTime: T2 ? T2.createTime : h2.createTime, messageClientId: T2 ? T2.messageClientId : h2.messageClientId, conversationType: T2 ? T2.conversationType : h2.conversationType, conversationId: T2 ? T2.conversationId : h2.conversationId } };
          }
          var C2 = this.core.V2NIMConversationIdUtil.parseConversationType(m2), b2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(m2);
          I2.pushConfig && I2.pushConfig.forcePush !== true && (delete I2.pushConfig.forcePushContent, delete I2.pushConfig.forcePushAccountIds);
          var E2 = {}, k2 = {};
          if (I2.aiConfig) {
            var w2 = get(I2, "aiConfig.content.msg"), R2 = get(I2, "aiConfig.content.type") || 0;
            w2 ? k2 = { msg: w2, type: R2 } : w2 === void 0 && M2.messageType === 0 && (k2 = { msg: M2.text || "", type: R2 }), (E2 = Dt({}, I2.aiConfig)).aiStatus = 1, k2.msg !== void 0 && (E2.content = k2);
          }
          var A2 = (u2 = (a2 = this.core.V2NIMUserService) === null || a2 === void 0 ? void 0 : a2.model) === null || u2 === void 0 ? void 0 : u2.getUser(this.core.account), N2 = (A2 == null ? void 0 : A2.updateTime) || 0;
          return Dt(Dt(Dt(Dt(Dt(Dt(Dt(Dt({}, M2), S2), { messageConfig: Dt(Dt({}, M2.messageConfig), I2.messageConfig), routeConfig: Dt(Dt({}, M2.routeConfig), I2.routeConfig), pushConfig: Dt(Dt({}, M2.pushConfig), I2.pushConfig), antispamConfig: Dt(Dt({}, M2.antispamConfig), I2.antispamConfig), robotConfig: Dt(Dt({}, M2.robotConfig), I2.robotConfig) }), E2 && E2.accountId ? { aiConfig: E2 } : {}), M2.attachment ? { attachment: Dt({}, M2.attachment) } : {}), { resend: g2, senderId: this.core.account, conversationType: C2, receiverId: b2, conversationId: this.core.V2NIMConversationIdUtil.messageConversationId({ conversationType: C2, senderId: this.core.account, receiverId: b2 }) }), N2 ? { userUpdateTime: N2 } : {}), { sendingState: 3 });
        }, SendUtil;
      }(), Sg = function() {
        function ModifyUtil(t3, a2) {
          this.core = t3, this.service = a2;
        }
        var t2 = ModifyUtil.prototype;
        return t2.checkIfModify = function checkIfModify(t3, a2) {
          var u2, m2;
          if (t3.messageServerId === "0")
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "modifyMessage: messageServerId cannot be empty" } });
          if (t3.conversationType === 1 && t3.senderId !== this.core.account)
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "modifyMessage: senderId should be self" } });
          if (!includes(u2 = [0, 1, 2, 3, 4, 6, 10, 12, 100]).call(u2, t3.messageType))
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "modifyMessage: messageType " + t3.messageType + " not correct" } });
          if (includes(m2 = [0, 1, 2, 3, 6, 10, 12]).call(m2, t3.messageType) && a2.attachment)
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "modifyMessage: messageType " + t3.messageType + " can not modify attachment" } });
          var h2 = ["subType", "text", "serverExtension", "attachment"];
          if (!some(h2).call(h2, function(t4) {
            return get(a2, t4) !== void 0;
          }))
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "modifyMessage: missing modified params" } });
          if (every(h2).call(h2, function(u3) {
            return u3 === "attachment" ? t3.attachment && a2.attachment ? attachmentToRaw(t3.messageType, t3.attachment) === attachmentToRaw(t3.messageType, a2.attachment) : !a2.attachment : get(t3, u3) === get(a2, u3);
          }))
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "modifyMessage: no change" } });
        }, t2.prepareMessage = function prepareMessage(t3, a2) {
          var u2 = this.generateSendMessage(t3, a2), m2 = this.checkIfAntispam(a2, u2), h2 = m2.clientAntispamResult, g2 = m2.text;
          return u2.text = g2, u2.clientAntispamHit = !!h2 && h2.operateType === 3, { messageBeforeSend: u2, clientAntispamResult: h2 };
        }, t2.modifyMessage = function modifyMessage(t3, a2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2, m2, h2, g2, M2;
            return Ql.wrap(function _callee$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    if (t3.conversationType !== 1) {
                      I2.next = 4;
                      break;
                    }
                    u2 = "v2MessageP2pModify", I2.next = 13;
                    break;
                  case 4:
                    if (t3.conversationType !== 2) {
                      I2.next = 8;
                      break;
                    }
                    u2 = "v2MessageTeamModify", I2.next = 13;
                    break;
                  case 8:
                    if (t3.conversationType !== 3) {
                      I2.next = 12;
                      break;
                    }
                    u2 = "v2MessageSuperTeamModify", I2.next = 13;
                    break;
                  case 12:
                    throw new Vl({ detail: { reason: "conversationType: " + t3.conversationType + " is not supported" } });
                  case 13:
                    return I2.next = 15, this.core.sendCmd(u2, { tag: t3 });
                  case 15:
                    if (m2 = I2.sent, !a2 || a2.operateType !== 3) {
                      I2.next = 18;
                      break;
                    }
                    return I2.abrupt("return", { errorCode: Nl.V2NIM_ERROR_CODE_CLIENT_ANTISPAM, clientAntispamResult: a2 });
                  case 18:
                    if (h2 = Dt(Dt({}, t3), m2.content.data), !(g2 = h2.antispamResult)) {
                      I2.next = 22;
                      break;
                    }
                    return I2.abrupt("return", Dt({ errorCode: Nl.V2NIM_ERROR_CODE_SERVER_ANTISPAM, antispamResult: g2 }, a2 ? { clientAntispamResult: a2 } : {}));
                  case 22:
                    return delete h2.antispamResult, M2 = completeMessage(this.core, h2), this.service.model.upsertMessages([M2]), this.core.eventBus.emit("forwardSend/V2NIMMessageService/modifyMsg", M2), I2.abrupt("return", Dt(Dt({ errorCode: 200, message: M2 }, g2 ? { antispamResult: g2 } : {}), a2 ? { clientAntispamResult: a2 } : {}));
                  case 27:
                  case "end":
                    return I2.stop();
                }
            }, _callee, this);
          }));
        }, t2.checkIfAntispam = function checkIfAntispam(t3, a2) {
          var u2, m2 = a2.text;
          if (t3.clientAntispamEnabled && (a2.messageType === 0 || a2.messageType === 10)) {
            if ((u2 = this.core.V2NIMClientAntispamUtil.checkTextAntispam ? this.core.V2NIMClientAntispamUtil.checkTextAntispam(a2.text || "", t3.clientAntispamReplace) : { operateType: 0, replacedText: "" }).operateType === 1)
              m2 = u2.replacedText;
            else if (u2.operateType === 2)
              throw new Pl({ code: Nl.V2NIM_ERROR_CODE_CLIENT_ANTISPAM, detail: { reason: "sendMessage: text intercepted by client antispam" } });
          }
          return { clientAntispamResult: u2, text: m2 };
        }, t2.generateSendMessage = function generateSendMessage(t3, a2) {
          var u2;
          return Dt(Dt({ messageConfig: { lastMessageUpdateEnabled: (u2 = t3.messageConfig) === null || u2 === void 0 ? void 0 : u2.lastMessageUpdateEnabled }, routeConfig: Dt({ routeEnabled: true }, a2.routeConfig), pushConfig: Dt({ pushEnabled: true, pushNickEnabled: true, forcePush: false }, a2.pushConfig), antispamConfig: Dt({ antispamEnabled: true }, a2.antispamConfig) }, a2.attachment ? { attachment: a2.attachment } : {}), { conversationType: t3.conversationType, senderId: t3.senderId, receiverId: t3.receiverId, createTime: t3.createTime, messageClientId: t3.messageClientId, messageServerId: t3.messageServerId, messageType: t3.messageType, subType: a2.subType, text: a2.text, serverExtension: a2.serverExtension });
        }, ModifyUtil;
      }(), Tg = function(t2) {
        function V2NIMMessageServiceImpl(a3, u2) {
          var m2;
          return u2 === void 0 && (u2 = {}), (m2 = t2.call(this, "V2NIMMessageService", a3) || this).customAttachmentParsers = [], m2.config = { compatibleWithV1: true }, m2.emitRevokeMessage = function(t3) {
            var a4 = map$6(t3).call(t3, function(t4) {
              return formatRevokeMessage(m2.core, t4);
            });
            forEach$1(a4).call(a4, function(t4) {
              m2.model.deleteMessage(t4.messageRefer.messageClientId);
            }), m2.emit("onMessageRevokeNotifications", a4), m2.core.eventBus.emit("V2NIMConversationService/revokeMessages", a4);
          }, m2.sendMessageHandler = function(t3) {
            if (t3.msgAckSnapshot) {
              var a4 = t3.msgAckSnapshot, u3 = { conversationId: t3.conversationId, messageServerId: t3.messageServerId, messageClientId: t3.messageClientId, readCount: 0, unreadCount: Number(a4) };
              delete t3.msgAckSnapshot, m2.emit("onReceiveTeamMessageReadReceipts", [u3]);
            }
            t3 = formatMessageAttachment(t3, m2.core), m2.model.upsertMessages([t3]), m2.core.eventBus.emit("V2NIMConversationService/sendMessage", t3, t3.sendingState);
          }, m2.revokeMessagesHandler = function(t3) {
            forEach$1(t3).call(t3, function(t4) {
              m2.model.deleteMessage(t4.messageRefer.messageClientId);
            }), m2.emit("onMessageRevokeNotifications", t3), m2.core.eventBus.emit("V2NIMConversationService/revokeMessages", t3);
          }, m2.deleteMessagesHandler = function(t3) {
            forEach$1(t3).call(t3, function(t4) {
              m2.model.deleteMessage(t4.messageRefer.messageClientId);
            }), m2.emit("onMessageDeletedNotifications", t3), m2.core.eventBus.emit("V2NIMConversationService/deleteMessages", t3);
          }, m2.core._registerDep(om, "V2NIMConversationIdUtil"), m2.core._registerDep(mg, "V2NIMMessageCreator"), m2.core._registerDep(hg, "V2NIMMessageAttachmentCreator"), m2.core._registerDep(_g, "V2NIMClientAntispamUtil"), m2.receiptUtil = new wh(m2.core, Qe(m2)), m2.fileUtil = new Rh(m2.core), m2.sendUtil = new Ig(m2.core, Qe(m2)), m2.modifyUtil = new Sg(m2.core, Qe(m2)), m2.model = new Hm(), m2.core.options.apiVersion !== "v2" ? Qe(m2) : (registerParser({ cmdMap: vm, cmdConfig: Tm }), m2.setOptions(u2), m2.setListener(), m2);
        }
        Nt(V2NIMMessageServiceImpl, t2);
        var a2 = V2NIMMessageServiceImpl.prototype;
        return a2.setOptions = function setOptions(t3) {
          var a3;
          ((a3 = this.core.msg) === null || a3 === void 0 ? void 0 : a3.name) ? this.config.compatibleWithV1 = true : this.config.compatibleWithV1 = false, this.config = Dt(this.config, t3);
        }, a2.setListener = function setListener() {
          var t3 = this;
          this.core.eventBus.on("forwardReceive/V2NIMMessageService/sendMsg", this.sendMessageHandler), this.core.eventBus.on("forwardReceive/V2NIMMessageService/revokeMessages", this.emitRevokeMessage), this.core.eventBus.on("forwardReceive/V2NIMMessageService/deleteMessages", this.deleteMessagesHandler), this.core.eventBus.on("V2NIMConversationService/deleteConversation", function(a3) {
            forEach$1(a3).call(a3, function(a4) {
              return t3.model.deleteMessages(a4);
            });
          });
        }, a2.reset = function reset() {
          this.model.reset();
        }, a2.emit = function emit(a3) {
          for (var u2, m2, h2, g2 = this.name + "::emit " + a3.toString(), M2 = arguments.length, I2 = new Array(M2 > 1 ? M2 - 1 : 0), S2 = 1; S2 < M2; S2++)
            I2[S2 - 1] = arguments[S2];
          if (a3 === "onSendMessage") {
            var T2 = I2[0];
            this.logger.log("" + g2, T2.messageClientId + "/" + T2.messageServerId + "/" + T2.createTime + ";", "sendingState:" + T2.sendingState + ";attachmentUploadState:" + (T2.attachmentUploadState || 0) + ";messageStatus:" + ((h2 = T2.messageStatus) === null || h2 === void 0 ? void 0 : h2.errorCode));
          } else if (a3 === "onReceiveMessages" || a3 === "onReceiveMessagesModified") {
            var C2 = I2[0];
            this.logger.log("" + g2, map$6(C2).call(C2, function(t3) {
              return t3.messageClientId + "/" + t3.messageServerId + "/" + t3.createTime;
            }));
          } else if (a3 === "onMessageRevokeNotifications") {
            var b2 = I2[0];
            this.logger.log("" + g2, map$6(b2).call(b2, function(t3) {
              return "msg:" + t3.messageRefer.messageClientId + "/" + t3.messageRefer.messageServerId + ";revokeAccountId:" + t3.revokeAccountId;
            }));
          } else if (a3 === "onMessageDeletedNotifications") {
            var E2 = I2[0];
            this.logger.log("" + g2, map$6(E2).call(E2, function(t3) {
              return "msg:" + t3.messageRefer.messageClientId + "/" + t3.messageRefer.messageServerId;
            }));
          } else {
            var k2, w2;
            (k2 = this.logger).log.apply(k2, concat(w2 = ["" + g2]).call(w2, I2));
          }
          return (u2 = t2.prototype.emit).call.apply(u2, concat(m2 = [this, a3]).call(m2, I2));
        }, a2.checkExtendUtil = function checkExtendUtil() {
          var t3;
          if (!((t3 = this.core.V2NIMMessageExtendUtil) === null || t3 === void 0 ? void 0 : t3.name))
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "V2NIMMessageLogUtil is not registered" } });
        }, a2.checkLogUtil = function checkLogUtil() {
          var t3;
          if (!((t3 = this.core.V2NIMMessageLogUtil) === null || t3 === void 0 ? void 0 : t3.name))
            throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "V2NIMMessageExtendUtil is not registered" } });
        }, a2.getMessageList = function getMessageList(t3) {
          return this.checkV2(), this.checkLogUtil(), this.core.V2NIMMessageLogUtil.getMessageList(t3);
        }, a2.getMessageListByRefers = function getMessageListByRefers(t3) {
          return this.checkV2(), this.checkLogUtil(), this.core.V2NIMMessageLogUtil.getMessageListByRefers(t3);
        }, a2.clearHistoryMessage = function clearHistoryMessage(t3) {
          return this.checkV2(), this.checkLogUtil(), this.core.V2NIMMessageLogUtil.clearHistoryMessage(t3);
        }, a2.pinMessage = function pinMessage(t3, a3) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.pinMessage(t3, a3);
        }, a2.unpinMessage = function unpinMessage(t3, a3) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.unpinMessage(t3, a3);
        }, a2.updatePinMessage = function updatePinMessage(t3, a3) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.updatePinMessage(t3, a3);
        }, a2.voiceToText = function voiceToText(t3) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.voiceToText(t3);
        }, a2.getPinnedMessageList = function getPinnedMessageList(t3) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.getPinnedMessageList(t3);
        }, a2.addQuickComment = function addQuickComment(t3, a3, u2, m2) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.addQuickComment(t3, a3, u2, m2);
        }, a2.removeQuickComment = function removeQuickComment(t3, a3, u2) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.removeQuickComment(t3, a3, u2);
        }, a2.getQuickCommentList = function getQuickCommentList(t3) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.getQuickCommentList(t3);
        }, a2.addCollection = function addCollection(t3) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.addCollection(t3);
        }, a2.removeCollections = function removeCollections(t3) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.removeCollections(t3);
        }, a2.updateCollectionExtension = function updateCollectionExtension(t3, a3) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.updateCollectionExtension(t3, a3);
        }, a2.getCollectionListByOption = function getCollectionListByOption(t3) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.getCollectionListByOption(t3);
        }, a2.getCollectionListExByOption = function getCollectionListExByOption(t3) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.getCollectionListExByOption(t3);
        }, a2.searchCloudMessages = function searchCloudMessages(t3) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.searchCloudMessages(t3);
        }, a2.getThreadMessageList = function getThreadMessageList(t3) {
          return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.getThreadMessageList(t3);
        }, a2.registerCustomAttachmentParser = function registerCustomAttachmentParser(t3) {
          var a3;
          typeof t3 == "function" && indexOf(a3 = this.customAttachmentParsers).call(a3, t3) === -1 && this.customAttachmentParsers.unshift(t3);
        }, a2.unregisterCustomAttachmentParser = function unregisterCustomAttachmentParser(t3) {
          var a3, u2, m2 = indexOf(a3 = this.customAttachmentParsers).call(a3, t3);
          m2 > -1 && splice(u2 = this.customAttachmentParsers).call(u2, m2, 1);
        }, a2.sendP2PMessageReceipt = function sendP2PMessageReceipt(t3) {
          return this.checkV2(), this.receiptUtil.sendP2PMessageReceipt(t3);
        }, a2.isPeerRead = function isPeerRead(t3) {
          return this.checkV2(), this.receiptUtil.isPeerRead(t3);
        }, a2.getP2PMessageReceipt = function getP2PMessageReceipt(t3) {
          return this.checkV2(), this.receiptUtil.getP2PMessageReceipt(t3);
        }, a2.getTeamMessageReceipts = function getTeamMessageReceipts(t3) {
          return this.checkV2(), this.receiptUtil.getTeamMessageReceipts(t3);
        }, a2.getTeamMessageReceiptDetail = function getTeamMessageReceiptDetail(t3) {
          return this.checkV2(), this.receiptUtil.getTeamMessageReceiptDetail(t3);
        }, a2.sendTeamMessageReceipts = function sendTeamMessageReceipts(t3) {
          return this.checkV2(), this.receiptUtil.sendTeamMessageReceipts(t3);
        }, a2.revokeMessage = function revokeMessage(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2, m2, h2, g2, M2, I2, S2;
            return Ql.wrap(function _callee$(T2) {
              for (; ; )
                switch (T2.prev = T2.next) {
                  case 0:
                    if (this.checkV2(), validate(eh, { message: t3, params: a3 }, "", true), validateConversationId(this.core.account, t3.conversationId), t3.conversationType !== 1 || t3.senderId === this.core.account) {
                      T2.next = 7;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "revokeMessage: p2p message senderId is not current user" } });
                  case 7:
                    if (t3.messageServerId && t3.messageServerId !== "0") {
                      T2.next = 9;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "revokeMessage: cannot revoke message with invalid messageServerId: " + t3.messageServerId } });
                  case 9:
                    return h2 = t3.conversationType === 3 ? "v2RevokeSuperTeamMessage" : "v2RevokeMessage", (u2 = {})[1] = 7, u2[2] = 8, u2[3] = 12, g2 = u2, M2 = Dt(Dt(Dt({}, t3), a3), { attach: a3 && a3.serverExtension, sysMsgType: g2[t3.conversationType], opeAccount: this.core.account }), T2.next = 14, this.core.sendCmd(h2, { tag: M2 });
                  case 14:
                    (m2 = {})[1] = 1, m2[2] = 2, m2[3] = 3, I2 = m2, S2 = [JSON.parse(Un({ postscript: a3 && a3.postscript, revokeType: I2[t3.conversationType], revokeAccountId: this.core.account, serverExtension: a3 && a3.serverExtension, messageRefer: formatMessageRefer(this.core, t3) }))], this.revokeMessagesHandler(S2), this.core.eventBus.emit("forwardSend/V2NIMMessageService/revokeMessage", M2);
                  case 18:
                  case "end":
                    return T2.stop();
                }
            }, _callee, this);
          }));
        }, a2.deleteMessage = function deleteMessage(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var u2, m2, h2, g2;
            return Ql.wrap(function _callee2$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    if (this.checkV2(), validate(ah, t3, "", true), t3.sendingState !== 3) {
                      M2.next = 6;
                      break;
                    }
                    this.fileUtil.cancelMessageAttachmentUpload(t3), M2.next = 8;
                    break;
                  case 6:
                    if (!t3.sendingState || t3.sendingState === 1) {
                      M2.next = 8;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "deleteMessage: cannot delete unsent message" } });
                  case 8:
                    if (u2 = { messageRefer: formatMessageRefer(this.core, t3), serverExtension: a3 }, m2 = to(), !t3.messageServerId || t3.messageServerId === "0") {
                      M2.next = 15;
                      break;
                    }
                    return M2.next = 13, this.core.sendCmd("v2DeleteMessage", { tag: u2 });
                  case 13:
                    h2 = M2.sent, m2 = h2.content.timetag;
                  case 15:
                    g2 = [{ serverExtension: a3, messageRefer: formatMessageRefer(this.core, t3), deleteTime: m2 }], this.core.eventBus.emit("forwardSend/V2NIMMessageService/deleteSelfMsgs", [Dt(Dt({}, u2), { deleteTime: m2 })]), this.deleteMessagesHandler(g2);
                  case 18:
                  case "end":
                    return M2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.deleteMessages = function deleteMessages(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var u2, m2, h2, g2, M2, I2, S2, T2, C2, b2, E2 = this;
            return Ql.wrap(function _callee3$(k2) {
              for (; ; )
                switch (k2.prev = k2.next) {
                  case 0:
                    if (this.checkV2(), validate(ih, { messages: t3 }, "", true), m2 = [], h2 = [], t3.length !== 0) {
                      k2.next = 8;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "deleteMessages: message array length is 0" } });
                  case 8:
                    g2 = t3[0].conversationId, M2 = 0;
                  case 10:
                    if (!(M2 < t3.length)) {
                      k2.next = 23;
                      break;
                    }
                    if (t3[M2].sendingState !== 3) {
                      k2.next = 15;
                      break;
                    }
                    this.fileUtil.cancelMessageAttachmentUpload(t3[M2]), k2.next = 17;
                    break;
                  case 15:
                    if (!t3[M2].sendingState || t3[M2].sendingState === 1) {
                      k2.next = 17;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "deleteMessage: sendingState should be succeeded, please check message at index: " + M2 } });
                  case 17:
                    if (!(M2 >= 1 && t3[M2].conversationId !== g2)) {
                      k2.next = 19;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "deleteMessages: only allow to delete messages from same conversation" } });
                  case 19:
                    t3[M2].messageServerId && t3[M2].messageServerId !== "0" ? m2.push(t3[M2]) : h2.push(t3[M2]);
                  case 20:
                    M2++, k2.next = 10;
                    break;
                  case 23:
                    if (I2 = to(), S2 = concat(u2 = []).call(u2, h2), k2.prev = 25, !(m2.length > 0)) {
                      k2.next = 32;
                      break;
                    }
                    return k2.next = 29, this.core.sendCmd("v2DeleteMessages", { tag: map$6(m2).call(m2, function(t4) {
                      return { messageRefer: t4, serverExtension: a3 };
                    }) });
                  case 29:
                    C2 = k2.sent, I2 = C2.content.timetag, S2 = concat(T2 = []).call(T2, S2, m2);
                  case 32:
                    k2.next = 41;
                    break;
                  case 34:
                    if (k2.prev = 34, k2.t0 = k2.catch(25), h2.length !== 0) {
                      k2.next = 40;
                      break;
                    }
                    throw k2.t0;
                  case 40:
                    this.logger.warn("V2NIMMessageService:deleteMessages: delete messages with serverId failed");
                  case 41:
                    b2 = map$6(S2).call(S2, function(t4) {
                      return { serverExtension: a3, messageRefer: formatMessageRefer(E2.core, t4), deleteTime: I2 };
                    }), this.core.eventBus.emit("forwardSend/V2NIMMessageService/deleteSelfMsgs", map$6(S2).call(S2, function(t4) {
                      return { messageRefer: t4, serverExtension: a3, deleteTime: I2 };
                    })), this.deleteMessagesHandler(b2);
                  case 44:
                  case "end":
                    return k2.stop();
                }
            }, _callee3, this, [[25, 34]]);
          }));
        }, a2.cancelMessageAttachmentUpload = function cancelMessageAttachmentUpload(t3) {
          return this.checkV2(), this.fileUtil.cancelMessageAttachmentUpload(t3);
        }, a2.markMsgsAck = function markMsgsAck(t3) {
          var a3 = this;
          if (t3 && t3.length > 0) {
            var u2 = [], m2 = [];
            forEach$1(t3).call(t3, function(t4) {
              t4.senderId === a3.core.account && t4.senderId !== t4.receiverId || (t4.conversationType === 1 ? u2.push(t4) : t4.conversationType === 2 && m2.push(t4));
            }), u2.length > 0 && this.core.sendCmd("v2BatchMarkRead", { sid: 7, cid: 2, ids: map$6(u2).call(u2, function(t4) {
              return t4.messageServerId;
            }) }), m2.length > 0 && this.core.sendCmd("v2BatchMarkRead", { sid: 8, cid: 3, ids: map$6(m2).call(m2, function(t4) {
              return t4.messageServerId;
            }) });
          }
        }, a2.onMsgHandler = function onMsgHandler(t3) {
          var a3 = t3.content.msg, u2 = a3._conversationOnlineSyncNotify, m2 = a3._conversationOnlineSyncData, h2 = __rest(a3, ["_conversationOnlineSyncNotify", "_conversationOnlineSyncData"]), g2 = completeMessage(this.core, h2), M2 = formatMessageAttachment(g2, this.core);
          this.logger.log("v2OnMsgHandler::recvMsg " + M2.messageClientId + " " + M2.messageServerId), M2.messageType !== 5 && this.core.V2NIMUserService.checkUserUpdate && this.core.V2NIMUserService.checkUserUpdate(M2, M2.userUpdateTime), !this.config.compatibleWithV1 && this.sendUtil.doMsgReceiveReport(M2, t3), delete M2.__clientExt, this.emit("onReceiveMessages", [M2]), this.model.upsertMessages([M2]), !this.config.compatibleWithV1 && this.markMsgsAck([M2]), u2 && this.core.eventBus.emit("V2NIMConversationService/conversationOnlineSyncNotify", { content: { info: JSON.parse(u2), data: JSON.parse(m2) } }, M2), M2.messageType === 5 && this.core.eventBus.emit("V2NIMTeamService/notification", g2);
        }, a2.syncOfflineMsgsHandler = function syncOfflineMsgsHandler(t3) {
          var a3 = this, u2 = t3.content.datas, m2 = map$6(u2).call(u2, function(t4) {
            return formatMessageAttachment(completeMessage(a3.core, t4), a3.core);
          });
          !this.config.compatibleWithV1 && this.markMsgsAck(m2), this.emit("onReceiveMessages", m2), this.model.upsertMessages(m2), this.core.eventBus.emit("V2NIMConversationService/checkBackFill", map$6(m2).call(m2, function(t4) {
            return t4.conversationId;
          }));
        }, a2.syncRoamingMsgsHandler = function syncRoamingMsgsHandler(t3) {
          var a3 = this, u2 = t3.content.datas;
          u2 = map$6(u2).call(u2, function(t4) {
            return formatMessageAttachment(completeMessage(a3.core, t4), a3.core);
          }), this.emit("onReceiveMessages", u2), this.model.upsertMessages(u2), this.core.eventBus.emit("V2NIMConversationService/checkBackFill", map$6(u2).call(u2, function(t4) {
            return t4.conversationId;
          }));
        }, a2.onP2PMessageReceiptsHandler = function onP2PMessageReceiptsHandler(t3) {
          this.receiptUtil.onP2PMessageReceiptsHandler(t3);
        }, a2.onTeamMessageReceiptsHandler = function onTeamMessageReceiptsHandler(t3) {
          this.receiptUtil.onTeamMessageReceiptsHandler(t3);
        }, a2.syncP2PMessagReceiptsHandler = function syncP2PMessagReceiptsHandler(t3) {
          this.receiptUtil.syncP2PMessagReceiptsHandler(t3);
        }, a2.syncRevokeMessageHandler = function syncRevokeMessageHandler(t3) {
          this.emitRevokeMessage(t3.content.datas);
        }, a2.onRevokeMessageHandler = function onRevokeMessageHandler(t3) {
          this.emitRevokeMessage([t3.content.data]);
        }, a2.onDeleteMessageHandler = function onDeleteMessageHandler(t3) {
          var a3 = t3.content.data, u2 = { serverExtension: a3.serverExtension, deleteTime: a3.deleteTime, messageRefer: completeMessageRefer(this.core, a3.messageRefer) };
          this.deleteMessagesHandler([u2]);
        }, a2.onDeleteMessagesHandler = function onDeleteMessagesHandler(t3) {
          var a3, u2 = this, m2 = map$6(a3 = t3.content.data).call(a3, function(t4) {
            return { serverExtension: t4.serverExtension, deleteTime: t4.deleteTime, messageRefer: completeMessageRefer(u2.core, t4.messageRefer) };
          });
          this.deleteMessagesHandler(m2);
        }, a2.syncOnDeleteMessagesHandler = function syncOnDeleteMessagesHandler(t3) {
          var a3 = this, u2 = t3.content.datas, m2 = map$6(u2).call(u2, function(t4) {
            return { serverExtension: t4.serverExtension, deleteTime: t4.deleteTime, messageRefer: completeMessageRefer(a3.core, t4.messageRefer) };
          });
          this.emit("onMessageDeletedNotifications", m2);
        }, a2.sendMessage = function sendMessage(t3, a3, u2, m2) {
          return u2 === void 0 && (u2 = {}), __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var h2, g2, M2, I2, S2, T2, C2, b2, E2 = this;
            return Ql.wrap(function _callee4$(k2) {
              for (; ; )
                switch (k2.prev = k2.next) {
                  case 0:
                    if (this.checkV2(), validate({ message: { type: "object" } }, { message: t3 }, "", true), t3.messageClientId = t3.messageClientId || Iu(), !t3.conversationId || t3.conversationId === a3) {
                      k2.next = 5;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "sendMessage: message.conversationId is not equal to conversationId" } });
                  case 5:
                    if (validate(Zm, { conversationId: a3, message: t3, params: u2 }, "", true), validateConversationId(this.core.account, a3), (h2 = this.core.V2NIMConversationIdUtil.parseConversationType(a3)) !== 2 && h2 !== 3 || !u2.robotConfig || u2.robotConfig.accountId) {
                      k2.next = 10;
                      break;
                    }
                    throw new Vl({ detail: { reason: "When conversationType is team or superTeam, account is required in robotInfo account is required" } });
                  case 10:
                    if (h2 !== 2 && h2 !== 3 || !u2.targetConfig) {
                      k2.next = 20;
                      break;
                    }
                    if (g2 = u2.targetConfig.receiverIds, h2 !== 3 || u2.targetConfig.inclusive !== false) {
                      k2.next = 14;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "setting inclusive to false for super teams is not allowed" } });
                  case 14:
                    if (g2 = filter(g2).call(g2, function(t4) {
                      return t4 && t4 !== E2.core.account;
                    }), g2.length !== 0) {
                      k2.next = 17;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "receiverIds cannot be empty or only contain yourself" } });
                  case 17:
                    u2.targetConfig.receiverIds = g2, k2.next = 21;
                    break;
                  case 20:
                    u2.targetConfig = void 0;
                  case 21:
                    return M2 = this.core.timeOrigin.getTimeNode(), I2 = this.sendUtil.prepareMessage(t3, a3, u2), S2 = I2.messageBeforeSend, T2 = I2.clientAntispamResult, C2 = I2.hiddenParams, this.logger.log("V2SendMessage start:" + S2.messageClientId + "/" + S2.createTime + ";conversation:" + a3 + ";", "NTPTime:" + this.core.timeOrigin.getNTPTime(M2)), k2.prev = 24, k2.next = 27, this.sendUtil.doSendMessage({ apiCallingTimeNode: M2, messageBeforeSend: S2, clientAntispamResult: T2, hiddenParams: C2, progress: m2 });
                  case 27:
                    b2 = k2.sent, k2.next = 34;
                    break;
                  case 30:
                    throw k2.prev = 30, k2.t0 = k2.catch(24), this.logger.warn("V2SendMessage end:" + S2.messageClientId + ".", k2.t0 instanceof Pl ? "failed:" + k2.t0.code : "failed"), k2.t0;
                  case 34:
                    return b2.message.senderId === b2.message.receiverId && this.markMsgsAck([b2.message]), this.logger.log("V2SendMessage end:" + b2.message.messageClientId + "/" + b2.message.messageServerId + "/" + b2.message.createTime), k2.abrupt("return", b2);
                  case 37:
                  case "end":
                    return k2.stop();
                }
            }, _callee4, this, [[24, 30]]);
          }));
        }, a2.replyMessage = function replyMessage(t3, a3, u2, m2) {
          return u2 === void 0 && (u2 = {}), __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var h2, g2, M2, I2, S2, T2;
            return Ql.wrap(function _callee5$(C2) {
              for (; ; )
                switch (C2.prev = C2.next) {
                  case 0:
                    if (this.checkV2(), validate({ message: { type: "object" } }, { message: t3 }, "", true), t3.messageClientId = t3.messageClientId || Iu(), validate(Xm, { message: t3, replyMessage: a3, params: u2 }, "", true), validateConversationId(this.core.account, a3.conversationId), t3.conversationType !== 2 && t3.conversationType !== 3 || !u2.robotConfig || u2.robotConfig.accountId) {
                      C2.next = 7;
                      break;
                    }
                    throw new Vl({ detail: { reason: "When conversationType is team or superTeam, account is required in robotInfo account is required" } });
                  case 7:
                    return h2 = this.core.timeOrigin.getTimeNode(), g2 = this.sendUtil.prepareMessage(t3, a3.conversationId, u2, a3), M2 = g2.messageBeforeSend, I2 = g2.clientAntispamResult, S2 = g2.hiddenParams, C2.next = 11, this.sendUtil.doSendMessage({ apiCallingTimeNode: h2, messageBeforeSend: M2, clientAntispamResult: I2, hiddenParams: S2, progress: m2 });
                  case 11:
                    return (T2 = C2.sent).message.senderId === T2.message.receiverId && this.markMsgsAck([T2.message]), C2.abrupt("return", T2);
                  case 14:
                  case "end":
                    return C2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.modifyMessage = function modifyMessage(t3, a3) {
          this.checkV2(), this.checkLogin(), validate(Eh, t3, "message", true), validate(kh, a3, "params", true), this.modifyUtil.checkIfModify(t3, a3);
          var u2 = this.modifyUtil.prepareMessage(t3, a3), m2 = u2.messageBeforeSend, h2 = u2.clientAntispamResult;
          return this.modifyUtil.modifyMessage(m2, h2);
        }, a2.v2MessageOnModifiedHandler = function v2MessageOnModifiedHandler(t3) {
          var a3 = completeMessage(this.core, t3.content.data);
          this.model.upsertMessages([a3]), this.core.eventBus.emit("forwardSend/V2NIMMessageService/modifyMsg", a3), this.emit("onReceiveMessagesModified", [a3]);
        }, a2.v2MessageSyncModifiedHandler = function v2MessageSyncModifiedHandler(t3) {
          var a3, u2, m2 = this, h2 = filter(a3 = map$6(u2 = t3.content.datas).call(u2, function(t4) {
            return completeMessage(m2.core, t4);
          })).call(a3, function(t4) {
            var a4, u3 = ((a4 = m2.model.getMessageById(t4.messageClientId)) === null || a4 === void 0 ? void 0 : a4.modifyTime) || 0;
            return (t4.modifyTime || 0) > u3;
          });
          h2.length > 0 && (this.model.upsertMessages(h2), forEach$1(h2).call(h2, function(t4) {
            return m2.core.eventBus.emit("forwardSend/V2NIMMessageService/modifyMsg", t4);
          }), this.emit("onReceiveMessagesModified", h2));
        }, a2.v2MessageSyncSuperTeamModifiedHandler = function v2MessageSyncSuperTeamModifiedHandler(t3) {
          this.v2MessageSyncModifiedHandler(t3);
        }, V2NIMMessageServiceImpl;
      }(ip), Cg = "V2NIMMessageLogUtil", bg = { "30_6": "v2GetMessageList", "33_2": "v2GetMessageListByRefers", "30_18": "v2ClearHistoryMessage", "7_118": "onClearHistoryMessage", "4_24": "syncClearHistoryMessage", "31_23": "v2GetTeamMessageList", "32_14": "v2GetSuperTeamMessageList" }, Eg = { conversationType: { id: 0, retType: "number" }, receiverId: 1, deleteRoam: { id: 2, converter: boolToInt }, teamId: 3, onlineSync: { id: 4, converter: boolToInt }, deleteTime: { id: 6, retType: "number" }, serverExtension: 7 }, kg = [{ type: "Long", name: "beginTime" }, { type: "Long", name: "endTime" }, { type: "Long", name: "lastMsgId" }, { type: "Int", name: "limit" }, { type: "Bool", name: "direction" }, { type: "LongArray", name: "msgTypes" }], wg = { v2GetMessageList: { sid: 30, cid: 6, service: Cg, params: concat(cg = [{ type: "String", name: "to" }]).call(cg, kg), response: [{ type: "PropertyArray", name: "msgs", reflectMapper: invertSerializeItem(fm) }] }, v2GetMessageListByRefers: { sid: 33, cid: 2, service: Cg, params: [{ type: "PropertyArray", name: "tag", reflectMapper: fm, select: ["conversationType", "senderId", "receiverId", "createTime", "messageServerId"] }], response: [{ type: "PropertyArray", name: "msgs", reflectMapper: invertSerializeItem(fm) }] }, v2ClearHistoryMessage: { sid: 30, cid: 18, service: Cg, params: [{ type: "Property", name: "tag", reflectMapper: Eg }], response: [{ type: "Long", name: "timetag" }] }, v2GetTeamMessageList: { sid: 31, cid: 23, service: Cg, params: concat(lg = [{ type: "Long", name: "to" }]).call(lg, kg), response: [{ type: "PropertyArray", name: "msgs", reflectMapper: invertSerializeItem(fm) }] }, v2GetSuperTeamMessageList: { sid: 32, cid: 14, service: Cg, params: concat(ug = [{ type: "Long", name: "to" }]).call(ug, kg), response: [{ type: "PropertyArray", name: "msgs", reflectMapper: invertSerializeItem(fm) }] }, onClearHistoryMessage: { sid: 7, cid: 118, service: Cg, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Eg) }] }, syncClearHistoryMessage: { sid: 4, cid: 24, service: Cg, response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(Eg) }] } }, Rg = function(t2) {
        function V2NIMMessageLogUtil(a3) {
          var u2;
          return (u2 = t2.call(this, "V2NIMMessageLogUtil", a3) || this).clearHistoryMessageHandler = function(t3) {
            var a4 = formatClearHistoryNotification(u2.core, t3);
            u2.emitClearHistoryMessage([a4]);
          }, u2.core = a3, u2.service = u2.core.V2NIMMessageService, u2.core.options.apiVersion !== "v2" ? Qe(u2) : (registerParser({ cmdMap: bg, cmdConfig: wg }), u2.setListener(), u2);
        }
        Nt(V2NIMMessageLogUtil, t2);
        var a2 = V2NIMMessageLogUtil.prototype;
        return a2.setListener = function setListener() {
          this.core.eventBus.on("forwardReceive/V2NIMMessageLogService/clearHistoryMessage", this.clearHistoryMessageHandler);
        }, a2.getMessageListByRefers = function getMessageListByRefers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a3, u2, m2, h2, g2, M2, I2 = this;
            return Ql.wrap(function _callee$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    if (this.checkV2(), validate(nh, { messageRefers: t3 }, "", true), t3.length !== 0) {
                      S2.next = 4;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getMessageListByRefers: messageRefers cannot be an empty array" } });
                  case 4:
                    if (m2 = [], h2 = map$6(t3).call(t3, function(t4) {
                      var a4 = I2.service.model.getMessageById(t4.messageClientId);
                      return !a4 && t4.messageServerId && t4.messageServerId !== "0" && m2.push(t4), a4;
                    }), g2 = [], !(m2.length > 0)) {
                      S2.next = 12;
                      break;
                    }
                    return S2.next = 10, this.core.sendCmd("v2GetMessageListByRefers", { tag: m2 });
                  case 10:
                    M2 = S2.sent, g2 = M2.content.msgs;
                  case 12:
                    return S2.abrupt("return", map$6(a3 = filter(u2 = map$6(h2).call(h2, function(a4, u3) {
                      if (a4)
                        return a4;
                      var m3 = t3[u3], h3 = find(g2).call(g2, function(t4) {
                        return t4.messageServerId === m3.messageServerId;
                      });
                      return h3 ? completeMessage(I2.core, h3) : void 0;
                    })).call(u2, function(t4) {
                      return t4 !== void 0;
                    })).call(a3, function(t4) {
                      return formatMessageAttachment(t4, I2.core);
                    }));
                  case 13:
                  case "end":
                    return S2.stop();
                }
            }, _callee, this);
          }));
        }, a2.getMessageList = function getMessageList(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var u2, m2, h2, g2, M2, I2, S2, T2, C2, b2, E2, k2, w2, R2 = this;
            return Ql.wrap(function _callee2$(A2) {
              for (; ; )
                switch (A2.prev = A2.next) {
                  case 0:
                    if (this.checkV2(), this.core.V2NIMConversationIdUtil && this.core.V2NIMConversationIdUtil.parseConversationType) {
                      A2.next = 3;
                      break;
                    }
                    throw new Error('Service "V2NIMConversationService" does not exist');
                  case 3:
                    if (validate(th, t3, "", true), validateConversationId(this.core.account, t3.conversationId), g2 = this.core.V2NIMConversationIdUtil.parseConversationType(t3.conversationId), M2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(t3.conversationId), I2 = g2 === 1 ? "v2GetMessageList" : g2 === 2 ? "v2GetTeamMessageList" : "v2GetSuperTeamMessageList", S2 = t3.beginTime || 0, T2 = t3.endTime || 0, !(S2 !== 0 && T2 !== 0 && S2 > T2)) {
                      A2.next = 12;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getMessageList: beginTime cannot be greater than endTime" } });
                  case 12:
                    if (C2 = t3.direction === void 0 ? 0 : t3.direction, !t3.anchorMessage) {
                      A2.next = 29;
                      break;
                    }
                    if (t3.direction !== 0) {
                      A2.next = 23;
                      break;
                    }
                    if (T2 !== 0) {
                      A2.next = 19;
                      break;
                    }
                    T2 = t3.anchorMessage.createTime, A2.next = 21;
                    break;
                  case 19:
                    if (T2 === t3.anchorMessage.createTime) {
                      A2.next = 21;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getMessageList: When providing anchorMessage, when sorting in descending order, endTime does not need to be provided, or endTime should be equal to anchorMessage.createTime" } });
                  case 21:
                    A2.next = 29;
                    break;
                  case 23:
                    if (S2 !== 0) {
                      A2.next = 27;
                      break;
                    }
                    S2 = t3.anchorMessage.createTime, A2.next = 29;
                    break;
                  case 27:
                    if (S2 === t3.anchorMessage.createTime) {
                      A2.next = 29;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getMessageList: When providing anchorMessage, when sorting in ascending order, there is no need to provide beginTime, or beginTime should be equal to anchorMessage.createTime" } });
                  case 29:
                    return b2 = (a3 = t3.anchorMessage) === null || a3 === void 0 ? void 0 : a3.messageServerId, A2.next = 32, this.core.sendCmd(I2, { beginTime: S2, endTime: T2, lastMsgId: b2 || 0, limit: t3.limit || 50, direction: C2, msgTypes: t3.messageTypes ? slice(u2 = t3.messageTypes).call(u2) : [], to: M2 });
                  case 32:
                    return E2 = A2.sent, k2 = E2.content, w2 = [], w2 = map$6(m2 = k2.msgs).call(m2, function(t4) {
                      return completeMessage(R2.core, t4);
                    }), b2 && (w2 = filter(w2).call(w2, function(t4) {
                      return t4.messageServerId !== b2;
                    })), A2.abrupt("return", map$6(h2 = this.getMessageListMonkeyPatch(w2, t3)).call(h2, function(t4) {
                      return formatMessageAttachment(t4, R2.core);
                    }));
                  case 38:
                  case "end":
                    return A2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.getMessageListMonkeyPatch = function getMessageListMonkeyPatch(t3, a3) {
          var u2 = a3.conversationId, m2 = t3, h2 = reduce(m2).call(m2, function(t4, a4) {
            return t4[a4.messageClientId] = true, t4;
          }, {}), g2 = this.service.model.getMessagesByConversationId(u2);
          g2 = sort(g2).call(g2, function(t4, u3) {
            return a3.direction === 1 ? t4.createTime - u3.createTime : u3.createTime - t4.createTime;
          });
          var M2 = 0, I2 = a3.beginTime || 0, S2 = a3.endTime || 0;
          a3.anchorMessage && (a3.direction === 0 ? S2 = a3.anchorMessage.createTime : I2 = a3.anchorMessage.createTime, M2 = findIndex$1(g2).call(g2, function(t4) {
            var u3;
            return t4.messageClientId === ((u3 = a3.anchorMessage) === null || u3 === void 0 ? void 0 : u3.messageClientId);
          }), M2 += 1);
          for (var T2 = M2; T2 < g2.length; T2++) {
            var C2, b2 = g2[T2], E2 = !h2[b2.messageClientId], k2 = b2.sendingState === void 0 || b2.sendingState === 1, w2 = b2.conversationId === u2, R2 = b2.createTime > I2 && (b2.createTime < S2 || S2 === 0), A2 = !a3.messageTypes || includes(C2 = a3.messageTypes).call(C2, b2.messageType);
            E2 && k2 && w2 && R2 && A2 && m2.push(g2[T2]);
          }
          return m2 = sort(m2).call(m2, function(t4, u3) {
            return a3.direction === 1 ? t4.createTime - u3.createTime : u3.createTime - t4.createTime;
          }), slice(m2).call(m2, 0, a3.limit || 50);
        }, a2.clearHistoryMessage = function clearHistoryMessage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3, u2, m2, h2, g2, M2, I2, S2;
            return Ql.wrap(function _callee3$(T2) {
              for (; ; )
                switch (T2.prev = T2.next) {
                  case 0:
                    return this.checkV2(), validate(oh, t3, "", true), validateConversationId(this.core.account, t3.conversationId), a3 = t3.conversationId, u2 = t3.deleteRoam, m2 = t3.onlineSync, h2 = t3.serverExtension, g2 = this.core.V2NIMConversationIdUtil.parseConversationType(a3), M2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(a3), I2 = { deleteRoam: u2, onlineSync: m2, serverExtension: h2, conversationType: g2 }, g2 === 1 ? I2.receiverId = M2 : I2.teamId = M2, T2.next = 10, this.core.sendCmd("v2ClearHistoryMessage", { tag: I2 });
                  case 10:
                    S2 = T2.sent, this.core.eventBus.emit("forwardSend/V2NIMMessageLogService/clearHistoryMessage", Dt(Dt({}, I2), { deleteTime: S2.content.timetag })), this.emitClearHistoryMessage([{ deleteTime: S2.content.timetag, serverExtension: h2, conversationId: a3 }]);
                  case 13:
                  case "end":
                    return T2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.syncClearHistoryMessageHandler = function syncClearHistoryMessageHandler(t3) {
          var a3, u2 = this, m2 = map$6(a3 = t3.content.data).call(a3, function(t4) {
            return formatClearHistoryNotification(u2.core, t4);
          });
          this.emitClearHistoryMessage(m2);
        }, a2.onClearHistoryMessageHandler = function onClearHistoryMessageHandler(t3) {
          var a3 = formatClearHistoryNotification(this.core, t3.content.data);
          this.emitClearHistoryMessage([a3]);
        }, a2.emitClearHistoryMessage = function emitClearHistoryMessage(t3) {
          var a3 = this;
          forEach$1(t3).call(t3, function(t4) {
            a3.service.model.deleteMessages(t4.conversationId, t4.deleteTime);
          }), this.service.emit("onClearHistoryNotifications", t3);
        }, V2NIMMessageLogUtil;
      }(ip), Ag = "V2NIMMessageExtendUtil", Ng = { "29_5": "v2VoiceToText", "33_15": "v2PinMessage", "33_16": "v2UpdatePinMessage", "33_17": "v2UnpinMessage", "23_18": "onPinMessage", "23_19": "onUpdatePinMessage", "23_20": "onUnpinMessage", "23_115": "onPinMessage", "23_116": "onUpdatePinMessage", "23_117": "onUnpinMessage", "33_21": "v2GetPinMessageList", "33_3": "v2AddQuickComment", "33_4": "v2RemoveQuickComment", "33_7": "v2GetQuickComment", "23_5": "onAddQuickComment", "23_6": "onRemoveQuickComment", "23_103": "onAddQuickComment", "23_104": "onRemoveQuickComment", "33_8": "v2AddCollection", "33_9": "v2RemoveCollections", "33_10": "v2UpdateCollectionExtension", "33_11": "v2GetCollectionListByOption", "30_26": "v2SearchCloudMessagesGroupByConversation", "30_27": "v2SearchCloudMessages", "33_1": "v2GetThreadMessageList" }, xg = { conversationType: { id: 1, converter: conversationTypeV2ToV1, retConverter: conversationTypeV1ToV2, access: "messageRefer.conversationType" }, senderId: { id: 2, access: "messageRefer.senderId" }, receiverId: { id: 3, access: "messageRefer.receiverId" }, createTime: { id: 4, retType: "number", access: "messageRefer.createTime" }, messageServerId: { id: 5, access: "messageRefer.messageServerId" }, messageClientId: { id: 6, access: "messageRefer.messageClientId" }, detail: 7, modify: { id: 8, retType: "number" } }, Og = { conversationType: { id: 1, access: "messageRefer.conversationType", retConverter: conversationTypeV1ToV2 }, senderId: { id: 2, access: "messageRefer.senderId" }, receiverId: { id: 3, access: "messageRefer.receiverId" }, time: { id: 4, access: "messageRefer.createTime", converter: boolToInt, retType: "number" }, messageServerId: { id: 5, access: "messageRefer.messageServerId" }, messageClientId: { id: 6, access: "messageRefer.messageClientId" }, operatorId: 7, serverExtension: 8, createTime: { id: 9, converter: boolToInt, retType: "number" }, updateTime: { id: 10, converter: boolToInt, retType: "number" } }, Pg = { operatorId: 1, index: { id: 2, retType: "number" }, createTime: { id: 3, retType: "number" }, serverExtension: 4, pushEnabled: { id: 5, access: "pushConfig.pushEnabled", converter: boolToInt }, needBadge: { id: 6, access: "pushConfig.needBadge", converter: boolToInt }, title: { id: 7, access: "pushConfig.title" }, pushContent: { id: 8, access: "pushConfig.pushContent" }, pushPayload: { id: 9, access: "pushConfig.pushPayload" } }, Lg = { accid: 1, serverExtension: 2, createTime: { id: 3, retType: "number" }, updateTime: { id: 4, retType: "number" } }, Vg = { collectionId: 1, collectionType: { id: 2, retType: "number" }, collectionData: 3, serverExtension: 4, uniqueId: 5, createTime: { id: 6, retType: "number" }, updateTime: { id: 7, retType: "number" } }, Ug = { keyword: 1, beginTime: 2, endTime: 3, messageLimit: 5, sortOrder: { id: 6, converter: function converter(t2) {
        return t2 === 0 ? 2 : 1;
      } }, p2pAccountIds: { id: 7, converter: function converter(t2) {
        return t2.join(",");
      } }, teamIds: { id: 8, converter: function converter(t2) {
        return t2.join(",");
      } }, senderAccountIds: { id: 9, converter: function converter(t2) {
        return t2.join(",");
      } }, messageTypes: { id: 10, converter: function converter(t2) {
        return t2.join(",");
      } }, messageSubtypes: { id: 11, converter: function converter(t2) {
        return t2.join(",");
      } } }, Dg = Dt(Dt({}, Ug), { conversationLimit: 4 }), qg = { v2PinMessage: { sid: 33, cid: 15, service: Ag, params: [{ type: "Property", name: "msg", reflectMapper: fm, select: ["conversationType", "receiverId", "senderId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "msgPin", reflectMapper: Lg }], response: [{ type: "Long", name: "timetag" }] }, v2UnpinMessage: { sid: 33, cid: 17, service: Ag, params: [{ type: "Property", name: "msg", reflectMapper: fm, select: ["conversationType", "receiverId", "senderId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "msgPin", reflectMapper: Lg }], response: [{ type: "Long", name: "timetag" }] }, v2UpdatePinMessage: { sid: 33, cid: 16, service: Ag, params: [{ type: "Property", name: "msg", reflectMapper: fm, select: ["conversationType", "receiverId", "senderId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "msgPin", reflectMapper: Lg }], response: [{ type: "Long", name: "timetag" }] }, v2GetPinMessageList: { sid: 33, cid: 21, service: Ag, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1, timetag: 2 } }], response: [{ type: "Long", name: "timetag" }, { type: "Bool", name: "changed" }, { type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(Og) }] }, v2VoiceToText: { sid: 29, cid: 5, service: Ag, params: [{ type: "Property", name: "tag", reflectMapper: { mimeType: 0, sampleRate: 1, voiceUrl: 2, duration: 3 } }], response: [{ type: "String", name: "data" }] }, v2AddQuickComment: { sid: 33, cid: 3, service: Ag, params: [{ type: "Property", name: "message", reflectMapper: fm, select: ["conversationType", "senderId", "receiverId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "quickComment", reflectMapper: Pg }], response: [{ type: "Long", name: "timetag" }] }, v2RemoveQuickComment: { sid: 33, cid: 4, service: Ag, params: [{ type: "Property", name: "message", reflectMapper: fm, select: ["conversationType", "senderId", "receiverId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "quickComment", reflectMapper: Pg }], response: [{ type: "Long", name: "timetag" }] }, onAddQuickComment: { sid: 23, cid: 5, service: Ag, response: [{ type: "Property", name: "message", reflectMapper: invertSerializeItem(fm) }, { type: "Property", name: "quickComment", reflectMapper: invertSerializeItem(Pg) }] }, onRemoveQuickComment: { sid: 23, cid: 6, service: Ag, response: [{ type: "Property", name: "message", reflectMapper: invertSerializeItem(fm) }, { type: "Property", name: "quickComment", reflectMapper: invertSerializeItem(Pg) }] }, v2GetQuickComment: { sid: 33, cid: 7, service: Ag, params: [{ type: "PropertyArray", name: "tag", reflectMapper: xg }], response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(xg) }] }, onPinMessage: { sid: 23, cid: 18, service: Ag, response: [{ type: "Property", name: "msg", reflectMapper: invertSerializeItem(fm) }, { type: "Property", name: "pinInfo", reflectMapper: invertSerializeItem(Lg) }] }, onUpdatePinMessage: { sid: 23, cid: 19, service: Ag, response: [{ type: "Property", name: "msg", reflectMapper: invertSerializeItem(fm) }, { type: "Property", name: "pinInfo", reflectMapper: invertSerializeItem(Lg) }] }, onUnpinMessage: { sid: 23, cid: 20, service: Ag, response: [{ type: "Property", name: "msg", reflectMapper: invertSerializeItem(fm) }, { type: "Property", name: "pinInfo", reflectMapper: invertSerializeItem(Lg) }] }, v2AddCollection: { sid: 33, cid: 8, service: Ag, params: [{ type: "Property", name: "tag", reflectMapper: Vg }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Vg) }] }, v2RemoveCollections: { sid: 33, cid: 9, service: Ag, params: [{ type: "PropertyArray", name: "tag", reflectMapper: Vg, select: ["collectionId", "createTime"] }], response: [{ type: "Int", name: "data" }] }, v2UpdateCollectionExtension: { sid: 33, cid: 10, service: Ag, params: [{ type: "Property", name: "tag", reflectMapper: Vg }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Vg) }] }, v2GetCollectionListByOption: { sid: 33, cid: 11, service: Ag, params: [{ type: "Property", name: "tag", reflectMapper: { beginTime: 1, endTime: 2, excludeId: 3, limit: 4, direction: 5, collectionType: 6 } }], response: [{ type: "Long", name: "total" }, { type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(Vg) }] }, v2SearchCloudMessagesGroupByConversation: { sid: 30, cid: 26, service: Ag, params: [{ type: "Property", name: "tag", reflectMapper: Dg }], response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(fm) }] }, v2SearchCloudMessages: { sid: 30, cid: 27, service: Ag, params: [{ type: "Property", name: "tag", reflectMapper: Ug }], response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(fm) }] }, v2GetThreadMessageList: { sid: 33, cid: 1, service: Ag, params: [{ type: "Property", name: "messageRefer", reflectMapper: fm }, { type: "Property", name: "tag", reflectMapper: { beginTime: 1, endTime: 2, excludeMessageServerId: 3, limit: 4, reverse: 5 } }], response: [{ type: "Property", name: "message", reflectMapper: invertSerializeItem(fm) }, { type: "Property", name: "replyResult", reflectMapper: invertSerializeItem({ total: { id: 1, retType: "number" }, timestamp: { id: 2, retType: "number" } }) }, { type: "PropertyArray", name: "replyList", reflectMapper: invertSerializeItem(fm) }] } }, Bg = function(t2) {
        function V2NIMMessageExtendUtil(a3) {
          var u2;
          return (u2 = t2.call(this, "V2NIMMessageExtendUtil", a3) || this).core = a3, u2.core.options.apiVersion !== "v2" ? Qe(u2) : (registerParser({ cmdMap: Ng, cmdConfig: qg }), u2);
        }
        Nt(V2NIMMessageExtendUtil, t2);
        var a2 = V2NIMMessageExtendUtil.prototype;
        return a2.pinMessage = function pinMessage(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2;
            return Ql.wrap(function _callee$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this.checkV2(), validate(rh, t3, "message", true), validate(sh, { serverExtension: a3 }, "", true), m2.next = 5, this.core.sendCmd("v2PinMessage", { msg: t3, msgPin: { serverExtension: a3 } });
                  case 5:
                    u2 = m2.sent, this.emitPinNotification({ pinState: 1, message: t3, serverExtension: a3, createTime: u2.content.timetag, updateTime: u2.content.timetag, operatorId: this.core.account });
                  case 7:
                  case "end":
                    return m2.stop();
                }
            }, _callee, this);
          }));
        }, a2.unpinMessage = function unpinMessage(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var u2;
            return Ql.wrap(function _callee2$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this.checkV2(), validate(rh, t3, "messageRefer", true), validate(sh, { serverExtension: a3 }, "", true), m2.next = 5, this.core.sendCmd("v2UnpinMessage", { msg: t3, msgPin: { serverExtension: a3 } });
                  case 5:
                    u2 = m2.sent, this.emitPinNotification({ pinState: 0, message: t3, serverExtension: a3, updateTime: u2.content.timetag, operatorId: this.core.account });
                  case 7:
                  case "end":
                    return m2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.updatePinMessage = function updatePinMessage(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var u2;
            return Ql.wrap(function _callee3$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this.checkV2(), validate(rh, t3, "message", true), validate(sh, { serverExtension: a3 }, "", true), m2.next = 5, this.core.sendCmd("v2UpdatePinMessage", { msg: t3, msgPin: { serverExtension: a3 } });
                  case 5:
                    u2 = m2.sent, this.emitPinNotification({ pinState: 2, message: t3, serverExtension: a3, updateTime: u2.content.timetag, operatorId: this.core.account });
                  case 7:
                  case "end":
                    return m2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.getPinnedMessageList = function getPinnedMessageList(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a3, u2, m2, h2, g2 = this;
            return Ql.wrap(function _callee4$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    if (this.checkV2(), this.core.V2NIMConversationIdUtil && this.core.V2NIMConversationIdUtil.parseConversationType) {
                      M2.next = 3;
                      break;
                    }
                    throw new Error('Service "V2NIMConversationService" does not exist');
                  case 3:
                    return validateConversationId(this.core.account, t3), m2 = (m2 = this.core.V2NIMConversationIdUtil.convertToV1ConversationId(t3)).replace("superTeam", "super_team"), M2.next = 8, this.core.sendCmd("v2GetPinMessageList", { tag: { conversationId: m2, timetag: 0 } });
                  case 8:
                    return h2 = M2.sent, M2.abrupt("return", sort(a3 = map$6(u2 = h2.content.data).call(u2, function(t4) {
                      return Dt(Dt({}, t4), { messageRefer: Dt(Dt({}, t4.messageRefer), { conversationId: g2.core.V2NIMConversationIdUtil.messageConversationId(t4.messageRefer) }) });
                    })).call(a3, function(t4, a4) {
                      return a4.updateTime - t4.updateTime;
                    }));
                  case 10:
                  case "end":
                    return M2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.addQuickComment = function addQuickComment(t3, a3, u2, m2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var h2, g2;
            return Ql.wrap(function _callee5$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return this.checkV2(), validate(dh, { message: t3, index: a3, serverExtension: u2, pushConfig: m2 }, "", true), M2.next = 4, this.core.sendCmd("v2AddQuickComment", { message: t3, quickComment: { index: a3, serverExtension: u2, pushConfig: m2 } });
                  case 4:
                    h2 = M2.sent, g2 = { operationType: 1, quickComment: { messageRefer: formatMessageRefer(this.core, t3), createTime: h2.content.timetag, index: a3, serverExtension: u2 || "", operatorId: this.core.account } }, this.core.V2NIMMessageService.emit("onMessageQuickCommentNotification", g2);
                  case 7:
                  case "end":
                    return M2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.removeQuickComment = function removeQuickComment(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var m2, h2;
            return Ql.wrap(function _callee6$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return this.checkV2(), validate(rh, t3, "messageRefer", true), validate({ index: { type: "number", min: 1 } }, { index: a3 }, "", true), validate({ serverExtension: { type: "string", required: false } }, { serverExtension: u2 }, "", true), g2.next = 6, this.core.sendCmd("v2RemoveQuickComment", { message: t3, quickComment: { index: a3, serverExtension: u2 } });
                  case 6:
                    m2 = g2.sent, h2 = { operationType: 2, quickComment: { messageRefer: formatMessageRefer(this.core, t3), createTime: m2.content.timetag, index: a3, serverExtension: u2 || "", operatorId: this.core.account } }, this.core.V2NIMMessageService.emit("onMessageQuickCommentNotification", h2);
                  case 9:
                  case "end":
                    return g2.stop();
                }
            }, _callee6, this);
          }));
        }, a2.getQuickCommentList = function getQuickCommentList(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            var a3, u2, m2, h2 = this;
            return Ql.wrap(function _callee7$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return this.checkV2(), validate(ph, { messages: t3 }, "", true), u2 = {}, g2.next = 5, this.core.sendCmd("v2GetQuickComment", { tag: map$6(t3).call(t3, function(t4) {
                      return { messageRefer: t4 };
                    }) });
                  case 5:
                    return m2 = g2.sent, forEach$1(a3 = m2.content.data).call(a3, function(t4) {
                      var a4, m3;
                      try {
                        if (!t4.detail)
                          return void (u2[a4 = t4.messageRefer.messageClientId] || (u2[a4] = []));
                        var g3 = JSON.parse(t4.detail);
                        u2[m3 = t4.messageRefer.messageClientId] || (u2[m3] = []), forEach$1(g3).call(g3, function(a5) {
                          u2[t4.messageRefer.messageClientId].push({ messageRefer: Dt(Dt({}, t4.messageRefer), { conversationId: h2.core.V2NIMConversationIdUtil.messageConversationId(t4.messageRefer) }), operatorId: a5[1], index: Uu(a5[2]), createTime: Uu(a5[3]), serverExtension: a5[4] });
                        });
                      } catch (a5) {
                        h2.logger.error("getQuickCommentList JSON Parse Error", t4.detail, a5);
                      }
                    }), g2.abrupt("return", u2);
                  case 8:
                  case "end":
                    return g2.stop();
                }
            }, _callee7, this);
          }));
        }, a2.voiceToText = function voiceToText(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var a3, u2, m2, h2, g2, M2, I2, S2, T2, C2, b2;
            return Ql.wrap(function _callee8$(E2) {
              for (; ; )
                switch (E2.prev = E2.next) {
                  case 0:
                    if (this.checkV2(), validate(uh, t3, "", true), t3.voicePath || t3.voiceUrl || t3.file) {
                      E2.next = 4;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "voiceToText: voicePath\u3001voiceUrl\u3001file cannot be empty at the same time" } });
                  case 4:
                    if (a3 = t3.voicePath, u2 = t3.file, m2 = t3.mimeType, h2 = t3.sampleRate, g2 = t3.duration, M2 = t3.sceneName, I2 = M2 ? this.core.V2NIMStorageService.getStorageScene(M2) : null, S2 = t3.voiceUrl) {
                      E2.next = 14;
                      break;
                    }
                    return T2 = {}, u2 ? T2.file = u2 : (a3 == null ? void 0 : indexOf(a3).call(a3, "nim-external")) === 0 ? T2.fileInput = a3 : T2.filePath = a3, E2.next = 12, this.core.cloudStorage.uploadFile(Dt({ type: "audio", nosScenes: I2 ? I2.sceneName : void 0, nosSurvivalTime: I2 ? I2.expireTime : void 0 }, T2));
                  case 12:
                    C2 = E2.sent, S2 = C2.url;
                  case 14:
                    return E2.next = 16, this.core.sendCmd("v2VoiceToText", { tag: { voiceUrl: S2, mimeType: m2, sampleRate: h2, duration: g2 } }, { timeout: 3e4 });
                  case 16:
                    return b2 = E2.sent, E2.abrupt("return", b2.content.data);
                  case 18:
                  case "end":
                    return E2.stop();
                }
            }, _callee8, this);
          }));
        }, a2.onPinMessageHandler = function onPinMessageHandler(t3) {
          return this.pinMessageChangeHandler(t3, 1);
        }, a2.onUnpinMessageHandler = function onUnpinMessageHandler(t3) {
          return this.pinMessageChangeHandler(t3, 0);
        }, a2.onUpdatePinMessageHandler = function onUpdatePinMessageHandler(t3) {
          return this.pinMessageChangeHandler(t3, 2);
        }, a2.pinMessageChangeHandler = function pinMessageChangeHandler(t3, a3) {
          var u2 = t3.content.msg, m2 = t3.content.pinInfo;
          u2.conversationId = this.core.V2NIMConversationIdUtil.messageConversationId(u2), this.emitPinNotification({ pinState: a3, message: u2, serverExtension: m2.serverExtension, createTime: m2.createTime, updateTime: m2.updateTime, operatorId: m2.accid });
        }, a2.emitPinNotification = function emitPinNotification(t3) {
          var a3 = { pinState: t3.pinState, pin: Dt(Dt({ serverExtension: t3.serverExtension || "", operatorId: t3.operatorId }, t3.createTime ? { createTime: t3.createTime } : {}), { updateTime: t3.updateTime, messageRefer: formatMessageRefer(this.core, t3.message) }) };
          this.core.V2NIMMessageService.emit("onMessagePinNotification", a3);
        }, a2.onAddQuickCommentHandler = function onAddQuickCommentHandler(t3) {
          return this.onQuickCommentNotificationHandler(t3, 1);
        }, a2.onRemoveQuickCommentHandler = function onRemoveQuickCommentHandler(t3) {
          return this.onQuickCommentNotificationHandler(t3, 2);
        }, a2.onQuickCommentNotificationHandler = function onQuickCommentNotificationHandler(t3, a3) {
          var u2 = { operationType: a3, quickComment: Dt({ messageRefer: Dt(Dt({}, t3.content.message), { conversationId: this.core.V2NIMConversationIdUtil.messageConversationId(t3.content.message) }) }, t3.content.quickComment) };
          this.core.V2NIMMessageService.emit("onMessageQuickCommentNotification", u2);
        }, a2.addCollection = function addCollection(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            var a3;
            return Ql.wrap(function _callee9$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.checkV2(), validate(mh, { params: t3 }, "", true), u2.next = 4, this.core.sendCmd("v2AddCollection", { tag: t3 });
                  case 4:
                    return a3 = u2.sent, u2.abrupt("return", a3.content.data);
                  case 6:
                  case "end":
                    return u2.stop();
                }
            }, _callee9, this);
          }));
        }, a2.removeCollections = function removeCollections(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            var a3;
            return Ql.wrap(function _callee10$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.checkV2(), validate(gh, { collections: t3 }, "", true), u2.next = 4, this.core.sendCmd("v2RemoveCollections", { tag: t3 });
                  case 4:
                    return a3 = u2.sent, u2.abrupt("return", a3.content.data);
                  case 6:
                  case "end":
                    return u2.stop();
                }
            }, _callee10, this);
          }));
        }, a2.updateCollectionExtension = function updateCollectionExtension(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            var u2;
            return Ql.wrap(function _callee11$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this.checkV2(), validate(vh, { collection: t3, serverExtension: a3 }, "", true), m2.next = 4, this.core.sendCmd("v2UpdateCollectionExtension", { tag: Dt(Dt({}, t3), { serverExtension: a3 }) });
                  case 4:
                    return u2 = m2.sent, m2.abrupt("return", u2.content.data);
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee11, this);
          }));
        }, a2.getCollectionListByOption = function getCollectionListByOption(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            var a3;
            return Ql.wrap(function _callee12$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.checkV2(), validate(fh, t3, "", true), u2.next = 4, this.getCollectionListExByOption(t3);
                  case 4:
                    return a3 = u2.sent, u2.abrupt("return", a3.collectionList);
                  case 6:
                  case "end":
                    return u2.stop();
                }
            }, _callee12, this);
          }));
        }, a2.getCollectionListExByOption = function getCollectionListExByOption(t3) {
          var a3, u2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            var m2, h2, g2, M2, I2;
            return Ql.wrap(function _callee13$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    if (this.checkV2(), validate(fh, t3, "", true), m2 = t3.beginTime || 0, h2 = t3.endTime || 0, g2 = t3.direction === void 0 ? 0 : t3.direction, ((a3 = t3.anchorCollection) === null || a3 === void 0 ? void 0 : a3.collectionId) === void 0) {
                      S2.next = 21;
                      break;
                    }
                    if (t3.direction !== 0) {
                      S2.next = 15;
                      break;
                    }
                    if (h2 !== 0) {
                      S2.next = 11;
                      break;
                    }
                    h2 = t3.anchorCollection.createTime, S2.next = 13;
                    break;
                  case 11:
                    if (h2 === t3.anchorCollection.createTime) {
                      S2.next = 13;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getCollectionListExByOption: When providing anchorCollection, when sorting in descending order, endTime does not need to be provided, or endTime should be equal to anchorCollection.createTime" } });
                  case 13:
                    S2.next = 21;
                    break;
                  case 15:
                    if (m2 !== 0) {
                      S2.next = 19;
                      break;
                    }
                    m2 = t3.anchorCollection.createTime, S2.next = 21;
                    break;
                  case 19:
                    if (m2 === t3.anchorCollection.createTime) {
                      S2.next = 21;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getCollectionListExByOption: When providing anchorCollection, when sorting in ascending order, there is no need to provide beginTime, or beginTime should be equal to anchorCollection.createTime" } });
                  case 21:
                    if (!(m2 !== 0 && h2 !== 0 && m2 >= h2)) {
                      S2.next = 23;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getCollectionListExByOption: beginTime cannot be greater than endTime" } });
                  case 23:
                    return (M2 = { beginTime: m2, endTime: h2, direction: g2, limit: t3.limit, collectionType: t3.collectionType, excludeId: ((u2 = t3.anchorCollection) === null || u2 === void 0 ? void 0 : u2.collectionId) ? t3.anchorCollection.collectionId : 0 }).collectionType || delete M2.collectionType, S2.next = 27, this.core.sendCmd("v2GetCollectionListByOption", { tag: M2 });
                  case 27:
                    return I2 = S2.sent, S2.abrupt("return", { totalCount: I2.content.total, collectionList: I2.content.data });
                  case 29:
                  case "end":
                    return S2.stop();
                }
            }, _callee13, this);
          }));
        }, a2.searchCloudMessages = function searchCloudMessages(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee14() {
            var a3, u2, m2, h2, g2, M2, I2, S2, T2 = this;
            return Ql.wrap(function _callee14$(C2) {
              for (; ; )
                switch (C2.prev = C2.next) {
                  case 0:
                    if (this.checkV2(), validate(yh, t3, "", true), u2 = t3.beginTime || 0, m2 = t3.endTime || 0, !(u2 !== 0 && m2 !== 0 && u2 > m2)) {
                      C2.next = 6;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "searchCloudMessages: beginTime cannot be greater than endTime" } });
                  case 6:
                    return h2 = t3.sortOrder === void 0 ? 0 : t3.sortOrder, g2 = t3.conversationLimit || 0, M2 = t3.messageLimit || 10, I2 = g2 > 0 ? "v2SearchCloudMessagesGroupByConversation" : "v2SearchCloudMessages", C2.next = 12, this.core.sendCmd(I2, { tag: Dt(Dt({}, t3), { beginTime: u2, endTime: m2, sortOrder: h2, conversationLimit: g2, messageLimit: M2 }) });
                  case 12:
                    return S2 = C2.sent, C2.abrupt("return", map$6(a3 = S2.content.data).call(a3, function(t4) {
                      return completeMessage(T2.core, t4);
                    }));
                  case 14:
                  case "end":
                    return C2.stop();
                }
            }, _callee14, this);
          }));
        }, a2.getThreadMessageList = function getThreadMessageList(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee15() {
            var a3, u2, m2, h2, g2, M2 = this;
            return Ql.wrap(function _callee15$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    if (validate(bh, t3, "getThreadMessageList", true), t3.beginTime = t3.beginTime || 0, !(t3.endTime && t3.beginTime > t3.endTime)) {
                      I2.next = 4;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getThreadMessageList: beginTime cannot be greater than endTime" } });
                  case 4:
                    return I2.next = 6, this.core.sendCmd("v2GetThreadMessageList", { messageRefer: t3.messageRefer, tag: { beginTime: t3.beginTime, endTime: t3.endTime, limit: t3.limit, reverse: t3.direction === 1 ? 1 : 0, excludeMessageServerId: t3.excludeMessageServerId } });
                  case 6:
                    return a3 = I2.sent, u2 = a3.content, m2 = u2.message, h2 = u2.replyResult, g2 = u2.replyList, I2.abrupt("return", { message: completeMessage(this.core, m2), timestamp: h2.timestamp, replyCount: h2.total, replyList: map$6(g2).call(g2, function(t4) {
                      return completeMessage(M2.core, t4);
                    }) });
                  case 9:
                  case "end":
                    return I2.stop();
                }
            }, _callee15, this);
          }));
        }, V2NIMMessageExtendUtil;
      }(ip), Fg = { joinMode: { type: "enum", values: [1, 0, 2], required: false }, agreeMode: { type: "enum", values: [0, 1], required: false }, inviteMode: { type: "enum", values: [1, 0], required: false }, updateInfoMode: { type: "enum", values: [1, 0], required: false }, updateExtensionMode: { type: "enum", values: [1, 0], required: false }, chatBannedMode: { type: "enum", values: [0, 1], required: false } }, Gg = { type: "object", required: true, rules: Dt({ name: { type: "string", allowEmpty: false }, teamType: { type: "enum", values: [1, 2] }, memberLimit: { type: "number", min: 1, required: false } }, Fg) }, Hg = { type: "array", min: 1, itemType: "string" }, jg = { type: "boolean" }, $g = { type: "string" }, zg = { type: "string", allowEmpty: false }, Wg = { type: "object", rules: { antispamBusinessId: { type: "string", required: false } }, required: false }, Kg = { teamId: { type: "string", regExp: /^[1-9]\d*$/, allowEmpty: false } }, Yg = { teamIds: { type: "array", itemType: "string", regExp: /^[1-9]\d*$/, min: 1, allowEmpty: false } }, Qg = { teamType: { type: "enum", values: [1, 2] } }, Jg = { teamTypes: { type: "array", itemType: "enum", values: [1, 2], required: false } }, Xg = { updateTeamInfoParams: { type: "object", required: true, rules: Dt({ name: { type: "string", allowEmpty: false, required: false }, memberLimit: { type: "number", min: 1, required: false } }, Fg) } }, Zg = { type: "enum", values: [0, 2] }, ev = { memberInfoParams: { type: "object", rules: { teamNick: { type: "string", required: false }, serverExtension: { type: "string", required: false } } } }, tv = { chatBannedMode: { type: "enum", values: [0, 1] } }, rv = { queryOption: { type: "object", rules: { roleQueryType: { type: "enum", values: [0, 2, 1] }, onlyChatBanned: { type: "boolean", required: false }, direction: { type: "enum", values: [1, 0], required: false }, limit: { type: "number", min: 1, required: false }, nextToken: { type: "string", required: false } } } }, nv = { teamId: Kg.teamId, teamType: { type: "enum", values: [1, 2] }, operatorAccountId: { type: "string", allowEmpty: false } }, av = { actionType: { type: "enum", values: [2, 0, 1, 3] } }, iv = { actionType: { type: "enum", values: [2] } }, ov = { actionType: { type: "enum", values: [0] } }, sv = { types: { type: "array", itemType: "enum", values: [0, 2, 1, 3], required: false }, status: { type: "array", itemType: "enum", values: [1, 3, 0, 2], required: false }, offset: { type: "number", min: 0, required: false }, limit: { type: "number", min: 1, required: false } }, cv = { teamId: Kg.teamId, teamType: Qg.teamType, accountIds: Hg }, lv = function() {
        function V2NIMTeamModelImpl() {
          this.teamMap = new fc(), this.superTeamMap = new fc();
        }
        var t2 = V2NIMTeamModelImpl.prototype;
        return t2.set = function set(t3) {
          var a2 = this;
          forEach$1(t3).call(t3, function(t4) {
            a2.chooseMap(t4.teamType).set(t4.teamId, t4);
          });
        }, t2.reset = function reset() {
          this.teamMap.clear(), this.superTeamMap.clear();
        }, t2.count = function count(t3, a2) {
          a2 === void 0 && (a2 = true);
          var u2 = this.chooseMap(t3), count2 = 0;
          return forEach$1(u2).call(u2, function(t4) {
            a2 && t4.isValidTeam && count2++, a2 || count2++;
          }), count2;
        }, t2.chooseMap = function chooseMap(t3) {
          return t3 === 2 ? this.superTeamMap : t3 === 1 ? this.teamMap : new fc();
        }, t2.getById = function getById(t3, a2, u2) {
          u2 === void 0 && (u2 = true);
          var m2 = this.chooseMap(a2).get(t3);
          if (m2) {
            if (u2 && m2.isValidTeam)
              return m2;
            if (!u2)
              return m2;
          }
        }, t2.getAll = function getAll(t3, a2) {
          a2 === void 0 && (a2 = true);
          var u2 = this.chooseMap(t3), m2 = jl(values(u2).call(u2)), h2 = filter(m2).call(m2, function(t4) {
            return !(!a2 || !t4.isValidTeam) || (!a2 || void 0);
          });
          return sort(h2).call(h2, function(t4, a3) {
            return a3.updateTime - t4.updateTime;
          });
        }, t2.upsert = function upsert(t3) {
          var a2 = t3.teamId, u2 = t3.teamType, m2 = this.chooseMap(u2), h2 = m2.get(a2) || {}, g2 = Dt({}, h2, t3);
          return m2.set(a2, g2), g2;
        }, t2.deleteById = function deleteById(t3, a2) {
          var u2 = this.getById(t3, a2);
          if (u2)
            return u2.isValidTeam = false, u2;
        }, t2.searchTeamByKeyword = function searchTeamByKeyword(t3) {
          var a2, u2, m2 = [];
          return forEach$1(a2 = this.teamMap).call(a2, function(a3) {
            var u3;
            includes(u3 = a3.name).call(u3, t3) && m2.push(a3);
          }), forEach$1(u2 = this.superTeamMap).call(u2, function(a3) {
            var u3;
            includes(u3 = a3.name).call(u3, t3) && m2.push(a3);
          }), m2;
        }, V2NIMTeamModelImpl;
      }(), uv = function() {
        function V2NIMTeamMemberModelImpl() {
          this.teamMembers = [], this.superTeamMembers = [], this.maxSize = 2e3;
        }
        var t2 = V2NIMTeamMemberModelImpl.prototype;
        return t2.reset = function reset() {
          this.teamMembers = [], this.superTeamMembers = [];
        }, t2.setData = function setData(t3) {
          var a2 = this;
          forEach$1(t3).call(t3, function(t4) {
            a2.chooseList(t4.teamType).push(t4);
          });
        }, t2.chooseList = function chooseList(t3) {
          return t3 === 2 ? this.superTeamMembers : t3 === 1 ? this.teamMembers : [];
        }, t2.getById = function getById(t3, a2, u2) {
          var m2 = this.chooseList(a2);
          return find(m2).call(m2, function(a3) {
            return a3.teamId === t3 && a3.accountId === u2;
          });
        }, t2.upsert = function upsert(t3) {
          var a2 = t3.teamType, u2 = t3.teamId, m2 = this.chooseList(a2), h2 = findIndex$1(m2).call(m2, function(a3) {
            return a3.teamId === u2 && a3.accountId === t3.accountId;
          });
          h2 === -1 ? m2.push(t3) : m2[h2] = Dt(Dt({}, m2[h2]), t3), m2.length > this.maxSize && m2.shift();
        }, t2.deleteByAccount = function deleteByAccount(t3, a2, u2) {
          var m2 = this.chooseList(a2), h2 = findIndex$1(m2).call(m2, function(a3) {
            return a3.teamId === t3 && a3.accountId === u2;
          });
          if (h2 !== -1) {
            var g2 = m2[h2];
            return g2.inTeam = false, splice(m2).call(m2, h2, 1), g2;
          }
        }, t2.deleteByTeamId = function deleteByTeamId(t3, a2) {
          var u2 = this.chooseList(a2), m2 = filter(u2).call(u2, function(a3) {
            return a3.teamId !== t3;
          });
          a2 === 2 ? this.superTeamMembers = m2 : this.teamMembers = m2;
        }, V2NIMTeamMemberModelImpl;
      }(), dv = function() {
        function V2NIMTeamNotificationImpl(t3, a2) {
          this.core = t3, this.service = a2;
        }
        var t2 = V2NIMTeamNotificationImpl.prototype;
        return t2.processNotification = function processNotification(t3) {
          var a2 = this, u2 = t3.attachment, m2 = t3.senderId, h2 = t3.receiverId, g2 = u2.id, M2 = u2.data, I2 = g2 > 400 ? 2 : 1, S2 = formatTeamNotificationAttachData(M2, I2), T2 = S2.id, C2 = S2.ids, b2 = S2.tinfo, E2 = S2.mute, k2 = this.service.model.getById(h2, I2);
          switch (this.core.logger.log("v2Team::processNotification, notificationType:" + g2 + ", teamId:" + h2, M2), g2) {
            case dg.SUPER_TEAM_INVITATION:
            case dg.TEAM_INVITATION:
              includes(C2).call(C2, this.core.account) && this.onTeamJoined(b2), this.onTeamMembersJoined(b2, filter(C2).call(C2, function(t4) {
                return t4 !== a2.core.account;
              }));
              break;
            case dg.SUPER_TEAM_INVITE_ACCEPT:
            case dg.TEAM_INVITE_ACCEPT:
              m2 === this.core.account ? this.onTeamJoined(b2) : this.onTeamMemberJoined(b2, m2);
              break;
            case dg.SUPER_TEAM_APPLY_ACCEPT:
            case dg.TEAM_APPLY_ACCEPT:
              T2 === this.core.account ? this.onTeamJoined(b2) : this.onTeamMemberJoined(b2, T2);
              break;
            case dg.SUPER_TEAM_ADD_MANAGER:
            case dg.TEAM_ADD_MANAGER:
              this.updateTeamMemberRole(h2, I2, C2, { memberRole: 2 });
              break;
            case dg.SUPER_TEAM_REMOVE_MANAGER:
            case dg.TEAM_REMOVE_MANAGER:
              this.updateTeamMemberRole(h2, I2, C2, { memberRole: 0 });
              break;
            case dg.SUPER_TEAM_KICK:
            case dg.TEAM_KICK:
              this.onTeamInfoUpdated(b2), forEach$1(C2).call(C2, function(t4) {
                t4 === a2.core.account ? a2.onTeamLeft(h2, I2, true) : a2.onTeamMemberKicked(m2, b2.teamId, b2.teamType, t4);
              });
              break;
            case dg.SUPER_TEAM_LEAVE:
            case dg.TEAM_LEAVE:
              b2 ? this.onTeamInfoUpdated(b2) : k2 && m2 === this.core.account && (k2.isValidTeam = false, this.onTeamInfoUpdated(k2)), m2 === this.core.account ? this.onTeamLeft(h2, I2, false) : this.onTeamMemberLeft(h2, I2, m2);
              break;
            case dg.SUPER_TEAM_DISMISS:
            case dg.TEAM_DISMISS:
              this.onTeamDismissed(h2, I2);
              break;
            case dg.SUPER_TEAM_UPDATE:
            case dg.TEAM_UPDATED:
              this.onTeamInfoUpdated(b2);
              break;
            case dg.SUPER_TEAM_TRANSFER_OWNER:
            case dg.TEAM_TRANSFER_OWNER:
              this.onTeamInfoUpdated(b2), this.updateTeamMemberRole(h2, I2, [m2, b2.ownerAccountId], [{ memberRole: 0 }, { memberRole: 1 }]);
              break;
            case dg.SUPER_TEAM_MEMBER_MUTE:
            case dg.TEAM_MEMBER_MUTE:
              this.service.model.upsert(b2), this.updateTeamMemberRole(h2, I2, T2 ? [T2] : C2, { chatBanned: E2 !== 0 });
          }
        }, t2.onTeamJoined = function onTeamJoined(t3) {
          var a2 = this;
          this.service.model.upsert(t3), this.service.emit("onTeamJoined", t3), this.service.getTeamMemberListByIds(t3.teamId, t3.teamType, [this.core.account]).catch(function(t4) {
            a2.core.logger.error("Get Member error after onTeamJoined", t4);
          });
        }, t2.onTeamLeft = function onTeamLeft(t3, a2, u2) {
          var m2 = this.service.model.deleteById(t3, a2) || generateTeamByTeamId(t3, a2, { isValidTeam: false });
          this.service.memberModel.deleteByAccount(t3, a2, this.core.account), this.service.emit("onTeamLeft", m2, u2);
        }, t2.onTeamDismissed = function onTeamDismissed(t3, a2) {
          var u2 = this.service.model.deleteById(t3, a2);
          u2 || (u2 = generateTeamByTeamId(t3, a2, { isValidTeam: false })), this.service.memberModel.deleteByTeamId(t3, a2), this.service.emit("onTeamDismissed", u2);
        }, t2.onTeamInfoUpdated = function onTeamInfoUpdated(t3) {
          var a2 = this.service.model.upsert(t3);
          this.service.emit("onTeamInfoUpdated", a2);
        }, t2.onTeamMemberJoined = function onTeamMemberJoined(t3, a2) {
          this.service.model.upsert(t3), this.service.emit("onTeamInfoUpdated", t3);
          var u2 = t3.updateTime || t3.createTime, m2 = generateMemberByTeamId(t3.teamId, t3.teamType, a2, { joinTime: u2, updateTime: u2 });
          this.service.emit("onTeamMemberJoined", [m2]);
        }, t2.onTeamMembersJoined = function onTeamMembersJoined(t3, a2) {
          var u2 = t3.updateTime || t3.createTime, m2 = map$6(a2).call(a2, function(a3) {
            return generateMemberByTeamId(t3.teamId, t3.teamType, a3, { joinTime: u2, updateTime: u2 });
          });
          m2.length !== 0 && (this.service.model.upsert(t3), this.service.emit("onTeamInfoUpdated", t3), this.service.emit("onTeamMemberJoined", m2));
        }, t2.onTeamMemberLeft = function onTeamMemberLeft(t3, a2, u2) {
          var m2 = this.service.memberModel.deleteByAccount(t3, a2, u2);
          m2 || (m2 = generateMemberByTeamId(t3, a2, u2, { inTeam: false })), this.service.emit("onTeamMemberLeft", [m2]);
        }, t2.onTeamMemberKicked = function onTeamMemberKicked(t3, a2, u2, m2) {
          var h2 = this.service.memberModel.deleteByAccount(a2, u2, m2);
          h2 || (h2 = generateMemberByTeamId(a2, u2, m2, { inTeam: false })), this.service.emit("onTeamMemberKicked", t3, [h2]);
        }, t2.onTeamMemberInfoUpdated = function onTeamMemberInfoUpdated(t3) {
          var a2 = this;
          forEach$1(t3).call(t3, function(t4) {
            if (t4.accountId === a2.core.account && a2.core.V2NIMSettingService.name && a2.core.V2NIMConversationIdUtil.name) {
              var u2 = t4.teamType === 1 ? a2.core.V2NIMConversationIdUtil.teamConversationId(t4.teamId) : a2.core.V2NIMConversationIdUtil.superTeamConversationId(t4.teamId), m2 = a2.core.V2NIMSettingService.getConversationMuteStatus(u2);
              a2.core.eventBus.emit("V2NIMConversationService/setMute", u2, m2);
            }
          }), this.service.emit("onTeamMemberInfoUpdated", t3);
        }, t2.updateTeamMemberRole = function updateTeamMemberRole(t3, a2, u2, m2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var h2, g2, M2, I2, S2 = this;
            return Ql.wrap(function _callee$(T2) {
              for (; ; )
                switch (T2.prev = T2.next) {
                  case 0:
                    if (!((g2 = filter(u2).call(u2, function(u3, h3) {
                      var g3 = S2.service.memberModel.getById(t3, a2, u3);
                      return g3 && S2.service.memberModel.upsert(Dt(Dt({}, g3), Dn(m2) ? m2[h3] : m2)), !g3;
                    })).length > 0)) {
                      T2.next = 12;
                      break;
                    }
                    return T2.prev = 2, T2.next = 5, this.service.getTeamMemberListByIds(t3, a2, g2);
                  case 5:
                    M2 = T2.sent, forEach$1(M2).call(M2, function(t4) {
                      return S2.service.memberModel.upsert(t4);
                    }), T2.next = 12;
                    break;
                  case 9:
                    T2.prev = 9, T2.t0 = T2.catch(2), this.core.logger.warn("v2Team::processNotification, getTeamMemberListByIds failed", T2.t0);
                  case 12:
                    (I2 = filter(h2 = map$6(u2).call(u2, function(u3) {
                      return S2.service.memberModel.getById(t3, a2, u3);
                    })).call(h2, function(t4) {
                      return !!t4;
                    })).length > 0 && this.onTeamMemberInfoUpdated(I2);
                  case 14:
                  case "end":
                    return T2.stop();
                }
            }, _callee, this, [[2, 9]]);
          }));
        }, t2.processSysNotification = function processSysNotification(t3) {
          var a2 = t3.receiverId, u2 = t3.postscript, m2 = t3.senderId, h2 = t3.timestamp;
          t3.idServer;
          var g2 = { actionType: { 0: 0, 1: 1, 2: 2, 3: 3, 15: 0, 16: 1, 17: 2, 18: 3 }[t3.type], teamId: a2, teamType: t3.type >= 15 ? 2 : 1, operatorAccountId: m2, postscript: u2, timestamp: h2, actionStatus: 0 };
          this.core.logger.log("v2Team::processSysNotification, type:", t3.type, g2), this.service.notificationModel.create(g2), this.service.emit("onReceiveTeamJoinActionInfo", g2);
        }, t2.updateTeamActionStatus = function updateTeamActionStatus(t3, a2) {
          this.service.notificationModel.update({ teamId: t3.teamId, teamType: t3.teamType, operatorAccountId: t3.operatorAccountId, actionType: t3.actionType, actionStatus: a2 });
        }, t2.checkIfExpired = function checkIfExpired(t3) {
          return !!t3 && (t3 === 509 || !(t3 >= 500 && t3 <= 599) && !(t3 >= 19e4));
        }, V2NIMTeamNotificationImpl;
      }();
      !function(t2) {
        t2[t2.TEAM_INVITATION = 0] = "TEAM_INVITATION", t2[t2.TEAM_KICK = 1] = "TEAM_KICK", t2[t2.TEAM_LEAVE = 2] = "TEAM_LEAVE", t2[t2.TEAM_UPDATED = 3] = "TEAM_UPDATED", t2[t2.TEAM_DISMISS = 4] = "TEAM_DISMISS", t2[t2.TEAM_APPLY_ACCEPT = 5] = "TEAM_APPLY_ACCEPT", t2[t2.TEAM_TRANSFER_OWNER = 6] = "TEAM_TRANSFER_OWNER", t2[t2.TEAM_ADD_MANAGER = 7] = "TEAM_ADD_MANAGER", t2[t2.TEAM_REMOVE_MANAGER = 8] = "TEAM_REMOVE_MANAGER", t2[t2.TEAM_INVITE_ACCEPT = 9] = "TEAM_INVITE_ACCEPT", t2[t2.TEAM_MEMBER_MUTE = 10] = "TEAM_MEMBER_MUTE", t2[t2.SUPER_TEAM_INVITATION = 401] = "SUPER_TEAM_INVITATION", t2[t2.SUPER_TEAM_KICK = 402] = "SUPER_TEAM_KICK", t2[t2.SUPER_TEAM_LEAVE = 403] = "SUPER_TEAM_LEAVE", t2[t2.SUPER_TEAM_UPDATE = 404] = "SUPER_TEAM_UPDATE", t2[t2.SUPER_TEAM_DISMISS = 405] = "SUPER_TEAM_DISMISS", t2[t2.SUPER_TEAM_TRANSFER_OWNER = 406] = "SUPER_TEAM_TRANSFER_OWNER", t2[t2.SUPER_TEAM_ADD_MANAGER = 407] = "SUPER_TEAM_ADD_MANAGER", t2[t2.SUPER_TEAM_REMOVE_MANAGER = 408] = "SUPER_TEAM_REMOVE_MANAGER", t2[t2.SUPER_TEAM_MEMBER_MUTE = 409] = "SUPER_TEAM_MEMBER_MUTE", t2[t2.SUPER_TEAM_APPLY_ACCEPT = 410] = "SUPER_TEAM_APPLY_ACCEPT", t2[t2.SUPER_TEAM_INVITE_ACCEPT = 411] = "SUPER_TEAM_INVITE_ACCEPT";
      }(dg || (dg = {}));
      var pv = function() {
        function V2NIMTeamNotificationModelImpl() {
          this.list = [], this.maxCount = 1e3;
        }
        var t2 = V2NIMTeamNotificationModelImpl.prototype;
        return t2.reset = function reset() {
          this.list = [];
        }, t2.create = function create(t3) {
          this.list.push(t3), this.list.length > this.maxCount && this.list.shift();
        }, t2.update = function update(t3) {
          var a2;
          forEach$1(a2 = this.list).call(a2, function(a3) {
            a3.teamId === t3.teamId && a3.teamType === t3.teamType && a3.actionType === t3.actionType && a3.operatorAccountId === t3.operatorAccountId && a3.actionStatus === 0 && Dt(a3, t3);
          });
        }, t2.delete = function _delete(t3) {
          var a2, u2;
          this.list = filter(a2 = map$6(u2 = this.list).call(u2, function(a3) {
            if (a3.teamId !== t3.teamId || a3.teamType !== t3.teamType || a3.operatorAccountId !== t3.operatorAccountId || a3.actionType !== t3.actionType || a3.timestamp !== t3.timestamp)
              return a3;
          })).call(a2, function(t4) {
            return t4;
          });
        }, t2.getByOption = function getByOption(t3) {
          var a2, u2 = t3.types, m2 = t3.status, h2 = t3.offset, g2 = h2 === void 0 ? 0 : h2, M2 = t3.limit, I2 = M2 === void 0 ? 50 : M2, S2 = [];
          forEach$1(a2 = this.list).call(a2, function(t4) {
            u2 && u2.length > 0 && !includes(u2).call(u2, t4.actionType) || m2 && m2.length > 0 && !includes(m2).call(m2, t4.actionStatus) || S2.push(t4);
          }), S2 = sort(S2).call(S2, function(t4, a3) {
            return a3.timestamp - t4.timestamp;
          });
          var T2 = 0;
          g2 > 0 && (T2 = findIndexWithinTargetValue(S2, "timestamp", g2), S2[T2] && S2[T2].timestamp === g2 && (T2 += 1));
          var C2 = slice(S2).call(S2, T2).length;
          return (S2 = slice(S2).call(S2, T2, T2 + I2)).length > 0 ? { offset: C2 > I2 ? S2[S2.length - 1].timestamp : 0, finished: !(C2 > I2), infos: S2 } : { offset: 0, finished: true, infos: S2 };
        }, V2NIMTeamNotificationModelImpl;
      }(), mv = function(t2) {
        function V2NIMTeamServiceImpl(a3) {
          var u2;
          return (u2 = t2.call(this, "V2NIMTeamService", a3) || this).core._registerDep(om, "V2NIMConversationIdUtil"), u2.notification = new dv(a3, Qe(u2)), u2.model = new lv(), u2.memberModel = new uv(), u2.notificationModel = new pv(), u2.core.options.apiVersion !== "v2" ? Qe(u2) : (registerParser({ cmdMap: sm, cmdConfig: hm }), u2.setListener(), u2);
        }
        Nt(V2NIMTeamServiceImpl, t2);
        var a2 = V2NIMTeamServiceImpl.prototype;
        return a2.setListener = function setListener() {
          var t3, a3, u2, m2 = this;
          this.core.eventBus.on("forwardReceive/V2NIMTeamService/created", function(t4) {
            m2.model.upsert(t4);
            var a4 = generateMemberByTeamId(t4.teamId, t4.teamType, m2.core.account, { memberRole: 1 });
            m2.memberModel.upsert(a4), m2.emit("onTeamCreated", t4);
          }), this.core.eventBus.on("forwardReceive/V2NIMTeamService/updateSelfTeamMemberInfo", function(t4) {
            m2.memberModel.upsert(t4), m2.emit("onTeamInfoUpdated", [t4]);
          }), this.core.eventBus.on("forwardReceive/V2NIMTeamService/updateTeamActionStatus", bind$1(t3 = this.notification.updateTeamActionStatus).call(t3, this.notification)), this.core.eventBus.on("V2NIMTeamService/sysNotification", bind$1(a3 = this.notification.processSysNotification).call(a3, this.notification)), this.core.eventBus.on("V2NIMTeamService/notification", bind$1(u2 = this.notification.processNotification).call(u2, this.notification)), this.core.eventBus.on("V2NIMTeamService/onSyncStarted", function() {
            m2.emit("onSyncStarted");
          }), this.core.eventBus.on("V2NIMTeamService/onSyncFinished", function() {
            m2.emit("onSyncFinished");
          }), this.core.eventBus.on("V2NIMTeamService/onSyncFailed", function(t4) {
            m2.emit("onSyncFailed", t4);
          });
        }, a2.reset = function reset() {
          this.model.reset(), this.memberModel.reset(), this.notificationModel.reset();
        }, a2.emit = function emit(a3) {
          for (var u2, m2, h2 = this.name + "::emit " + a3.toString(), g2 = arguments.length, M2 = new Array(g2 > 1 ? g2 - 1 : 0), I2 = 1; I2 < g2; I2++)
            M2[I2 - 1] = arguments[I2];
          if (a3 === "onTeamCreated" || a3 === "onTeamDismissed" || a3 === "onTeamJoined" || a3 === "onTeamLeft" || a3 === "onTeamInfoUpdated") {
            var S2 = M2[0];
            this.logger.log("" + h2, "team:" + S2.teamId + "_" + S2.teamType + ";updateTime:" + S2.updateTime);
          } else if (a3 === "onTeamMemberJoined" || a3 === "onTeamMemberLeft" || a3 === "onTeamMemberInfoUpdated") {
            var T2 = M2[0];
            this.logger.log("" + h2, map$6(T2).call(T2, function(t3) {
              return "team:" + t3.teamId + "_" + t3.teamType + ";account:" + t3.accountId;
            }));
          } else if (a3 === "onTeamMemberKicked") {
            var C2 = M2[0], b2 = M2[1];
            this.logger.log("" + h2, "operator" + C2, map$6(b2).call(b2, function(t3) {
              return "team:" + t3.teamId + "_" + t3.teamType + ";account:" + t3.accountId;
            }));
          } else {
            var E2, k2;
            (E2 = this.logger).log.apply(E2, concat(k2 = ["" + h2]).call(k2, M2));
          }
          return (u2 = t2.prototype.emit).call.apply(u2, concat(m2 = [this, a3]).call(m2, M2));
        }, a2.createTeam = function createTeam(t3, a3, u2, m2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var h2, g2, M2, I2 = this;
            return Ql.wrap(function _callee$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    return this.checkV2(), validate({ createTeamParams: Gg }, { createTeamParams: t3 }, "", true), validate({ inviteeAccountIds: Dt(Dt({}, Hg), { min: 0, required: false }) }, { inviteeAccountIds: a3 }, "", true), validate({ antispamConfig: Wg }, { antispamConfig: m2 }, "", true), h2 = t3.teamType === 2 ? "v2SuperTeamCreate" : "v2TeamCreate", S2.next = 7, this.core.sendCmd(h2, { team: t3, inviteeAccountIds: a3 || [], postscript: u2 || "", antispamConfig: m2 });
                  case 7:
                    return g2 = S2.sent, M2 = g2.content.team, this.model.upsert(M2), this.getTeamMemberListByIds(M2.teamId, M2.teamType, [this.core.account]).catch(function(t4) {
                      I2.core.logger.error("Get Member error after createTeam", t4);
                    }), this.emit("onTeamCreated", M2), S2.abrupt("return", { team: M2, failedList: g2.content.failedList });
                  case 13:
                  case "end":
                    return S2.stop();
                }
            }, _callee, this);
          }));
        }, a2.updateTeamInfo = function updateTeamInfo(t3, a3, u2, m2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var h2, g2;
            return Ql.wrap(function _callee2$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), validate(Xg, { updateTeamInfoParams: u2 }, "", true), validate({ antispamConfig: Wg }, { antispamConfig: m2 }, "", true), h2 = Dt({ teamId: t3, teamType: a3 }, u2), g2 = a3 === 2 ? "v2SuperTeamUpdateInfo" : "v2TeamUpdateInfo", M2.next = 9, this.core.sendCmd(g2, { team: h2, antispamConfig: m2 });
                  case 9:
                    this.model.upsert(h2);
                  case 10:
                  case "end":
                    return M2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.leaveTeam = function leaveTeam(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var u2;
            return Ql.wrap(function _callee3$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), u2 = a3 === 2 ? "v2SuperTeamLeave" : "v2TeamLeave", m2.next = 6, this.core.sendCmd(u2, { teamId: t3 });
                  case 6:
                    this.model.deleteById(t3, a3);
                  case 7:
                  case "end":
                    return m2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.getTeamInfo = function getTeamInfo(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var u2, m2, h2, g2;
            return Ql.wrap(function _callee4$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    if (this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), u2 = a3 === 2 ? "v2SuperTeamGetInfo" : "v2TeamGetInfo", !(m2 = this.model.getById(t3, a3, false))) {
                      M2.next = 7;
                      break;
                    }
                    return M2.abrupt("return", m2);
                  case 7:
                    return M2.next = 9, this.core.sendCmd(u2, { teamId: t3 });
                  case 9:
                    return h2 = M2.sent, g2 = h2.content.team, this.model.upsert(g2), M2.abrupt("return", g2);
                  case 13:
                  case "end":
                    return M2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.getJoinedTeamList = function getJoinedTeamList(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var a3, u2 = this;
            return Ql.wrap(function _callee5$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this.checkV2(), validate(Jg, { teamTypes: t3 }, "", true), this.core.V2NIMLoginService.checkIllegalState(), t3 && t3.length !== 0 || (t3 = [1, 2]), a3 = [], forEach$1(t3).call(t3, function(t4) {
                      a3 = concat(a3).call(a3, u2.model.getAll(t4));
                    }), m2.abrupt("return", sort(a3).call(a3, function(t4, a4) {
                      return t4.createTime - a4.createTime;
                    }));
                  case 7:
                  case "end":
                    return m2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.getJoinedTeamCount = function getJoinedTeamCount(t3) {
          var a3 = this;
          this.checkV2(), validate(Jg, { teamTypes: t3 }, "", true), this.core.V2NIMLoginService.checkIllegalState(), t3 && t3.length !== 0 || (t3 = [1, 2]);
          var u2 = 0;
          return forEach$1(t3).call(t3, function(t4) {
            u2 += a3.model.count(t4);
          }), u2;
        }, a2.getTeamInfoByIds = function getTeamInfoByIds(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var u2, m2, h2, g2, M2, I2, S2 = this;
            return Ql.wrap(function _callee6$(T2) {
              for (; ; )
                switch (T2.prev = T2.next) {
                  case 0:
                    if (this.checkV2(), validate(Yg, { teamIds: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), m2 = a3 === 2 ? "v2SuperTeamGetByIds" : "v2TeamGetByIds", h2 = map$6(t3).call(t3, function(t4) {
                      return S2.model.getById(t4, a3, false);
                    }), (g2 = filter(t3).call(t3, function(t4, a4) {
                      return !h2[a4];
                    })).length !== 0) {
                      T2.next = 8;
                      break;
                    }
                    return T2.abrupt("return", h2);
                  case 8:
                    return T2.next = 10, this.core.sendCmd(m2, { teamIds: g2 });
                  case 10:
                    return M2 = T2.sent, I2 = M2.content.teams, T2.abrupt("return", filter(u2 = map$6(h2).call(h2, function(a4, u3) {
                      if (a4)
                        return a4;
                      var m3 = t3[u3], h3 = find(I2).call(I2, function(t4) {
                        return t4.teamId === m3;
                      });
                      return h3 && S2.model.upsert(h3), h3;
                    })).call(u2, function(t4) {
                      return !!t4;
                    }));
                  case 13:
                  case "end":
                    return T2.stop();
                }
            }, _callee6, this);
          }));
        }, a2.dismissTeam = function dismissTeam(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            var u2;
            return Ql.wrap(function _callee7$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), u2 = a3 === 2 ? "v2SuperTeamDismiss" : "v2TeamDismiss", m2.next = 6, this.core.sendCmd(u2, { teamId: t3 });
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee7, this);
          }));
        }, a2.inviteMember = function inviteMember(t3, a3, u2, m2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var h2, g2;
            return Ql.wrap(function _callee8$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), validate({ inviteeAccountIds: Hg }, { inviteeAccountIds: u2 }, "", true), validate({ postscript: Dt(Dt({}, $g), { required: false }) }, { postscript: m2 }, "", true), h2 = a3 === 2 ? "v2SuperTeamInviteMembers" : "v2TeamInviteMembers", M2.next = 8, this.core.sendCmd(h2, { teamId: t3, accounts: u2, ps: m2 || "" });
                  case 8:
                    return g2 = M2.sent, M2.abrupt("return", g2.content.abortedAccidList);
                  case 10:
                  case "end":
                    return M2.stop();
                }
            }, _callee8, this);
          }));
        }, a2.acceptInvitation = function acceptInvitation(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            var a3, u2, m2, h2, g2, M2;
            return Ql.wrap(function _callee9$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    return this.checkV2(), validate(nv, t3, "invitationInfo", true), validate(iv, t3, "invitationInfo", true), a3 = t3.teamType, u2 = t3.teamId, m2 = t3.operatorAccountId, h2 = a3 === 2 ? "v2SuperTeamAcceptInvitation" : "v2TeamAcceptInvitation", I2.prev = 5, I2.next = 8, this.core.sendCmd(h2, { teamId: u2, from: m2 });
                  case 8:
                    return g2 = I2.sent, this.notification.updateTeamActionStatus(t3, 1), I2.abrupt("return", g2.content.team);
                  case 13:
                    throw I2.prev = 13, I2.t0 = I2.catch(5), M2 = I2.t0, this.notification.checkIfExpired(M2.code) && this.notification.updateTeamActionStatus(t3, 3), I2.t0;
                  case 18:
                  case "end":
                    return I2.stop();
                }
            }, _callee9, this, [[5, 13]]);
          }));
        }, a2.rejectInvitation = function rejectInvitation(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            var u2, m2, h2, g2, M2;
            return Ql.wrap(function _callee10$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    return this.checkV2(), validate(nv, t3, "invitationInfo", true), validate(iv, t3, "invitationInfo", true), validate({ postscript: Dt(Dt({}, $g), { required: false }) }, { postscript: a3 }, "", true), u2 = t3.teamType, m2 = t3.teamId, h2 = t3.operatorAccountId, g2 = u2 === 2 ? "v2SuperTeamRejectInvite" : "v2TeamRejectInvite", I2.prev = 6, I2.next = 9, this.core.sendCmd(g2, { teamId: m2, from: h2, ps: a3 || "" });
                  case 9:
                    this.notification.updateTeamActionStatus(t3, 2), I2.next = 17;
                    break;
                  case 12:
                    throw I2.prev = 12, I2.t0 = I2.catch(6), M2 = I2.t0, this.notification.checkIfExpired(M2.code) && this.notification.updateTeamActionStatus(t3, 3), I2.t0;
                  case 17:
                  case "end":
                    return I2.stop();
                }
            }, _callee10, this, [[6, 12]]);
          }));
        }, a2.kickMember = function kickMember(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            var m2;
            return Ql.wrap(function _callee11$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), validate({ memberAccountIds: Hg }, { memberAccountIds: u2 }, "", true), m2 = a3 === 2 ? "v2SuperTeamKickMembers" : "v2TeamKickMembers", h2.next = 7, this.core.sendCmd(m2, { teamId: t3, accounts: u2 });
                  case 7:
                  case "end":
                    return h2.stop();
                }
            }, _callee11, this);
          }));
        }, a2.applyJoinTeam = function applyJoinTeam(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            var m2, h2, g2, M2;
            return Ql.wrap(function _callee12$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    return this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), m2 = a3 === 2 ? "v2SuperTeamApplyToJoin" : "v2TeamApplyToJoin", I2.next = 6, this.core.sendCmd(m2, { teamId: t3, ps: u2 || "" });
                  case 6:
                    return h2 = I2.sent, g2 = h2.content.team, M2 = h2.content.isInTeam, g2.isValidTeam = !!g2.isValidTeam && !!M2, I2.abrupt("return", g2);
                  case 11:
                  case "end":
                    return I2.stop();
                }
            }, _callee12, this);
          }));
        }, a2.acceptJoinApplication = function acceptJoinApplication(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            var a3, u2, m2, h2, g2;
            return Ql.wrap(function _callee13$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return this.checkV2(), validate(nv, t3, "applicationInfo", true), validate(ov, t3, "applicationInfo", true), a3 = t3.teamType, u2 = t3.teamId, m2 = t3.operatorAccountId, h2 = a3 === 2 ? "v2SuperTeamAcceptJoinApplication" : "v2TeamAcceptJoinApplication", M2.prev = 5, M2.next = 8, this.core.sendCmd(h2, { teamId: u2, from: m2 });
                  case 8:
                    this.notification.updateTeamActionStatus(t3, 1), M2.next = 16;
                    break;
                  case 11:
                    throw M2.prev = 11, M2.t0 = M2.catch(5), g2 = M2.t0, this.notification.checkIfExpired(g2.code) && this.notification.updateTeamActionStatus(t3, 3), M2.t0;
                  case 16:
                  case "end":
                    return M2.stop();
                }
            }, _callee13, this, [[5, 11]]);
          }));
        }, a2.rejectJoinApplication = function rejectJoinApplication(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee14() {
            var u2, m2, h2, g2, M2;
            return Ql.wrap(function _callee14$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    return this.checkV2(), validate(nv, t3, "applicationInfo", true), validate(ov, t3, "applicationInfo", true), validate({ postscript: Dt(Dt({}, $g), { required: false }) }, { postscript: a3 }, "", true), u2 = t3.teamType, m2 = t3.teamId, h2 = t3.operatorAccountId, g2 = u2 === 2 ? "v2SuperTeamRejectJoinApplication" : "v2TeamRejectJoinApplication", I2.prev = 6, I2.next = 9, this.core.sendCmd(g2, { teamId: m2, from: h2, ps: a3 || "" });
                  case 9:
                    this.notification.updateTeamActionStatus(t3, 2), I2.next = 17;
                    break;
                  case 12:
                    throw I2.prev = 12, I2.t0 = I2.catch(6), M2 = I2.t0, this.notification.checkIfExpired(M2.code) && this.notification.updateTeamActionStatus(t3, 3), I2.t0;
                  case 17:
                  case "end":
                    return I2.stop();
                }
            }, _callee14, this, [[6, 12]]);
          }));
        }, a2.updateTeamMemberRole = function updateTeamMemberRole(t3, a3, u2, m2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee15() {
            var h2;
            return Ql.wrap(function _callee15$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), validate({ memberAccountIds: Hg }, { memberAccountIds: u2 }, "", true), validate({ memberRole: Zg }, { memberRole: m2 }, "", true), h2 = m2 === 2 ? "AddManagers" : "RemoveManagers", h2 = a3 === 2 ? "v2SuperTeam" + h2 : "v2Team" + h2, g2.next = 9, this.core.sendCmd(h2, { teamId: t3, accounts: uniq(u2) });
                  case 9:
                  case "end":
                    return g2.stop();
                }
            }, _callee15, this);
          }));
        }, a2.transferTeamOwner = function transferTeamOwner(t3, a3, u2, m2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee16() {
            var h2;
            return Ql.wrap(function _callee16$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), validate({ accountId: zg }, { accountId: u2 }, "", true), validate({ leave: { type: "boolean", required: false } }, { leave: m2 }, "", true), h2 = a3 === 2 ? "v2SuperTeamTransferOwner" : "v2TeamTransferOwner", g2.next = 8, this.core.sendCmd(h2, { teamId: t3, account: u2, leave: m2 || false });
                  case 8:
                  case "end":
                    return g2.stop();
                }
            }, _callee16, this);
          }));
        }, a2.updateSelfTeamMemberInfo = function updateSelfTeamMemberInfo(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee17() {
            var m2, h2, g2, M2, I2;
            return Ql.wrap(function _callee17$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    if (this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), validate(ev, { memberInfoParams: u2 }, "", true), u2.teamNick !== void 0 || u2.serverExtension !== void 0) {
                      S2.next = 6;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER });
                  case 6:
                    return m2 = a3 === 2 ? "v2SuperTeamUpdateSelfMemberInfo" : "v2TeamUpdateSelfMemberInfo", h2 = Dt(Dt({}, u2), { teamId: t3, accountId: this.core.account }), S2.next = 10, this.core.sendCmd(m2, { teamMember: h2 });
                  case 10:
                    return S2.next = 12, this.notification.updateTeamMemberRole(t3, a3, [this.core.account], h2);
                  case 12:
                    g2 = this.memberModel.getById(t3, a3, this.core.account), this.core.V2NIMSettingService.name && this.core.V2NIMConversationIdUtil.name && (M2 = a3 === 1 ? this.core.V2NIMConversationIdUtil.teamConversationId(t3) : this.core.V2NIMConversationIdUtil.superTeamConversationId(t3), I2 = this.core.V2NIMSettingService.getConversationMuteStatus(M2), this.core.eventBus.emit("V2NIMConversationService/setMute", M2, I2)), this.core.eventBus.emit("forwardSend/V2NIMTeamService/updateSelfTeamMemberInfo", g2);
                  case 15:
                  case "end":
                    return S2.stop();
                }
            }, _callee17, this);
          }));
        }, a2.updateTeamMemberNick = function updateTeamMemberNick(t3, a3, u2, m2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee18() {
            var h2;
            return Ql.wrap(function _callee18$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    if (this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), validate({ accountId: zg }, { accountId: u2 }, "", true), validate({ nick: $g }, { nick: m2 }, "", true), u2 !== this.core.account) {
                      g2.next = 7;
                      break;
                    }
                    return g2.abrupt("return", this.updateSelfTeamMemberInfo(t3, a3, { teamNick: m2 }));
                  case 7:
                    return h2 = a3 === 2 ? "v2SuperTeamUpdateMember" : "v2TeamUpdateMember", g2.next = 10, this.core.sendCmd(h2, { teamMember: { teamNick: m2, teamId: t3, accountId: u2 } });
                  case 10:
                  case "end":
                    return g2.stop();
                }
            }, _callee18, this);
          }));
        }, a2.setTeamChatBannedMode = function setTeamChatBannedMode(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee19() {
            var m2;
            return Ql.wrap(function _callee19$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), validate(tv, { chatBannedMode: u2 }, "", true), m2 = a3 === 2 ? "v2SuperTeamSetChatBannedMode" : "v2TeamSetChatBannedMode", h2.next = 7, this.core.sendCmd(m2, { teamId: t3, chatBannedMode: u2 });
                  case 7:
                    this.model.upsert({ teamId: t3, teamType: a3, chatBannedMode: u2 });
                  case 8:
                  case "end":
                    return h2.stop();
                }
            }, _callee19, this);
          }));
        }, a2.setTeamMemberChatBannedStatus = function setTeamMemberChatBannedStatus(t3, a3, u2, m2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee20() {
            var h2;
            return Ql.wrap(function _callee20$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), validate({ accountId: zg }, { accountId: u2 }, "", true), validate({ chatBanned: jg }, { chatBanned: m2 }, "", true), h2 = a3 === 2 ? "v2SuperTeamMemberSetChatBannedStatus" : "v2TeamMemberSetChatBannedStatus", g2.next = 8, this.core.sendCmd(h2, { teamId: t3, accountId: a3 === 2 ? [u2] : u2, chatBanned: m2 ? 1 : 0 });
                  case 8:
                  case "end":
                    return g2.stop();
                }
            }, _callee20, this);
          }));
        }, a2.getTeamMemberList = function getTeamMemberList(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee21() {
            var m2, h2, g2, M2;
            return Ql.wrap(function _callee21$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    return this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), validate(rv, { queryOption: u2 }, "", true), m2 = (m2 = u2.direction === void 0 ? 0 : u2.direction) === 0 ? 1 : 0, I2.next = 8, this.core.sendCmd("v2TeamMemberGetList", { tag: Dt(Dt({ teamId: t3, teamType: a3, onlyChatBanned: false, nextToken: "", limit: 100 }, u2), { direction: m2 }) });
                  case 8:
                    return h2 = I2.sent, g2 = h2.content.datas, M2 = get(h2, "raw.r.0"), a3 === 2 && M2 && map$6(M2) && (g2 = map$6(M2).call(M2, function(t4) {
                      return deserialize(t4, invertSerializeItem(pm));
                    })), I2.abrupt("return", { nextToken: h2.content.pageInfo.nextToken || "", finished: !+h2.content.pageInfo.hasMore, memberList: processTeamMembers(g2, a3) });
                  case 13:
                  case "end":
                    return I2.stop();
                }
            }, _callee21, this);
          }));
        }, a2.getTeamMemberListByIds = function getTeamMemberListByIds(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee22() {
            var m2, h2, g2, M2, I2, S2, T2 = this;
            return Ql.wrap(function _callee22$(C2) {
              for (; ; )
                switch (C2.prev = C2.next) {
                  case 0:
                    this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), validate({ accountIds: Hg }, { accountIds: u2 }, "", true), m2 = a3 === 2 ? "v2SuperTeamMemberGetListByIds" : "v2TeamMemberGetListByIds", h2 = map$6(u2).call(u2, function(a4) {
                      return t3 + "|" + a4;
                    }), g2 = [], M2 = 0;
                  case 8:
                    if (!(M2 < h2.length)) {
                      C2.next = 18;
                      break;
                    }
                    return C2.next = 11, this.core.sendCmd(m2, { tag: slice(h2).call(h2, M2, M2 + 20) });
                  case 11:
                    I2 = C2.sent, S2 = processTeamMembers(I2.content.datas, a3), g2 = concat(g2).call(g2, S2), forEach$1(S2).call(S2, function(t4) {
                      return T2.memberModel.upsert(t4);
                    });
                  case 15:
                    M2 += 20, C2.next = 8;
                    break;
                  case 18:
                    return C2.abrupt("return", g2);
                  case 19:
                  case "end":
                    return C2.stop();
                }
            }, _callee22, this);
          }));
        }, a2.getTeamMemberInvitor = function getTeamMemberInvitor(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee23() {
            var m2, h2;
            return Ql.wrap(function _callee23$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), validate({ accountIds: Hg }, { accountIds: u2 }, "", true), m2 = a3 === 2 ? "v2SuperTeamGetMemberInvitor" : "v2TeamGetMemberInvitor", g2.next = 7, this.core.sendCmd(m2, { teamId: t3, accounts: u2 });
                  case 7:
                    return h2 = g2.sent, g2.abrupt("return", h2.content.accountsMap);
                  case 9:
                  case "end":
                    return g2.stop();
                }
            }, _callee23, this);
          }));
        }, a2.searchTeamByKeyword = function searchTeamByKeyword(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee24() {
            return Ql.wrap(function _callee24$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this.checkV2(), this.checkLogin(), validate({ keyword: zg }, { keyword: t3 }, "", true), a3.abrupt("return", this.model.searchTeamByKeyword(t3));
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee24, this);
          }));
        }, a2.addTeamMembersFollow = function addTeamMembersFollow(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee25() {
            var m2, h2, g2, M2, I2;
            return Ql.wrap(function _callee25$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    return this.checkV2(), validate(cv, { teamId: t3, teamType: a3, accountIds: u2 }, "", true), m2 = a3 === 2 ? "v2SuperTeamUpdateSelfMemberInfo" : "v2TeamUpdateSelfMemberInfo", S2.next = 5, this.getTeamMemberListByIds(t3, a3, [this.core.account]);
                  case 5:
                    return h2 = S2.sent, g2 = h2[0], S2.next = 9, this.core.sendCmd(m2, { teamMember: { teamId: t3 }, specialFollowUpdate: { accountIds: u2, operation: 1 } });
                  case 9:
                    M2 = S2.sent, I2 = M2.content.data, Ht(I2).length > 0 && (Dt(g2, I2), this.emit("onTeamMemberInfoUpdated", [g2]), this.memberModel.upsert(g2));
                  case 12:
                  case "end":
                    return S2.stop();
                }
            }, _callee25, this);
          }));
        }, a2.removeTeamMembersFollow = function removeTeamMembersFollow(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee26() {
            var m2, h2, g2, M2, I2;
            return Ql.wrap(function _callee26$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    return this.checkV2(), validate(cv, { teamId: t3, teamType: a3, accountIds: u2 }, "", true), S2.next = 4, this.getTeamMemberListByIds(t3, a3, [this.core.account]);
                  case 4:
                    return m2 = S2.sent, h2 = m2[0], g2 = a3 === 2 ? "v2SuperTeamUpdateSelfMemberInfo" : "v2TeamUpdateSelfMemberInfo", S2.next = 9, this.core.sendCmd(g2, { teamMember: { teamId: t3 }, specialFollowUpdate: { accountIds: u2, operation: 0 } });
                  case 9:
                    M2 = S2.sent, I2 = M2.content.data, Ht(I2).length > 0 && (Dt(h2, I2), this.emit("onTeamMemberInfoUpdated", [h2]), this.memberModel.upsert(h2));
                  case 12:
                  case "end":
                    return S2.stop();
                }
            }, _callee26, this);
          }));
        }, a2.getTeamJoinActionInfoList = function getTeamJoinActionInfoList(t3) {
          return this.checkV2(), validate(sv, t3, "option", true), this.core.V2NIMLoginService.checkIllegalState(), zi.resolve(this.notificationModel.getByOption(t3));
        }, a2.clearAllTeamJoinActionInfo = function clearAllTeamJoinActionInfo() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee27() {
            return Ql.wrap(function _callee27$(t3) {
              for (; ; )
                switch (t3.prev = t3.next) {
                  case 0:
                    this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), this.notificationModel.reset();
                  case 3:
                  case "end":
                    return t3.stop();
                }
            }, _callee27, this);
          }));
        }, a2.deleteTeamJoinActionInfo = function deleteTeamJoinActionInfo(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee28() {
            return Ql.wrap(function _callee28$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), validate(nv, t3, "", true), validate(av, t3, "", true), validate({ timestamp: { type: "number", min: 1 } }, t3, "", true), this.notificationModel.delete(t3);
                  case 6:
                  case "end":
                    return a3.stop();
                }
            }, _callee28, this);
          }));
        }, a2.v2TeamSyncHandler = function v2TeamSyncHandler(t3) {
          this.model.set(t3.content.datas);
        }, a2.v2SuperTeamSyncHandler = function v2SuperTeamSyncHandler(t3) {
          this.model.set(t3.content.datas);
        }, a2.v2TeamCreateMultiSyncHandler = function v2TeamCreateMultiSyncHandler(t3) {
          var a3 = t3.content.data;
          this.model.upsert(a3);
          var u2 = generateMemberByTeamId(a3.teamId, a3.teamType, this.core.account, { memberRole: 1 });
          this.memberModel.upsert(u2), this.emit("onTeamCreated", a3);
        }, a2.v2SuperTeamCreateMultiSyncHandler = function v2SuperTeamCreateMultiSyncHandler(t3) {
          var a3 = t3.content.data;
          this.model.upsert(a3);
          var u2 = generateMemberByTeamId(a3.teamId, a3.teamType, this.core.account, { memberRole: 1 });
          this.memberModel.upsert(u2), this.emit("onTeamCreated", a3);
        }, a2.v2TeamMemberUpdateMultiSyncHandler = function v2TeamMemberUpdateMultiSyncHandler(t3) {
          var a3 = t3.content.data;
          a3.teamType = 1;
          var u2 = this.memberModel.getById(a3.teamId, a3.teamType, a3.accountId);
          this.notification.updateTeamMemberRole(a3.teamId, a3.teamType, [a3.accountId], a3), a3.accountId === this.core.account && u2 && u2.bits !== a3.bits && this.core.eventBus.emit("V2NIMSettingService/updateBits", a3.teamId, a3.teamType, a3.bits);
        }, a2.v2SuperTeamMemberUpdateMultiSyncHandler = function v2SuperTeamMemberUpdateMultiSyncHandler(t3) {
          var a3 = t3.content.data;
          a3.teamType = 2;
          var u2 = this.memberModel.getById(a3.teamId, a3.teamType, a3.accountId);
          this.notification.updateTeamMemberRole(a3.teamId, a3.teamType, [a3.accountId], a3), a3.accountId === this.core.account && u2 && u2.bits !== a3.bits && this.core.eventBus.emit("V2NIMSettingService/updateBits", a3.teamId, a3.teamType, a3.bits);
        }, a2.v2TeamMembersOfSelfInSyncHandler = function v2TeamMembersOfSelfInSyncHandler(t3) {
          var a3 = t3.content.datas;
          forEach$1(a3).call(a3, function(t4) {
            t4.teamType = 1;
          }), this.memberModel.setData(a3);
        }, a2.v2SuperTeamMembersOfSelfInSyncHandler = function v2SuperTeamMembersOfSelfInSyncHandler(t3) {
          var a3 = t3.content.datas;
          forEach$1(a3).call(a3, function(t4) {
            t4.teamType = 2;
          }), this.memberModel.setData(a3);
        }, V2NIMTeamServiceImpl;
      }(ip), hv = "V2NIMUserService", gv = { "34_3": "v2UpdateBlockList", "34_7": "v2GetUserList", "34_10": "v2UpdateSelfUserProfile", "3_109": "v2SyncSelfUserInfo", "3_110": "onUpdateUserProfile", "3_103": "onUpdateBlockList", "3_8": "syncBlockAndMuteList", "34_5": "v2SetP2PMessageMuteMode", "3_105": "v2OnUpdateMuteList" }, vv = { accountId: 1, name: 3, avatar: 4, sign: 5, gender: { id: 6, retType: "number" }, email: 7, birthday: 8, mobile: 9, serverExtension: 10, createTime: { id: 12, retType: "number" }, updateTime: { id: 13, retType: "number" } }, fv = { v2UpdateBlockList: { sid: 34, cid: 3, service: hv, params: [{ type: "String", name: "accountId" }, { type: "Bool", name: "addToBlockList" }] }, v2GetUserList: { sid: 34, cid: 7, service: hv, params: [{ type: "StrArray", name: "accountIds" }], response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(vv) }] }, v2UpdateSelfUserProfile: { sid: 34, cid: 10, service: hv, params: [{ type: "Property", name: "tag", reflectMapper: vv }], response: [{ type: "Long", name: "updateTime" }] }, onUpdateUserProfile: { sid: 3, cid: 110, service: hv, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(vv) }] }, onUpdateBlockList: { sid: 3, cid: 103, service: hv, response: [{ type: "String", name: "accountId" }, { type: "Bool", name: "addToBlockList" }] }, syncBlockAndMuteList: { sid: 3, cid: 8, service: hv, response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem({ accountId: 0, isMute: { id: 1, retType: "boolean" }, isBlock: { id: 2, retType: "boolean" } }) }, { type: "Long", name: "timetag" }] }, v2SyncSelfUserInfo: { sid: 3, cid: 109, service: hv, response: [{ type: "Property", name: "user", reflectMapper: invertSerializeItem(vv) }] }, v2SetP2PMessageMuteMode: { sid: 34, cid: 5, service: hv, params: [{ type: "String", name: "accountId" }, { type: "Bool", name: "muteMode" }] }, v2OnUpdateMuteList: { sid: 3, cid: 105, service: hv, response: [{ type: "String", name: "accountId" }, { type: "Bool", name: "mute" }] } };
      collection("Set", function(t2) {
        return function Set() {
          return t2(this, arguments.length ? arguments[0] : void 0);
        };
      }, ic);
      var yv = j.Set;
      _export({ target: "Set", stat: true, forced: true }, { from: cc }), _export({ target: "Set", stat: true, forced: true }, { of: lc });
      _export({ target: "Set", proto: true, real: true, forced: true }, { addAll: function addAll() {
        for (var t2 = anObject(this), a2 = aCallable(t2.add), u2 = 0, m2 = arguments.length; u2 < m2; u2++)
          N(a2, t2, arguments[u2]);
        return t2;
      } }), _export({ target: "Set", proto: true, real: true, forced: true }, { deleteAll: uc });
      var _v = getIterator;
      _export({ target: "Set", proto: true, real: true, forced: true }, { every: function every2(t2) {
        var a2 = anObject(this), u2 = _v(a2), m2 = functionBindContext(t2, arguments.length > 1 ? arguments[1] : void 0);
        return !iterate(u2, function(t3, u3) {
          if (!m2(t3, t3, a2))
            return u3();
        }, { IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      } }), _export({ target: "Set", proto: true, real: true, forced: true }, { difference: function difference2(t2) {
        var a2 = anObject(this), u2 = new (speciesConstructor(a2, getBuiltIn("Set")))(a2), m2 = aCallable(u2.delete);
        return iterate(t2, function(t3) {
          N(m2, u2, t3);
        }), u2;
      } }), _export({ target: "Set", proto: true, real: true, forced: true }, { filter: function filter2(t2) {
        var a2 = anObject(this), u2 = _v(a2), m2 = functionBindContext(t2, arguments.length > 1 ? arguments[1] : void 0), h2 = new (speciesConstructor(a2, getBuiltIn("Set")))(), g2 = aCallable(h2.add);
        return iterate(u2, function(t3) {
          m2(t3, t3, a2) && N(g2, h2, t3);
        }, { IS_ITERATOR: true }), h2;
      } }), _export({ target: "Set", proto: true, real: true, forced: true }, { find: function find2(t2) {
        var a2 = anObject(this), u2 = _v(a2), m2 = functionBindContext(t2, arguments.length > 1 ? arguments[1] : void 0);
        return iterate(u2, function(t3, u3) {
          if (m2(t3, t3, a2))
            return u3(t3);
        }, { IS_ITERATOR: true, INTERRUPTED: true }).result;
      } }), _export({ target: "Set", proto: true, real: true, forced: true }, { intersection: function intersection(t2) {
        var a2 = anObject(this), u2 = new (speciesConstructor(a2, getBuiltIn("Set")))(), m2 = aCallable(a2.has), h2 = aCallable(u2.add);
        return iterate(t2, function(t3) {
          N(m2, a2, t3) && N(h2, u2, t3);
        }), u2;
      } }), _export({ target: "Set", proto: true, real: true, forced: true }, { isDisjointFrom: function isDisjointFrom(t2) {
        var a2 = anObject(this), u2 = aCallable(a2.has);
        return !iterate(t2, function(t3, m2) {
          if (N(u2, a2, t3) === true)
            return m2();
        }, { INTERRUPTED: true }).stopped;
      } }), _export({ target: "Set", proto: true, real: true, forced: true }, { isSubsetOf: function isSubsetOf(t2) {
        var a2 = getIterator(this), u2 = anObject(t2), m2 = u2.has;
        return isCallable(m2) || (u2 = new (getBuiltIn("Set"))(t2), m2 = aCallable(u2.has)), !iterate(a2, function(t3, a3) {
          if (N(m2, u2, t3) === false)
            return a3();
        }, { IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      } }), _export({ target: "Set", proto: true, real: true, forced: true }, { isSupersetOf: function isSupersetOf(t2) {
        var a2 = anObject(this), u2 = aCallable(a2.has);
        return !iterate(t2, function(t3, m2) {
          if (N(u2, a2, t3) === false)
            return m2();
        }, { INTERRUPTED: true }).stopped;
      } });
      var Mv = w([].join), Iv = [].push;
      _export({ target: "Set", proto: true, real: true, forced: true }, { join: function join(t2) {
        var a2 = anObject(this), u2 = _v(a2), m2 = t2 === void 0 ? "," : toString(t2), h2 = [];
        return iterate(u2, Iv, { that: h2, IS_ITERATOR: true }), Mv(h2, m2);
      } }), _export({ target: "Set", proto: true, real: true, forced: true }, { map: function map(t2) {
        var a2 = anObject(this), u2 = _v(a2), m2 = functionBindContext(t2, arguments.length > 1 ? arguments[1] : void 0), h2 = new (speciesConstructor(a2, getBuiltIn("Set")))(), g2 = aCallable(h2.add);
        return iterate(u2, function(t3) {
          N(g2, h2, m2(t3, t3, a2));
        }, { IS_ITERATOR: true }), h2;
      } });
      var Sv = TypeError;
      _export({ target: "Set", proto: true, real: true, forced: true }, { reduce: function reduce2(t2) {
        var a2 = anObject(this), u2 = _v(a2), m2 = arguments.length < 2, h2 = m2 ? void 0 : arguments[1];
        if (aCallable(t2), iterate(u2, function(u3) {
          m2 ? (m2 = false, h2 = u3) : h2 = t2(h2, u3, u3, a2);
        }, { IS_ITERATOR: true }), m2)
          throw Sv("Reduce of empty set with no initial value");
        return h2;
      } }), _export({ target: "Set", proto: true, real: true, forced: true }, { some: function some2(t2) {
        var a2 = anObject(this), u2 = _v(a2), m2 = functionBindContext(t2, arguments.length > 1 ? arguments[1] : void 0);
        return iterate(u2, function(t3, u3) {
          if (m2(t3, t3, a2))
            return u3();
        }, { IS_ITERATOR: true, INTERRUPTED: true }).stopped;
      } }), _export({ target: "Set", proto: true, real: true, forced: true }, { symmetricDifference: function symmetricDifference(t2) {
        var a2 = anObject(this), u2 = new (speciesConstructor(a2, getBuiltIn("Set")))(a2), m2 = aCallable(u2.delete), h2 = aCallable(u2.add);
        return iterate(t2, function(t3) {
          N(m2, u2, t3) || N(h2, u2, t3);
        }), u2;
      } }), _export({ target: "Set", proto: true, real: true, forced: true }, { union: function union(t2) {
        var a2 = anObject(this), u2 = new (speciesConstructor(a2, getBuiltIn("Set")))(a2);
        return iterate(t2, aCallable(u2.add), { that: u2 }), u2;
      } });
      var Tv = yv, Cv = function() {
        function V2NIMUserModelImpl() {
          this.muteList = new Tv(), this.userMap = new fc(), this.blockList = [];
        }
        var t2 = V2NIMUserModelImpl.prototype;
        return t2.reset = function reset() {
          this.muteList.clear(), this.userMap.clear(), this.blockList = [];
        }, t2.setAccountMuteMode = function setAccountMuteMode(t3, a2) {
          a2 === 1 ? this.muteList.add(t3) : this.muteList.delete(t3);
        }, t2.setUser = function setUser(t3) {
          this.userMap.set(t3.accountId, t3);
        }, t2.getUser = function getUser(t3) {
          return this.userMap.get(t3);
        }, t2.getUserListBySearchOption = function getUserListBySearchOption(t3) {
          var a2, u2;
          return filter(a2 = jl(values(u2 = this.userMap).call(u2))).call(a2, function(a3) {
            var u3, m2, h2;
            return !(t3.searchName !== void 0 && !t3.searchName || !includes(u3 = a3.name).call(u3, t3.keyword)) || (!(!t3.searchAccountId || !includes(m2 = a3.accountId).call(m2, t3.keyword)) || !!(a3.mobile && t3.searchMobile && includes(h2 = a3.mobile).call(h2, t3.keyword)));
          });
        }, t2.addToBlockList = function addToBlockList(t3) {
          var a2 = this;
          forEach$1(t3).call(t3, function(t4) {
            var u2;
            includes(u2 = a2.blockList).call(u2, t4) || a2.blockList.push(t4);
          });
        }, t2.removeFromBlockList = function removeFromBlockList(t3) {
          var a2 = this;
          forEach$1(t3).call(t3, function(t4) {
            var u2, m2, h2 = indexOf(u2 = a2.blockList).call(u2, t4);
            h2 !== -1 && splice(m2 = a2.blockList).call(m2, h2, 1);
          });
        }, V2NIMUserModelImpl;
      }(), bv = { type: "string", required: true, allowEmpty: false }, Ev = { type: "string", required: false, allowEmpty: true }, kv = { name: { type: "string", required: false, allowEmpty: true }, avatar: Ev, sign: Ev, email: Ev, birthday: Ev, mobile: Ev, gender: { type: "number", required: false }, serverExtension: Ev };
      function _createForOfIteratorHelperLoose$6(t2, a2) {
        var u2, m2 = es !== void 0 && $l(t2) || t2["@@iterator"];
        if (m2)
          return bind$1(u2 = (m2 = m2.call(t2)).next).call(u2, m2);
        if (Dn(t2) || (m2 = function _unsupportedIterableToArray$6(t3, a3) {
          if (t3) {
            var u3;
            if (typeof t3 == "string")
              return _arrayLikeToArray$6(t3, a3);
            var m3 = slice(u3 = {}.toString.call(t3)).call(u3, 8, -1);
            return m3 === "Object" && t3.constructor && (m3 = t3.constructor.name), m3 === "Map" || m3 === "Set" ? jl(t3) : m3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m3) ? _arrayLikeToArray$6(t3, a3) : void 0;
          }
        }(t2)) || a2 && t2 && typeof t2.length == "number") {
          m2 && (t2 = m2);
          var h2 = 0;
          return function() {
            return h2 >= t2.length ? { done: true } : { done: false, value: t2[h2++] };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _arrayLikeToArray$6(t2, a2) {
        (a2 == null || a2 > t2.length) && (a2 = t2.length);
        for (var u2 = 0, m2 = Array(a2); u2 < a2; u2++)
          m2[u2] = t2[u2];
        return m2;
      }
      var wv = function(t2) {
        function V2NIMUserServiceImpl(a3) {
          var u2;
          return u2 = t2.call(this, "V2NIMUserService", a3) || this, registerParser({ cmdMap: gv, cmdConfig: fv }), u2.model = new Cv(), u2.core.options.apiVersion !== "v2" ? Qe(u2) : (u2.setListener(), u2);
        }
        Nt(V2NIMUserServiceImpl, t2);
        var a2 = V2NIMUserServiceImpl.prototype;
        return a2.reset = function reset() {
          this.model.reset();
        }, a2.setListener = function setListener() {
          var t3, a3 = this;
          this.core.eventBus.on("V2NIMUserService/refreshUserInfo", bind$1(t3 = this.refreshUserInfo).call(t3, this)), this.core.eventBus.on("forwardReceive/V2NIMUserService/updateBlockList", function(t4, u2) {
            u2 ? a3.model.addToBlockList([t4]) : a3.model.removeFromBlockList([t4]), u2 ? a3.emitBlockListAdded(t4) : a3.emit("onBlockListRemoved", t4);
          }), this.core.eventBus.on("forwardReceive/V2NIMUserService/updateUserProfile", function(t4) {
            a3.updateUserProfileInMemory(t4);
          });
        }, a2.emit = function emit(a3) {
          for (var u2, m2, h2 = this.name + "::emit " + a3.toString(), g2 = arguments.length, M2 = new Array(g2 > 1 ? g2 - 1 : 0), I2 = 1; I2 < g2; I2++)
            M2[I2 - 1] = arguments[I2];
          if (a3 === "onUserProfileChanged") {
            var S2 = M2[0];
            this.logger.log("" + h2, map$6(S2).call(S2, function(t3) {
              return "id:" + t3.accountId + ";name:" + t3.name + ";updateTime:" + t3.updateTime;
            }));
          } else if (a3 === "onBlockListAdded") {
            var T2 = M2[0];
            this.logger.log("" + h2, "id:" + T2.accountId + ";name:" + T2.name + ";updateTime:" + T2.updateTime);
          } else {
            var C2, b2;
            (C2 = this.logger).log.apply(C2, concat(b2 = ["" + h2]).call(b2, M2));
          }
          return (u2 = t2.prototype.emit).call.apply(u2, concat(m2 = [this, a3]).call(m2, M2));
        }, a2.getUserList = function getUserList(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            return Ql.wrap(function _callee$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this.checkV2(), a3.abrupt("return", this._getUserList(t3));
                  case 2:
                  case "end":
                    return a3.stop();
                }
            }, _callee, this);
          }));
        }, a2._getUserList = function _getUserList(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var u2, m2, h2, g2, M2 = this;
            return Ql.wrap(function _callee2$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    if (validate({ accountIds: Hg }, { accountIds: t3 }, "", true), u2 = [], forEach$1(t3).call(t3, function(t4) {
                      M2.model.getUser(t4) || u2.push(t4);
                    }), m2 = null, !(u2.length > 0)) {
                      I2.next = 8;
                      break;
                    }
                    return I2.next = 7, this.core.sendCmd("v2GetUserList", { accountIds: u2 });
                  case 7:
                    m2 = I2.sent;
                  case 8:
                    return h2 = ((a3 = m2 == null ? void 0 : m2.content) === null || a3 === void 0 ? void 0 : a3.data) || [], forEach$1(h2).call(h2, function(t4) {
                      M2.model.setUser(t4);
                    }), g2 = [], forEach$1(t3).call(t3, function(t4) {
                      var a4 = M2.model.getUser(t4);
                      a4 && g2.push(a4);
                    }), I2.abrupt("return", g2);
                  case 13:
                  case "end":
                    return I2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.getUserListFromCloud = function getUserListFromCloud(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3, u2, m2, h2, g2 = this;
            return Ql.wrap(function _callee3$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return this.checkV2(), validate({ accountIds: { type: "array", min: 1, max: 500, itemType: "string" } }, { accountIds: t3 }, "", true), M2.next = 4, this.core.sendCmd("v2GetUserList", { accountIds: t3 });
                  case 4:
                    return a3 = M2.sent, u2 = a3.content.data || [], m2 = [], forEach$1(u2).call(u2, function(t4) {
                      var a4 = g2.model.getUser(t4.accountId);
                      g2.compareUserForUpdate(a4, t4) && m2.push(t4), g2.model.setUser(t4);
                    }), h2 = reduce(t3).call(t3, function(t4, a4) {
                      var u3 = g2.model.getUser(a4);
                      return u3 && t4.push(u3), t4;
                    }, []), m2.length > 0 && this.emit("onUserProfileChanged", m2), M2.abrupt("return", h2);
                  case 11:
                  case "end":
                    return M2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.compareUserForUpdate = function compareUserForUpdate(t3, a3) {
          return !t3 || !(typeof t3.updateTime == "number" && typeof a3.updateTime == "number" && t3.updateTime >= a3.updateTime);
        }, a2.updateSelfUserProfile = function updateSelfUserProfile(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a3;
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.checkV2(), validate(kv, t3, "", true), u2.next = 4, this.core.sendCmd("v2UpdateSelfUserProfile", { tag: Dt(Dt({}, t3), { accountId: this.core.account }) });
                  case 4:
                    return a3 = u2.sent, u2.next = 7, this.updateUserProfileInMemory(Dt({ updateTime: a3.content.updateTime }, t3));
                  case 7:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.addUserToBlockList = function addUserToBlockList(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            return Ql.wrap(function _callee5$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    if (this.checkV2(), t3 !== this.core.account) {
                      a3.next = 3;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Cannot block yourself" } });
                  case 3:
                    return validate({ accountId: bv }, { accountId: t3 }, "", true), a3.next = 6, this.core.sendCmd("v2UpdateBlockList", { accountId: t3, addToBlockList: true });
                  case 6:
                    this.model.addToBlockList([t3]), this.emitBlockListAdded(t3);
                  case 8:
                  case "end":
                    return a3.stop();
                }
            }, _callee5, this);
          }));
        }, a2.removeUserFromBlockList = function removeUserFromBlockList(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            return Ql.wrap(function _callee6$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    if (this.checkV2(), t3 !== this.core.account) {
                      a3.next = 3;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Cannot unblock yourself" } });
                  case 3:
                    return validate({ accountId: bv }, { accountId: t3 }, "", true), a3.next = 6, this.core.sendCmd("v2UpdateBlockList", { accountId: t3, addToBlockList: false });
                  case 6:
                    this.model.removeFromBlockList([t3]), this.emit("onBlockListRemoved", t3);
                  case 8:
                  case "end":
                    return a3.stop();
                }
            }, _callee6, this);
          }));
        }, a2.searchUserByOption = function searchUserByOption(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            return Ql.wrap(function _callee7$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    if (this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), validate({ keyword: { type: "string", allowEmpty: false }, searchName: { type: "boolean", required: false }, searchAccountId: { type: "boolean", required: false }, searchMobile: { type: "boolean", required: false } }, t3, "", true), (t3.searchName === void 0 || t3.searchName) !== false || t3.searchAccountId || t3.searchMobile) {
                      a3.next = 6;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "one of searchName, searchAccountId, searchMobile must be true" } });
                  case 6:
                    return a3.abrupt("return", this.model.getUserListBySearchOption(t3));
                  case 7:
                  case "end":
                    return a3.stop();
                }
            }, _callee7, this);
          }));
        }, a2.getBlockList = function getBlockList() {
          return this.checkV2(), zi.resolve(this.model.blockList);
        }, a2.updateUserProfileInMemory = function updateUserProfileInMemory(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var a3, u2;
            return Ql.wrap(function _callee8$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    if (!(a3 = this.model.getUser(this.core.account))) {
                      m2.next = 6;
                      break;
                    }
                    Dt(a3, t3), this.model.setUser(a3), m2.next = 10;
                    break;
                  case 6:
                    return m2.next = 8, this._getUserList([this.core.account]);
                  case 8:
                    u2 = m2.sent, a3 = u2[0];
                  case 10:
                    a3 && this.emit("onUserProfileChanged", [a3]);
                  case 11:
                  case "end":
                    return m2.stop();
                }
            }, _callee8, this);
          }));
        }, a2.onUpdateUserProfileHandler = function onUpdateUserProfileHandler(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            var a3;
            return Ql.wrap(function _callee9$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return a3 = t3.content.data, u2.next = 3, this.updateUserProfileInMemory(a3);
                  case 3:
                  case "end":
                    return u2.stop();
                }
            }, _callee9, this);
          }));
        }, a2.onUpdateBlockListHandler = function onUpdateBlockListHandler(t3) {
          var a3 = t3.content.accountId;
          t3.content.addToBlockList ? (this.model.addToBlockList([a3]), this.emitBlockListAdded(a3)) : (this.model.removeFromBlockList([a3]), this.emit("onBlockListRemoved", a3));
        }, a2.syncBlockAndMuteListHandler = function syncBlockAndMuteListHandler(t3) {
          var a3 = this, u2 = t3.content.data;
          forEach$1(u2).call(u2, function(t4) {
            t4.isBlock ? a3.model.addToBlockList([t4.accountId]) : a3.model.setAccountMuteMode(t4.accountId, t4.isMute ? 1 : 0);
          });
        }, a2.v2SyncSelfUserInfoHandler = function v2SyncSelfUserInfoHandler(t3) {
          var a3 = t3.content.user;
          this.model.setUser(a3);
        }, a2.checkUserUpdate = function checkUserUpdate(t3, a3) {
          var u2 = t3.senderId;
          u2 !== this.core.account && this.refreshUserInfo(u2, a3);
        }, a2.refreshUserInfo = function refreshUserInfo(t3, a3) {
          return a3 === void 0 && (a3 = 0), __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            var u2, m2, h2, g2, M2, I2;
            return Ql.wrap(function _callee10$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    if (t3 && typeof t3 == "string") {
                      S2.next = 2;
                      break;
                    }
                    return S2.abrupt("return");
                  case 2:
                    if (u2 = this.model.getUser(t3), m2 = [], !(!u2 || u2 && typeof u2.updateTime == "number" && typeof a3 == "number" && !isNaN(u2.updateTime) && !isNaN(a3) && u2.updateTime < a3)) {
                      S2.next = 15;
                      break;
                    }
                    return S2.prev = 5, S2.next = 8, this.core.sendCmd("v2GetUserList", { accountIds: [t3] });
                  case 8:
                    h2 = S2.sent, m2 = h2.content.data, S2.next = 15;
                    break;
                  case 12:
                    S2.prev = 12, S2.t0 = S2.catch(5), this.logger.warn("V2NIMUserService:refreshUserInfo: failed for " + t3);
                  case 15:
                    for (g2 = _createForOfIteratorHelperLoose$6(m2); !(M2 = g2()).done; )
                      I2 = M2.value, this.model.setUser(I2), this.emit("onUserProfileChanged", [I2]);
                  case 16:
                  case "end":
                    return S2.stop();
                }
            }, _callee10, this, [[5, 12]]);
          }));
        }, a2.emitBlockListAdded = function emitBlockListAdded(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            var a3;
            return Ql.wrap(function _callee11$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return u2.next = 2, this._getUserList([t3]);
                  case 2:
                    (a3 = u2.sent).length === 1 && this.emit("onBlockListAdded", a3[0]);
                  case 4:
                  case "end":
                    return u2.stop();
                }
            }, _callee11, this);
          }));
        }, a2.v2OnUpdateMuteListHandler = function v2OnUpdateMuteListHandler(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee12$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    a3 = t3.content, u2 = a3.accountId, m2 = a3.mute, h2 = m2 ? 1 : 0, this.core.eventBus.emit("v2NIMUserService/updateMuteList", u2, h2);
                  case 3:
                  case "end":
                    return g2.stop();
                }
            }, _callee12, this);
          }));
        }, V2NIMUserServiceImpl;
      }(ip), Rv = "V2NIMFriendService", Av = { "35_1": "v2AddFriend", "35_2": "v2DeleteFriend", "35_3": "v2SetFriendInfo", "35_4": "v2IncFriendInfo", "12_101": "v2OnAddFriend", "12_102": "v2OnDeleteFriend", "12_103": "v2OnUpdateFriendInfo", "12_5": "v2SyncFriendList", "12_6": "v2SyncFriendUserList" }, Nv = { accountId: 4, source: { id: 7, retType: "number" }, alias: 8, serverExtension: 10, createTime: { id: 11, retType: "number" }, updateTime: { id: 12, retType: "number" }, customerExtension: 13 }, xv = { v2AddFriend: { sid: 35, cid: 1, service: Rv, params: [{ type: "String", name: "accountId" }, { type: "Byte", name: "verifyType" }, { type: "String", name: "postscript" }], response: [] }, v2DeleteFriend: { sid: 35, cid: 2, service: Rv, params: [{ type: "String", name: "accountId" }, { type: "Property", name: "params", reflectMapper: { deleteAlias: { id: 1, converter: boolToInt } } }] }, v2SetFriendInfo: { sid: 35, cid: 3, service: Rv, params: [{ type: "Property", name: "tag", reflectMapper: Nv }] }, v2OnAddFriend: { sid: 12, cid: 101, service: Rv, response: [{ type: "String", name: "accountId" }, { type: "Byte", name: "verifyType" }, { type: "String", name: "postscript" }, { type: "Property", name: "ext", reflectMapper: invertSerializeItem({ serverExt: 1 }) }] }, v2OnDeleteFriend: { sid: 12, cid: 102, service: Rv, response: [{ type: "String", name: "accountId" }] }, v2OnUpdateFriendInfo: { sid: 12, cid: 103, service: Rv, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Nv) }] }, v2SyncFriendList: { sid: 12, cid: 5, service: Rv, response: [{ type: "PropertyArray", name: "friends", reflectMapper: invertSerializeItem(Nv) }, { type: "Long", name: "timetag" }] }, v2SyncFriendUserList: { sid: 12, cid: 6, service: Rv, response: [{ type: "PropertyArray", name: "users", reflectMapper: invertSerializeItem(vv) }] }, v2IncFriendInfo: { sid: 35, cid: 4, service: Rv, params: [{ type: "Long", name: "timetag" }], response: [{ type: "PropertyArray", name: "friends", reflectMapper: invertSerializeItem(Nv) }, { type: "Long", name: "timetag" }] } }, Ov = { accountId: { type: "string", required: true, allowEmpty: false }, params: { type: "object", required: true, rules: { addMode: { type: "enum", required: true, values: [1, 2] }, postscript: { type: "string", required: false, allowEmpty: true } } } }, Pv = { accountId: { type: "string", required: true, allowEmpty: false }, params: { type: "object", required: false, rules: { deleteAlias: { type: "boolean", required: false } } } }, Lv = { accountId: { type: "string", required: true, allowEmpty: false }, params: { type: "object", required: false, rules: { alias: { type: "string", required: false, allowEmpty: true }, serverExtension: { type: "string", required: false, allowEmpty: true } } } }, Vv = { applicantAccountId: { type: "string", required: true, allowEmpty: false }, recipientAccountId: { type: "string", required: true, allowEmpty: false }, operatorAccountId: { type: "string", required: false, allowEmpty: false }, postscript: { type: "string", required: false, allowEmpty: true }, status: { type: "enum", required: true, values: [1, 4, 3, 0, 2] }, timestamp: { type: "number", min: 1 } }, Uv = { offset: { type: "number", required: false }, limit: { type: "number", required: false }, status: { type: "array", itemType: "enum", required: false, values: [1, 4, 3, 0, 2] } }, Dv = function() {
        function V2NIMFriendNotificationImpl(t2, a2) {
          this.core = t2, this.service = a2;
        }
        return V2NIMFriendNotificationImpl.prototype.processSysNotification = function processSysNotification(t2) {
          if (t2.type === 6) {
            var a2 = t2.senderId;
            this.core.V2NIMFriendService.handleDeleteFriend(a2, 2);
          } else if (t2.type === 5)
            try {
              var u2 = JSON.parse(t2.content);
              if ((u2 == null ? void 0 : u2.vt) === 1) {
                this.core.V2NIMFriendService.handleAddFriend(t2.senderId, t2.timestamp);
                var m2 = { applicantAccountId: t2.senderId, recipientAccountId: t2.receiverId, operatorAccountId: t2.senderId, postscript: t2.postscript, timestamp: t2.timestamp, status: 4, read: true };
                this.service.model.appendFriendAddApplication(m2), this.service.model.updateFriendAddApplicationStatus(m2.applicantAccountId, 4, m2.applicantAccountId);
              } else if ((u2 == null ? void 0 : u2.vt) === 2) {
                var h2 = { applicantAccountId: t2.senderId, recipientAccountId: t2.receiverId, operatorAccountId: t2.senderId, postscript: t2.postscript, timestamp: t2.timestamp, status: 0, read: false };
                this.service.handleApplyFriend(h2), this.service.model.appendFriendAddApplication(h2);
              } else if ((u2 == null ? void 0 : u2.vt) === 3) {
                this.core.V2NIMFriendService.handleAddFriend(t2.senderId, t2.timestamp);
                var g2 = { applicantAccountId: t2.receiverId, recipientAccountId: t2.senderId, operatorAccountId: t2.senderId, timestamp: t2.timestamp, postscript: t2.postscript, status: 1, read: true };
                this.service.model.appendFriendAddApplication(g2);
              } else if ((u2 == null ? void 0 : u2.vt) === 4) {
                var M2 = { applicantAccountId: t2.receiverId, recipientAccountId: t2.senderId, operatorAccountId: t2.senderId, timestamp: t2.timestamp, postscript: t2.postscript, status: 2, read: true };
                this.service.model.appendFriendAddApplication(M2), this.service.emit("onFriendAddRejected", M2);
              }
            } catch (t3) {
              this.core.logger.warn("V2NIMFriendNotificationImpl::processSysNotification, parse content error:", t3);
            }
        }, V2NIMFriendNotificationImpl;
      }();
      function _createForOfIteratorHelperLoose$5(t2, a2) {
        var u2, m2 = es !== void 0 && $l(t2) || t2["@@iterator"];
        if (m2)
          return bind$1(u2 = (m2 = m2.call(t2)).next).call(u2, m2);
        if (Dn(t2) || (m2 = function _unsupportedIterableToArray$5(t3, a3) {
          if (t3) {
            var u3;
            if (typeof t3 == "string")
              return _arrayLikeToArray$5(t3, a3);
            var m3 = slice(u3 = {}.toString.call(t3)).call(u3, 8, -1);
            return m3 === "Object" && t3.constructor && (m3 = t3.constructor.name), m3 === "Map" || m3 === "Set" ? jl(t3) : m3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m3) ? _arrayLikeToArray$5(t3, a3) : void 0;
          }
        }(t2)) || a2 && t2 && typeof t2.length == "number") {
          m2 && (t2 = m2);
          var h2 = 0;
          return function() {
            return h2 >= t2.length ? { done: true } : { done: false, value: t2[h2++] };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _arrayLikeToArray$5(t2, a2) {
        (a2 == null || a2 > t2.length) && (a2 = t2.length);
        for (var u2 = 0, m2 = Array(a2); u2 < a2; u2++)
          m2[u2] = t2[u2];
        return m2;
      }
      var qv = function() {
        function V2NIMFriendModelImpl() {
          this.validFriendIds = new Tv(), this.friendMap = new fc(), this.applicationInfoList = [], this.friendTimetag = 0;
        }
        var t2 = V2NIMFriendModelImpl.prototype;
        return t2.getAddApplicationList = function getAddApplicationList(t3) {
          var a2, u2, m2 = t3.offset === void 0 ? 0 : t3.offset, h2 = reverse$1(a2 = filter(u2 = this.applicationInfoList).call(u2, function(a3) {
            var u3 = t3.status || [];
            return u3.length === 0 || !!includes(u3).call(u3, a3.status);
          })).call(a2), g2 = t3.limit || 50, M2 = slice(h2).call(h2, m2, m2 + g2), I2 = m2 + g2 >= h2.length;
          return { infos: M2, finished: I2, offset: I2 ? 0 : m2 + g2 };
        }, t2.reset = function reset() {
          this.friendMap.clear(), this.validFriendIds.clear(), this.applicationInfoList = [];
        }, t2.setAddApplicationRead = function setAddApplicationRead() {
          for (var t3, a2 = _createForOfIteratorHelperLoose$5(this.applicationInfoList); !(t3 = a2()).done; ) {
            t3.value.read = true;
          }
        }, t2.getAddApplicationUnreadCount = function getAddApplicationUnreadCount() {
          for (var t3, a2 = new Tv(), u2 = _createForOfIteratorHelperLoose$5(this.applicationInfoList); !(t3 = u2()).done; ) {
            var m2 = t3.value;
            m2.read || m2.status !== 0 || a2.add(m2.applicantAccountId);
          }
          return a2.size;
        }, t2.appendFriendAddApplication = function appendFriendAddApplication(t3) {
          this.applicationInfoList.push(t3);
        }, t2.clearApplicationList = function clearApplicationList() {
          this.applicationInfoList = [];
        }, t2.deleteApplication = function deleteApplication(t3) {
          var a2, u2;
          this.applicationInfoList = filter(a2 = map$6(u2 = this.applicationInfoList).call(u2, function(a3) {
            if (a3.applicantAccountId !== t3.applicantAccountId || a3.recipientAccountId !== t3.recipientAccountId || a3.timestamp !== t3.timestamp)
              return a3;
          })).call(a2, function(t4) {
            return t4;
          });
        }, t2.updateFriendAddApplicationStatus = function updateFriendAddApplicationStatus(t3, a2, u2) {
          if (a2 !== 0)
            for (var m2, h2 = _createForOfIteratorHelperLoose$5(this.applicationInfoList); !(m2 = h2()).done; ) {
              var g2 = m2.value;
              g2.applicantAccountId === t3 && g2.status === 0 && (g2.status = a2, g2.operatorAccountId = u2, g2.read = true);
            }
        }, t2.upsertFriend = function upsertFriend(t3, a2) {
          var u2 = this.friendMap.get(t3) || {}, m2 = Dt({ accountId: t3 }, u2, a2);
          return this.friendMap.set(t3, m2), this.validFriendIds.add(t3), m2;
        }, t2.addFriend = function addFriend(t3) {
          this.validFriendIds.add(t3);
        }, t2.deleteFriend = function deleteFriend(t3) {
          this.validFriendIds.delete(t3);
        }, t2.getFriend = function getFriend(t3) {
          return this.validFriendIds.has(t3) ? this.friendMap.get(t3) : void 0;
        }, t2.getFriendList = function getFriendList() {
          var t3, a2, u2, m2 = this;
          return filter(t3 = map$6(a2 = jl(values(u2 = this.validFriendIds).call(u2))).call(a2, function(t4) {
            return m2.getFriend(t4);
          })).call(t3, function(t4) {
            return !!t4;
          });
        }, t2.getFriendListBySearchOption = function getFriendListBySearchOption(t3) {
          var a2, u2, m2, h2 = this;
          return filter(a2 = map$6(u2 = jl(values(m2 = this.validFriendIds).call(m2))).call(u2, function(t4) {
            return h2.getFriend(t4);
          })).call(a2, function(a3) {
            var u3, m3, h3 = t3.searchAlias === void 0 || t3.searchAlias;
            return a3 !== void 0 && (!!(h3 && a3.alias && includes(u3 = a3.alias).call(u3, t3.keyword)) || !(!t3.searchAccountId || !includes(m3 = a3.accountId).call(m3, t3.keyword)));
          });
        }, t2.getFriendByIds = function getFriendByIds(t3) {
          var a2, u2 = this;
          return filter(a2 = map$6(t3).call(t3, function(t4) {
            return u2.getFriend(t4);
          })).call(a2, function(t4) {
            return !!t4;
          });
        }, t2.setFriendTimetag = function setFriendTimetag(t3) {
          this.friendTimetag = t3;
        }, t2.getFriendTimetag = function getFriendTimetag() {
          return this.friendTimetag;
        }, V2NIMFriendModelImpl;
      }(), Bv = function(t2) {
        function V2NIMUFriendServiceImpl(a3) {
          var u2;
          return (u2 = t2.call(this, "V2NIMFriendService", a3) || this).notification = new Dv(u2.core, Qe(u2)), u2.model = new qv(), u2.core.options.apiVersion !== "v2" ? Qe(u2) : (registerParser({ cmdMap: Av, cmdConfig: xv }), u2.setListener(), u2);
        }
        Nt(V2NIMUFriendServiceImpl, t2);
        var a2 = V2NIMUFriendServiceImpl.prototype;
        return a2.reset = function reset() {
          this.model.reset();
        }, a2.setListener = function setListener() {
          var t3, a3, u2, m2, h2, g2;
          this.core.eventBus.on("V2NIMFriendService/sysNotification", bind$1(t3 = this.notification.processSysNotification).call(t3, this.notification)), this.core.eventBus.on("forwardReceive/V2NIMFriendService/addFriend", bind$1(a3 = this.handleAddFriend).call(a3, this)), this.core.eventBus.on("forwardReceive/V2NIMFriendService/deleteFriend", bind$1(u2 = this.handleDeleteFriend).call(u2, this)), this.core.eventBus.on("forwardReceive/V2NIMFriendService/setFriendInfo", bind$1(m2 = this.handleSetFriendInfo).call(m2, this)), this.core.eventBus.on("forwardReceive/V2NIMFriendService/acceptAddApplication", bind$1(h2 = this.handlePassFriendApply).call(h2, this)), this.core.eventBus.on("forwardReceive/V2NIMFriendService/rejectAddApplication", bind$1(g2 = this.handleRejectFriendApply).call(g2, this));
        }, a2.emit = function emit(a3) {
          for (var u2, m2, h2 = this.name + "::emit " + a3.toString(), g2 = arguments.length, M2 = new Array(g2 > 1 ? g2 - 1 : 0), I2 = 1; I2 < g2; I2++)
            M2[I2 - 1] = arguments[I2];
          if (a3 === "onFriendAdded" || a3 === "onFriendInfoChanged") {
            var S2 = M2[0];
            this.logger.log("" + h2, S2.accountId + ";updateTime:" + S2.updateTime);
          } else {
            var T2, C2;
            (T2 = this.logger).log.apply(T2, concat(C2 = ["" + h2]).call(C2, M2));
          }
          return (u2 = t2.prototype.emit).call.apply(u2, concat(m2 = [this, a3]).call(m2, M2));
        }, a2.addFriend = function addFriend(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            return Ql.wrap(function _callee$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    if (this.checkV2(), t3 !== this.core.account) {
                      u2.next = 3;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Cannot add yourself" } });
                  case 3:
                    return validate(Ov, { accountId: t3, params: a3 }, "", true), u2.next = 6, this.core.sendCmd("v2AddFriend", { accountId: t3, verifyType: a3.addMode, postscript: a3.postscript || "" });
                  case 6:
                    if (a3.addMode !== 1) {
                      u2.next = 9;
                      break;
                    }
                    return u2.next = 9, this.handleAddFriend(t3);
                  case 9:
                  case "end":
                    return u2.stop();
                }
            }, _callee, this);
          }));
        }, a2.deleteFriend = function deleteFriend(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            return Ql.wrap(function _callee2$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    if (this.checkV2(), t3 !== this.core.account) {
                      u2.next = 3;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Cannot delete yourself" } });
                  case 3:
                    return validate(Pv, { accountId: t3, params: a3 }, "", true), u2.next = 6, this.core.sendCmd("v2DeleteFriend", { accountId: t3, params: a3 });
                  case 6:
                    a3.deleteAlias && this.model.upsertFriend(t3, { alias: "" }), this.handleDeleteFriend(t3);
                  case 8:
                  case "end":
                    return u2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.acceptAddApplication = function acceptAddApplication(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            return Ql.wrap(function _callee3$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this.checkV2(), validate(Vv, t3, "", true), a3.prev = 2, a3.next = 5, this.core.sendCmd("v2AddFriend", { accountId: t3.applicantAccountId, verifyType: 3, postscript: "" });
                  case 5:
                    this.handlePassFriendApply(t3.applicantAccountId), a3.next = 12;
                    break;
                  case 8:
                    throw a3.prev = 8, a3.t0 = a3.catch(2), this.handlePassFriendApply(t3.applicantAccountId, a3.t0), a3.t0;
                  case 12:
                  case "end":
                    return a3.stop();
                }
            }, _callee3, this, [[2, 8]]);
          }));
        }, a2.rejectAddApplication = function rejectAddApplication(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.checkV2(), validate(Vv, t3, "", true), u2.prev = 2, u2.next = 5, this.core.sendCmd("v2AddFriend", { accountId: t3.applicantAccountId, verifyType: 4, postscript: a3 || "" });
                  case 5:
                    this.handleRejectFriendApply({ applicantAccountId: t3.applicantAccountId, recipientAccountId: t3.recipientAccountId, operatorAccountId: this.core.account, postscript: a3 || "", timestamp: this.core.timeOrigin.getNTPTime(), read: true, status: 2 }), u2.next = 12;
                    break;
                  case 8:
                    throw u2.prev = 8, u2.t0 = u2.catch(2), this.handleRejectFriendApply({ applicantAccountId: t3.applicantAccountId, recipientAccountId: t3.recipientAccountId, operatorAccountId: this.core.account, postscript: a3 || "", timestamp: this.core.timeOrigin.getNTPTime(), read: true, status: 3 }, u2.t0), u2.t0;
                  case 12:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this, [[2, 8]]);
          }));
        }, a2.setFriendInfo = function setFriendInfo(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            return Ql.wrap(function _callee5$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    if (this.checkV2(), validate(Lv, { accountId: t3, params: a3 }, "", true), t3 !== this.core.account) {
                      u2.next = 4;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Cannot set yourself" } });
                  case 4:
                    return u2.next = 6, this.core.sendCmd("v2SetFriendInfo", { tag: Dt({ accountId: t3 }, a3) });
                  case 6:
                    this.handleSetFriendInfo(t3, a3);
                  case 7:
                  case "end":
                    return u2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.getFriendList = function getFriendList() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            return Ql.wrap(function _callee6$(t3) {
              for (; ; )
                switch (t3.prev = t3.next) {
                  case 0:
                    return this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), t3.abrupt("return", this.computedFields(this.model.getFriendList()));
                  case 3:
                  case "end":
                    return t3.stop();
                }
            }, _callee6, this);
          }));
        }, a2.getFriendByIds = function getFriendByIds(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            return Ql.wrap(function _callee7$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), validate({ accountIds: { type: "array", itemType: "string", required: true, min: 1 } }, { accountIds: t3 }, "", true), a3.abrupt("return", this.computedFields(this.model.getFriendByIds(t3)));
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee7, this);
          }));
        }, a2.checkFriend = function checkFriend(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var a3, u2 = this;
            return Ql.wrap(function _callee8$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), validate({ accountIds: { type: "array", itemType: "string", required: true, min: 1 } }, { accountIds: t3 }, "", true), a3 = {}, forEach$1(t3).call(t3, function(t4) {
                      a3[t4] = !!u2.model.getFriend(t4);
                    }), m2.abrupt("return", a3);
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee8, this);
          }));
        }, a2.getAddApplicationList = function getAddApplicationList(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            return Ql.wrap(function _callee9$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), validate(Uv, t3, "", true), a3.abrupt("return", this.model.getAddApplicationList(t3));
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee9, this);
          }));
        }, a2.setAddApplicationRead = function setAddApplicationRead() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            return Ql.wrap(function _callee10$(t3) {
              for (; ; )
                switch (t3.prev = t3.next) {
                  case 0:
                    this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), this.model.setAddApplicationRead();
                  case 3:
                  case "end":
                    return t3.stop();
                }
            }, _callee10, this);
          }));
        }, a2.getAddApplicationUnreadCount = function getAddApplicationUnreadCount() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            return Ql.wrap(function _callee11$(t3) {
              for (; ; )
                switch (t3.prev = t3.next) {
                  case 0:
                    return this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), t3.abrupt("return", this.model.getAddApplicationUnreadCount());
                  case 3:
                  case "end":
                    return t3.stop();
                }
            }, _callee11, this);
          }));
        }, a2.clearAllAddApplication = function clearAllAddApplication() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            return Ql.wrap(function _callee12$(t3) {
              for (; ; )
                switch (t3.prev = t3.next) {
                  case 0:
                    this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), this.model.clearApplicationList();
                  case 3:
                  case "end":
                    return t3.stop();
                }
            }, _callee12, this);
          }));
        }, a2.deleteAddApplication = function deleteAddApplication(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            return Ql.wrap(function _callee13$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    if (this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), validate(Vv, t3, "", true), t3.applicantAccountId === this.core.account || t3.recipientAccountId === this.core.account) {
                      a3.next = 5;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "The applicant and recipient are not youself" } });
                  case 5:
                    this.model.deleteApplication(t3);
                  case 6:
                  case "end":
                    return a3.stop();
                }
            }, _callee13, this);
          }));
        }, a2.searchFriendByOption = function searchFriendByOption(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee14() {
            return Ql.wrap(function _callee14$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    if (this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), validate({ keyword: { type: "string", allowEmpty: false }, searchAccountId: { type: "boolean", required: false } }, t3, "", true), t3.searchAlias === void 0 || t3.searchAlias || t3.searchAccountId) {
                      a3.next = 6;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "searchAlias and searchAccountId cannot be false at the same time" } });
                  case 6:
                    return a3.abrupt("return", this.computedFields(this.model.getFriendListBySearchOption(t3)));
                  case 7:
                  case "end":
                    return a3.stop();
                }
            }, _callee14, this);
          }));
        }, a2.v2OnAddFriendHandler = function v2OnAddFriendHandler(t3) {
          var a3 = t3.content, u2 = a3.accountId, m2 = a3.verifyType, h2 = a3.postscript;
          if (m2 === 1)
            this.handleAddFriend(u2);
          else if (m2 === 2) {
            var g2 = { applicantAccountId: this.core.account, recipientAccountId: u2, operatorAccountId: this.core.account, postscript: h2, timestamp: this.core.timeOrigin.getNTPTime(), status: 0, read: false };
            this.handleApplyFriend(g2);
          } else if (m2 === 3)
            this.handlePassFriendApply(u2);
          else if (m2 === 4) {
            var M2 = { applicantAccountId: u2, recipientAccountId: this.core.account, operatorAccountId: this.core.account, postscript: h2, timestamp: this.core.timeOrigin.getNTPTime(), status: 2, read: true };
            this.handleRejectFriendApply(M2);
          }
        }, a2.v2OnDeleteFriendHandler = function v2OnDeleteFriendHandler(t3) {
          var a3 = t3.content.accountId;
          this.handleDeleteFriend(a3);
        }, a2.v2OnUpdateFriendInfoHandler = function v2OnUpdateFriendInfoHandler(t3) {
          var a3 = t3.content.data, u2 = this.model.upsertFriend(a3.accountId, a3);
          this.emit("onFriendInfoChanged", u2);
        }, a2.v2SyncFriendListHandler = function v2SyncFriendListHandler(t3) {
          var a3 = this, u2 = t3.content, m2 = u2.friends, h2 = u2.timetag;
          this.model.setFriendTimetag(h2), forEach$1(m2).call(m2, function(t4) {
            t4.serverExtension || (t4.serverExtension = ""), t4.customerExtension || (t4.customerExtension = ""), a3.model.upsertFriend(t4.accountId, t4);
          });
        }, a2.v2SyncFriendUserListHandler = function v2SyncFriendUserListHandler(t3) {
          var a3 = this, u2 = t3.content.users;
          this.hasUserService && forEach$1(u2).call(u2, function(t4) {
            a3.core.V2NIMUserService.model.setUser(t4);
          });
        }, a2.handleApplyFriend = function handleApplyFriend(t3) {
          this.emit("onFriendAddApplication", t3);
        }, a2.handleAddFriend = function handleAddFriend(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee15() {
            var a4;
            return Ql.wrap(function _callee15$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.model.addFriend(t3), u2.next = 3, this.incrementSyncFriend();
                  case 3:
                    this.core.eventBus.emit("V2NIMUserService/refreshUserInfo", t3), (a4 = this.model.getFriend(t3)) && this.emit("onFriendAdded", this.computedField(a4));
                  case 6:
                  case "end":
                    return u2.stop();
                }
            }, _callee15, this);
          }));
        }, a2.handleDeleteFriend = function handleDeleteFriend(t3, a3) {
          a3 = a3 === void 0 ? 1 : a3, this.emit("onFriendDeleted", t3, a3), this.model.deleteFriend(t3);
        }, a2.handleSetFriendInfo = function handleSetFriendInfo(t3, a3) {
          var u2 = this.model.upsertFriend(t3, a3);
          this.emit("onFriendInfoChanged", this.computedField(u2));
        }, a2.handlePassFriendApply = function handlePassFriendApply(t3, a3) {
          var u2 = a3 ? a3 == null ? void 0 : a3.code : 200;
          if (!(u2 >= 19e4 || u2 === Nl.V2NIM_ERROR_CODE_FRIEND_OPERATION_RATE_LIMIT))
            if (u2 === 200 || u2 === Nl.V2NIM_ERROR_CODE_FRIEND_ALREADY_EXIST)
              this.model.updateFriendAddApplicationStatus(t3, 1, this.core.account), this.handleAddFriend(t3);
            else {
              if (u2 >= 500 && u2 <= 599 && u2 !== 509)
                return;
              this.model.updateFriendAddApplicationStatus(t3, 3, this.core.account);
            }
        }, a2.handleRejectFriendApply = function handleRejectFriendApply(t3, a3) {
          var u2 = a3 ? a3 == null ? void 0 : a3.code : 200;
          if (!(u2 >= 19e4 || u2 === Nl.V2NIM_ERROR_CODE_FRIEND_OPERATION_RATE_LIMIT))
            if (u2 === 200)
              this.emit("onFriendAddRejected", t3), this.model.updateFriendAddApplicationStatus(t3.applicantAccountId, 2, this.core.account);
            else if (u2 === Nl.V2NIM_ERROR_CODE_FRIEND_ALREADY_EXIST)
              this.model.updateFriendAddApplicationStatus(t3.applicantAccountId, 1, this.core.account);
            else {
              if (u2 >= 500 && u2 <= 599 && u2 !== 509)
                return;
              this.model.updateFriendAddApplicationStatus(t3.applicantAccountId, 3, this.core.account);
            }
        }, a2.incrementSyncFriend = function incrementSyncFriend() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee16() {
            var t3, a3, u2, m2, h2 = this;
            return Ql.wrap(function _callee16$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return g2.next = 2, this.core.sendCmd("v2IncFriendInfo", { timetag: this.model.getFriendTimetag() });
                  case 2:
                    t3 = g2.sent, a3 = t3.content, u2 = a3.friends, m2 = a3.timetag, this.model.setFriendTimetag(m2), forEach$1(u2).call(u2, function(t4) {
                      h2.model.upsertFriend(t4.accountId, t4);
                    });
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee16, this);
          }));
        }, a2.computedFields = function computedFields(t3) {
          var a3 = this;
          return map$6(t3).call(t3, function(t4) {
            return a3.computedField(t4);
          });
        }, a2.computedField = function computedField(t3) {
          var a3, u2, m2 = (u2 = (a3 = this.core.V2NIMUserService) === null || a3 === void 0 ? void 0 : a3.model) === null || u2 === void 0 ? void 0 : u2.getUser(t3.accountId);
          return m2 ? Dt({}, t3, { userProfile: m2 }) : t3;
        }, Ye(V2NIMUFriendServiceImpl, [{ key: "hasUserService", get: function get2() {
          var t3;
          return !!((t3 = this.core.V2NIMUserService) === null || t3 === void 0 ? void 0 : t3.name);
        } }]), V2NIMUFriendServiceImpl;
      }(ip), Fv = { muteMode: { type: "enum", values: [2, 0, 1] } }, Gv = { accountId: { type: "string", required: true, allowEmpty: false }, muteMode: { type: "enum", required: true, values: [2, 0, 1] } }, Hv = { type: "object", required: false, rules: { certificateName: { type: "string", required: true, allowEmpty: false }, appId: { type: "string", required: false, allowEmpty: false }, appKey: { type: "string", required: false, allowEmpty: false }, secret: { type: "string", required: false, allowEmpty: false } } }, jv = { config: { type: "object", required: true, rules: { apns: Hv, hwPush: Hv, miPush: Hv, vivoPush: Hv, oppoPush: Hv, honorPush: Hv, fcmPush: Hv, mzPush: Hv } } }, $v = "V2NIMSettingService", zv = { "34_1": "v2SetDeviceToken", "34_2": "v2SetAppBackground", "34_15": "v2SetPushMobileOnDesktopOnline" }, Wv = { v2SetDeviceToken: { sid: 34, cid: 1, service: $v, params: [{ type: "String", name: "certificateName" }, { type: "String", name: "pushDeviceToken" }, { type: "Int", name: "pushkit" }] }, v2SetAppBackground: { sid: 34, cid: 2, service: $v, params: [{ type: "Bool", name: "isBackground" }, { type: "Int", name: "badge" }] }, v2SetPushMobileOnDesktopOnline: { sid: 34, cid: 15, service: $v, params: [{ type: "Property", name: "tag", reflectMapper: { need: { id: 1, converter: function converter(t2) {
        return t2 ? 2 : 1;
      } } } }] } }, Kv = Kv || function(t2) {
        var a2;
        typeof window != "undefined" && window.crypto && (a2 = window.crypto), typeof self != "undefined" && self.crypto && (a2 = self.crypto), go !== void 0 && go.crypto && (a2 = go.crypto), !a2 && typeof window != "undefined" && window.msCrypto && (a2 = window.msCrypto), !a2 && typeof global != "undefined" && global.crypto && (a2 = global.crypto);
        var u2 = function cryptoSecureRandomInt() {
          if (a2) {
            if (typeof a2.getRandomValues == "function")
              try {
                return a2.getRandomValues(new Uint32Array(1))[0];
              } catch (t3) {
              }
            if (typeof a2.randomBytes == "function")
              try {
                return a2.randomBytes(4).readInt32LE();
              } catch (t3) {
              }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        }, m2 = ft || function() {
          function F() {
          }
          return function(t3) {
            var a3;
            return F.prototype = t3, a3 = new F(), F.prototype = null, a3;
          };
        }(), h2 = {}, g2 = h2.lib = {}, M2 = g2.Base = { extend: function extend(t3) {
          var a3 = m2(this);
          return t3 && a3.mixIn(t3), a3.hasOwnProperty("init") && this.init !== a3.init || (a3.init = function() {
            a3.$super.init.apply(this, arguments);
          }), a3.init.prototype = a3, a3.$super = this, a3;
        }, create: function create() {
          var t3 = this.extend();
          return t3.init.apply(t3, arguments), t3;
        }, init: function init() {
        }, mixIn: function mixIn(t3) {
          for (var a3 in t3)
            t3.hasOwnProperty(a3) && (this[a3] = t3[a3]);
          t3.hasOwnProperty("toString") && (this.toString = t3.toString);
        }, clone: function clone() {
          return this.init.prototype.extend(this);
        } }, I2 = g2.WordArray = M2.extend({ init: function init(t3, a3) {
          t3 = this.words = t3 || [], this.sigBytes = a3 != null ? a3 : 4 * t3.length;
        }, toString: function toString2(t3) {
          return (t3 || T2).stringify(this);
        }, concat: function concat2(t3) {
          var a3 = this.words, u3 = t3.words, m3 = this.sigBytes, h3 = t3.sigBytes;
          if (this.clamp(), m3 % 4)
            for (var g3 = 0; g3 < h3; g3++) {
              var M3 = u3[g3 >>> 2] >>> 24 - g3 % 4 * 8 & 255;
              a3[m3 + g3 >>> 2] |= M3 << 24 - (m3 + g3) % 4 * 8;
            }
          else
            for (var I3 = 0; I3 < h3; I3 += 4)
              a3[m3 + I3 >>> 2] = u3[I3 >>> 2];
          return this.sigBytes += h3, this;
        }, clamp: function clamp() {
          var a3 = this.words, u3 = this.sigBytes;
          a3[u3 >>> 2] &= 4294967295 << 32 - u3 % 4 * 8, a3.length = t2.ceil(u3 / 4);
        }, clone: function clone() {
          var t3, clone2 = M2.clone.call(this);
          return clone2.words = slice(t3 = this.words).call(t3, 0), clone2;
        }, random: function random(t3) {
          for (var a3 = [], m3 = 0; m3 < t3; m3 += 4)
            a3.push(u2());
          return new I2.init(a3, t3);
        } }), S2 = h2.enc = {}, T2 = S2.Hex = { stringify: function stringify(t3) {
          for (var a3 = t3.words, u3 = t3.sigBytes, m3 = [], h3 = 0; h3 < u3; h3++) {
            var g3 = a3[h3 >>> 2] >>> 24 - h3 % 4 * 8 & 255;
            m3.push((g3 >>> 4).toString(16)), m3.push((15 & g3).toString(16));
          }
          return m3.join("");
        }, parse: function parse(t3) {
          for (var a3 = t3.length, u3 = [], m3 = 0; m3 < a3; m3 += 2)
            u3[m3 >>> 3] |= Uu(t3.substr(m3, 2), 16) << 24 - m3 % 8 * 4;
          return new I2.init(u3, a3 / 2);
        } }, C2 = S2.Latin1 = { stringify: function stringify(t3) {
          for (var a3 = t3.words, u3 = t3.sigBytes, m3 = [], h3 = 0; h3 < u3; h3++) {
            var g3 = a3[h3 >>> 2] >>> 24 - h3 % 4 * 8 & 255;
            m3.push(String.fromCharCode(g3));
          }
          return m3.join("");
        }, parse: function parse(t3) {
          for (var a3 = t3.length, u3 = [], m3 = 0; m3 < a3; m3++)
            u3[m3 >>> 2] |= (255 & t3.charCodeAt(m3)) << 24 - m3 % 4 * 8;
          return new I2.init(u3, a3);
        } }, b2 = S2.Utf8 = { stringify: function stringify(t3) {
          try {
            return decodeURIComponent(escape(C2.stringify(t3)));
          } catch (t4) {
            throw new Error("Malformed UTF-8 data");
          }
        }, parse: function parse(t3) {
          return C2.parse(unescape(encodeURIComponent(t3)));
        } }, E2 = g2.BufferedBlockAlgorithm = M2.extend({ reset: function reset() {
          this._data = new I2.init(), this._nDataBytes = 0;
        }, _append: function _append(t3) {
          var a3;
          typeof t3 == "string" && (t3 = b2.parse(t3)), concat(a3 = this._data).call(a3, t3), this._nDataBytes += t3.sigBytes;
        }, _process: function _process(a3) {
          var u3, m3 = this._data, h3 = m3.words, g3 = m3.sigBytes, M3 = this.blockSize, S3 = g3 / (4 * M3), T3 = (S3 = a3 ? t2.ceil(S3) : t2.max((0 | S3) - this._minBufferSize, 0)) * M3, C3 = t2.min(4 * T3, g3);
          if (T3) {
            for (var b3 = 0; b3 < T3; b3 += M3)
              this._doProcessBlock(h3, b3);
            u3 = splice(h3).call(h3, 0, T3), m3.sigBytes -= C3;
          }
          return new I2.init(u3, C3);
        }, clone: function clone() {
          var clone2 = M2.clone.call(this);
          return clone2._data = this._data.clone(), clone2;
        }, _minBufferSize: 0 });
        g2.Hasher = E2.extend({ cfg: M2.extend(), init: function init(t3) {
          this.cfg = this.cfg.extend(t3), this.reset();
        }, reset: function reset() {
          E2.reset.call(this), this._doReset();
        }, update: function update(t3) {
          return this._append(t3), this._process(), this;
        }, finalize: function finalize(t3) {
          return t3 && this._append(t3), this._doFinalize();
        }, blockSize: 16, _createHelper: function _createHelper(t3) {
          return function(a3, u3) {
            return new t3.init(u3).finalize(a3);
          };
        }, _createHmacHelper: function _createHmacHelper(t3) {
          return function(a3, u3) {
            return new k2.HMAC.init(t3, u3).finalize(a3);
          };
        } });
        var k2 = h2.algo = {};
        return h2;
      }(Math), Yv = Kv.enc.Utf8, Qv = Kv, Jv = Qv.lib, Xv = Jv.Base, Zv = Jv.WordArray, ef = Qv.algo, tf = ef.MD5, rf = ef.EvpKDF = Xv.extend({ cfg: Xv.extend({ keySize: 4, hasher: tf, iterations: 1 }), init: function init(t2) {
        this.cfg = this.cfg.extend(t2);
      }, compute: function compute(t2, a2) {
        for (var u2, m2 = this.cfg, h2 = m2.hasher.create(), g2 = Zv.create(), M2 = g2.words, I2 = m2.keySize, S2 = m2.iterations; M2.length < I2; ) {
          u2 && h2.update(u2), u2 = h2.update(t2).finalize(a2), h2.reset();
          for (var T2 = 1; T2 < S2; T2++)
            u2 = h2.finalize(u2), h2.reset();
          concat(g2).call(g2, u2);
        }
        return g2.sigBytes = 4 * I2, g2;
      } });
      Qv.EvpKDF = function(t2, a2, u2) {
        return rf.create(u2).compute(t2, a2);
      }, Kv.EvpKDF;
      var nf = Kv, af = nf.lib.WordArray;
      nf.enc.Base64 = { stringify: function stringify(t2) {
        var a2 = t2.words, u2 = t2.sigBytes, m2 = this._map;
        t2.clamp();
        for (var h2 = [], g2 = 0; g2 < u2; g2 += 3)
          for (var M2 = (a2[g2 >>> 2] >>> 24 - g2 % 4 * 8 & 255) << 16 | (a2[g2 + 1 >>> 2] >>> 24 - (g2 + 1) % 4 * 8 & 255) << 8 | a2[g2 + 2 >>> 2] >>> 24 - (g2 + 2) % 4 * 8 & 255, I2 = 0; I2 < 4 && g2 + 0.75 * I2 < u2; I2++)
            h2.push(m2.charAt(M2 >>> 6 * (3 - I2) & 63));
        var S2 = m2.charAt(64);
        if (S2)
          for (; h2.length % 4; )
            h2.push(S2);
        return h2.join("");
      }, parse: function parse(t2) {
        var a2 = t2.length, u2 = this._map, m2 = this._reverseMap;
        if (!m2) {
          m2 = this._reverseMap = [];
          for (var h2 = 0; h2 < u2.length; h2++)
            m2[u2.charCodeAt(h2)] = h2;
        }
        var g2 = u2.charAt(64);
        if (g2) {
          var M2 = indexOf(t2).call(t2, g2);
          M2 !== -1 && (a2 = M2);
        }
        return function parseLoop(t3, a3, u3) {
          for (var m3 = [], h3 = 0, g3 = 0; g3 < a3; g3++)
            if (g3 % 4) {
              var M3 = u3[t3.charCodeAt(g3 - 1)] << g3 % 4 * 2 | u3[t3.charCodeAt(g3)] >>> 6 - g3 % 4 * 2;
              m3[h3 >>> 2] |= M3 << 24 - h3 % 4 * 8, h3++;
            }
          return af.create(m3, h3);
        }(t2, a2, m2);
      }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" }, Kv.enc.Base64, function(t2) {
        t2.lib.Cipher || function() {
          var a2 = t2, u2 = a2.lib, m2 = u2.Base, h2 = u2.WordArray, g2 = u2.BufferedBlockAlgorithm, M2 = a2.enc;
          M2.Utf8;
          var I2 = M2.Base64, S2 = a2.algo.EvpKDF, T2 = u2.Cipher = g2.extend({ cfg: m2.extend(), createEncryptor: function createEncryptor(t3, a3) {
            return this.create(this._ENC_XFORM_MODE, t3, a3);
          }, createDecryptor: function createDecryptor(t3, a3) {
            return this.create(this._DEC_XFORM_MODE, t3, a3);
          }, init: function init(t3, a3, u3) {
            this.cfg = this.cfg.extend(u3), this._xformMode = t3, this._key = a3, this.reset();
          }, reset: function reset() {
            g2.reset.call(this), this._doReset();
          }, process: function process(t3) {
            return this._append(t3), this._process();
          }, finalize: function finalize(t3) {
            return t3 && this._append(t3), this._doFinalize();
          }, keySize: 4, ivSize: 4, _ENC_XFORM_MODE: 1, _DEC_XFORM_MODE: 2, _createHelper: function() {
            function selectCipherStrategy(t3) {
              return typeof t3 == "string" ? x2 : A2;
            }
            return function(t3) {
              return { encrypt: function encrypt(a3, u3, m3) {
                return selectCipherStrategy(u3).encrypt(t3, a3, u3, m3);
              }, decrypt: function decrypt(a3, u3, m3) {
                return selectCipherStrategy(u3).decrypt(t3, a3, u3, m3);
              } };
            };
          }() });
          u2.StreamCipher = T2.extend({ _doFinalize: function _doFinalize() {
            return this._process(true);
          }, blockSize: 1 });
          var C2 = a2.mode = {}, b2 = u2.BlockCipherMode = m2.extend({ createEncryptor: function createEncryptor(t3, a3) {
            return this.Encryptor.create(t3, a3);
          }, createDecryptor: function createDecryptor(t3, a3) {
            return this.Decryptor.create(t3, a3);
          }, init: function init(t3, a3) {
            this._cipher = t3, this._iv = a3;
          } }), E2 = C2.CBC = function() {
            var t3 = b2.extend();
            function xorBlock(t4, a3, u3) {
              var m3, h3 = this._iv;
              h3 ? (m3 = h3, this._iv = void 0) : m3 = this._prevBlock;
              for (var g3 = 0; g3 < u3; g3++)
                t4[a3 + g3] ^= m3[g3];
            }
            return t3.Encryptor = t3.extend({ processBlock: function processBlock(t4, a3) {
              var u3 = this._cipher, m3 = u3.blockSize;
              xorBlock.call(this, t4, a3, m3), u3.encryptBlock(t4, a3), this._prevBlock = slice(t4).call(t4, a3, a3 + m3);
            } }), t3.Decryptor = t3.extend({ processBlock: function processBlock(t4, a3) {
              var u3 = this._cipher, m3 = u3.blockSize, h3 = slice(t4).call(t4, a3, a3 + m3);
              u3.decryptBlock(t4, a3), xorBlock.call(this, t4, a3, m3), this._prevBlock = h3;
            } }), t3;
          }(), k2 = (a2.pad = {}).Pkcs7 = { pad: function pad(t3, a3) {
            for (var u3 = 4 * a3, m3 = u3 - t3.sigBytes % u3, g3 = m3 << 24 | m3 << 16 | m3 << 8 | m3, M3 = [], I3 = 0; I3 < m3; I3 += 4)
              M3.push(g3);
            var S3 = h2.create(M3, m3);
            concat(t3).call(t3, S3);
          }, unpad: function unpad(t3) {
            var a3 = 255 & t3.words[t3.sigBytes - 1 >>> 2];
            t3.sigBytes -= a3;
          } };
          u2.BlockCipher = T2.extend({ cfg: T2.cfg.extend({ mode: E2, padding: k2 }), reset: function reset() {
            var t3;
            T2.reset.call(this);
            var a3 = this.cfg, u3 = a3.iv, m3 = a3.mode;
            this._xformMode == this._ENC_XFORM_MODE ? t3 = m3.createEncryptor : (t3 = m3.createDecryptor, this._minBufferSize = 1), this._mode && this._mode.__creator == t3 ? this._mode.init(this, u3 && u3.words) : (this._mode = t3.call(m3, this, u3 && u3.words), this._mode.__creator = t3);
          }, _doProcessBlock: function _doProcessBlock(t3, a3) {
            this._mode.processBlock(t3, a3);
          }, _doFinalize: function _doFinalize() {
            var t3, a3 = this.cfg.padding;
            return this._xformMode == this._ENC_XFORM_MODE ? (a3.pad(this._data, this.blockSize), t3 = this._process(true)) : (t3 = this._process(true), a3.unpad(t3)), t3;
          }, blockSize: 4 });
          var w2 = u2.CipherParams = m2.extend({ init: function init(t3) {
            this.mixIn(t3);
          }, toString: function toString2(t3) {
            return (t3 || this.formatter).stringify(this);
          } }), R2 = (a2.format = {}).OpenSSL = { stringify: function stringify(t3) {
            var a3, u3, m3, g3 = t3.ciphertext, M3 = t3.salt;
            M3 ? a3 = concat(u3 = concat(m3 = h2.create([1398893684, 1701076831])).call(m3, M3)).call(u3, g3) : a3 = g3;
            return a3.toString(I2);
          }, parse: function parse(t3) {
            var a3, u3 = I2.parse(t3), m3 = u3.words;
            return m3[0] == 1398893684 && m3[1] == 1701076831 && (a3 = h2.create(slice(m3).call(m3, 2, 4)), splice(m3).call(m3, 0, 4), u3.sigBytes -= 16), w2.create({ ciphertext: u3, salt: a3 });
          } }, A2 = u2.SerializableCipher = m2.extend({ cfg: m2.extend({ format: R2 }), encrypt: function encrypt(t3, a3, u3, m3) {
            m3 = this.cfg.extend(m3);
            var h3 = t3.createEncryptor(u3, m3), g3 = h3.finalize(a3), M3 = h3.cfg;
            return w2.create({ ciphertext: g3, key: u3, iv: M3.iv, algorithm: t3, mode: M3.mode, padding: M3.padding, blockSize: t3.blockSize, formatter: m3.format });
          }, decrypt: function decrypt(t3, a3, u3, m3) {
            return m3 = this.cfg.extend(m3), a3 = this._parse(a3, m3.format), t3.createDecryptor(u3, m3).finalize(a3.ciphertext);
          }, _parse: function _parse(t3, a3) {
            return typeof t3 == "string" ? a3.parse(t3, this) : t3;
          } }), N2 = (a2.kdf = {}).OpenSSL = { execute: function execute(t3, a3, u3, m3) {
            var g3;
            m3 || (m3 = h2.random(8));
            var M3 = S2.create({ keySize: a3 + u3 }).compute(t3, m3), I3 = h2.create(slice(g3 = M3.words).call(g3, a3), 4 * u3);
            return M3.sigBytes = 4 * a3, w2.create({ key: M3, iv: I3, salt: m3 });
          } }, x2 = u2.PasswordBasedCipher = A2.extend({ cfg: A2.cfg.extend({ kdf: N2 }), encrypt: function encrypt(t3, a3, u3, m3) {
            var h3 = (m3 = this.cfg.extend(m3)).kdf.execute(u3, t3.keySize, t3.ivSize);
            m3.iv = h3.iv;
            var g3 = A2.encrypt.call(this, t3, a3, h3.key, m3);
            return g3.mixIn(h3), g3;
          }, decrypt: function decrypt(t3, a3, u3, m3) {
            m3 = this.cfg.extend(m3), a3 = this._parse(a3, m3.format);
            var h3 = m3.kdf.execute(u3, t3.keySize, t3.ivSize, a3.salt);
            return m3.iv = h3.iv, A2.decrypt.call(this, t3, a3, h3.key, m3);
          } });
        }();
      }(Kv);
      var sf = Kv, cf = sf.lib.StreamCipher, lf = sf.algo, uf = lf.RC4 = cf.extend({ _doReset: function _doReset() {
        for (var t2 = this._key, a2 = t2.words, u2 = t2.sigBytes, m2 = this._S = [], h2 = 0; h2 < 256; h2++)
          m2[h2] = h2;
        h2 = 0;
        for (var g2 = 0; h2 < 256; h2++) {
          var M2 = h2 % u2, I2 = a2[M2 >>> 2] >>> 24 - M2 % 4 * 8 & 255;
          g2 = (g2 + m2[h2] + I2) % 256;
          var S2 = m2[h2];
          m2[h2] = m2[g2], m2[g2] = S2;
        }
        this._i = this._j = 0;
      }, _doProcessBlock: function _doProcessBlock(t2, a2) {
        t2[a2] ^= generateKeystreamWord.call(this);
      }, keySize: 8, ivSize: 0 });
      function generateKeystreamWord() {
        for (var t2 = this._S, a2 = this._i, u2 = this._j, m2 = 0, h2 = 0; h2 < 4; h2++) {
          u2 = (u2 + t2[a2 = (a2 + 1) % 256]) % 256;
          var g2 = t2[a2];
          t2[a2] = t2[u2], t2[u2] = g2, m2 |= t2[(t2[a2] + t2[u2]) % 256] << 24 - 8 * h2;
        }
        return this._i = a2, this._j = u2, m2;
      }
      sf.RC4 = cf._createHelper(uf);
      var df = lf.RC4Drop = uf.extend({ cfg: uf.cfg.extend({ drop: 192 }), _doReset: function _doReset() {
        uf._doReset.call(this);
        for (var t2 = this.cfg.drop; t2 > 0; t2--)
          generateKeystreamWord.call(this);
      } });
      sf.RC4Drop = cf._createHelper(df);
      var pf = Kv.RC4, mf = function(t2) {
        function V2NIMSettingServiceImpl(a3) {
          var u2;
          return (u2 = t2.call(this, "V2NIMSettingService", a3) || this).offlinePushPlugin = void 0, u2.offlinePushConfig = void 0, u2.authConfig = void 0, u2.aosPushInfo = void 0, u2.appBackgroundOptions = { badge: 0, isBackground: false }, u2.p2pMessageMuteModeChangeHandler = function(t3, a4) {
            u2.emit("onP2PMessageMuteModeChanged", t3, a4), u2.hasUserService && u2.core.V2NIMUserService.model.setAccountMuteMode(t3, a4);
            var m2 = u2.core.V2NIMConversationIdUtil.p2pConversationId(t3), h2 = a4 === 1;
            u2.core.eventBus.emit("V2NIMConversationService/setMute", m2, h2);
          }, u2.setTokenAndBackgroundStateAfterLogin = function(t3) {
            u2.aosPushInfo = t3, u2.logger.log("OfflinePushService: setTokenAndBackgroundStateAfterLogin"), u2.offlinePushPlugin && (u2.logger.log("OfflinePushService: setTokenAndBackgroundStateAfterLogin plugin is provided"), u2.logger.log("OfflinePushService: setTokenAndBackgroundStateAfterLogin pushType is: ", t3 && t3.pushType), u2.regToken(), u2.core.sendCmd("v2SetAppBackground", { isBackground: u2.appBackgroundOptions.isBackground, badge: u2.appBackgroundOptions.badge || 0 }));
          }, u2.core._registerDep(om, "V2NIMConversationIdUtil"), u2.core.options.apiVersion !== "v2" ? Qe(u2) : (u2.setListener(), registerParser({ cmdMap: zv, cmdConfig: Wv }), u2);
        }
        Nt(V2NIMSettingServiceImpl, t2);
        var a2 = V2NIMSettingServiceImpl.prototype;
        return a2.setListener = function setListener() {
          var t3 = this;
          this.core.eventBus.on("V2NIMSettingService/updateBits", function(a3, u2, m2) {
            t3.emit("onTeamMessageMuteModeChanged", a3, u2, m2);
          }), this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", this.setTokenAndBackgroundStateAfterLogin), this.core.eventBus.on("v2NIMUserService/updateMuteList", this.p2pMessageMuteModeChangeHandler), this.core.eventBus.on("forwardReceive/v2NIMSettingService/setP2PMessageMuteMode", this.p2pMessageMuteModeChangeHandler);
        }, a2.emit = function emit(a3) {
          for (var u2, m2, h2, g2, M2 = this.name + "::emit " + a3.toString(), I2 = arguments.length, S2 = new Array(I2 > 1 ? I2 - 1 : 0), T2 = 1; T2 < I2; T2++)
            S2[T2 - 1] = arguments[T2];
          return (u2 = this.logger).log.apply(u2, concat(m2 = ["" + M2]).call(m2, S2)), (h2 = t2.prototype.emit).call.apply(h2, concat(g2 = [this, a3]).call(g2, S2));
        }, a2.getConversationMuteStatus = function getConversationMuteStatus(t3) {
          if (typeof t3 != "string")
            return false;
          var a3 = this.core.V2NIMConversationIdUtil.parseConversationType(t3), u2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(t3);
          return a3 === 3 ? this.getTeamMessageMuteMode(u2, 2) !== 0 : a3 === 2 ? this.getTeamMessageMuteMode(u2, 1) !== 0 : !(a3 !== 1 || !this.hasUserService) && !!this.core.V2NIMUserService.model.muteList.has(u2);
        }, a2.setTeamMessageMuteMode = function setTeamMessageMuteMode(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var m2, h2, g2, M2;
            return Ql.wrap(function _callee$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    if (this.hasTeamService) {
                      I2.next = 2;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "setTeamMessageMuteMode: no team service" } });
                  case 2:
                    return this.checkV2(), validate(Kg, { teamId: t3 }, "", true), validate(Qg, { teamType: a3 }, "", true), validate(Fv, { muteMode: u2 }, "", true), m2 = a3 === 2 ? "v2SuperTeamUpdateSelfMemberInfo" : "v2TeamUpdateSelfMemberInfo", h2 = { teamId: t3, teamType: a3, accountId: this.core.account, bits: u2 }, I2.next = 10, this.core.sendCmd(m2, { teamMember: h2 });
                  case 10:
                    this.core.V2NIMTeamService.memberModel.upsert(h2), this.emit("onTeamMessageMuteModeChanged", t3, a3, u2), g2 = a3 === 1 ? this.core.V2NIMConversationIdUtil.teamConversationId(t3) : this.core.V2NIMConversationIdUtil.superTeamConversationId(t3), M2 = this.getConversationMuteStatus(g2), this.core.eventBus.emit("V2NIMConversationService/setMute", g2, M2);
                  case 15:
                  case "end":
                    return I2.stop();
                }
            }, _callee, this);
          }));
        }, a2.getTeamMessageMuteMode = function getTeamMessageMuteMode(t3, a3) {
          var u2;
          return typeof t3 != "string" || typeof a3 != "number" ? 0 : this.hasTeamService ? 3 & (((u2 = this.core.V2NIMTeamService.memberModel.getById(t3, a3, this.core.account)) === null || u2 === void 0 ? void 0 : u2.bits) || 0) : 0;
        }, a2.setP2PMessageMuteMode = function setP2PMessageMuteMode(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            return Ql.wrap(function _callee2$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    if (this.checkV2(), validate(Gv, { accountId: t3, muteMode: a3 }, "", true), t3 !== this.core.account) {
                      u2.next = 4;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "can not set mute mode for self" } });
                  case 4:
                    return u2.next = 6, this.core.sendCmd("v2SetP2PMessageMuteMode", { accountId: t3, muteMode: a3 === 1 });
                  case 6:
                    this.p2pMessageMuteModeChangeHandler(t3, a3);
                  case 7:
                  case "end":
                    return u2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.getP2PMessageMuteMode = function getP2PMessageMuteMode(t3) {
          return validate({ accountId: { type: "string", required: true, allowEmpty: false } }, { accountId: t3 }, "", true), this.hasUserService && this.core.V2NIMUserService.model.muteList.has(t3) ? 1 : 0;
        }, a2.getRNDeviceInfo = function getRNDeviceInfo() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3 = this;
            return Ql.wrap(function _callee3$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.logger.log("OfflinePushService:getDeviceInfo start"), (t3 = this.offlinePushPlugin) === null || t3 === void 0 || t3.init(Un(this.authConfig), function(t4, u3, m2) {
                      if (a3.logger.log("OfflinePushService:: type: " + t4 + ", tokenName: " + u3 + ", token: " + m2), m2) {
                        var h2 = "", g2 = Jl.getSystemInfo() || {}, M2 = g2.os ? g2.os.toLowerCase() : "";
                        a3.aosPushInfo && a3.aosPushInfo.pushType ? h2 = a3.aosPushInfo.pushType : M2 === "ios" ? h2 = "" : M2 === "android" && (h2 = "8"), a3.pushTokenToServer(h2, m2);
                      } else
                        a3.logger.warn("OfflinePushService:: token is empty. Please check your parameters");
                    }), u2.abrupt("return", new zi(function(t4, u3) {
                      var m2;
                      (m2 = a3.offlinePushPlugin) === null || m2 === void 0 || m2.getDeviceInfo(function(m3) {
                        try {
                          a3.logger.log("OfflinePushService:getDeviceInfo result " + (m3 ? Un(m3) : "")), t4(JSON.parse(m3));
                        } catch (t5) {
                          u3(new Pl({ code: Nl.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "OfflinePushService:getDeviceInfo error" } }));
                        }
                      }), mo(function() {
                        u3(new Pl({ code: Nl.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "OfflinePushService:getDeviceInfo timeout" } }));
                      }, 2e3);
                    }));
                  case 3:
                  case "end":
                    return u2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.getP2PMessageMuteList = function getP2PMessageMuteList() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            return Ql.wrap(function _callee4$(t3) {
              for (; ; )
                switch (t3.prev = t3.next) {
                  case 0:
                    if (!this.hasUserService) {
                      t3.next = 4;
                      break;
                    }
                    return t3.abrupt("return", zi.resolve(jl(this.core.V2NIMUserService.model.muteList)));
                  case 4:
                    return t3.abrupt("return", zi.resolve([]));
                  case 5:
                  case "end":
                    return t3.stop();
                }
            }, _callee4, this);
          }));
        }, a2.setAppBackground = function setAppBackground(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            return Ql.wrap(function _callee5$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.checkV2(), validate({ isBackground: { type: "boolean" }, badge: { type: "number", required: false } }, { isBackground: t3, badge: a3 }, "", true), this.appBackgroundOptions = { isBackground: t3, badge: a3 || 0 }, u2.next = 5, this.core.sendCmd("v2SetAppBackground", { isBackground: t3, badge: a3 || 0 });
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.setPushMobileOnDesktopOnline = function setPushMobileOnDesktopOnline(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            return Ql.wrap(function _callee6$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this.checkV2(), validate({ need: { type: "boolean", required: false } }, { need: t3 }, "", true), t3 = t3 === void 0 || t3, a3.next = 5, this.core.sendCmd("v2SetPushMobileOnDesktopOnline", { tag: { need: t3 } });
                  case 5:
                  case "end":
                    return a3.stop();
                }
            }, _callee6, this);
          }));
        }, a2.setOfflinePushConfig = function setOfflinePushConfig(t3, a3) {
          var u2, m2, h2, g2, M2, I2, S2, T2, C2, b2, E2, k2, w2, R2, A2, N2, x2, O2, P2, L2, V2, U2, D2, q2, B2, G2, H2, j2, $2, z2, W2, K2, Y2, Q2, J2, X2;
          validate(jv, { config: a3 }, "", true), this.logger.log("setOfflinePushConfig", "plugin", t3, "config", a3), this.offlinePushPlugin = t3, this.offlinePushConfig = a3, this.authConfig = { xmAppId: (m2 = (u2 = this.offlinePushConfig) === null || u2 === void 0 ? void 0 : u2.miPush) === null || m2 === void 0 ? void 0 : m2.appId, xmAppKey: (g2 = (h2 = this.offlinePushConfig) === null || h2 === void 0 ? void 0 : h2.miPush) === null || g2 === void 0 ? void 0 : g2.appKey, xmCertificateName: (I2 = (M2 = this.offlinePushConfig) === null || M2 === void 0 ? void 0 : M2.miPush) === null || I2 === void 0 ? void 0 : I2.certificateName, hwAppId: (T2 = (S2 = this.offlinePushConfig) === null || S2 === void 0 ? void 0 : S2.hwPush) === null || T2 === void 0 ? void 0 : T2.appId, hwCertificateName: (b2 = (C2 = this.offlinePushConfig) === null || C2 === void 0 ? void 0 : C2.hwPush) === null || b2 === void 0 ? void 0 : b2.certificateName, oppoAppId: (k2 = (E2 = this.offlinePushConfig) === null || E2 === void 0 ? void 0 : E2.oppoPush) === null || k2 === void 0 ? void 0 : k2.appId, oppoAppKey: (R2 = (w2 = this.offlinePushConfig) === null || w2 === void 0 ? void 0 : w2.oppoPush) === null || R2 === void 0 ? void 0 : R2.appKey, oppoAppSecret: (N2 = (A2 = this.offlinePushConfig) === null || A2 === void 0 ? void 0 : A2.oppoPush) === null || N2 === void 0 ? void 0 : N2.secret, oppoCertificateName: (O2 = (x2 = this.offlinePushConfig) === null || x2 === void 0 ? void 0 : x2.oppoPush) === null || O2 === void 0 ? void 0 : O2.certificateName, vivoAppId: (L2 = (P2 = this.offlinePushConfig) === null || P2 === void 0 ? void 0 : P2.vivoPush) === null || L2 === void 0 ? void 0 : L2.appId, vivoAppKey: (U2 = (V2 = this.offlinePushConfig) === null || V2 === void 0 ? void 0 : V2.vivoPush) === null || U2 === void 0 ? void 0 : U2.appKey, vivoCertificateName: (q2 = (D2 = this.offlinePushConfig) === null || D2 === void 0 ? void 0 : D2.vivoPush) === null || q2 === void 0 ? void 0 : q2.certificateName, fcmCertificateName: (G2 = (B2 = this.offlinePushConfig) === null || B2 === void 0 ? void 0 : B2.fcmPush) === null || G2 === void 0 ? void 0 : G2.certificateName, mzAppId: (j2 = (H2 = this.offlinePushConfig) === null || H2 === void 0 ? void 0 : H2.mzPush) === null || j2 === void 0 ? void 0 : j2.appId, mzAppKey: (z2 = ($2 = this.offlinePushConfig) === null || $2 === void 0 ? void 0 : $2.mzPush) === null || z2 === void 0 ? void 0 : z2.appKey, mzCertificateName: (K2 = (W2 = this.offlinePushConfig) === null || W2 === void 0 ? void 0 : W2.mzPush) === null || K2 === void 0 ? void 0 : K2.certificateName, apnsCertificateName: (Q2 = (Y2 = this.offlinePushConfig) === null || Y2 === void 0 ? void 0 : Y2.apns) === null || Q2 === void 0 ? void 0 : Q2.certificateName, honorCertificateName: (X2 = (J2 = this.offlinePushConfig) === null || J2 === void 0 ? void 0 : J2.honorPush) === null || X2 === void 0 ? void 0 : X2.certificateName };
        }, a2.regToken = function regToken() {
          var t3 = this, a3 = Jl.getSystemInfo() || {}, u2 = a3.os ? a3.os.toLowerCase() : "";
          if (this.logger.log("OfflinePushService: os", u2), u2 === "ios" || u2 === "android")
            if (!this.offlinePushPlugin || Jl.platform === "UNIAPP" && typeof this.offlinePushPlugin.getDeviceToken != "function" || Jl.platform === "React Native" && u2 === "android" && typeof this.offlinePushPlugin.init != "function" || Jl.platform === "React Native" && u2 === "ios" && typeof this.offlinePushPlugin.checkPermissions != "function")
              this.logger.warn("OfflinePushService: plugin is not correct, please check your plugin according to Yunxin Official Documentation");
            else {
              var m2;
              if (Jl.platform === "React Native" && Jl.envPayload.AppState)
                Jl.envPayload.AppState.addEventListener("change", bind$1(m2 = this.handleRNAppStateChange).call(m2, this));
              var h2 = "";
              this.aosPushInfo && this.aosPushInfo.pushType ? h2 = this.aosPushInfo.pushType : u2 === "ios" ? h2 = "" : u2 === "android" && (h2 = "8"), this.logger.log("OfflinePushService:: prepare to get device token. suggestPushType: " + h2), this.logger.log("OfflinePushService push config", Un(this.authConfig, null, 2), "platform", Jl.platform), Jl.platform === "UNIAPP" ? this.offlinePushPlugin.getDeviceToken({ suggestPushType: h2, config: this.authConfig }, function(a4) {
                a4 ? (t3.logger.log("OfflinePushService:: token is :" + a4), t3.pushTokenToServer(h2, a4)) : t3.logger.warn("OfflinePushService:: token is empty. Please check your parameters");
              }) : Jl.platform === "React Native" && u2 === "android" ? (this.logger.log("OfflinePushService:: onLogin", this.core.account, typeof h2, h2), this.offlinePushPlugin.onLogin(this.core.account, Uu(h2), false, "")) : Jl.platform === "React Native" && u2 === "ios" ? this.offlinePushPlugin.checkPermissions(function() {
                t3.logger.log("OfflinePushService addEventListener requestPermissions");
                try {
                  t3.offlinePushPlugin.requestPermissions();
                } catch (a4) {
                  t3.logger.log("OfflinePushService:: requestPermissions error", a4);
                }
                t3.offlinePushPlugin.addEventListener("register", function(a4) {
                  t3.logger.log("OfflinePushService:: ios token: " + a4), t3.pushTokenToServer(h2, a4);
                }), t3.offlinePushPlugin.addEventListener("registrationError", function(a4) {
                  t3.logger.log("OfflinePushService:: ios registerError", a4);
                });
              }) : this.logger.error("OfflinePushService:: platform is not supported. Please check your parameters. Platform: " + Jl.platform + ". os: " + u2);
            }
          else
            this.logger.warn("OfflinePushService: only Android or IOS support offline push");
        }, a2.pushTokenToServer = function pushTokenToServer(t3, a3) {
          var u2, m2, h2, g2, M2, I2, S2, T2, C2 = "", b2 = this.offlinePushConfig;
          switch (t3) {
            case "5":
              C2 = (u2 = b2 == null ? void 0 : b2.miPush) === null || u2 === void 0 ? void 0 : u2.certificateName;
              break;
            case "6":
              C2 = (m2 = b2 == null ? void 0 : b2.hwPush) === null || m2 === void 0 ? void 0 : m2.certificateName;
              break;
            case "7":
              C2 = (h2 = b2 == null ? void 0 : b2.mzPush) === null || h2 === void 0 ? void 0 : h2.certificateName;
              break;
            case "8":
              C2 = (g2 = b2 == null ? void 0 : b2.fcmPush) === null || g2 === void 0 ? void 0 : g2.certificateName;
              break;
            case "9":
              C2 = (M2 = b2 == null ? void 0 : b2.vivoPush) === null || M2 === void 0 ? void 0 : M2.certificateName;
              break;
            case "10":
              C2 = (I2 = b2 == null ? void 0 : b2.oppoPush) === null || I2 === void 0 ? void 0 : I2.certificateName;
              break;
            case "11":
              C2 = (S2 = b2 == null ? void 0 : b2.honorPush) === null || S2 === void 0 ? void 0 : S2.certificateName;
              break;
            default:
              C2 = (T2 = b2 == null ? void 0 : b2.apns) === null || T2 === void 0 ? void 0 : T2.certificateName;
          }
          if (C2 === "" || C2 === void 0)
            this.logger.warn("OfflinePushService:: certificate name is empty for push type: ", t3);
          else
            try {
              if (Jl.platform === "UNIAPP") {
                var E2 = Yv.parse("557d1e3cafa43e2589a588270c53d56f"), k2 = Yv.stringify(pf.decrypt(a3, E2));
                this.logger.log("OfflinePushService:: token", k2), this.core.sendCmd("v2SetDeviceToken", { certificateName: C2, pushDeviceToken: k2, pushkit: 0 });
              } else
                this.core.sendCmd("v2SetDeviceToken", { certificateName: C2, pushDeviceToken: a3, pushkit: 0 });
            } catch (t4) {
              return this.logger.log("OfflinePushService:: decrypt error", t4), void this.logger.warn("OfflinePushService:: token before decrypt", a3);
            }
        }, a2.handleRNAppStateChange = function handleRNAppStateChange(t3) {
          this.logger.log("push::handleAppStateChange: pushConfig ios/aos; state: " + t3), this.appBackgroundOptions = { badge: this.core.V2NIMConversationService.getTotalUnreadCount(), isBackground: t3 === "background" || t3 === "inactive" }, this.setAppBackground(this.appBackgroundOptions.isBackground, this.appBackgroundOptions.badge);
        }, Ye(V2NIMSettingServiceImpl, [{ key: "hasUserService", get: function get2() {
          var t3;
          return !!((t3 = this.core.V2NIMUserService) === null || t3 === void 0 ? void 0 : t3.name);
        } }, { key: "hasTeamService", get: function get2() {
          var t3;
          return !!((t3 = this.core.V2NIMTeamService) === null || t3 === void 0 ? void 0 : t3.name);
        } }]), V2NIMSettingServiceImpl;
      }(ip);
      _export({ target: "Number", stat: true }, { isNaN: function isNaN2(t2) {
        return t2 != t2;
      } });
      var hf, gf = j.Number.isNaN, vf = invert({ none: 0, normal: 1, all: 3 }), yf = { normal: 0, advanced: 1 }, _f = invert(yf), Mf = invert({ normal: 0, owner: 1, manager: 2 }), If = { noVerify: 0, needVerify: 1, rejectAll: 2 }, Sf = invert(If), Tf = { needVerify: 0, noVerify: 1 }, Cf = invert(Tf), bf = { manager: 0, all: 1 }, Ef = invert(bf), kf = { manager: 0, all: 1 }, wf = invert(kf), Rf = { manager: 0, all: 1 }, Af = invert(Rf);
      function formatTeam(t2) {
        var a2, u2 = ["teamId"], m2 = ["level", "memberNum", "memberUpdateTime", "createTime", "updateTime"], h2 = ["valid", "validToCurrentUser", "mute"], g2 = { type: _f, muteType: vf, joinMode: Sf, beInviteMode: Cf, inviteMode: Ef, updateTeamMode: wf, updateExtMode: Af };
        t2.bits;
        var M2 = __rest(t2, ["bits"]);
        return forEach$1(u2).call(u2, function(t3) {
          M2[t3] && (M2[t3] = M2[t3].toString());
        }), forEach$1(m2).call(m2, function(t3) {
          M2[t3] !== void 0 && (M2[t3] = Uu(M2[t3]));
        }), forEach$1(h2).call(h2, function(t3) {
          M2[t3] !== void 0 && (M2[t3] = Uu(M2[t3]) === 1);
        }), forEach$1(a2 = Ht(g2)).call(a2, function(t3) {
          M2[t3] !== void 0 && (M2[t3] = g2[t3][M2[t3]] || M2[t3]);
        }), M2;
      }
      function formatTeams(t2) {
        return t2 && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return formatTeam(t3);
        }) : [];
      }
      function generateTeam(t2) {
        var a2, u2 = Dt({}, t2), m2 = ["avatar", "name", "intro", "announcement", "ext"], h2 = { type: yf, joinMode: If, beInviteMode: Tf, inviteMode: bf, updateTeamMode: kf, updateExtMode: Rf };
        return forEach$1(m2).call(m2, function(t3) {
          u2[t3] !== void 0 && (u2[t3] = u2[t3].toString());
        }), forEach$1(a2 = Ht(h2)).call(a2, function(t3) {
          u2[t3] !== void 0 && (u2[t3] = h2[t3][u2[t3]]);
        }), u2;
      }
      function generatorTeamMemberForCmd(t2) {
        var a2 = ["teamId", "ext", "account", "nickInTeam"], u2 = {};
        return t2.bitConfigMask !== void 0 && (u2.bits = Uu(t2.bitConfigMask)), forEach$1(a2).call(a2, function(a3) {
          t2[a3] && (u2[a3] = t2[a3].toString());
        }), Object.prototype.hasOwnProperty.call(t2, "nickInTeam") && (u2.nickInTeam = t2.nickInTeam), u2;
      }
      function formatTeamMember(t2) {
        var a2, u2 = ["teamId"], m2 = ["joinTime", "updateTime", "bitConfigMask"], h2 = ["active", "valid", "mute"], g2 = { type: Mf }, M2 = t2.bits, I2 = __rest(t2, ["bits"]);
        return M2 !== void 0 && (I2.muteTeam = Uu(M2) === 1, I2.bitConfigMask = M2), I2.id = I2.teamId + "-" + I2.account, forEach$1(u2).call(u2, function(t3) {
          I2[t3] && (I2[t3] = I2[t3].toString());
        }), forEach$1(m2).call(m2, function(t3) {
          I2[t3] !== void 0 && (I2[t3] = Uu(I2[t3]));
        }), forEach$1(h2).call(h2, function(t3) {
          I2[t3] !== void 0 && (I2[t3] = Uu(I2[t3]) === 1);
        }), forEach$1(a2 = Ht(g2)).call(a2, function(t3) {
          I2[t3] !== void 0 && (I2[t3] = g2[t3][I2[t3]] || I2[t3]);
        }), I2;
      }
      function formatTeamMembers(t2) {
        return t2 && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return formatTeamMember(t3);
        }) : [];
      }
      function generatorMemberByTeam(t2, a2, u2) {
        return u2 === void 0 && (u2 = "normal"), { id: t2.teamId + "-" + a2, teamId: t2.teamId, account: a2, type: u2, nickInTeam: "", muteTeam: false, mute: false, joinTime: t2.memberUpdateTime, updateTime: t2.memberUpdateTime, active: true, valid: true };
      }
      function generatorMembersByTeam(t2, a2, u2) {
        return u2 === void 0 && (u2 = "normal"), a2 && a2.length > 0 ? map$6(a2).call(a2, function(a3) {
          return generatorMemberByTeam(t2, a3, u2);
        }) : [];
      }
      function formatUser(t2) {
        var a2 = Dt({}, t2);
        return a2.createTime && (a2.createTime = +a2.createTime), a2.updateTime && (a2.updateTime = +a2.updateTime), a2.gender && (a2.gender = hf[+a2.gender]), a2;
      }
      !function(t2) {
        t2[t2.unknown = 0] = "unknown", t2[t2.male = 1] = "male", t2[t2.female = 2] = "female";
      }(hf || (hf = {}));
      var Nf = { "8_1": "createTeam", "8_5": "addTeamMembers", "8_6": "removeTeamMembers", "8_7": "updateTeamInfo", "8_8": "leaveTeam", "8_9": "getTeamInfo", "8_10": "getTeams", "8_11": "getTeamMembers", "8_12": "dismissTeam", "8_13": "applyTeam", "8_14": "passTeamApply", "8_15": "rejectTeamApply", "8_16": "addTeamManagers", "8_17": "removeTeamManagers", "8_18": "transferTeam", "8_19": "updateMyMemberInfo", "8_20": "updateNickInTeam", "8_21": "acceptTeamInvite", "8_22": "rejectTeamInvite", "8_25": "muteTeamMember", "8_27": "getMutedTeamMembers", "8_28": "sendTeamMsgReceipt", "8_29": "getTeamMsgReads", "8_30": "getTeamMsgReadAccounts", "8_31": "notifyTeamMsgReceipts", "8_32": "muteTeam", "8_33": "getTeamMemberInvitorAccid", "8_34": "getTeamsById", "8_101": "syncCreateTeam", "8_109": "syncTeams", "8_119": "syncUpdateTeamMember", "8_126": "syncMyTeamMembers" }, xf = { team: { teamId: 1, name: 3, type: 4, owner: 5, level: 6, selfCustom: 7, valid: 8, memberNum: 9, memberUpdateTime: 10, createTime: 11, updateTime: 12, validToCurrentUser: 13, intro: 14, announcement: 15, joinMode: 16, bits: 17, ext: 18, serverExt: 19, avatar: 20, beInviteMode: 21, inviteMode: 22, updateTeamMode: 23, updateExtMode: 24, mute: 100, muteType: 101 }, teamMsgReceiptTag: { teamId: 0, idServer: 1, read: 100, unread: 101, idClient: 102, account: 103 }, teamMember: { teamId: 1, account: 3, type: 4, nickInTeam: 5, bits: 7, active: 8, valid: 9, joinTime: 10, updateTime: 11, ext: 12, mute: 13, invitorAccid: 14 } }, Of = invertSerializeMap(xf), Pf = { getTeamInfo: { sid: 8, cid: 9, service: "team", params: [{ type: "Long", name: "teamId" }], response: [{ type: "Property", name: "team", reflectMapper: Of.team }] }, getTeams: { sid: 8, cid: 10, service: "team", params: [{ type: "Long", name: "timetag" }], response: [{ type: "PropertyArray", name: "teams", reflectMapper: Of.team }, { type: "Long", name: "timetag" }], ignoreErrCodes: [803] }, createTeam: { sid: 8, cid: 1, service: "team", params: [{ type: "Property", name: "team", reflectMapper: xf.team }, { type: "StrArray", name: "accounts" }, { type: "String", name: "ps" }], response: [{ type: "Property", name: "team", reflectMapper: Of.team }, { type: "StrArray", name: "abortedAccidList" }] }, sendTeamMsgReceipt: { sid: 8, cid: 28, service: "team", params: [{ type: "PropertyArray", name: "teamMsgReceipts", reflectMapper: xf.teamMsgReceiptTag }], response: [{ type: "PropertyArray", name: "teamMsgReceipts", reflectMapper: Of.teamMsgReceiptTag }] }, getTeamMsgReads: { sid: 8, cid: 29, service: "team", params: [{ type: "PropertyArray", name: "teamMsgReceipts", reflectMapper: xf.teamMsgReceiptTag }], response: [{ type: "PropertyArray", name: "teamMsgReceipts", reflectMapper: Of.teamMsgReceiptTag }] }, getTeamMsgReadAccounts: { sid: 8, cid: 30, service: "team", params: [{ type: "Property", name: "teamMsgReceiptTag", reflectMapper: xf.teamMsgReceiptTag }], response: [{ type: "Property", name: "teamMsgReceipt", reflectMapper: Of.teamMsgReceiptTag }, { type: "StrArray", name: "readAccounts" }, { type: "StrArray", name: "unreadAccounts" }] }, notifyTeamMsgReceipts: { sid: 8, cid: 31, service: "team", response: [{ type: "PropertyArray", name: "teamMsgReceipts", reflectMapper: Of.teamMsgReceiptTag }] }, dismissTeam: { sid: 8, cid: 12, service: "team", params: [{ type: "Long", name: "teamId" }] }, leaveTeam: { sid: 8, cid: 8, service: "team", params: [{ type: "Long", name: "teamId" }] }, transferTeam: { sid: 8, cid: 18, service: "team", params: [{ type: "Long", name: "teamId" }, { type: "String", name: "account" }, { type: "Bool", name: "leave" }] }, updateTeamInfo: { sid: 8, cid: 7, service: "team", params: [{ type: "Property", name: "team", reflectMapper: xf.team }], response: [{ type: "Long", name: "id" }, { type: "Long", name: "time" }] }, getTeamsById: { sid: 8, cid: 34, service: "team", params: [{ type: "LongArray", name: "teamIds" }], response: [{ type: "PropertyArray", name: "teams", reflectMapper: Of.team }, { type: "LongArray", name: "tids" }], ignoreErrCodes: [816] }, getTeamMembers: { sid: 8, cid: 11, service: "team", params: [{ type: "Long", name: "teamId" }, { type: "Long", name: "timetag" }], response: [{ type: "Long", name: "teamId" }, { type: "PropertyArray", name: "teamMembers", reflectMapper: Of.teamMember }, { type: "Long", name: "timetag" }] }, getMutedTeamMembers: { sid: 8, cid: 27, service: "team", params: [{ type: "Long", name: "teamId" }], response: [{ type: "Long", name: "teamId" }, { type: "PropertyArray", name: "teamMembers", reflectMapper: Of.teamMember }] }, addTeamMembers: { sid: 8, cid: 5, service: "team", params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }, { type: "String", name: "ps" }, { type: "String", name: "attach" }], response: [{ type: "Long", name: "time" }, { type: "StrArray", name: "abortedAccidList" }] }, removeTeamMembers: { sid: 8, cid: 6, service: "team", params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, applyTeam: { sid: 8, cid: 13, service: "team", params: [{ type: "Long", name: "teamId" }, { type: "String", name: "ps" }], response: [{ type: "Property", name: "team", reflectMapper: Of.team }] }, addTeamManagers: { sid: 8, cid: 16, service: "team", params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, removeTeamManagers: { sid: 8, cid: 17, service: "team", params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, updateMyMemberInfo: { sid: 8, cid: 19, service: "team", params: [{ type: "Property", name: "teamMember", reflectMapper: xf.teamMember }] }, updateNickInTeam: { sid: 8, cid: 20, service: "team", params: [{ type: "Property", name: "teamMember", reflectMapper: xf.teamMember }] }, muteTeamMember: { sid: 8, cid: 25, service: "team", params: [{ type: "Long", name: "teamId" }, { type: "String", name: "account" }, { type: "Int", name: "mute" }] }, getTeamMemberInvitorAccid: { sid: 8, cid: 33, service: "team", params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }], response: [{ type: "StrStrMap", name: "accountsMap" }] }, muteTeam: { sid: 8, cid: 32, service: "team", params: [{ type: "Long", name: "teamId" }, { type: "Int", name: "mute" }] }, passTeamApply: { sid: 8, cid: 14, service: "team", params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }] }, rejectTeamApply: { sid: 8, cid: 15, service: "team", params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, acceptTeamInvite: { sid: 8, cid: 21, service: "team", params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }] }, rejectTeamInvite: { sid: 8, cid: 22, service: "team", params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, syncTeams: { sid: 8, cid: 109, service: "team", response: [{ type: "Long", name: "timetag" }, { type: "PropertyArray", name: "teams", reflectMapper: Of.team }] }, syncCreateTeam: { sid: 8, cid: 101, service: "team", response: [{ type: "Property", name: "team", reflectMapper: Of.team }] }, syncUpdateTeamMember: { sid: 8, cid: 119, service: "team", response: [{ type: "Property", name: "teamMember", reflectMapper: Of.teamMember }] }, syncMyTeamMembers: { sid: 8, cid: 126, ext: "sync", service: "team", response: [{ type: "PropertyArray", name: "teamMembers", entity: "teamMember", reflectMapper: Of.teamMember }, { type: "Long", name: "timetag" }] } }, Lf = { "3_7": "getUsersNameCardFromServer", "3_10": "updateMyNameCard", "3_109": "syncMyNameCard", "3_110": "onUpdateMyNameCard", "3_3": "setBlack", "3_103": "onUpdateBlackList", "3_5": "setMute", "3_105": "onUpdateMuteList", "3_8": "syncRelations" }, Vf = { user: { account: 1, nick: 3, avatar: 4, signature: 5, gender: 6, email: 7, birth: 8, tel: 9, ext: 10, createTime: 12, updateTime: 13 }, relationMember: { account: 0, isMuted: 1, isBlack: 2, createTime: 3, updateTime: 4 } }, Uf = invertSerializeMap(Vf), Df = { syncMyNameCard: { sid: 3, cid: 109, service: "user", response: [{ type: "Property", name: "user", reflectMapper: Uf.user }, { type: "Long", name: "timetag" }] }, setBlack: { service: "user", sid: 3, cid: 3, params: [{ type: "String", name: "account" }, { type: "Bool", name: "isAdd" }] }, onUpdateBlackList: { service: "user", sid: 3, cid: 103, response: [{ type: "String", name: "account" }, { type: "Bool", name: "isAdd" }] }, setMute: { service: "user", sid: 3, cid: 5, params: [{ type: "String", name: "account" }, { type: "Bool", name: "isAdd" }] }, onUpdateMuteList: { service: "user", sid: 3, cid: 105, response: [{ type: "String", name: "account" }, { type: "Bool", name: "isAdd" }] }, syncRelations: { service: "user", sid: 3, cid: 8, params: [{ type: "Long", name: "timetag" }], response: [{ type: "PropertyArray", name: "list", reflectMapper: Uf.relationMember }, { type: "Long", name: "timetag" }] }, getUsersNameCardFromServer: { service: "user", sid: 3, cid: 7, params: [{ type: "StrArray", name: "accounts" }], response: [{ type: "PropertyArray", name: "users", reflectMapper: Uf.user }] }, updateMyNameCard: { service: "user", sid: 3, cid: 10, params: [{ type: "Property", name: "user", reflectMapper: Vf.user }], response: [{ type: "Long", name: "timetag" }] }, onUpdateMyNameCard: { service: "user", sid: 3, cid: 110, response: [{ type: "Property", name: "user", reflectMapper: Uf.user }] } }, qf = { needPush: { type: "boolean", required: false }, needPushBadge: { type: "boolean", required: false }, needPushNick: { type: "boolean", required: false }, pushContent: { type: "string", required: false }, pushPayload: { type: "string", required: false }, needForcePush: { type: "boolean", required: false }, forcePushIDsList: { type: "string", allowEmpty: false, required: false }, forcePushContent: { type: "string", allowEmpty: false, required: false } }, Bf = { function: { type: "string", required: false }, topic: { type: "string", required: false }, customContent: { type: "string", required: false }, account: { type: "string", required: false } };
      function _createForOfIteratorHelperLoose$4(t2, a2) {
        var u2, m2 = es !== void 0 && $l(t2) || t2["@@iterator"];
        if (m2)
          return bind$1(u2 = (m2 = m2.call(t2)).next).call(u2, m2);
        if (Dn(t2) || (m2 = function _unsupportedIterableToArray$4(t3, a3) {
          if (t3) {
            var u3;
            if (typeof t3 == "string")
              return _arrayLikeToArray$4(t3, a3);
            var m3 = slice(u3 = {}.toString.call(t3)).call(u3, 8, -1);
            return m3 === "Object" && t3.constructor && (m3 = t3.constructor.name), m3 === "Map" || m3 === "Set" ? jl(t3) : m3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m3) ? _arrayLikeToArray$4(t3, a3) : void 0;
          }
        }(t2)) || a2 && t2 && typeof t2.length == "number") {
          m2 && (t2 = m2);
          var h2 = 0;
          return function() {
            return h2 >= t2.length ? { done: true } : { done: false, value: t2[h2++] };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _arrayLikeToArray$4(t2, a2) {
        (a2 == null || a2 > t2.length) && (a2 = t2.length);
        for (var u2 = 0, m2 = Array(a2); u2 < a2; u2++)
          m2[u2] = t2[u2];
        return m2;
      }
      var Ff = { subType: { type: "string" }, setting: { resendFlag: { type: "boolean" }, envConfig: { type: "string" }, needSaveHistory: { type: "boolean" }, needRoaming: { type: "boolean" }, needOffline: { type: "boolean" }, needSelfSync: { type: "boolean" }, needRouted: { type: "boolean" }, needUpdateSession: { type: "boolean" }, isMuted: { type: "boolean" } }, antiSpamInfo: { needAntiSpam: { type: "boolean" }, antiSpamContent: { type: "string" }, antiSpamBIZID: { type: "string" }, clientAntispamHitting: { type: "boolean" }, antiSpamUsingYidun: { type: "boolean" }, yidunCallbackURL: { type: "string" }, yidunAntiCheating: { type: "string" }, yidunAntiSpamExtension: { type: "string" }, yidunAntiSpamResult: { type: "string" } }, pushInfo: qf, robotInfo: Bf, teamSpecializationInfo: { needACK: { type: "boolean" }, isACKSent: { type: "boolean" }, ackSnapshot: { type: "number" } }, threadMessageInfo: { replyMsgFromAccount: { type: "string" }, replyMsgToAccount: { type: "string" }, replyMsgTime: { type: "number" }, replyMsgIdServer: { type: "string" }, replyMsgIdClient: { type: "string" }, threadMsgFromAccount: { type: "string" }, threadMsgToAccount: { type: "string" }, threadMsgTime: { type: "number" }, threadMsgIdServer: { type: "string" }, threadMsgIdClient: { type: "string" } } }, Gf = { 0: "addTeamMembers", 1: "removeTeamMembers", 2: "leaveTeam", 3: "updateTeam", 4: "dismissTeam", 5: "passTeamApply", 6: "transferTeam", 7: "addTeamManagers", 8: "removeTeamManagers", 9: "acceptTeamInvite", 10: "updateTeamMemberMute", 101: "netcallMiss", 102: "netcallBill", 103: "netcallReject", 401: "addSuperTeamMembers", 402: "removeSuperTeamMembers", 403: "leaveSuperTeam", 404: "updateSuperTeam", 405: "dismissSuperTeam", 406: "transferSuperTeam", 407: "addSuperTeamManagers", 408: "removeSuperTeamManagers", 409: "updateSuperTeamMembersMute", 410: "passSuperTeamApply", 411: "acceptSuperTeamInvite" };
      function getSessionId(t2, a2) {
        return Dd[t2.scene] + "-" + (t2.to === a2 ? t2.from : t2.to);
      }
      function msgFlow(t2, a2) {
        return t2.from === a2 ? t2.to === a2 ? "in" : "out" : "in";
      }
      function formatMsg$1(t2, a2) {
        var u2 = a2.account, m2 = a2.featureValue, h2 = a2.statusValue, g2 = a2.sessionAck, M2 = a2.msgReceiptTime, I2 = Dd[t2.scene], S2 = t2.to === u2 ? t2.from : t2.to, T2 = Fd.default, C2 = Bd.unread;
        Uu(t2.isInBlackList) > 0 ? (C2 = Bd.refused, delete t2.isInBlackList) : C2 = t2.from === u2 ? M2 && M2 >= +t2.time ? Bd.receipt : Bd.sent : g2 && g2 >= +t2.time ? Bd.read : Bd.unread;
        var b2 = Dt(Dt({}, format(Ff, t2)), { scene: I2, type: Ud[t2.type], fromClientType: qd[t2.fromClientType], flow: msgFlow(t2, u2), target: S2, to: t2.to, from: t2.from, time: t2.time ? +t2.time : void 0, userUpdateTime: t2.userUpdateTime ? +t2.userUpdateTime : void 0, idClient: t2.idClient, sessionId: I2 + "-" + S2, status: Bd[h2 || C2], feature: Fd[m2 || T2] });
        if (typeof b2.attach == "string")
          try {
            b2.attach = JSON.parse(b2.attach);
          } catch (t3) {
          }
        return b2.type === "notification" && (b2.attach = b2.attach ? function formatNotificationAttach(t3) {
          var a3, u3 = {};
          if (u3.type = Gf[t3.id] || t3.id, !t3.data)
            return u3;
          var m3, h3 = { ids: "accounts", id: "account", attach: "custom", channel: "channelId", calltype: "netcallType", mute: "mute", duration: "duration", time: "time", from: "from", ext: "ext" }, g3 = t3.data;
          return forEach$1(a3 = Ht(h3)).call(a3, function(t4) {
            g3[t4] !== void 0 && (u3[h3[t4]] = g3[t4]);
          }), g3.tinfo && (u3.team = formatTeam(deserialize(g3.tinfo, Of.team))), g3.uinfos && (u3.users = map$6(m3 = g3.uinfos).call(m3, function(t4) {
            return formatUser(deserialize(t4, Uf.user));
          })), g3.mute !== void 0 && (u3.mute = Uu(g3.mute) === 1), u3;
        }(b2.attach) : {}), b2;
      }
      function formatMsgs$1(t2, a2) {
        return t2 && t2.length > 0 ? removeDupMsgsByIdClient(map$6(t2).call(t2, function(t3) {
          return formatMsg$1(t3, a2);
        })) : [];
      }
      function removeDupMsgsByIdClient(t2) {
        for (var a2, u2, m2 = {}, h2 = _createForOfIteratorHelperLoose$4(t2); !(u2 = h2()).done; ) {
          var g2 = u2.value, M2 = m2[g2.idClient];
          M2 && M2.time > g2.time || (m2[g2.idClient] = g2);
        }
        return map$6(a2 = Ht(m2)).call(a2, function(t3) {
          return m2[t3];
        });
      }
      function processPushInfoInMsg(t2, a2) {
        a2 === void 0 && (a2 = true);
        var u2 = Dt({}, t2);
        if (u2.pushInfo && a2) {
          for (var m2 in u2.pushInfo)
            typeof u2.pushInfo[m2] == "boolean" ? u2[m2] = u2.pushInfo[m2] ? 1 : 0 : u2[m2] = u2.pushInfo[m2];
          delete u2.pushInfo;
        }
        return u2.scene === Dd.team && u2.needForcePush && (u2.forcePushContent = u2.forcePushContent || u2.pushContent, u2.forcePushIDsList = u2.forcePushIDsList ? u2.forcePushIDsList : "#%@all@%#"), u2;
      }
      function generatorMsgForCmd$1(t2, a2, u2, m2) {
        t2.onSendBefore, t2.onUploadStart, t2.onUploadDone;
        var h2 = t2.replyMsg, g2 = __rest(t2, ["onSendBefore", "onUploadStart", "onUploadDone", "replyMsg"]), M2 = Dt(Dt({}, formatReverse(Ff, g2)), { scene: Dd[t2.scene], type: Ud[t2.type], from: a2, fromClientType: 16, fromDeviceId: u2, fromNick: m2 == null ? void 0 : m2.nick, userUpdateTime: m2 == null ? void 0 : m2.updateTime, status: Bd[Bd.sending] });
        if (M2.idClient = M2.resendFlag ? t2.idClient : Iu(), !M2.idClient)
          throw new Ul("idClient is required to resend a message", "idClient", "required");
        return M2 = processPushInfoInMsg(M2, false), h2 && (M2.replyMsgFromAccount = h2.from, M2.replyMsgToAccount = h2.to, M2.replyMsgTime = +h2.time, M2.replyMsgIdServer = h2.idServer, M2.replyMsgIdClient = h2.idClient, M2.threadMsgFromAccount = h2.from, M2.threadMsgToAccount = h2.to, M2.threadMsgTime = +h2.time, M2.threadMsgIdServer = h2.idServer, M2.threadMsgIdClient = h2.idClient, h2.threadMessageInfo && h2.threadMessageInfo.threadMsgIdServer && (M2.threadMsgFromAccount = h2.threadMessageInfo.threadMsgFromAccount, M2.threadMsgToAccount = h2.threadMessageInfo.threadMsgToAccount, M2.threadMsgTime = h2.threadMessageInfo.threadMsgTime, M2.threadMsgIdServer = h2.threadMessageInfo.threadMsgIdServer, M2.threadMsgIdClient = h2.threadMessageInfo.threadMsgIdClient)), M2;
      }
      function formatDeletedMsgs(t2, a2) {
        return map$6(t2).call(t2, function(t3) {
          var u2;
          return u2 = a2 || (gf(Uu(t3.scene)) ? t3.scene : Uu(t3.scene) === 1 ? "p2p" : "team"), { deletedTime: Uu(t3.time), from: t3.from, idClient: t3.deletedIdClient || t3.idClient, idServer: t3.deletedIdServer || t3.idServer, scene: u2, time: Uu(t3.deletedMsgCreateTime), to: t3.to, ext: typeof t3.ext == "string" ? t3.ext : null };
        });
      }
      function reverse(t2) {
        for (var a2 = [], u2 = (t2 = t2 || []).length - 1; u2 >= 0; u2--)
          a2.push(t2[u2]);
        return a2;
      }
      var Hf, jf, $f, zf = function() {
        function ModuleService(t2) {
          this.core = t2;
        }
        return ModuleService.prototype.processBroadcastMsg = function processBroadcastMsg(t2) {
          var a2 = map$6(t2).call(t2, function(t3) {
            return Dt(Dt({}, t3), { time: Uu(t3.time) });
          });
          return this.core.sendCmd("batchMarkRead", { sid: 7, cid: 17, ids: map$6(a2).call(a2, function(t3) {
            return t3.id;
          }) }), a2;
        }, ModuleService;
      }(), Wf = { needPush: { type: "boolean", required: false }, needPushBadge: { type: "boolean", required: false }, needPushNick: { type: "boolean", required: false }, pushContent: { type: "string", allowEmpty: false, required: false }, pushPayload: { type: "string", allowEmpty: false, required: false } }, Kf = { pushContent: 8, pushPayload: 9, needPush: 107, needPushBadge: 109, needPushNick: 110 }, Yf = { "4_4": "syncOfflineMsgs", "4_9": "syncRoamingMsgs", "4_17": "syncRoamingMsgs", "4_21": "syncDeleteSelfMsgs", "7_1": "sendMsg", "8_23": "getHistoryTeamMsgs", "21_14": "getHistorySuperTeamMsgs", "8_2": "sendTeamMsg", "21_2": "sendSuperTeamMsg", "7_11": "sendMsgReceipt", "7_13": "recallMsg", "7_24": "deleteSelfMsgs", "21_17": "recallSuperTeamMsg", "7_2": "onMsg", "8_3": "onMsg", "21_3": "onMsg", "7_101": "onMsg", "8_102": "onMsg", "21_102": "onMsg", "8_4": "nimOnTeamMsgs", "4_16": "syncBroadcastMsg", "7_17": "onBroadcastMsg", "7_123": "onDeleteSelfMsg", "7_124": "onDeleteSelfMsgs" }, Qf = Dt(Dt({ scene: 0, to: 1, from: 2, fromClientType: 4, fromDeviceId: 5, fromNick: 6, time: 7, type: 8, body: 9, attach: 10, idClient: 11, idServer: 12, resendFlag: 13, userUpdateTime: 14, ext: 15, needAntiSpam: 21, antiSpamContent: 22, antiSpamBIZID: 23, clientAntispamHitting: 24, antiSpamUsingYidun: 25, needACK: 26, yidunCallbackURL: 27, needUpdateSession: 28, replyMsgFromAccount: 29, replyMsgToAccount: 30, replyMsgTime: 31, replyMsgIdServer: 32, replyMsgIdClient: 33, threadMsgFromAccount: 34, threadMsgToAccount: 35, threadMsgTime: 36, threadMsgIdServer: 37, threadMsgIdClient: 38, isDeleted: 39, callbackExt: 40, subType: 41, yidunAntiCheating: 42, envConfig: 43, yidunAntiSpamExtension: 44, yidunAntiSpamResult: 45, __clientExt: { id: 46, converter: objectToJSONString, retConverter: stringToJSONObject }, needSaveHistory: 100, needRoaming: 101, needSelfSync: 102, isMuted: 104, needRouted: 105, isInBlackList: 106, needOffline: 108, isReplyMsg: 111, ackSnapshot: 112 }, { pushContent: 17, pushPayload: 16, forcePushIDsList: 18, forcePushContent: 19, needForcePush: 20, needPush: 107, needPushBadge: 109, needPushNick: 110 }), { function: 47, topic: 48, customContent: 49, account: 50 }), Jf = { msg: Qf, recallMsgTag: Dt({ time: 0, type: 1, to: 2, from: 3, ps: 4, attach: 5, deletedIdClient: 10, deletedIdServer: 11, deleteMsgCreatetime: 14, opeAccount: 16, env: 21 }, Kf), deleteSelfMsgTag: { scene: 1, from: 2, to: 3, idServer: 4, idClient: 5, deletedMsgCreateTime: 6, time: 7, ext: 8 }, msgReceiptTag: { to: 1, from: 2, time: 7, idClient: 11 }, broadcastMsg: { id: 1, fromAccid: 2, time: 4, body: 5 } }, Xf = invertSerializeMap(Jf), Zf = { sendMsg: { sid: 7, cid: 1, service: "msg", params: [{ type: "Property", name: "msg", reflectMapper: Jf.msg }], response: [{ type: "Property", name: "msg", reflectMapper: Xf.msg }], ignoreErrCodes: [7101] }, sendTeamMsg: { sid: 8, cid: 2, service: "msg", params: [{ type: "Property", name: "msg", reflectMapper: Jf.msg }], response: [{ type: "Property", name: "msg", reflectMapper: Xf.msg }] }, sendSuperTeamMsg: { sid: 21, cid: 2, service: "msg", params: [{ type: "Property", name: "msg", reflectMapper: Jf.msg }], response: [{ type: "Property", name: "msg", reflectMapper: Xf.msg }] }, onMsg: { sid: 7, cid: 2, service: "msg", response: [{ type: "Property", name: "msg", reflectMapper: Xf.msg }] }, nimOnTeamMsgs: { sid: 8, cid: 4, service: "msg", response: [{ type: "PropertyArray", name: "datas", reflectMapper: Xf.msg }] }, getHistoryTeamMsgs: { sid: 8, cid: 23, service: "msg", params: [{ type: "Long", name: "to" }, { type: "Long", name: "beginTime" }, { type: "Long", name: "endTime" }, { type: "Long", name: "lastMsgId" }, { type: "Int", name: "limit" }, { type: "Bool", name: "reverse" }, { type: "LongArray", name: "msgTypes" }], response: [{ type: "PropertyArray", name: "msgs", reflectMapper: Xf.msg }] }, getHistorySuperTeamMsgs: { sid: 21, cid: 14, params: [{ type: "Long", name: "to" }, { type: "Long", name: "beginTime" }, { type: "Long", name: "endTime" }, { type: "Long", name: "lastMsgId" }, { type: "Int", name: "limit" }, { type: "Bool", name: "reverse" }, { type: "LongArray", name: "msgTypes" }], response: [{ type: "PropertyArray", name: "msgs", reflectMapper: Xf.msg }], service: "msg" }, recallMsg: { sid: 7, cid: 13, service: "msg", params: [{ type: "Property", name: "recallMsgTag", reflectMapper: Jf.recallMsgTag }] }, deleteSelfMsgs: { sid: 7, cid: 24, service: "msg", params: [{ type: "PropertyArray", name: "deletedMsgs", reflectMapper: Jf.deleteSelfMsgTag }], response: [{ type: "Long", name: "timetag" }] }, recallSuperTeamMsg: { sid: 21, cid: 17, service: "msg", params: [{ type: "Property", name: "recallMsgTag", reflectMapper: Jf.recallMsgTag }] }, sendMsgReceipt: { sid: 7, cid: 11, service: "msg", params: [{ type: "Property", name: "msgReceiptTag", reflectMapper: Jf.msgReceiptTag }], response: [{ type: "Property", name: "msgReceiptTag", reflectMapper: Xf.msgReceiptTag }] }, batchMarkRead: { sid: 4, cid: 5, service: "msg", hasPacketResponse: false, params: [{ type: "Byte", name: "sid" }, { type: "Byte", name: "cid" }, { type: "LongArray", name: "ids" }] }, syncMsgReceipts: { sid: 4, cid: 12, service: "msg", response: [{ type: "PropertyArray", name: "msgReceipts", reflectMapper: Xf.msgReceiptTag }, { type: "Long", name: "timetag" }] }, syncOfflineMsgs: { sid: 4, cid: 4, service: "msg", response: [{ type: "PropertyArray", name: "msgs", reflectMapper: Xf.msg }] }, syncRoamingMsgs: { sid: 4, cid: 9, service: "msg", response: [{ type: "PropertyArray", name: "msgs", reflectMapper: Xf.msg }] }, syncBroadcastMsg: { sid: 4, cid: 16, service: "msg", response: [{ type: "PropertyArray", name: "msgs", reflectMapper: Xf.broadcastMsg }] }, onBroadcastMsg: { sid: 7, cid: 17, service: "msg", response: [{ type: "Property", name: "msg", reflectMapper: Xf.broadcastMsg }] }, onDeleteSelfMsg: { sid: 7, cid: 123, service: "msg", response: [{ type: "Property", name: "deletedMsg", reflectMapper: Xf.deleteSelfMsgTag }] }, onDeleteSelfMsgs: { sid: 7, cid: 124, service: "msg", response: [{ type: "PropertyArray", name: "deletedMsgs", reflectMapper: Xf.deleteSelfMsgTag }] }, syncDeleteSelfMsgs: { sid: 4, cid: 21, service: "msg", response: [{ type: "PropertyArray", name: "deletedMsgs", reflectMapper: Xf.deleteSelfMsgTag }] } };
      !function(t2) {
        t2[t2.none = 0] = "none", t2[t2.pass = 1] = "pass", t2[t2.decline = 2] = "decline", t2[t2.read = 3] = "read", t2[t2.deleted = 4] = "deleted", t2[t2.invalid = 5] = "invalid";
      }(Hf || (Hf = {})), function(t2) {
        t2[t2.default = 0] = "default", t2[t2.leave = 1] = "leave", t2[t2.roam = 2] = "roam";
      }(jf || (jf = {})), function(t2) {
        t2[t2.applyTeam = 0] = "applyTeam", t2[t2.rejectTeamApply = 1] = "rejectTeamApply", t2[t2.teamInvite = 2] = "teamInvite", t2[t2.rejectTeamInvite = 3] = "rejectTeamInvite", t2[t2.friendRequest = 5] = "friendRequest", t2[t2.deleteFriend = 6] = "deleteFriend", t2[t2.recallMsgP2p = 7] = "recallMsgP2p", t2[t2.recallMsgTeam = 8] = "recallMsgTeam", t2[t2.recallMsgSuperTeam = 12] = "recallMsgSuperTeam", t2[t2.deleteMsgP2pOneWay = 13] = "deleteMsgP2pOneWay", t2[t2.deleteMsgTeamOneWay = 14] = "deleteMsgTeamOneWay", t2[t2.applySuperTeam = 15] = "applySuperTeam", t2[t2.rejectSuperTeamApply = 16] = "rejectSuperTeamApply", t2[t2.superTeamInvite = 17] = "superTeamInvite", t2[t2.rejectSuperTeamInvite = 18] = "rejectSuperTeamInvite", t2[t2.customP2p = 100] = "customP2p", t2[t2.customTeam = 101] = "customTeam", t2[t2.customSuperTeam = 103] = "customSuperTeam";
      }($f || ($f = {}));
      var ey = { 1: "addFriend", 2: "applyFriend", 3: "passFriendApply", 4: "rejectFriendApply" };
      var ty = { setting: { needSaveOffline: { type: "boolean" }, isRoutable: { type: "boolean" }, envConfig: { type: "string" } }, antiSpamInfo: { needAntiSpam: { type: "boolean" }, antiSpamContent: { type: "boolean" } }, pushInfo: Wf, recallMessageInfo: { idClient: { type: "string", rawKey: "deletedIdClient" }, idServer: { type: "string", rawKey: "deletedIdServer" }, createTime: { type: "number", rawKey: "deletedMsgCreateTime" }, fromNick: { type: "string", rawKey: "deletedMsgFromNick" }, opeAccount: { type: "string" } } };
      function formatSystemMessage(t2, a2, u2) {
        var m2 = +t2.type, h2 = getEnumKeyByEnumValue($f, m2);
        u2 = u2 || jf.default;
        var g2 = Dt(Dt({}, format(ty, t2)), { type: h2, time: +t2.time, to: t2.to, from: t2.from, idServer: t2.idServer, state: Hf[Hf.none], feature: jf[u2] });
        if (g2.idServer === "0" && g2.setting && (g2.setting.needSaveOffline = false), typeof g2.attach == "string")
          try {
            g2.attach = JSON.parse(g2.attach);
          } catch (t3) {
            a2.error("formatSystemMessage: " + g2.idServer + " parse attach error", t3 && t3.message);
          }
        return m2 === 5 && g2.attach ? (g2.attach.type = ey[+g2.attach.vt], g2.attach.type === "passFriendApply" ? g2.state = Hf[Hf.pass] : g2.attach.type === "rejectFriendApply" && (g2.state = Hf[Hf.decline])) : m2 <= 3 && g2.attach && (g2.attach = function formatTeamAttach(t3) {
          var a3 = t3.attach, u3 = t3.tinfo, m3 = __rest(t3, ["attach", "tinfo"]);
          return m3.ext = a3, u3 !== void 0 && (m3.team = formatTeam(deserialize(t3.tinfo, Of.team))), m3;
        }(g2.attach)), g2;
      }
      function generatorSysMsgForCmd$1(t2) {
        var a2 = Dt({}, t2);
        return Dt(Dt({}, formatReverse(ty, a2)), { type: $f[a2.type], to: a2.to, attach: a2.attach });
      }
      function getSceneFromRecallSysMsg(t2) {
        return t2 === $f.recallMsgP2p ? "p2p" : t2 === $f.recallMsgTeam ? "team" : t2 === $f.recallMsgSuperTeam ? "superTeam" : "";
      }
      var ry = function(t2) {
        function MsgService(a3) {
          var u2;
          return (u2 = t2.call(this, "msg", a3) || this).onV2SendMessage = function(t3) {
            var a4 = formatMsg$1(t3, { account: u2.core.account, featureValue: Fd.default });
            a4.status = t3.status, u2.core.eventBus.emit("session/updateForNewMsg", a4);
          }, u2.onV2ModifyMessage = function(t3) {
            var a4, m2 = Dd[t3.scene] + "-" + (t3.to === u2.core.account ? t3.from : t3.to), h2 = (a4 = u2.core.session) === null || a4 === void 0 ? void 0 : a4.getSessionWithUncomplete({ id: m2 }), g2 = formatMsg$1(t3, h2 ? { account: u2.core.account, sessionAck: h2.ack, msgReceiptTime: h2.msgReceiptTime } : { account: u2.core.account });
            u2.core.eventBus.emit("session/updateForModifyMsg", g2);
          }, u2.onV2RecallMsg = function(t3) {
            var a4 = formatDeletedMsgs([t3], getSceneFromRecallSysMsg(+t3.type));
            u2.core.eventBus.emit("session/updateForDeletedMsg", a4);
          }, u2.onV2DeleteSelfMsgs = function(t3) {
            var a4 = formatDeletedMsgs(t3);
            u2.core.eventBus.emit("session/updateForDeletedMsg", a4);
          }, u2.service = new zf(a3), registerParser({ cmdMap: Yf, cmdConfig: Zf }), u2.registerListener(), u2;
        }
        Nt(MsgService, t2);
        var a2 = MsgService.prototype;
        return a2.registerListener = function registerListener() {
          this.core.eventBus.on("forwardReceive/msg/sendMsg", this.onV2SendMessage), this.core.eventBus.on("forwardReceive/msg/modifyMsg", this.onV2ModifyMessage), this.core.eventBus.on("forwardReceive/msg/recallMsg", this.onV2RecallMsg), this.core.eventBus.on("forwardReceive/msg/deleteSelfMsgs", this.onV2DeleteSelfMsgs);
        }, a2.sendTextMsg = function sendTextMsg(t3) {
          return validate({ body: { type: "string", allowEmpty: false } }, t3), this.sendMsg(Dt(Dt({}, t3), { type: "text" }));
        }, a2.sendTipMsg = function sendTipMsg(t3) {
          return validate({ body: { type: "string", allowEmpty: false } }, t3), this.sendMsg(Dt(Dt({}, t3), { type: "tip" }));
        }, a2.sendGeoLocationMsg = function sendGeoLocationMsg(t3) {
          return validate({ attach: { type: "object", rules: { title: { type: "string", allowEmpty: false }, lat: { type: "number" }, lng: { type: "number" } } } }, t3), this.sendMsg(Dt(Dt({}, t3), { type: "geo", attach: Un(t3.attach) }));
        }, a2.sendCustomMsg = function sendCustomMsg(t3) {
          return validate({ attach: { type: "string", allowEmpty: false } }, t3), this.sendMsg(Dt(Dt({}, t3), { type: "custom" }));
        }, a2.sendMsg = function sendMsg(t3) {
          var a3, u2 = this;
          if (validate({ scene: { type: "enum", values: getEnumKeys(Dd) }, type: { type: "enum", values: getEnumKeys(Ud) }, to: { type: "string", allowEmpty: false }, ext: { type: "string", required: false }, setting: { type: "object", rules: { resendFlag: { type: "boolean", required: false }, needSaveHistory: { type: "boolean", required: false }, needRoaming: { type: "boolean", required: false }, needOffline: { type: "boolean", required: false }, needSelfSync: { type: "boolean", required: false }, needRouted: { type: "boolean", required: false }, needUpdateSession: { type: "boolean", required: false } }, required: false }, antiSpamInfo: { type: "object", required: false, rules: { clientAntispamHitting: { type: "boolean", required: false }, antiSpamUsingYidun: { type: "boolean", required: false } } }, pushInfo: { type: "object", required: false, rules: qf }, robotInfo: { type: "object", required: false, rules: Bf }, teamSpecializationInfo: { type: "object", required: false, rules: { needACK: { type: "boolean", required: false } } } }, t3), t3.scene === "team" && t3.robotInfo && !t3.robotInfo.account)
            throw new Ll('When "scene" equals "team", account is required in robotInfo', { key: "account" }, "required");
          var m2, h2 = t3.scene === "p2p" ? "sendMsg" : t3.scene === "team" ? "sendTeamMsg" : "sendSuperTeamMsg", g2 = generatorMsgForCmd$1(t3, this.core.account, this.core.config.deviceId, (a3 = this.core.user) === null || a3 === void 0 ? void 0 : a3.myInfo), M2 = formatMsg$1(Dt(Dt({}, g2), { time: new Date().getTime() }), { account: this.core.account, featureValue: Fd.default, statusValue: Bd.sending });
          try {
            t3.onSendBefore && t3.onSendBefore(M2);
          } catch (t4) {
            this.logger.error("sendMsg: options.onSendBefore error", t4);
          }
          return this.core.eventBus.emit("session/updateForNewMsg", M2), this.core.eventBus.emit("forwardSend/msg/sendMsg", g2), this.core.sendCmd(h2, { msg: g2 }).then(function(a4) {
            var h3 = a4.content, I2 = a4.error;
            if (m2 = h3.msg, I2)
              throw I2;
            var S2 = formatMsg$1(Dt(Dt({}, g2), h3.msg), { account: u2.core.account, featureValue: Fd.default, statusValue: Bd.sent });
            return S2.from === S2.to && u2.markMsgsAck([S2]), u2.core.eventBus.emit("session/updateForNewMsg", S2), u2.core.eventBus.emit("forwardSend/msg/sendMsg", Dt(Dt({}, generatorMsgForCmd$1(S2, S2.from, S2.fromDeviceId)), { idClient: S2.idClient, status: "sent" })), u2.core.reporter.report("msgSend", { msgId: S2.idServer, clientId: S2.idClient, msgTime: S2.time, fromAccid: t3.scene === "p2p" ? u2.core.account : "", toAccid: S2.to, type: Dd[S2.scene], roomId: "", tid: t3.scene === "p2p" ? "" : S2.to, result: 200, failReason: "", rt: to() - M2.time }), S2;
          }).catch(function(a4) {
            var h3 = formatMsg$1(Dt(Dt(Dt({}, g2), { time: new Date().getTime() }), m2), { account: u2.core.account, featureValue: Fd.default, statusValue: a4.code === 7101 ? Bd.refused : Bd.sendFailed });
            throw a4.msg = h3, u2.core.eventBus.emit("session/updateForNewMsg", h3), u2.core.eventBus.emit("forwardSend/msg/sendMsg", Dt(Dt({}, generatorMsgForCmd$1(h3, h3.from, h3.fromDeviceId)), { status: "sendFailed" })), u2.core.reporter.report("msgSend", { msgId: h3.idServer, clientId: h3.idClient, msgTime: h3.time, fromAccid: t3.scene === "p2p" ? u2.core.account : "", toAccid: h3.to, type: Dd[h3.scene], roomId: "", tid: t3.scene === "p2p" ? "" : h3.to, result: a4 == null ? void 0 : a4.code, failReason: (a4 == null ? void 0 : a4.message) || "", rt: to() - M2.time }), a4;
          });
        }, a2.resendMsg = function resendMsg(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a3, u2;
            return Ql.wrap(function _callee$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    if (validate({ msg: { type: "object", rules: { idClient: { type: "string", allowEmpty: false } } } }, t3), a3 = t3.msg, u2 = Dt(Dt({}, a3), { attach: a3.attach ? Un(a3.attach) : void 0, setting: { resendFlag: true } }), a3.from === this.core.account) {
                      m2.next = 5;
                      break;
                    }
                    throw new Error("You can only resend messages that you sent: " + a3.idClient);
                  case 5:
                    return m2.abrupt("return", this.sendMsg(u2));
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee, this);
          }));
        }, a2.forwardMsg = function forwardMsg(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a3, u2;
            return Ql.wrap(function _callee2$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ msg: { type: "object", rules: { idClient: { type: "string", allowEmpty: false } } }, scene: { type: "enum", values: getEnumKeys(Dd) }, to: { type: "string", allowEmpty: false } }, t3), a3 = t3.msg, u2 = Dt(Dt({}, a3), { scene: t3.scene, to: t3.to, attach: a3.attach ? Un(a3.attach) : void 0 }), m2.abrupt("return", this.sendMsg(u2));
                  case 4:
                  case "end":
                    return m2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.sendImageMsg = function sendImageMsg(t3) {
          return this.doSendFile(Dt(Dt({}, t3), { type: "image" }));
        }, a2.sendFileMsg = function sendFileMsg(t3) {
          return this.doSendFile(Dt(Dt({}, t3), { type: "file" }));
        }, a2.sendAudioMsg = function sendAudioMsg(t3) {
          return this.doSendFile(Dt(Dt({}, t3), { type: "audio" }));
        }, a2.sendVideoMsg = function sendVideoMsg(t3) {
          return this.doSendFile(Dt(Dt({}, t3), { type: "video" }));
        }, a2.doSendFile = function doSendFile(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3;
            return Ql.wrap(function _callee3$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    if (validate({ scene: { type: "enum", values: getEnumKeys(Dd) }, to: { type: "string", allowEmpty: false }, type: { type: "string", allowEmpty: false }, attach: { type: "object", rules: { url: { type: "string", allowEmpty: false } }, required: false }, maxSize: { type: "number", min: 1, required: false } }, t3), a3 = t3.attach) {
                      u2.next = 15;
                      break;
                    }
                    if (this.core.cloudStorage && this.core.cloudStorage.uploadFile) {
                      u2.next = 5;
                      break;
                    }
                    throw new Error('Service "cloudStorage" does not exist');
                  case 5:
                    return u2.prev = 5, u2.next = 8, this.core.cloudStorage.uploadFile(t3);
                  case 8:
                    a3 = u2.sent, u2.next = 15;
                    break;
                  case 11:
                    throw u2.prev = 11, u2.t0 = u2.catch(5), this.logger.error("sendFile:: upload File error or abort.", u2.t0), u2.t0;
                  case 15:
                    return u2.abrupt("return", this.sendMsg(Dt(Dt({}, t3), { attach: Un(a3), type: t3.type })));
                  case 16:
                  case "end":
                    return u2.stop();
                }
            }, _callee3, this, [[5, 11]]);
          }));
        }, a2.recallMsg = function recallMsg(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a3, u2, m2, h2, g2, M2;
            return Ql.wrap(function _callee4$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    return validate({ msg: { type: "object", rules: { idClient: { type: "string", allowEmpty: false }, idServer: { type: "string", allowEmpty: false }, scene: { type: "enum", values: getEnumKeys(Dd) }, time: { type: "number" } } }, pushInfo: { type: "object", required: false, rules: Wf }, ps: { type: "string", allowEmpty: false, required: false } }, t3), a3 = t3.msg, u2 = { p2p: "recallMsg", team: "recallMsg", superTeam: "recallSuperTeamMsg" }, m2 = { p2p: 7, team: 8, superTeam: 12 }, h2 = processPushInfoInMsg({ time: a3.time, type: m2[a3.scene], to: a3.to, from: a3.from, ps: t3.ps, attach: t3.attach, deletedIdClient: a3.idClient, deletedIdServer: a3.idServer, opeAccount: a3.from, env: t3.env, pushInfo: t3.pushInfo }), I2.next = 7, this.core.sendCmd(u2[a3.scene], { recallMsgTag: h2 });
                  case 7:
                    return g2 = Dt({}, a3, { deletedMsgCreateTime: a3.time }), M2 = formatDeletedMsgs([g2]), this.core.eventBus.emit("session/updateForDeletedMsg", M2), this.core.eventBus.emit("forwardSend/msg/recallMsg", h2), I2.abrupt("return", a3);
                  case 12:
                  case "end":
                    return I2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.deleteSelfMsgs = function deleteSelfMsgs(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var a3, u2, m2, h2, g2;
            return Ql.wrap(function _callee5$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return validate({ msgs: { type: "array", rules: { scene: { type: "enum", values: ["p2p", "team"] }, from: { type: "string", allowEmpty: false }, to: { type: "string", allowEmpty: false }, idServer: { type: "string", allowEmpty: false }, idClient: { type: "string", allowEmpty: false }, time: { type: "number", allowEmpty: false } } }, ext: { type: "string", allowEmpty: false, required: false } }, t3), a3 = t3.msgs, u2 = map$6(a3).call(a3, function(a4) {
                      return { scene: a4.scene === "p2p" ? 1 : 2, from: a4.from, to: a4.to, idServer: a4.idServer, idClient: a4.idClient, deletedMsgCreateTime: a4.time, ext: t3.ext };
                    }), M2.next = 5, this.core.sendCmd("deleteSelfMsgs", { deletedMsgs: u2 });
                  case 5:
                    return m2 = M2.sent, h2 = map$6(u2).call(u2, function(t4) {
                      var a4;
                      return Dt({}, t4, { time: (a4 = m2 == null ? void 0 : m2.content) === null || a4 === void 0 ? void 0 : a4.timetag });
                    }), g2 = formatDeletedMsgs(h2), this.core.eventBus.emit("session/updateForDeletedMsg", g2), this.core.eventBus.emit("forwardSend/msg/deleteSelfMsgs", map$6(u2).call(u2, function(t4) {
                      var a4;
                      return Dt(Dt({}, t4), { time: (a4 = m2 == null ? void 0 : m2.content) === null || a4 === void 0 ? void 0 : a4.timetag });
                    })), M2.abrupt("return", g2);
                  case 11:
                  case "end":
                    return M2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.sendMsgReceipt = function sendMsgReceipt(t3) {
          var a3, u2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var m2, h2, g2, M2;
            return Ql.wrap(function _callee6$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    if (validate({ msg: { type: "object", rules: { idClient: { type: "string", allowEmpty: false }, target: { type: "string", allowEmpty: false }, time: { type: "number" } } } }, t3), (m2 = t3.msg).scene === "p2p" && m2.flow === "in") {
                      I2.next = 5;
                      break;
                    }
                    return this.logger.warn("Msg scene: " + m2.scene + ", flow: " + m2.flow + " is not allowed to send msg receipt"), I2.abrupt("return", void 0);
                  case 5:
                    return h2 = { to: m2.target, idClient: m2.idClient, time: m2.time }, I2.next = 8, this.core.sendCmd("sendMsgReceipt", { msgReceiptTag: h2 });
                  case 8:
                    return g2 = I2.sent, M2 = Uu((u2 = (a3 = g2.content) === null || a3 === void 0 ? void 0 : a3.msgReceiptTag) === null || u2 === void 0 ? void 0 : u2.time), I2.abrupt("return", Dt(Dt({}, h2), { time: M2 ? Math.min(M2, h2.time) : h2.time }));
                  case 11:
                  case "end":
                    return I2.stop();
                }
            }, _callee6, this);
          }));
        }, a2.sendTeamMsgReceipt = function sendTeamMsgReceipt(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            var a3;
            return Ql.wrap(function _callee7$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ teamMsgReceipts: { type: "array", rules: { teamId: { type: "string", allowEmpty: false }, idClient: { type: "string", allowEmpty: false }, idServer: { type: "string", allowEmpty: false } }, max: 50 } }, t3), a3 = t3.teamMsgReceipts, this.core.sendCmd("sendTeamMsgReceipt", { teamMsgReceipts: a3 }), u2.abrupt("return", void 0);
                  case 4:
                  case "end":
                    return u2.stop();
                }
            }, _callee7, this);
          }));
        }, a2.getTeamMsgReads = function getTeamMsgReads(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var u2, m2, h2;
            return Ql.wrap(function _callee8$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ teamMsgReceipts: { type: "array", rules: { teamId: { type: "string", allowEmpty: false }, idClient: { type: "string", allowEmpty: false }, idServer: { type: "string", allowEmpty: false } } } }, t3), u2 = t3.teamMsgReceipts, g2.next = 4, this.core.sendCmd("getTeamMsgReads", { teamMsgReceipts: u2 });
                  case 4:
                    return m2 = g2.sent, h2 = (h2 = (a3 = m2.content) === null || a3 === void 0 ? void 0 : a3.teamMsgReceipts) ? map$6(h2).call(h2, function(t4) {
                      return Dt(Dt({}, t4), { read: Uu(t4.read), unread: Uu(t4.unread) });
                    }) : [], g2.abrupt("return", h2);
                  case 8:
                  case "end":
                    return g2.stop();
                }
            }, _callee8, this);
          }));
        }, a2.getTeamMsgReadAccounts = function getTeamMsgReadAccounts(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            var a3, u2;
            return Ql.wrap(function _callee9$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ teamMsgReceipt: { type: "object", rules: { teamId: { type: "string", allowEmpty: false }, idClient: { type: "string", allowEmpty: false }, idServer: { type: "string", allowEmpty: false } } } }, t3), a3 = t3.teamMsgReceipt, m2.next = 4, this.core.sendCmd("getTeamMsgReadAccounts", { teamMsgReceiptTag: a3 });
                  case 4:
                    return u2 = m2.sent, m2.abrupt("return", u2.content);
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee9, this);
          }));
        }, a2.markMsgsAck = function markMsgsAck(t3) {
          if (t3 && t3.length > 0) {
            var a3 = [], u2 = [];
            forEach$1(t3).call(t3, function(t4) {
              t4.scene === "p2p" && t4.flow === "in" ? a3.push(t4) : t4.scene === "team" && t4.flow === "in" && u2.push(t4);
            }), a3.length > 0 && this.core.sendCmd("batchMarkRead", { sid: 7, cid: 2, ids: map$6(a3).call(a3, function(t4) {
              return t4.idServer;
            }) }), u2.length > 0 && this.core.sendCmd("batchMarkRead", { sid: 8, cid: 3, ids: map$6(u2).call(u2, function(t4) {
              return t4.idServer;
            }) });
          }
        }, a2.onMsgHandler = function onMsgHandler(t3) {
          var a3;
          if (t3.error)
            this.logger.error("msgHandler::recvError", t3.error);
          else {
            var u2 = typeof get(t3, "raw.r[0]") == "number" ? "" + t3.raw.r[0] : void 0, m2 = t3.content.msg;
            m2.idServer = m2.idServer || u2;
            var h2 = getSessionId(m2, this.core.account), g2 = (a3 = this.core.session) === null || a3 === void 0 ? void 0 : a3.getSessionWithUncomplete({ id: h2 }), M2 = formatMsg$1(m2, g2 ? { account: this.core.account, sessionAck: g2.ack, msgReceiptTime: g2.msgReceiptTime } : { account: this.core.account });
            this.logger.getDebugMode() ? this.logger.debug("msgHandler::recvMsg", M2.idClient, M2.idServer, M2) : this.logger.log("msgHandler::recvMsg", M2.idClient, M2.idServer), this.markMsgsAck([M2]), this.core.eventBus.emit("session/updateForNewMsg", M2), M2.scene === "superTeam" ? this.core.eventBus.emit("sync/updateTimetag", { superTeamRoamingMsgs: M2.time }) : this.core.eventBus.emit("sync/updateTimetag", { roamingMsgs: M2.time }), this.core.emit("msg", M2), M2.type === "notification" ? this.core.eventBus.emit("team/onNotification", M2) : M2.flow !== "out" && this.doMsgReceiveReport(M2, t3), M2.type !== "notification" && this.core.user.checkUserUpdate(M2);
          }
        }, a2.doMsgReceiveReport = function doMsgReceiveReport(t3, a3) {
          if (t3.from !== this.core.account) {
            var u2 = t3.scene === "p2p", m2 = get(t3, "__clientExt.statistics.apiCallingTime") || 0, h2 = get(t3, "__clientExt.statistics.sendTime") || 0, g2 = get(t3, "__clientExt.statistics.attachUploadDuration") || 0, M2 = this.core.timeOrigin.getNTPTime(), I2 = t3.time, S2 = this.core.timeOrigin.checkNodeReliable(a3.__receiveTimeNode) ? this.core.timeOrigin.getNTPTime(a3.__receiveTimeNode) : M2;
            this.core.reporter.report("msgReceive", { msgId: t3.idServer, clientId: t3.idClient, serverTime: I2, receiveTime: S2, fromAccid: u2 ? t3.from : "", toAccid: t3.to, type: Dd[t3.scene], tid: u2 ? "" : t3.to, apiCallingTime: m2, sendTime: h2, attachUploadDuration: g2, callbackTime: M2, preHandleTime: M2, result: 200, failReason: "", rt: M2 - I2 });
          }
        }, a2.nimOnTeamMsgsHandler = function nimOnTeamMsgsHandler(t3) {
          var a3, u2 = this;
          forEach$1(a3 = t3.content.datas).call(a3, function(a4) {
            u2.onMsgHandler(Dt({}, t3, { content: { msg: a4 } }));
          });
        }, a2.syncRoamingMsgsHandler = function syncRoamingMsgsHandler(t3) {
          var a3, u2, m2 = t3.content.msgs || [];
          if (m2.length !== 0) {
            var h2 = getSessionId(m2[0], this.core.account), g2 = (a3 = this.core.session) === null || a3 === void 0 ? void 0 : a3.getSessionWithUncomplete({ id: h2 }), M2 = (m2 = formatMsgs$1(m2, g2 ? { account: this.core.account, featureValue: Fd.roam, sessionAck: g2.ack, msgReceiptTime: g2.msgReceiptTime } : { account: this.core.account, featureValue: Fd.roam }))[0].time, I2 = { timetag: M2, sessionId: h2, msgs: reverse(m2) };
            typeof ((u2 = this.core.sync) === null || u2 === void 0 ? void 0 : u2.getSyncDoneFlag) != "function" || this.core.sync.getSyncDoneFlag() || this.core.eventBus.emit("session/syncMsgs", I2), this.core.emit("syncRoamingMsgs", I2), m2[0].scene === "superTeam" ? this.core.eventBus.emit("sync/updateTimetag", { superTeamRoamingMsgs: M2 }) : this.core.eventBus.emit("sync/updateTimetag", { roamingMsgs: M2 });
          }
        }, a2.syncOfflineMsgsHandler = function syncOfflineMsgsHandler(t3) {
          var a3, u2 = this, m2 = t3.content.msgs || [];
          if (m2.length !== 0) {
            var h2 = {}, g2 = [];
            forEach$1(m2).call(m2, function(t4) {
              var a4 = getSessionId(t4, u2.core.account), m3 = u2.core.session.getSessionWithUncomplete({ id: a4 }), M3 = formatMsg$1(t4, m3 ? { account: u2.core.account, featureValue: Fd.leave, sessionAck: m3.ack, msgReceiptTime: m3.msgReceiptTime } : { account: u2.core.account, featureValue: Fd.leave });
              g2.push(M3), h2[M3.sessionId] ? h2[M3.sessionId].push(M3) : h2[M3.sessionId] = [M3];
            }), this.markMsgsAck(g2);
            var M2 = 0;
            forEach$1(a3 = Ht(h2)).call(a3, function(t4) {
              var a4, m3 = sort(a4 = h2[t4]).call(a4, function(t5, a5) {
                return a5.time - t5.time;
              });
              (m3 = removeDupMsgsByIdClient(m3))[0].time > M2 && (M2 = m3[0].time);
              var g3 = { timetag: m3[0].time, sessionId: t4, msgs: m3 };
              u2.core.eventBus.emit("session/syncMsgs", g3), u2.core.emit("syncOfflineMsgs", g3);
            }), this.core.eventBus.emit("sync/updateTimetag", { offlineMsgs: M2 });
          }
        }, a2.syncDeleteSelfMsgsHandler = function syncDeleteSelfMsgsHandler(t3) {
          var a3, u2 = (a3 = t3.content) === null || a3 === void 0 ? void 0 : a3.deletedMsgs;
          u2 && u2.length > 0 || this.logger.warn("syncDeleteSelfMsgs:: no msgs");
          var m2 = u2[u2.length - 1].time;
          this.core.eventBus.emit("sync/updateTimetag", { deleteSelfMsgs: m2 });
        }, a2.onDeleteSelfMsgHandler = function onDeleteSelfMsgHandler(t3) {
          var a3 = formatDeletedMsgs([t3.content.deletedMsg]);
          this.core.eventBus.emit("session/updateForDeletedMsg", a3), this.core.emit("deleteSelfMsgs", a3);
        }, a2.onDeleteSelfMsgsHandler = function onDeleteSelfMsgsHandler(t3) {
          var a3 = formatDeletedMsgs(t3.content.deletedMsgs);
          this.core.eventBus.emit("session/updateForDeletedMsg", a3), this.core.emit("deleteSelfMsgs", a3);
        }, a2.onBroadcastMsgHandler = function onBroadcastMsgHandler(t3) {
          var a3 = t3.content.msg, u2 = this.service.processBroadcastMsg([a3]);
          this.core.emit("broadcastMsgs", u2);
        }, a2.syncBroadcastMsgHandler = function syncBroadcastMsgHandler(t3) {
          var a3 = t3.content.msgs, u2 = this.service.processBroadcastMsg(a3);
          this.core.emit("broadcastMsgs", u2);
        }, MsgService;
      }(op), ny = { "5_1": "sync" }, ay = { sync: { sid: 5, cid: 1, service: "sync", hasPacketTimer: false, params: [{ type: "Property", name: "sync", reflectMapper: { myInfo: 1, offlineMsgs: 2, teams: 3, roamingMsgs: 7, relations: 9, friends: 11, friendUsers: 13, msgReceipts: 14, myTeamMembers: 15, donnop: 16, recallMsg: 17, sessionAck: 18, broadcastMsgs: 20, avSignal: 21, superTeams: 22, mySuperTeamMembers: 23, superTeamRoamingMsgs: 24, deleteSuperTeamMsg: 25, superTeamSessionAck: 26, deleteSelfMsgs: 27, stickTopSessions: 28, sessionHistoryMsgsDelete: 29 } }], response: [{ type: "Long", name: "timetag" }] } }, iy = function(t2) {
        function SyncService(a3, u2) {
          var m2;
          return u2 === void 0 && (u2 = {}), (m2 = t2.call(this, "sync", a3) || this).syncDoneFlag = false, m2.config = { myInfo: !!a3.user.name, offlineMsgs: !!a3.msg.name, teams: !!a3.team.name, myTeamMembers: !!a3.team.name, roamingMsgs: !!a3.msg.name, relations: !!a3.user.name, friends: !!a3.friend.name, friendUsers: !!a3.user.name, msgReceipts: !!a3.msg.name, broadcastMsgs: !!a3.msg.name, recallMsg: !!a3.msg.name, sessionAck: !!a3.session.name, superTeamSessionAck: !!a3.session.name, superTeams: !!a3.superTeam.name, mySuperTeamMembers: !!a3.superTeam.name, superTeamRoamingMsgs: !!a3.superTeam.name, deleteSuperTeamMsg: !!a3.superTeam.name, deleteSelfMsgs: !!a3.msg.name, sessionHistoryMsgsDelete: !!a3.msgLog.name, avSignal: !!a3.signaling.name }, m2.setOptions(u2), m2.timetags = {}, m2.initEventListeners(), registerParser({ cmdMap: ny, cmdConfig: ay }), m2;
        }
        Nt(SyncService, t2);
        var a2 = SyncService.prototype;
        return a2.setOptions = function setOptions(t3) {
          Dt(this.config, t3);
        }, a2.reset = function reset() {
          this.timetags = {}, this.syncDoneFlag = false;
        }, a2.getSyncDoneFlag = function getSyncDoneFlag() {
          return this.syncDoneFlag;
        }, a2.doSync = function doSync() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a3, u2;
            return Ql.wrap(function _callee$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return a3 = this.genSyncParams(), this.logger.log("sync::doSyncV1: ", a3), m2.prev = 2, m2.next = 5, this.core.clientSocket.sendCmd("sync", { sync: a3 });
                  case 5:
                    u2 = m2.sent, this.core.logger.log("sync::doSyncV1 done in", (t3 = u2.content) === null || t3 === void 0 ? void 0 : t3.timetag), this.syncDoneFlag = true, this.core.emit("syncdone"), m2.next = 17;
                    break;
                  case 11:
                    return m2.prev = 11, m2.t0 = m2.catch(2), this.core.logger.error("sync::doSyncV1 error", m2.t0), this.syncDoneFlag = true, this.core.emit("syncdone"), m2.abrupt("return");
                  case 17:
                  case "end":
                    return m2.stop();
                }
            }, _callee, this, [[2, 11]]);
          }));
        }, a2.initEventListeners = function initEventListeners() {
          var t3 = this;
          this.core.eventBus.on("logined", function() {
            t3.syncDoneFlag = false, t3.doSync();
          }), this.core.eventBus.on("sync/updateTimetag", function(a3) {
            var u2;
            forEach$1(u2 = Ht(a3)).call(u2, function(u3) {
              a3[u3] > (t3.timetags[u3] || 0) && (t3.timetags[u3] = a3[u3]);
            });
          });
        }, a2.genSyncParams = function genSyncParams() {
          var t3, a3, u2 = this;
          return reduce(t3 = filter(a3 = Ht(this.config)).call(a3, function(t4) {
            var a4 = t4;
            return u2.config[a4];
          })).call(t3, function(t4, a4) {
            var m2 = a4;
            return t4[m2] = u2.timetags[m2] || 0, t4;
          }, {});
        }, a2.handleImmediate = function handleImmediate(t3) {
          return this.core.session && this.core.session.onSyncDone && this.core.session.onSyncDone(), zi.resolve(t3);
        }, a2.delaySyncDone = function delaySyncDone(t3) {
          var a3 = this;
          return getMiniappEnv() === "ALI" ? (this.core.logger.log("sync: emit ALIAPP sycnHandler, handle later"), new zi(function(u2) {
            mo(function() {
              a3.handleImmediate(t3).then(function() {
                u2(t3);
              });
            }, 100);
          })) : this.handleImmediate(t3);
        }, a2.syncHandler = function syncHandler(t3) {
          return this.delaySyncDone(t3);
        }, SyncService;
      }(op);
      function _createForOfIteratorHelperLoose$3(t2, a2) {
        var u2, m2 = es !== void 0 && $l(t2) || t2["@@iterator"];
        if (m2)
          return bind$1(u2 = (m2 = m2.call(t2)).next).call(u2, m2);
        if (Dn(t2) || (m2 = function _unsupportedIterableToArray$3(t3, a3) {
          if (t3) {
            var u3;
            if (typeof t3 == "string")
              return _arrayLikeToArray$3(t3, a3);
            var m3 = slice(u3 = {}.toString.call(t3)).call(u3, 8, -1);
            return m3 === "Object" && t3.constructor && (m3 = t3.constructor.name), m3 === "Map" || m3 === "Set" ? jl(t3) : m3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m3) ? _arrayLikeToArray$3(t3, a3) : void 0;
          }
        }(t2)) || a2 && t2 && typeof t2.length == "number") {
          m2 && (t2 = m2);
          var h2 = 0;
          return function() {
            return h2 >= t2.length ? { done: true } : { done: false, value: t2[h2++] };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _arrayLikeToArray$3(t2, a2) {
        (a2 == null || a2 > t2.length) && (a2 = t2.length);
        for (var u2 = 0, m2 = Array(a2); u2 < a2; u2++)
          m2[u2] = t2[u2];
        return m2;
      }
      var oy = function(t2) {
        function UserService(a3) {
          var u2;
          return (u2 = t2.call(this, "user", a3) || this).userInfoMap = new fc(), u2.myInfo = formatUser({}), registerParser({ cmdMap: Lf, cmdConfig: Df }), u2;
        }
        Nt(UserService, t2);
        var a2 = UserService.prototype;
        return a2.setBlack = function setBlack(t3) {
          var a3 = this;
          return validate({ account: { type: "string", allowEmpty: false }, isAdd: { type: "boolean" } }, t3), this.core.sendCmd("setBlack", t3).then(function() {
            a3.core.eventBus.emit("forwardSend/user/updateBlackList", t3.account, t3.isAdd);
          });
        }, a2.setMute = function setMute(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            return Ql.wrap(function _callee$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ account: { type: "string", allowEmpty: false }, isAdd: { type: "boolean" } }, t3), a3.next = 3, this.core.sendCmd("setMute", t3).then(function() {
                    });
                  case 3:
                    this.core.eventBus.emit("forwardSend/user/setMute", t3.account, t3.isAdd);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee, this);
          }));
        }, a2.getRelations = function getRelations() {
          return this.core.sendCmd("syncRelations", { timetag: 0 });
        }, a2.getBlackList = function getBlackList() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var t3;
            return Ql.wrap(function _callee2$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.next = 2, this.core.sendCmd("syncRelations", { timetag: 0 });
                  case 2:
                    return t3 = a3.sent, a3.abrupt("return", t3.blackList || []);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee2, this);
          }));
        }, a2.getMuteList = function getMuteList() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var t3;
            return Ql.wrap(function _callee3$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.next = 2, this.core.sendCmd("syncRelations", { timetag: 0 });
                  case 2:
                    return t3 = a3.sent, a3.abrupt("return", t3.muteList || []);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee3, this);
          }));
        }, a2.updatePushToken = function updatePushToken() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            return Ql.wrap(function _callee4$(t3) {
              for (; ; )
                switch (t3.prev = t3.next) {
                  case 0:
                    this.logger.error("This function is deprecated, please use nim.offlinePush.setOfflinePushConfig instead");
                  case 1:
                  case "end":
                    return t3.stop();
                }
            }, _callee4, this);
          }));
        }, a2.updateAppBackground = function updateAppBackground() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            return Ql.wrap(function _callee5$(t3) {
              for (; ; )
                switch (t3.prev = t3.next) {
                  case 0:
                    this.logger.error("This function is deprecated, please use nim.offlinePush.setOfflinePushConfig instead");
                  case 1:
                  case "end":
                    return t3.stop();
                }
            }, _callee5, this);
          }));
        }, a2.getUsersNameCardFromServer = function getUsersNameCardFromServer(t3) {
          var a3 = this;
          return validate({ accounts: { type: "array", max: 150, itemType: "string" } }, t3), this.core.sendCmd("getUsersNameCardFromServer", pick(t3, ["accounts"])).then(function(u2) {
            var m2, h2 = u2.content;
            return a3.logger.log("user:: getUsers done", t3.accounts), h2 && h2.users ? map$6(m2 = h2.users).call(m2, function(t4) {
              return formatUser(t4);
            }) : [];
          });
        }, a2.updateMyNameCard = function updateMyNameCard(t3) {
          var a3 = this;
          if (validate({ nick: { type: "string", required: false }, avatar: { type: "string", required: false }, signature: { type: "string", required: false }, gender: { type: "enum", values: getEnumKeys(hf), required: false }, email: { type: "string", required: false }, birth: { type: "string", required: false }, tel: { type: "string", required: false }, ext: { type: "string", required: false } }, t3), Ht(t3).length === 0)
            return zi.resolve(this.myInfo);
          var u2 = pick(t3, ["nick", "avatar", "signature", "email", "birth", "tel", "ext"]);
          return t3.gender && (u2.gender = hf[t3.gender]), this.core.sendCmd("updateMyNameCard", { user: u2 }).then(function(m2) {
            var h2 = m2.content;
            return h2 && h2.timetag && a3.core.eventBus.emit("sync/updateTimetag", { myInfo: +h2.timetag }), t3.gender && (u2.gender = t3.gender), a3.myInfo = Dt({}, a3.myInfo, u2), a3.core.eventBus.emit("forwardSend/user/updateUserInfo", u2), a3.myInfo;
          });
        }, a2.checkUserUpdate = function checkUserUpdate(t3) {
          var a3 = t3.from;
          if (a3 !== this.core.account) {
            var u2 = this.userInfoMap.get(a3);
            if (u2) {
              var m2 = u2.updateTime, h2 = t3.userUpdateTime;
              !isNaN(m2) && !isNaN(h2) && typeof m2 == "number" && typeof h2 == "number" && m2 < h2 && this.refreshUserInfo(a3);
            } else
              this.refreshUserInfo(a3);
          }
        }, a2.refreshUserInfo = function refreshUserInfo(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee6$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return g2.next = 2, this.getUsersNameCardFromServer({ accounts: [t3] });
                  case 2:
                    for (a3 = g2.sent, u2 = _createForOfIteratorHelperLoose$3(a3); !(m2 = u2()).done; )
                      h2 = m2.value, this.userInfoMap.set(h2.account, h2), this.core.emit("updateUserInfo", h2);
                  case 4:
                  case "end":
                    return g2.stop();
                }
            }, _callee6, this);
          }));
        }, a2.onUpdateBlackListHandler = function onUpdateBlackListHandler(t3) {
          var a3 = t3.content;
          a3.account ? this.core.emit("updateBlackList", a3) : this.logger.warn("onUpdateBlackListHandler: no account");
        }, a2.onUpdateMuteListHandler = function onUpdateMuteListHandler(t3) {
          var a3 = t3.content;
          a3.account ? this.core.emit("updateMuteList", a3) : this.logger.warn("onUpdateBlackListHandler: no account");
        }, a2.syncRelationsHandler = function syncRelationsHandler(t3) {
          var a3 = t3.content, u2 = a3.list, m2 = a3.timetag, h2 = { blackList: [], muteList: [] };
          return m2 && this.core.eventBus.emit("sync/updateTimetag", { relations: m2 }), u2 && u2.length && forEach$1(u2).call(u2, function(t4) {
            var a4 = function formatRelationMember(t5) {
              var a5 = { account: t5.account, updateTime: +t5.updateTime, createTime: +t5.createTime };
              return t5.isMuted === "1" && (a5.isMuted = true), t5.isBlack === "1" && (a5.isBlack = true), a5;
            }(t4);
            a4.isBlack && h2.blackList.push(a4), a4.isMuted && h2.muteList.push(a4);
          }), this.core.emit("relations", h2), zi.resolve(h2);
        }, a2.syncMyNameCardHandler = function syncMyNameCardHandler(t3) {
          t3.content.user && (this.myInfo = formatUser(t3.content.user), this.core.emit("syncMyNameCard", this.myInfo), this.core.eventBus.emit("sync/updateTimetag", { myInfo: t3.content.timetag }));
        }, a2.onUpdateMyNameCardHandler = function onUpdateMyNameCardHandler(t3) {
          var a3 = t3.content.user;
          a3 ? (Dt(this.myInfo, formatUser(a3)), this.core.emit("updateMyNameCard", this.myInfo)) : this.logger.warn("onUpdateMyNameCardHandler no user info");
        }, UserService;
      }(op);
      var sy = { "4_12": "syncMsgReceipts", "4_14": "syncSessionAck", "4_20": "syncSuperTeamSessionAck", "4_22": "nimSyncSessionsWithMoreRoaming", "4_25": "syncSessionReliableInfo", "7_12": "multiSyncMsgReceipt", "7_16": "markSessionAck", "7_25": "markMultSessionsAck", "7_116": "syncMarkSessionAck", "21_25": "markSuperTeamSessionAck", "21_32": "markMultSuperTeamSessionsAck", "21_125": "syncMarkSuperTeamSessionAck", "4_23": "nimSyncStickTopSessions", "23_12": "nimAddStickTopSession", "23_13": "nimDeleteStickTopSession", "23_14": "nimUpdateStickTopSession", "23_112": "nimMultiSyncAddStickTopSession", "23_113": "nimMultiSyncDeleteStickTopSession", "23_114": "nimMultiSyncUpdateStickTopSession" }, cy = { msgReceiptTag: { to: 1, from: 2, time: 7, idClient: 11 }, stickTopSessionTag: { id: 1, ext: 2, createTime: 3, updateTime: 4 }, sessionAckTag: { scene: 1, to: 2, timetag: 3 }, sessionReliableSyncTag: { scene: 1, sessionId: 2, syncStatus: 3, syncEndMsgId: 4, syncEndMsgidClient: 5, syncEndMsgTime: 6, syncStartMsgid: 7, syncStartMsgidClient: 8, syncStartMsgTime: 9, nextMsgid: 10, nextMsgidClient: 11, nextMsgTime: 12, roamMsgSync: 13, offlineMsgSync: 14, netCallOfflineMsgSync: 15 } }, ly = invertSerializeMap(cy), uy = { syncMsgReceipts: { sid: 4, cid: 12, service: "session", response: [{ type: "PropertyArray", name: "msgReceipts", reflectMapper: ly.msgReceiptTag }, { type: "Long", name: "timetag" }] }, syncSessionAck: { sid: 4, cid: 14, service: "session", response: [{ type: "StrLongMap", name: "p2p" }, { type: "LongLongMap", name: "team" }, { type: "Long", name: "timetag" }] }, syncSuperTeamSessionAck: { sid: 4, cid: 20, service: "session", response: [{ type: "LongLongMap", name: "superTeam" }, { type: "Long", name: "timetag" }] }, multiSyncMsgReceipt: { sid: 7, cid: 12, service: "session", response: [{ type: "Property", name: "msgReceiptTag", reflectMapper: ly.msgReceiptTag }] }, markSessionAck: { sid: 7, cid: 16, service: "session", params: [{ type: "Byte", name: "scene" }, { type: "String", name: "to" }, { type: "Long", name: "timetag" }] }, syncMarkSessionAck: { sid: 7, cid: 116, service: "session", response: [{ type: "Byte", name: "scene" }, { type: "String", name: "to" }, { type: "Long", name: "timetag" }] }, syncMarkSuperTeamSessionAck: { sid: 21, cid: 125, service: "session", response: [{ type: "Long", name: "to" }, { type: "Long", name: "timetag" }] }, markMultSessionsAck: { sid: 7, cid: 25, service: "session", ignoreErrCodes: [700], params: [{ type: "PropertyArray", name: "datas", reflectMapper: cy.sessionAckTag }] }, markSuperTeamSessionAck: { sid: 21, cid: 25, service: "session", params: [{ type: "Long", name: "to" }, { type: "Long", name: "timetag" }] }, nimAddStickTopSession: { sid: 23, cid: 12, service: "session", params: [{ type: "Property", name: "tag", reflectMapper: cy.stickTopSessionTag }], response: [{ type: "Property", name: "data", reflectMapper: ly.stickTopSessionTag }] }, nimDeleteStickTopSession: { sid: 23, cid: 13, service: "session", params: [{ type: "Property", name: "tag", reflectMapper: cy.stickTopSessionTag }], response: [{ type: "Long", name: "timetag" }] }, nimUpdateStickTopSession: { sid: 23, cid: 14, service: "session", params: [{ type: "Property", name: "tag", reflectMapper: cy.stickTopSessionTag }], response: [{ type: "Property", name: "data", reflectMapper: ly.stickTopSessionTag }] }, nimMultiSyncAddStickTopSession: { sid: 23, cid: 112, service: "session", response: [{ type: "Property", name: "data", reflectMapper: ly.stickTopSessionTag }] }, nimMultiSyncDeleteStickTopSession: { sid: 23, cid: 113, service: "session", response: [{ type: "Long", name: "timetag" }, { type: "Property", name: "data", reflectMapper: ly.stickTopSessionTag }] }, nimMultiSyncUpdateStickTopSession: { sid: 23, cid: 114, service: "session", response: [{ type: "Property", name: "data", reflectMapper: ly.stickTopSessionTag }] }, nimSyncStickTopSessions: { sid: 4, cid: 23, service: "session", response: [{ type: "Long", name: "timetag" }, { type: "Bool", name: "isThereAnyChange" }, { type: "PropertyArray", name: "datas", reflectMapper: ly.stickTopSessionTag }] }, markMultSuperTeamSessionsAck: { sid: 21, cid: 32, service: "session", ignoreErrCodes: [700], params: [{ type: "PropertyArray", name: "datas", reflectMapper: cy.sessionAckTag }] }, nimSyncSessionsWithMoreRoaming: { sid: 4, cid: 22, service: "session", response: [] }, syncSessionReliableInfo: { sid: 4, cid: 25, service: "session", response: [] } }, dy = { id: { type: "string" }, ext: { type: "string" }, createTime: { type: "number" }, updateTime: { type: "number" } };
      function formatStickTop(t2, a2, u2) {
        u2 === void 0 && (u2 = true);
        var m2 = format(dy, t2);
        m2.isStickOnTop = u2, m2.id = a2.id, u2 || (m2.ext = "");
        var h2 = Dt(Dt({}, a2), { stickTopInfo: a2.stickTopInfo ? Dt({}, a2.stickTopInfo, m2) : m2 });
        return h2.lastMsg === void 0 && (h2.lastMsg = null), h2;
      }
      var py = function() {
        function StickTopService(t3) {
          this.core = t3;
        }
        var t2 = StickTopService.prototype;
        return t2.getSession = function getSession(t3) {
          return this.core.session.getSessionWithUncomplete({ id: t3 }) || this.core.session.createSession(t3);
        }, t2.addStickTopSession = function addStickTopSession(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a2, u2, m2, h2, g2, M2;
            return Ql.wrap(function _callee$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    return validate({ id: { type: "string", allowEmpty: false }, ext: { type: "string", required: false } }, t3), a2 = getAccountFromSessionId(t3.id), u2 = a2.scene, m2 = a2.accid, I2.next = 4, this.core.sendCmd("nimAddStickTopSession", { tag: { id: (u2 === "superTeam" ? "super_team" : u2) + "|" + m2, ext: t3.ext || "" } });
                  case 4:
                    return h2 = I2.sent, g2 = this.getSession(t3.id), M2 = formatStickTop(h2.content.data, g2), I2.abrupt("return", M2);
                  case 8:
                  case "end":
                    return I2.stop();
                }
            }, _callee, this);
          }));
        }, t2.deleteStickTopSession = function deleteStickTopSession(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a2, u2, m2, h2, g2, M2;
            return Ql.wrap(function _callee2$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    return validate({ id: { type: "string", allowEmpty: false } }, t3), a2 = getAccountFromSessionId(t3.id), u2 = a2.scene, m2 = a2.accid, I2.next = 4, this.core.sendCmd("nimDeleteStickTopSession", { tag: { id: (u2 === "superTeam" ? "super_team" : u2) + "|" + m2 } });
                  case 4:
                    return h2 = I2.sent, g2 = this.getSession(t3.id), M2 = formatStickTop({ updateTime: h2.content.timetag, ext: "" }, g2, false), I2.abrupt("return", M2);
                  case 8:
                  case "end":
                    return I2.stop();
                }
            }, _callee2, this);
          }));
        }, t2.updateStickTopSession = function updateStickTopSession(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a2, u2, m2, h2, g2, M2;
            return Ql.wrap(function _callee3$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    return validate({ id: { type: "string", allowEmpty: false }, ext: { type: "string", required: false } }, t3), a2 = getAccountFromSessionId(t3.id), u2 = a2.scene, m2 = a2.accid, I2.next = 4, this.core.sendCmd("nimUpdateStickTopSession", { tag: { id: (u2 === "superTeam" ? "super_team" : u2) + "|" + m2, ext: t3.ext || "" } });
                  case 4:
                    return h2 = I2.sent, g2 = this.getSession(t3.id), M2 = formatStickTop(h2.content.data, g2), I2.abrupt("return", M2);
                  case 8:
                  case "end":
                    return I2.stop();
                }
            }, _callee3, this);
          }));
        }, t2.stickTopSessionHandler = function stickTopSessionHandler(t3, a2) {
          a2 === void 0 && (a2 = true);
          var u2 = getAccountFromSessionId(t3.id, "|"), m2 = u2.scene + "-" + u2.accid;
          return formatStickTop(t3, this.getSession(m2), a2);
        }, StickTopService;
      }(), hy = function() {
        function UnreadModuleService(t3) {
          this.core = t3, this.logger = t3.logger;
        }
        var t2 = UnreadModuleService.prototype;
        return t2.canSessionResetUnreadCount = function canSessionResetUnreadCount(t3) {
          var a2 = t3.id;
          if (t3.lastMsg === void 0)
            throw new Error("Session::canSessionResetUnreadCount: session " + a2 + " is not completly, lastMsg undefined");
          return t3.lastMsg !== null || t3.unread > 0 ? !(t3.ack && t3.lastMsg && t3.ack >= t3.lastMsg.time) || (this.logger.log("Session::canSessionResetUnreadCount: session " + a2 + " reset failed, ack time is greater than last message time"), false) : (this.logger.log("Session::canSessionResetUnreadCount: session " + a2 + " doesn't need to be updated, lastMsg null and unread 0"), false);
        }, t2.filterSessionForResetUnreadCount = function filterSessionForResetUnreadCount(t3) {
          var a2 = this, u2 = { cmd: "markMultSuperTeamSessionsAck", params: [] }, m2 = { cmd: "markMultSessionsAck", params: [] };
          return forEach$1(t3).call(t3, function(t4) {
            var h2;
            try {
              if (!a2.canSessionResetUnreadCount(t4))
                return;
              var g2 = getAccountFromSessionId(t4.id), M2 = g2.accid, I2 = g2.scene, S2 = { to: M2, sessionId: t4.id, timetag: ((h2 = t4 == null ? void 0 : t4.lastMsg) === null || h2 === void 0 ? void 0 : h2.time) || t4.updateTime || 0 }, T2 = function generateSceneForCmd(t5) {
                return formatReverse({ scene: { type: "enum", values: Dd } }, t5);
              }({ scene: I2 });
              I2 === "superTeam" ? u2.params.push(S2) : m2.params.push(Dt(Dt({}, S2), T2));
            } catch (t5) {
              a2.logger.warn(t5);
            }
          }), { superTeam: u2, p2pOrTeam: m2 };
        }, UnreadModuleService;
      }();
      function chunk(t2, a2) {
        t2 = t2 || [], a2 = a2 || 1, a2 = Math.max(Math.floor(a2), 1);
        for (var u2 = [], m2 = 0; m2 < t2.length; m2 += a2)
          u2.push(slice(t2).call(t2, m2, m2 + a2));
        return u2;
      }
      function _createForOfIteratorHelperLoose$2(t2, a2) {
        var u2, m2 = es !== void 0 && $l(t2) || t2["@@iterator"];
        if (m2)
          return bind$1(u2 = (m2 = m2.call(t2)).next).call(u2, m2);
        if (Dn(t2) || (m2 = function _unsupportedIterableToArray$2(t3, a3) {
          if (t3) {
            var u3;
            if (typeof t3 == "string")
              return _arrayLikeToArray$2(t3, a3);
            var m3 = slice(u3 = {}.toString.call(t3)).call(u3, 8, -1);
            return m3 === "Object" && t3.constructor && (m3 = t3.constructor.name), m3 === "Map" || m3 === "Set" ? jl(t3) : m3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m3) ? _arrayLikeToArray$2(t3, a3) : void 0;
          }
        }(t2)) || a2 && t2 && typeof t2.length == "number") {
          m2 && (t2 = m2);
          var h2 = 0;
          return function() {
            return h2 >= t2.length ? { done: true } : { done: false, value: t2[h2++] };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _arrayLikeToArray$2(t2, a2) {
        (a2 == null || a2 > t2.length) && (a2 = t2.length);
        for (var u2 = 0, m2 = Array(a2); u2 < a2; u2++)
          m2[u2] = t2[u2];
        return m2;
      }
      var gy = function(t2) {
        function SessionService(a3, u2) {
          var m2;
          return (m2 = t2.call(this, "session", a3) || this).list = new fc(), m2.unreadCountFilterFn = function(t3) {
            return true;
          }, m2.lastMessageFilterFn = function(t3) {
            return true;
          }, m2.initEventListeners(), registerParser({ cmdMap: sy, cmdConfig: uy }), m2.stickTopService = new py(a3), m2.unreadModule = new hy(a3), u2 && m2.setOptions(u2), m2;
        }
        Nt(SessionService, t2);
        var a2 = SessionService.prototype;
        return a2.setOptions = function setOptions(t3) {
          typeof (t3 == null ? void 0 : t3.unreadCountFilterFn) == "function" && (this.unreadCountFilterFn = t3.unreadCountFilterFn), typeof (t3 == null ? void 0 : t3.lastMessageFilterFn) == "function" && (this.lastMessageFilterFn = t3.lastMessageFilterFn);
        }, a2.reset = function reset() {
          var t3;
          forEach$1(t3 = this.list).call(t3, function(t4) {
            t4.unreadMsgs = [];
          }), this.list.clear();
        }, a2.initEventListeners = function initEventListeners() {
          var t3, a3, u2, m2, h2 = this;
          this.core.eventBus.on("session/syncMsgs", bind$1(t3 = this.onSyncMsgs).call(t3, this)), this.core.eventBus.on("session/updateForNewMsg", bind$1(a3 = this.updateSessionWithMsg).call(a3, this)), this.core.eventBus.on("session/updateForModifyMsg", bind$1(u2 = this.updateSessionByModifyMsg).call(u2, this)), this.core.eventBus.on("session/updateForClearMsg", function(t4, a4) {
            a4 === void 0 && (a4 = true), t4 && t4.length > 0 && forEach$1(t4).call(t4, function(t5) {
              h2.updateSession({ id: t5.sessionId, lastMsg: null, unread: 0, unreadMsgs: [] }, a4);
            });
          }), this.core.eventBus.on("session/updateForDeletedMsg", bind$1(m2 = this.updateSessionForDeletedMsg).call(m2, this));
        }, a2.createSession = function createSession(t3, a3) {
          try {
            var u2 = getAccountFromSessionId(t3);
            return { id: t3, scene: u2.scene, to: u2.accid, lastMsg: a3, updateTime: a3 ? a3.time : 0, unread: 0, unreadMsgs: [], ack: 0 };
          } catch (a4) {
            throw this.logger.error("Failed to create session with " + t3, a4), new Error("Failed to create session with " + t3);
          }
        }, a2.getSession = function getSession(t3) {
          validate({ id: { type: "string", allowEmpty: false } }, t3);
          var a3 = this.list.get(t3.id);
          if (this.isSessionComplete(a3))
            return a3;
        }, a2.getSessionWithUncomplete = function getSessionWithUncomplete(t3) {
          return this.list.get(t3.id);
        }, a2.getAllSessions = function getAllSessions() {
          for (var t3, a3 = [], u2 = _createForOfIteratorHelperLoose$2(this.list); !(t3 = u2()).done; ) {
            var m2 = t3.value;
            m2[0];
            var h2 = m2[1];
            this.isSessionComplete(h2) && a3.push(h2);
          }
          return a3;
        }, a2.getSessions = function getSessions(t3) {
          validate({ limit: { type: "number", required: false }, lastSessionId: { type: "string", allowEmpty: false, required: false }, desc: { type: "boolean", required: false } }, t3);
          var a3 = [], u2 = t3.limit, m2 = u2 === void 0 ? 100 : u2, h2 = t3.desc, g2 = h2 === void 0 || h2, M2 = t3.lastSessionId, I2 = 0;
          if (g2) {
            for (var S2, T2, C2 = _createForOfIteratorHelperLoose$2(this.list); !(T2 = C2()).done; ) {
              var b2 = T2.value, E2 = b2[0], k2 = b2[1];
              if (M2 === E2)
                break;
              this.isSessionComplete(k2) && a3.push(k2);
            }
            return reverse$1(S2 = slice(a3).call(a3, -m2)).call(S2);
          }
          for (var w2, R2 = _createForOfIteratorHelperLoose$2(this.list); !(w2 = R2()).done; ) {
            var A2 = w2.value, N2 = A2[0], x2 = A2[1];
            if (M2)
              N2 === M2 && (M2 = void 0);
            else if (this.isSessionComplete(x2)) {
              if (++I2 > m2)
                break;
              a3.push(x2);
            }
          }
          return a3;
        }, a2.resetSessionUnreadCount = function resetSessionUnreadCount(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2, m2, h2, g2, M2, I2, S2, T2, C2 = this;
            return Ql.wrap(function _callee$(b2) {
              for (; ; )
                switch (b2.prev = b2.next) {
                  case 0:
                    if (validate({ id: { type: "string", allowEmpty: false } }, t3), validate({ id: { type: "string", allowEmpty: false } }, t3), u2 = t3.id, m2 = this.list.get(u2)) {
                      b2.next = 7;
                      break;
                    }
                    throw this.logger.warn("resetSessionUnreadCount: can not find session " + u2), new Error("Session::canSessionResetUnreadCount: can not find session " + u2);
                  case 7:
                    h2 = false;
                    try {
                      h2 = this.unreadModule.canSessionResetUnreadCount(m2);
                    } catch (t4) {
                      this.logger.warn(t4);
                    }
                    if (h2 !== false) {
                      b2.next = 11;
                      break;
                    }
                    return b2.abrupt("return");
                  case 11:
                    return g2 = getAccountFromSessionId(u2), M2 = g2.accid, I2 = g2.scene, S2 = { to: M2, timetag: ((a3 = m2 == null ? void 0 : m2.lastMsg) === null || a3 === void 0 ? void 0 : a3.time) || m2.updateTime || 0 }, T2 = "markSuperTeamSessionAck", I2 !== "superTeam" && (S2.scene = I2 === "p2p" ? 0 : 1, T2 = "markSessionAck"), b2.abrupt("return", this.core.sendCmd(T2, S2).then(function() {
                      var t4 = C2.storeUnreadByAck(u2, S2.timetag);
                      t4 && C2.core.emit("updateSession", t4);
                    }));
                  case 16:
                  case "end":
                    return b2.stop();
                }
            }, _callee, this);
          }));
        }, a2.resetMultiSessionUnreadCount = function resetMultiSessionUnreadCount(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a3, u2, m2, h2, g2, M2, I2, S2, T2, C2, b2, E2, k2, w2, R2 = this;
            return Ql.wrap(function _callee2$(A2) {
              for (; ; )
                switch (A2.prev = A2.next) {
                  case 0:
                    validate({ ids: { type: "array", itemType: "string", min: 1 } }, t3), m2 = filter(a3 = map$6(u2 = t3.ids).call(u2, function(t4) {
                      return R2.list.get(t4);
                    })).call(a3, function(a4, u3) {
                      return !!a4 || (R2.logger.warn("Session::canSessionResetUnreadCount: can not find session " + t3.ids[u3]), false);
                    }), h2 = this.unreadModule.filterSessionForResetUnreadCount(m2), g2 = h2.superTeam, M2 = h2.p2pOrTeam, I2 = chunk(g2.params, 50), S2 = chunk(M2.params, 50), T2 = _createForOfIteratorHelperLoose$2(I2);
                  case 6:
                    if ((C2 = T2()).done) {
                      A2.next = 13;
                      break;
                    }
                    return b2 = C2.value, A2.next = 10, this.core.sendCmd(g2.cmd, { datas: b2 });
                  case 10:
                    forEach$1(b2).call(b2, function(t4) {
                      var a4 = R2.storeUnreadByAck(t4.sessionId, t4.timetag);
                      a4 && R2.core.emit("updateSession", a4);
                    });
                  case 11:
                    A2.next = 6;
                    break;
                  case 13:
                    E2 = _createForOfIteratorHelperLoose$2(S2);
                  case 14:
                    if ((k2 = E2()).done) {
                      A2.next = 21;
                      break;
                    }
                    return w2 = k2.value, A2.next = 18, this.core.sendCmd(M2.cmd, { datas: w2 });
                  case 18:
                    forEach$1(w2).call(w2, function(t4) {
                      var a4 = R2.storeUnreadByAck(t4.sessionId, t4.timetag);
                      a4 && R2.core.emit("updateSession", a4);
                    });
                  case 19:
                    A2.next = 14;
                    break;
                  case 21:
                  case "end":
                    return A2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.resetAllSessionsUnreadCount = function resetAllSessionsUnreadCount() {
          var t3, a3 = [];
          return forEach$1(t3 = this.list).call(t3, function(t4) {
            a3.push(t4.id);
          }), a3.length === 0 ? zi.resolve() : this.resetMultiSessionUnreadCount({ ids: a3 });
        }, a2.deleteSession = function deleteSession(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            return Ql.wrap(function _callee3$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    if (validate({ id: { type: "string", allowEmpty: false }, isSyncToServer: { type: "boolean", required: false } }, t3), this.list.delete(t3.id), !this.core.msgLog || !t3.isSyncToServer) {
                      a3.next = 5;
                      break;
                    }
                    return a3.next = 5, this.core.msgLog.deleteRoamingMsgs({ ids: [t3.id] });
                  case 5:
                  case "end":
                    return a3.stop();
                }
            }, _callee3, this);
          }));
        }, a2.deleteAllSessionsFromLocal = function deleteAllSessionsFromLocal() {
          this.list.clear();
        }, a2.addStickTopSession = function addStickTopSession(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a3;
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return u2.next = 2, this.stickTopService.addStickTopSession(t3);
                  case 2:
                    return a3 = u2.sent, this.list.set(a3.id, a3), u2.abrupt("return", a3);
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.deleteStickTopSession = function deleteStickTopSession(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var a3;
            return Ql.wrap(function _callee5$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return u2.next = 2, this.stickTopService.deleteStickTopSession(t3);
                  case 2:
                    return a3 = u2.sent, this.list.set(a3.id, a3), u2.abrupt("return", a3);
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.updateStickTopSession = function updateStickTopSession(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var a3;
            return Ql.wrap(function _callee6$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return u2.next = 2, this.stickTopService.updateStickTopSession(t3);
                  case 2:
                    return a3 = u2.sent, this.list.set(a3.id, a3), u2.abrupt("return", a3);
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee6, this);
          }));
        }, a2.nimMultiSyncAddStickTopSessionHandler = function nimMultiSyncAddStickTopSessionHandler(t3) {
          var a3 = this.stickTopService.stickTopSessionHandler(t3.content.data);
          this.list.set(a3.id, a3), this.core.emit("updateSession", a3);
        }, a2.nimMultiSyncDeleteStickTopSessionHandler = function nimMultiSyncDeleteStickTopSessionHandler(t3) {
          var a3 = this.stickTopService.stickTopSessionHandler({ id: t3.content.data.id, updateTime: t3.content.timetag, ext: "" }, false);
          this.list.set(a3.id, a3), this.core.emit("updateSession", a3);
        }, a2.nimMultiSyncUpdateStickTopSessionHandler = function nimMultiSyncUpdateStickTopSessionHandler(t3) {
          var a3 = this.stickTopService.stickTopSessionHandler(t3.content.data);
          this.list.set(a3.id, a3), this.core.emit("updateSession", a3);
        }, a2.nimSyncStickTopSessionsHandler = function nimSyncStickTopSessionsHandler(t3) {
          var a3, u2 = this;
          if (this.core.eventBus.emit("sync/updateTimetag", { stickTopSessions: t3.content.timetag }), t3.content.isThereAnyChange) {
            var m2 = t3.content.datas, h2 = [];
            forEach$1(a3 = this.list).call(a3, function(t4) {
              var a4;
              t4 && ((a4 = t4 == null ? void 0 : t4.stickTopInfo) === null || a4 === void 0 ? void 0 : a4.isStickOnTop) && h2.push(t4);
            }), forEach$1(h2).call(h2, function(t4) {
              var a4 = t4.id;
              if (!find(m2).call(m2, function(t5) {
                var u4 = getAccountFromSessionId(t5.id, "|");
                return u4.scene + "-" + u4.accid === a4;
              })) {
                var u3 = {}, h3 = getAccountFromSessionId(a4, "-"), g2 = h3.scene, M2 = h3.accid;
                u3.id = g2 + "|" + M2, u3.ext = "", u3.isTop = false, m2.push(u3);
              }
            }), forEach$1(m2).call(m2, function(t4) {
              var a4;
              t4.isTop === false ? (delete t4.isTop, a4 = u2.stickTopService.stickTopSessionHandler(t4, false)) : a4 = u2.stickTopService.stickTopSessionHandler(t4), u2.list.set(a4.id, a4);
            });
          }
        }, a2.updateSessionWithMsg = function updateSessionWithMsg(t3) {
          var a3, u2, m2 = true, h2 = true, g2 = typeof ((a3 = t3.pushInfo) === null || a3 === void 0 ? void 0 : a3.needPushBadge) != "boolean" || ((u2 = t3.pushInfo) === null || u2 === void 0 ? void 0 : u2.needPushBadge);
          try {
            m2 = !!this.unreadCountFilterFn(t3);
          } catch (t4) {
            this.logger.error("session:updateSessionWithMsg, unreadCountFilterFn error", t4);
          }
          try {
            h2 = !!this.lastMessageFilterFn(t3);
          } catch (t4) {
            this.logger.error("session:updateSessionWithMsg, lastMessageFilterFn error", t4);
          }
          var M2 = this.list.get(t3.sessionId) || this.createSession(t3.sessionId), I2 = false;
          if (this.logger.log("session:updateSessionWithMsg, pending ", t3.sessionId, t3.idClient, t3.idServer, h2, m2), h2 && (!M2.lastMsg || M2.lastMsg.time < t3.time || t3.status === Bd[Bd.sending] || M2.lastMsg.status === Bd[Bd.sending]) && (M2.lastMsg = t3, M2.updateTime = t3.time, I2 = true), m2 && g2 && t3.status === Bd[Bd.unread] && t3.time > (M2.ack || 0)) {
            M2.unread++;
            var S2 = M2.unreadMsgs || [];
            S2.unshift(t3), sort(S2).call(S2, function(t4, a4) {
              return a4.time - t4.time;
            }), M2.unreadMsgs = S2, I2 = true;
          }
          I2 && (this.logger.log("session:updateSessionWithMsg updating ", M2.id, M2.unread, M2.lastMsg && M2.lastMsg.idClient), this.list.set(M2.id, M2), this.core.emit("updateSession", M2));
        }, a2.updateSessionByModifyMsg = function updateSessionByModifyMsg(t3) {
          var a3 = this.list.get(t3.sessionId) || this.createSession(t3.sessionId), u2 = a3.unreadMsgs || [], m2 = findIndex$1(u2).call(u2, function(a4) {
            return a4.idClient === t3.idClient;
          });
          m2 > -1 && (u2[m2] = t3), a3.unreadMsgs = u2, this.list.set(a3.id, a3);
          var h2 = true;
          try {
            h2 = !!this.lastMessageFilterFn(t3);
          } catch (t4) {
            this.logger.error("session:updateSessionByModifyMsg, lastMessageFilterFn error", t4);
          }
          h2 && (a3.lastMsg && a3.lastMsg.idClient !== t3.idClient || (a3.lastMsg = t3, a3.updateTime = t3.time, this.logger.log("session:updateSessionByModifyMsg updating ", a3.id, a3.unread, a3.lastMsg && a3.lastMsg.idClient), this.list.set(a3.id, a3), this.core.emit("updateSession", a3)));
        }, a2.storeUnreadByAck = function storeUnreadByAck(t3, a3) {
          var u2 = this.list.get(t3) || this.createSession(t3);
          if (!(u2.ack && a3 < u2.ack)) {
            var m2 = u2.unreadMsgs || [], h2 = [], g2 = [], M2 = 0;
            return u2.unreadMsgs = [], m2.length > 0 && (forEach$1(m2).call(m2, function(t4) {
              includes(g2).call(g2, t4.idClient) || t4.time > a3 && (M2++, g2.push(t4.idClient), h2.push(t4));
            }), u2.unreadMsgs = sort(h2).call(h2, function(t4, a4) {
              return a4.time - t4.time;
            })), u2.ack = a3, u2.unread = M2, u2.lastMsg && u2.lastMsg.status === "unread" && a3 >= u2.lastMsg.time && (u2.lastMsg.status = "read"), this.list.set(t3, u2), u2;
          }
          this.logger.warn("storeUnreadByAck: not need update ack", t3, a3, u2.ack);
        }, a2.updateSession = function updateSession(t3, a3) {
          a3 === void 0 && (a3 = true);
          var u2 = t3.id, m2 = this.list.get(u2) || this.createSession(t3.id), h2 = Dt(m2, t3);
          return this.list.set(u2, h2), this.logger.log("updateSession: update", a3, pick(t3, ["id", "ack", "unread"]), h2.lastMsg && h2.lastMsg.idClient), a3 && this.core.emit("updateSession", h2), h2;
        }, a2.isSessionComplete = function isSessionComplete(t3) {
          return !!t3 && (!!(t3.id && t3.scene && t3.to) && t3.lastMsg !== void 0);
        }, a2.syncSessionAckHandler = function syncSessionAckHandler(t3) {
          var a3, u2, m2 = this, h2 = t3.content.p2p || {}, g2 = t3.content.team.m_map || {};
          this.logger.log("syncSessionAck::", h2, g2), forEach$1(a3 = Ht(h2)).call(a3, function(t4) {
            m2.updateSession({ id: "p2p-" + t4, ack: h2[t4] }, false);
          }), forEach$1(u2 = Ht(g2)).call(u2, function(t4) {
            m2.updateSession({ id: "team-" + t4, ack: g2[t4] }, false);
          });
        }, a2.syncSuperTeamSessionAckHandler = function syncSuperTeamSessionAckHandler(t3) {
          var a3, u2 = this, m2 = t3.content.superTeam.m_map;
          this.logger.log("syncSuperTeamSessionAck::", m2), forEach$1(a3 = Ht(m2)).call(a3, function(t4) {
            u2.updateSession({ id: "superTeam-" + t4, ack: m2[t4] }, false);
          });
        }, a2.syncMarkSessionAckHandler = function syncMarkSessionAckHandler(t3) {
          var a3 = t3.content, u2 = (a3.scene === 0 ? "p2p" : a3.scene === 1 ? "team" : "superTeam") + "-" + a3.to, m2 = this.list.get(u2);
          if (m2 && m2.ack && a3.timetag < m2.ack)
            this.logger.warn("syncMarkSessionAckHandler: " + u2 + " do not need update ack", m2.ack, a3.timetag);
          else {
            var h2 = this.storeUnreadByAck(u2, a3.timetag);
            h2 && this.core.emit("updateSession", h2);
          }
        }, a2.syncMarkSuperTeamSessionAckHandler = function syncMarkSuperTeamSessionAckHandler(t3) {
          t3.content.scene = 5, this.syncMarkSessionAckHandler(t3);
        }, a2.onSyncDone = function onSyncDone() {
          var t3, a3, u2, m2 = this, h2 = [];
          forEach$1(t3 = this.list).call(t3, function(t4, a4) {
            h2.push(m2.storeUnreadByAck(a4, t4.ack || 0));
          }), this.list.clear(), forEach$1(a3 = sort(h2).call(h2, function(t4, a4) {
            return t4.updateTime - a4.updateTime;
          })).call(a3, function(t4) {
            m2.list.set(t4.id, t4);
          }), (h2 = sort(u2 = filter(h2).call(h2, function(t4) {
            return m2.isSessionComplete(t4);
          })).call(u2, function(t4, a4) {
            return a4.updateTime - t4.updateTime;
          })).length > 0 && this.core.emit("sessions", h2);
        }, a2.onSyncMsgs = function onSyncMsgs(t3) {
          var a3, u2 = this, m2 = this.list.get(t3.sessionId), h2 = [];
          try {
            var g2;
            h2 = filter(g2 = t3.msgs).call(g2, function(t4) {
              var a4, m3, h3 = typeof ((a4 = t4.pushInfo) === null || a4 === void 0 ? void 0 : a4.needPushBadge) != "boolean" || ((m3 = t4.pushInfo) === null || m3 === void 0 ? void 0 : m3.needPushBadge);
              return u2.unreadCountFilterFn(JSON.parse(Un(t4))) && h3;
            });
          } catch (t4) {
            this.logger.error("session:onSyncMsgs, unreadCountFilterFn error ", t4);
          }
          var M2, I2 = [];
          try {
            var S2;
            I2 = filter(S2 = t3.msgs).call(S2, function(t4) {
              return u2.lastMessageFilterFn(JSON.parse(Un(t4)));
            });
          } catch (t4) {
            this.logger.error("session:onSyncMsgs, lastMessageFilterFn error ", t4);
          }
          I2 && I2.length > 0 && (M2 = I2[I2.length - 1], M2 = I2[0].time > M2.time ? I2[0] : M2);
          var T2 = M2 ? M2.time : 0;
          m2 || (m2 = M2 ? this.createSession(t3.sessionId, M2) : this.createSession(t3.sessionId)), m2.unreadMsgs = m2.unreadMsgs ? filter(a3 = concat(h2).call(h2, m2.unreadMsgs)).call(a3, function(t4) {
            return t4.status === Bd[Bd.unread];
          }) : filter(h2).call(h2, function(t4) {
            return t4.status === Bd[Bd.unread];
          }), m2.updateTime && m2.updateTime >= T2 || (m2.updateTime = T2), m2.lastMsg && m2.lastMsg.time >= T2 || (m2.lastMsg = M2), this.list.set(m2.id, m2);
        }, a2.updateSessionForDeletedMsg = function updateSessionForDeletedMsg(t3) {
          var a3, u2 = this, m2 = {};
          forEach$1(t3).call(t3, function(t4) {
            var a4, h2 = t4.to === u2.core.account ? t4.from : t4.to, g2 = t4.scene + "-" + h2, M2 = u2.list.get(g2);
            if (M2) {
              var I2 = some(a4 = M2.unreadMsgs).call(a4, function(a5) {
                return a5.idClient === t4.idClient;
              }), S2 = true;
              try {
                S2 = !!u2.unreadCountFilterFn(t4);
              } catch (t5) {
                u2.logger.error("session:updateSessionForDeletedMsg, unreadCountFilterFn error", t5);
              }
              var T2 = M2.ack || 0;
              if (S2 && I2 && T2 < t4.time && t4.from !== u2.core.account && M2.unread > 0 && (M2.unread = M2.unread - 1, M2.unreadMsgs && M2.unreadMsgs.length > 0)) {
                var C2, b2 = function findIndex(t5, a5) {
                  t5 = t5 || [], a5 = a5 || {};
                  for (var u3 = 0; u3 < t5.length; u3++) {
                    var m3 = true;
                    for (var h3 in a5)
                      if (t5[u3][h3] !== a5[h3]) {
                        m3 = false;
                        break;
                      }
                    if (m3)
                      return u3;
                  }
                  return -1;
                }(M2.unreadMsgs, { idClient: t4.idClient });
                b2 >= 0 && splice(C2 = M2.unreadMsgs).call(C2, b2, 1);
              }
              M2.lastMsg && M2.lastMsg.idClient === t4.idClient && (M2.lastMsg = null), m2[M2.id] = true;
            }
          }), forEach$1(a3 = Ht(m2)).call(a3, function(t4) {
            var a4 = u2.list.get(t4);
            a4 && u2.core.emit("updateSession", a4);
          });
        }, a2.multiSyncMsgReceiptHandler = function multiSyncMsgReceiptHandler(t3) {
          var a3, u2 = (a3 = t3.content) === null || a3 === void 0 ? void 0 : a3.msgReceiptTag;
          if (u2) {
            this.updateSessionMsgReceiptTime([u2], true), u2.msgReceiptTime = u2.time, u2.sessionId = "p2p-" + u2.from, u2.time, u2.from;
            var m2 = __rest(u2, ["time", "from"]);
            this.core.emit("msgReceipts", [m2]);
          }
        }, a2.syncMsgReceiptsHandler = function syncMsgReceiptsHandler(t3) {
          var a3, u2 = (a3 = t3.content) === null || a3 === void 0 ? void 0 : a3.msgReceipts;
          u2 && this.updateSessionMsgReceiptTime(u2, false);
        }, a2.updateSessionMsgReceiptTime = function updateSessionMsgReceiptTime(t3, a3) {
          var u2 = this;
          a3 === void 0 && (a3 = true), t3 && t3.length > 0 && forEach$1(t3).call(t3, function(t4) {
            var m2 = u2.list.get("p2p-" + t4.from);
            m2 || (m2 = u2.createSession("p2p-" + t4.from));
            var h2 = Uu(t4.time);
            m2.msgReceiptTime && m2.msgReceiptTime >= h2 || (m2.msgReceiptTime = h2, m2.lastMsg && m2.lastMsg.status === "sent" && h2 >= m2.lastMsg.time && (m2.lastMsg.status = "receipt"), u2.logger.log("session: update session " + m2.id + " msgReceiptTime: " + m2.msgReceiptTime), u2.list.set(m2.id, m2), a3 && u2.core.emit("updateSession", m2));
          });
        }, SessionService;
      }(op), vy = function() {
        function ModuleService(t3) {
          this.core = t3;
        }
        var t2 = ModuleService.prototype;
        return t2.notifyAddTeamMembers = function notifyAddTeamMembers(t3, a2) {
          this.core.emit("addTeamMembers", { team: t3, accounts: a2, members: generatorMembersByTeam(t3, a2) });
        }, t2.notifyUpdateTeamManagers = function notifyUpdateTeamManagers(t3, a2, u2, m2) {
          this.core.emit("updateTeamManagers", { team: { teamId: t3, memberUpdateTime: m2 }, accounts: a2, isManager: u2, members: map$6(a2).call(a2, function(a3) {
            return { id: t3 + "-" + a3, account: a3, type: u2 ? "manager" : "normal", updateTime: m2 };
          }) });
        }, t2.notifyRemoveTeamMembers = function notifyRemoveTeamMembers(t3, a2) {
          this.core.emit("removeTeamMembers", { team: t3, accounts: a2 });
        }, t2.notifyTransferTeam = function notifyTransferTeam(t3, a2, u2) {
          this.core.emit("transferTeam", { team: t3, from: { id: t3.teamId + "-" + a2, type: "normal", account: a2, updateTime: t3.memberUpdateTime }, to: { id: t3.teamId + "-" + u2, type: "owner", account: u2, updateTime: t3.memberUpdateTime } });
        }, t2.notifyUpdateTeamMembersMute = function notifyUpdateTeamMembersMute(t3, a2, u2) {
          this.core.emit("updateTeamMembersMute", { team: t3, accounts: a2, members: map$6(a2).call(a2, function(a3) {
            return { id: t3.teamId + "-" + a3, account: a3, teamId: t3.teamId, mute: u2, updateTime: t3.memberUpdateTime };
          }), mute: u2 });
        }, ModuleService;
      }();
      function cloneDeep(t2, a2) {
        if ((a2 = new fc()).get(t2))
          return t2;
        if (t2 instanceof RegExp)
          return new RegExp(t2);
        if (t2 instanceof Date)
          return new Date(t2.getTime());
        if (Dn(t2))
          return a2.set(t2, true), map$6(t2).call(t2, function(t3) {
            return cloneDeep(t3, a2);
          });
        if (typeof t2 == "object" && t2 !== null) {
          var u2;
          a2.set(t2, true);
          var m2 = {};
          return forEach$1(u2 = Ht(t2)).call(u2, function(u3) {
            m2[u3] = cloneDeep(t2[u3], a2);
          }), m2;
        }
        return t2;
      }
      var fy = function(t2) {
        function TeamService(a3) {
          var u2;
          return (u2 = t2.call(this, "team", a3) || this).myTeamMembersMap = new fc(), u2.service = new vy(a3), u2.setListeners(), registerParser({ cmdMap: Nf, cmdConfig: Pf }), u2;
        }
        Nt(TeamService, t2);
        var a2 = TeamService.prototype;
        return a2.setListeners = function setListeners() {
          var t3 = this;
          this.core.eventBus.on("forwardReceive/team/updateMyMemberInfo", function(a3) {
            t3.emitMemberUpdate(a3);
          }), this.core.eventBus.on("team/onNotification", function(a3) {
            return t3.notificationHandler(a3);
          });
        }, a2.reset = function reset() {
          this.myTeamMembersMap.clear();
        }, a2.mergeMyTeamMembers = function mergeMyTeamMembers(t3) {
          var a3 = this;
          forEach$1(t3).call(t3, function(t4) {
            var u2 = t4.teamId, m2 = a3.myTeamMembersMap.get(u2), h2 = Dt({}, m2, t4);
            a3.myTeamMembersMap.set(u2, h2);
          });
        }, a2.getTeamInfo = function getTeamInfo(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a3, u2;
            return Ql.wrap(function _callee$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false } }, t3), m2.next = 3, this.core.sendCmd("getTeamInfo", { teamId: t3.teamId });
                  case 3:
                    return a3 = m2.sent, u2 = a3.content.team, m2.abrupt("return", formatTeam(u2));
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee, this);
          }));
        }, a2.getTeams = function getTeams() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var t3, a3;
            return Ql.wrap(function _callee2$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return u2.next = 2, this.core.sendCmd("getTeams", { timetag: 0 });
                  case 2:
                    return t3 = u2.sent, a3 = t3.content.teams, u2.abrupt("return", formatTeams(a3));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.getTeamsById = function getTeamsById(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3, u2;
            return Ql.wrap(function _callee3$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ teamIds: { type: "array", itemType: "string" } }, t3), m2.next = 3, this.core.sendCmd("getTeamsById", { teamIds: t3.teamIds });
                  case 3:
                    return a3 = m2.sent, u2 = formatTeams(a3.content.teams), m2.abrupt("return", { teams: u2, tids: a3.content.tids });
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.createTeam = function createTeam(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a3, u2, m2;
            return Ql.wrap(function _callee4$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ type: { type: "enum", values: ["advanced", "normal"] }, name: { type: "string", allowEmpty: false }, level: { type: "number", required: false }, accounts: { type: "array", itemType: "string", required: false }, ps: { type: "string", allowEmpty: true, max: 5e3, required: false }, joinMode: { type: "enum", values: ["noVerify", "needVerify", "rejectAll"], required: false }, beInviteMode: { type: "enum", values: ["noVerify", "needVerify"], required: false }, inviteMode: { type: "enum", values: ["manager", "all"], required: false }, updateTeamMode: { type: "enum", values: ["manager", "all"], required: false }, updateExtMode: { type: "enum", values: ["manager", "all"], required: false }, intro: { type: "string", allowEmpty: true, required: false }, announcement: { type: "string", allowEmpty: true, required: false }, avatar: { type: "string", allowEmpty: true, required: false }, ext: { type: "string", allowEmpty: true, required: false } }, t3), a3 = generateTeam(t3), h2.next = 4, this.core.sendCmd("createTeam", { team: a3, accounts: t3.accounts || [], ps: t3.ps || "" });
                  case 4:
                    return u2 = h2.sent, m2 = formatTeam(u2.content.team), this.core.eventBus.emit("forwardSend/team/created", m2), h2.abrupt("return", m2);
                  case 8:
                  case "end":
                    return h2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.dismissTeam = function dismissTeam(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            return Ql.wrap(function _callee5$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false } }, t3), a3.next = 3, this.core.sendCmd("dismissTeam", { teamId: t3.teamId });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee5, this);
          }));
        }, a2.leaveTeam = function leaveTeam(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            return Ql.wrap(function _callee6$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false } }, t3), a3.next = 3, this.core.sendCmd("leaveTeam", { teamId: t3.teamId });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee6, this);
          }));
        }, a2.transferTeam = function transferTeam(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            return Ql.wrap(function _callee7$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, account: { type: "string", allowEmpty: false }, leave: { type: "boolean" } }, t3), a3.next = 3, this.core.sendCmd("transferTeam", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee7, this);
          }));
        }, a2.updateTeamInfo = function updateTeamInfo(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var a3;
            return Ql.wrap(function _callee8$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, joinMode: { type: "enum", values: ["noVerify", "needVerify", "rejectAll"], required: false }, beInviteMode: { type: "enum", values: ["noVerify", "needVerify"], required: false }, inviteMode: { type: "enum", values: ["manager", "all"], required: false }, updateTeamMode: { type: "enum", values: ["manager", "all"], required: false }, updateExtMode: { type: "enum", values: ["manager", "all"], required: false }, intro: { type: "string", allowEmpty: true, required: false }, announcement: { type: "string", allowEmpty: true, required: false }, avatar: { type: "string", allowEmpty: true, required: false }, ext: { type: "string", allowEmpty: true, required: false } }, t3), a3 = generateTeam(t3), u2.next = 4, this.core.sendCmd("updateTeamInfo", { team: a3 });
                  case 4:
                    return u2.abrupt("return", formatTeam(a3));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee8, this);
          }));
        }, a2.getTeamMembers = function getTeamMembers(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            var u2, m2;
            return Ql.wrap(function _callee9$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, accounts: { type: "array", itemType: "string", required: false } }, t3), h2.next = 3, this.core.sendCmd("getTeamMembers", { teamId: t3.teamId, timetag: 0 });
                  case 3:
                    if (u2 = h2.sent, m2 = formatTeamMembers((a3 = u2.content) === null || a3 === void 0 ? void 0 : a3.teamMembers), t3.accounts && t3.accounts.length > 0) {
                      h2.next = 7;
                      break;
                    }
                    return h2.abrupt("return", m2);
                  case 7:
                    return h2.abrupt("return", filter(m2).call(m2, function(a4) {
                      var u3;
                      return (u3 = t3.accounts) === null || u3 === void 0 ? void 0 : includes(u3).call(u3, a4.account);
                    }));
                  case 8:
                  case "end":
                    return h2.stop();
                }
            }, _callee9, this);
          }));
        }, a2.getMutedTeamMembers = function getMutedTeamMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            var a3, u2;
            return Ql.wrap(function _callee10$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false } }, t3), m2.next = 3, this.core.sendCmd("getMutedTeamMembers", { teamId: t3.teamId });
                  case 3:
                    return a3 = m2.sent, u2 = a3.content, m2.abrupt("return", formatTeamMembers(u2.teamMembers));
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee10, this);
          }));
        }, a2.addTeamMembers = function addTeamMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            return Ql.wrap(function _callee11$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, accounts: { type: "array", itemType: "string", min: 1 }, ps: { type: "string", allowEmpty: true, max: 5e3, required: false } }, t3), a3.next = 3, this.core.sendCmd("addTeamMembers", { teamId: t3.teamId, accounts: t3.accounts, ps: t3.ps || "", attach: t3.ext || "" });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee11, this);
          }));
        }, a2.removeTeamMembers = function removeTeamMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            return Ql.wrap(function _callee12$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, accounts: { type: "array", itemType: "string", min: 1 } }, t3), a3.next = 3, this.core.sendCmd("removeTeamMembers", { teamId: t3.teamId, accounts: t3.accounts });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee12, this);
          }));
        }, a2.applyTeam = function applyTeam(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            var a3;
            return Ql.wrap(function _callee13$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, ps: { type: "string", allowEmpty: true, max: 5e3, required: false } }, t3), u2.next = 3, this.core.sendCmd("applyTeam", { teamId: t3.teamId, ps: t3.ps || "" });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatTeam(a3.content.team));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee13, this);
          }));
        }, a2.addTeamManagers = function addTeamManagers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee14() {
            return Ql.wrap(function _callee14$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, accounts: { type: "array", min: 1, itemType: "string" } }, t3), a3.next = 3, this.core.sendCmd("addTeamManagers", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee14, this);
          }));
        }, a2.removeTeamManagers = function removeTeamManagers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee15() {
            return Ql.wrap(function _callee15$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, accounts: { type: "array", min: 1, itemType: "string" } }, t3), a3.next = 3, this.core.sendCmd("removeTeamManagers", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee15, this);
          }));
        }, a2.updateMyMemberInfo = function updateMyMemberInfo(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee16() {
            var a3, u2, m2;
            return Ql.wrap(function _callee16$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, nickInTeam: { type: "string", allowEmpty: true, required: false }, bitConfigMask: { type: "number", min: 0, max: 2, required: false }, ext: { type: "string", required: false } }, t3), a3 = generatorTeamMemberForCmd({ teamId: t3.teamId, nickInTeam: t3.nickInTeam, bitConfigMask: t3.bitConfigMask, ext: t3.ext }), h2.next = 4, this.core.sendCmd("updateMyMemberInfo", { teamMember: a3 });
                  case 4:
                    return u2 = formatTeamMember(Dt({ updateTime: new Date().getTime(), account: this.core.account }, a3)), m2 = this.emitMemberUpdate(u2), this.core.eventBus.emit("forwardSend/team/updateMyMemberInfo", m2), h2.abrupt("return", u2);
                  case 8:
                  case "end":
                    return h2.stop();
                }
            }, _callee16, this);
          }));
        }, a2.emitMemberUpdate = function emitMemberUpdate(t3) {
          t3 = formatTeamMember(t3), this.mergeMyTeamMembers([t3]), this.core.emit("updateTeamMember", t3);
          var a3 = cloneDeep(this.myTeamMembersMap.get(t3.teamId));
          return this.core.emit("myTeamMembers", [a3]), a3;
        }, a2.updateMemberNick = function updateMemberNick(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee17() {
            var a3, u2;
            return Ql.wrap(function _callee17$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, account: { type: "string", allowEmpty: false }, nickInTeam: { type: "string", allowEmpty: true } }, t3), a3 = generatorTeamMemberForCmd({ teamId: t3.teamId, nickInTeam: t3.nickInTeam, account: t3.account }), m2.next = 4, this.core.sendCmd("updateNickInTeam", { teamMember: a3 });
                  case 4:
                    return u2 = formatTeamMember(Dt({ updateTime: new Date().getTime() }, a3)), m2.abrupt("return", u2);
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee17, this);
          }));
        }, a2.muteTeamMember = function muteTeamMember(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee18() {
            return Ql.wrap(function _callee18$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, account: { type: "string", allowEmpty: false }, mute: { type: "boolean" } }, t3), a3.next = 3, this.core.sendCmd("muteTeamMember", { teamId: t3.teamId, account: t3.account, mute: t3.mute ? 1 : 0 });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee18, this);
          }));
        }, a2.getTeamMemberInvitorAccid = function getTeamMemberInvitorAccid(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee19() {
            var u2, m2;
            return Ql.wrap(function _callee19$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, accounts: { type: "array", itemType: "string", max: 200 } }, t3), u2 = { teamId: t3.teamId }, t3.accounts && t3.accounts.length > 0 && (u2.accounts = t3.accounts), h2.next = 5, this.core.sendCmd("getTeamMemberInvitorAccid", u2);
                  case 5:
                    return m2 = h2.sent, h2.abrupt("return", ((a3 = m2.content) === null || a3 === void 0 ? void 0 : a3.accountsMap) || {});
                  case 7:
                  case "end":
                    return h2.stop();
                }
            }, _callee19, this);
          }));
        }, a2.muteTeam = function muteTeam(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee20() {
            return Ql.wrap(function _callee20$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, mute: { type: "boolean" } }, t3), a3.next = 3, this.core.sendCmd("muteTeam", { teamId: t3.teamId, mute: t3.mute ? 1 : 0 });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee20, this);
          }));
        }, a2.passTeamApply = function passTeamApply(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee21() {
            var a3;
            return Ql.wrap(function _callee21$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, from: { type: "string", allowEmpty: false } }, t3), u2.prev = 1, u2.next = 4, this.core.sendCmd("passTeamApply", t3);
                  case 4:
                    this.core.eventBus.emit("forwardSend/team/passTeamApply", t3), u2.next = 12;
                    break;
                  case 7:
                    throw u2.prev = 7, u2.t0 = u2.catch(1), a3 = u2.t0, this.core.eventBus.emit("forwardSend/team/passTeamApply", t3, a3 == null ? void 0 : a3.code), u2.t0;
                  case 12:
                  case "end":
                    return u2.stop();
                }
            }, _callee21, this, [[1, 7]]);
          }));
        }, a2.rejectTeamApply = function rejectTeamApply(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee22() {
            var a3;
            return Ql.wrap(function _callee22$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, from: { type: "string", allowEmpty: false }, ps: { type: "string", max: 5e3, required: false } }, t3), u2.prev = 1, u2.next = 4, this.core.sendCmd("rejectTeamApply", { teamId: t3.teamId, from: t3.from, ps: t3.ps || "" });
                  case 4:
                    this.core.eventBus.emit("forwardSend/team/rejectTeamApply", t3), u2.next = 12;
                    break;
                  case 7:
                    throw u2.prev = 7, u2.t0 = u2.catch(1), a3 = u2.t0, this.core.eventBus.emit("forwardSend/team/rejectTeamApply", t3, a3 == null ? void 0 : a3.code), u2.t0;
                  case 12:
                  case "end":
                    return u2.stop();
                }
            }, _callee22, this, [[1, 7]]);
          }));
        }, a2.acceptTeamInvite = function acceptTeamInvite(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee23() {
            var a3;
            return Ql.wrap(function _callee23$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, from: { type: "string", allowEmpty: false } }, t3), u2.prev = 1, u2.next = 4, this.core.sendCmd("acceptTeamInvite", t3);
                  case 4:
                    this.core.eventBus.emit("forwardSend/team/acceptTeamInvite", t3), u2.next = 12;
                    break;
                  case 7:
                    throw u2.prev = 7, u2.t0 = u2.catch(1), a3 = u2.t0, this.core.eventBus.emit("forwardSend/team/acceptTeamInvite", t3, a3 == null ? void 0 : a3.code), u2.t0;
                  case 12:
                  case "end":
                    return u2.stop();
                }
            }, _callee23, this, [[1, 7]]);
          }));
        }, a2.rejectTeamInvite = function rejectTeamInvite(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee24() {
            var a3;
            return Ql.wrap(function _callee24$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, from: { type: "string", allowEmpty: false }, ps: { type: "string", max: 5e3, required: false } }, t3), u2.prev = 1, u2.next = 4, this.core.sendCmd("rejectTeamInvite", { teamId: t3.teamId, from: t3.from, ps: t3.ps || "" });
                  case 4:
                    this.core.eventBus.emit("forwardSend/team/rejectTeamInvite", t3), u2.next = 12;
                    break;
                  case 7:
                    throw u2.prev = 7, u2.t0 = u2.catch(1), a3 = u2.t0, this.core.eventBus.emit("forwardSend/team/rejectTeamInvite", t3, a3 == null ? void 0 : a3.code), u2.t0;
                  case 12:
                  case "end":
                    return u2.stop();
                }
            }, _callee24, this, [[1, 7]]);
          }));
        }, a2.notifyTeamMsgReceiptsHandler = function notifyTeamMsgReceiptsHandler(t3) {
          var a3, u2 = (a3 = t3.content) === null || a3 === void 0 ? void 0 : a3.teamMsgReceipts;
          u2 && u2.length > 0 && (this.core.emit("teamMsgReceipts", u2), this.core.emit("msgReceipts", u2));
        }, a2.syncTeamsHandler = function syncTeamsHandler(t3) {
          var a3 = t3.content;
          this.core.eventBus.emit("sync/updateTimetag", { teams: Uu(a3.timetag) });
          var u2 = a3 == null ? void 0 : a3.teams;
          if (u2 && u2.length) {
            var m2 = formatTeams(u2);
            this.core.emit("teams", m2);
          }
        }, a2.syncCreateTeamHandler = function syncCreateTeamHandler(t3) {
          var a3 = t3.content, u2 = formatTeam(a3 == null ? void 0 : a3.team), m2 = generatorMemberByTeam(u2, u2.owner, "owner");
          this.core.emit("createTeam", u2, m2);
        }, a2.syncUpdateTeamMemberHandler = function syncUpdateTeamMemberHandler(t3) {
          var a3 = t3.content, u2 = formatTeamMember(a3 == null ? void 0 : a3.teamMember);
          u2.updateTime || (u2.updateTime = new Date().getTime()), this.mergeMyTeamMembers([u2]), this.core.emit("updateTeamMember", u2);
          var m2 = cloneDeep(this.myTeamMembersMap.get(u2.teamId));
          this.core.emit("myTeamMembers", [m2]);
        }, a2.syncMyTeamMembersHandler = function syncMyTeamMembersHandler(t3) {
          var a3, u2 = t3.content;
          this.core.eventBus.emit("sync/updateTimetag", { myTeamMembers: Uu(u2.timetag) });
          var m2 = u2 == null ? void 0 : map$6(a3 = u2.teamMembers).call(a3, function(t4) {
            return formatTeamMember(t4);
          });
          this.mergeMyTeamMembers(m2), this.core.emit("myTeamMembers", cloneDeep(m2));
        }, a2.notificationHandler = function notificationHandler(t3) {
          var a3 = t3.attach, u2 = t3.scene, m2 = t3.from, h2 = t3.to, g2 = t3.time, M2 = t3.idServer, I2 = t3.idClient, S2 = a3.team, T2 = a3.account, C2 = a3.accounts, b2 = a3.type;
          if (u2 === "team")
            switch (this.logger.getDebugMode() ? this.logger.debug("team::recvNotification", M2, I2, a3) : this.logger.log("team::recvNotification", M2, I2, h2, b2, T2, C2), b2) {
              case "updateTeam":
                S2.updateTime = g2, this.core.emit("updateTeam", S2);
                break;
              case "addTeamMembers":
                this.service.notifyAddTeamMembers(S2, C2);
                break;
              case "acceptTeamInvite":
                this.service.notifyAddTeamMembers(S2, [m2]);
                break;
              case "passTeamApply":
                this.service.notifyAddTeamMembers(S2, [T2]);
                break;
              case "addTeamManagers":
                this.service.notifyUpdateTeamManagers(h2, C2, true, g2);
                break;
              case "removeTeamManagers":
                this.service.notifyUpdateTeamManagers(h2, C2, false, g2);
                break;
              case "removeTeamMembers":
                this.service.notifyRemoveTeamMembers(S2, C2);
                break;
              case "leaveTeam":
                this.service.notifyRemoveTeamMembers(S2, [m2]);
                break;
              case "dismissTeam":
                this.core.emit("dismissTeam", { teamId: h2 });
                break;
              case "transferTeam":
                this.service.notifyTransferTeam(S2, m2, T2);
                break;
              case "updateTeamMemberMute":
                this.service.notifyUpdateTeamMembersMute(S2, [T2], a3.mute);
            }
        }, TeamService;
      }(op), yy = { "4_6": "syncOfflineSysMsgs", "4_18": "syncOfflineSysMsgs", "4_19": "syncRecallMsgOfflineAndRoaming", "7_3": "onSysMsg", "7_7": "sendCustomSysMsg", "7_14": "onRecallMsg", "21_18": "onRecallMsg", "21_117": "onRecallMsg", "7_15": "syncRecallMsgOfflineAndRoaming", "21_19": "onSysMsg", "21_16": "sendSuperTeamCustomSysMsg" }, _y = { sysMsg: Dt({ time: 0, type: 1, to: 2, from: 3, content: 4, attach: 5, idServer: 6, needSaveOffline: 7, deletedIdClient: 10, deletedIdServer: 11, needcAntiSpam: 12, antiSpamContent: 13, deletedMsgCreateTime: 14, deletedMsgFromNick: 15, opeAccount: 16, envConfig: 21, callbackExt: 22, isRoutable: 105 }, Kf) }, My = invertSerializeMap(_y), Iy = { onSysMsg: { service: "systemMessage", sid: 7, cid: 3, response: [{ type: "Property", name: "sysMsg", reflectMapper: My.sysMsg }] }, sendCustomSysMsg: { service: "systemMessage", sid: 7, cid: 7, params: [{ type: "Property", name: "sysMsg", reflectMapper: _y.sysMsg }] }, sendSuperTeamCustomSysMsg: { service: "systemMessage", sid: 21, cid: 16, params: [{ type: "Property", name: "sysMsg", reflectMapper: _y.sysMsg }] }, sendFilterCustomSysMsg: { service: "systemMessage", sid: 101, cid: 7, params: [{ type: "Property", name: "sysMsg", reflectMapper: _y.sysMsg }] }, batchMarkRead: { service: "systemMessage", sid: 4, cid: 5, hasPacketResponse: false, params: [{ type: "Byte", name: "sid" }, { type: "Byte", name: "cid" }, { type: "LongArray", name: "ids" }] }, onRecallMsg: { sid: 7, cid: 14, service: "systemMessage", response: [{ type: "Property", name: "sysMsg", reflectMapper: My.sysMsg }] }, syncRecallMsgOfflineAndRoaming: { sid: 7, cid: 15, service: "systemMessage", response: [{ type: "PropertyArray", name: "sysMsgs", reflectMapper: My.sysMsg }, { type: "Long", name: "timetag" }, { type: "Byte", name: "type" }] }, syncOfflineSysMsgs: { sid: 4, cid: 9, service: "systemMessage", response: [{ type: "PropertyArray", name: "sysMsgs", reflectMapper: My.sysMsg }] } }, Sy = function(t2) {
        function SystemMessageService(a3) {
          var u2;
          return (u2 = t2.call(this, "systemMessage", a3) || this).sysMsgUnread = { total: 0, friend: 0, msg: 0, team: 0, superTeam: 0 }, u2.core.eventBus.on("logined", function() {
            u2.initEventListeners();
          }), registerParser({ cmdMap: yy, cmdConfig: Iy }), u2;
        }
        Nt(SystemMessageService, t2);
        var a2 = SystemMessageService.prototype;
        return a2.initEventListeners = function initEventListeners() {
          var t3 = this;
          this.core.eventBus.on("systemMessage/passFriendApply", function(a3) {
            t3.core.emit("updateSystemMessages", [{ idServer: a3.idServer, from: a3.account, state: "pass", type: "friendRequest" }]);
          }), this.core.eventBus.on("systemMessage/rejectFriendApply", function(a3) {
            t3.core.emit("updateSystemMessages", [{ idServer: a3.idServer, from: a3.account, state: "decline", type: "friendRequest" }]);
          });
        }, a2.doMarkSysMsgAck = function doMarkSysMsgAck(t3) {
          var a3 = [], u2 = [], m2 = ["customSuperTeam"];
          forEach$1(t3).call(t3, function(t4) {
            t4.idServer && (includes(m2).call(m2, t4.type) ? u2.push(t4.idServer) : a3.push(t4.idServer));
          }), a3.length > 0 && this.core.sendCmd("batchMarkRead", { sid: "7", cid: "3", ids: a3 }), u2.length > 0 && this.core.sendCmd("batchMarkRead", { sid: "21", cid: "19", ids: u2 });
        }, a2.sendCustomSysMsg = function sendCustomSysMsg(t3) {
          var a3 = this;
          validate({ to: { type: "string", allowEmpty: false }, type: { type: "enum", values: ["customP2p", "customTeam", "customSuperTeam"] }, attach: { type: "string", allowEmpty: false }, setting: { type: "object", rules: { needSaveOffline: { type: "boolean", required: false }, env: { type: "string", allowEmpty: false, required: false } }, required: false }, pushInfo: { type: "object", required: false, rules: Wf } }, t3);
          var u2 = t3.type === "customSuperTeam" ? "sendSuperTeamCustomSysMsg" : "sendCustomSysMsg";
          return this.core.sendCmd(u2, { sysMsg: generatorSysMsgForCmd$1(t3) }).then(function() {
            a3.logger.log("sendCustomSysMsg success");
          }).catch(function(t4) {
            throw a3.logger.error("sendCustomSysMsg failed", t4.message), t4;
          });
        }, a2.onSysMsgHandler = function onSysMsgHandler(t3) {
          var a3, u2 = (a3 = t3.content) === null || a3 === void 0 ? void 0 : a3.sysMsg;
          if (u2) {
            var m2 = typeof get(t3, "raw.r[0]") == "number" ? "" + t3.raw.r[0] : void 0;
            u2.idServer = u2.idServer || m2;
            var h2 = formatSystemMessage(u2, this.logger, jf.default);
            this.core.emit("sysMsg", h2), this.doMarkSysMsgAck([h2]);
          } else
            this.logger.warn("onSysMsg no content.sysMsg");
        }, a2.syncOfflineSysMsgsHandler = function syncOfflineSysMsgsHandler(t3) {
          var a3, u2 = this;
          if (t3.content.sysMsgs && t3.content.sysMsgs.length > 0) {
            var m2 = map$6(a3 = t3.content.sysMsgs).call(a3, function(t4) {
              return formatSystemMessage(t4, u2.logger, jf.leave);
            });
            this.core.emit("syncSysMsgs", m2), this.doMarkSysMsgAck(m2);
          }
        }, a2.onRecallMsgHandler = function onRecallMsgHandler(t3) {
          var a3, u2 = (a3 = t3.content) === null || a3 === void 0 ? void 0 : a3.sysMsg;
          if (u2) {
            var m2 = typeof get(t3, "raw.r[0]") == "number" ? "" + t3.raw.r[0] : void 0;
            u2.idServer = u2.idServer || m2;
            var h2 = formatDeletedMsgs([u2], getSceneFromRecallSysMsg(+u2.type));
            this.core.eventBus.emit("session/updateForDeletedMsg", h2);
            var g2 = formatSystemMessage(u2, this.logger, jf.default);
            this.core.emit("sysMsg", g2), this.doMarkSysMsgAck([g2]);
          } else
            this.logger.warn("onSysMsg no content.sysMsg");
        }, a2.syncRecallMsgOfflineAndRoamingHandler = function syncRecallMsgOfflineAndRoamingHandler(t3) {
          var a3 = this, u2 = t3.content, m2 = u2.timetag, h2 = u2.type, g2 = u2.sysMsgs, M2 = Uu(h2), I2 = M2 === 1 ? jf.leave : jf.roam, S2 = map$6(g2).call(g2, function(t4) {
            return formatSystemMessage(t4, a3.logger, I2);
          });
          M2 === 1 && this.doMarkSysMsgAck(S2), this.core.eventBus.emit("sync/updateTimetag", { recallMsg: m2 }), this.core.emit("syncSysMsgs", S2);
        }, SystemMessageService;
      }(op);
      function reverseFriend(t2) {
        var a2 = ["bitsExtension", "createTime", "updateTime", "passRelationShip", "relationShip", "source"], u2 = Dt({}, t2);
        return forEach$1(a2).call(a2, function(t3) {
          u2[t3] !== void 0 && (u2[t3] = Uu(u2[t3]));
        }), u2.relationShip !== void 0 && (u2.valid = u2.relationShip === 1), u2;
      }
      var Ty = { 1: "addFriend", 2: "applyFriend", 3: "passFriendApply", 4: "rejectFriendApply" };
      var Cy = { "12_4": "getFriends", "12_1": "friendReuqest", "12_2": "deleteFriend", "12_3": "updateFriend", "12_5": "syncFriends", "12_6": "syncFriendUsers", "12_101": "syncFriendRequest", "12_102": "syncDeleteFriend", "12_103": "syncUpdateFriend" }, by = { updateFriendTag: { account: 4, alias: 8, ext: 10 }, delFriendParams: { delAlias: 1 }, friendTag: { account: 4, relationShip: 5, passRelationShip: 6, source: 7, alias: 8, bitsExtension: 9, ext: 10, createTime: 11, updateTime: 12, serverex: 13 }, userTag: { account: 1, nick: 3, avatar: 4, sign: 5, gender: 6, email: 7, birth: 8, tel: 9, ext: 10, createTime: 12, updateTime: 13 } }, Ey = invertSerializeMap(by), ky = { getFriends: { sid: 12, cid: 4, service: "friend", params: [{ type: "Long", name: "timetag" }], response: [{ type: "PropertyArray", name: "friends", reflectMapper: Ey.friendTag }, { type: "Long", name: "timetag" }] }, friendReuqest: { sid: 12, cid: 1, service: "friend", params: [{ type: "String", name: "account" }, { type: "Byte", name: "type" }, { type: "String", name: "ps" }] }, deleteFriend: { sid: 12, cid: 2, service: "friend", params: [{ type: "String", name: "account" }, { type: "Property", name: "delFriendParams", reflectMapper: by.delFriendParams }] }, updateFriend: { sid: 12, cid: 3, service: "friend", params: [{ type: "Property", name: "updateFriendTag", reflectMapper: by.updateFriendTag }] }, syncFriends: { sid: 12, cid: 5, service: "friend", response: [{ type: "PropertyArray", name: "friends", entity: "friendTag", reflectMapper: Ey.friendTag }, { type: "Long", name: "timetag" }] }, syncFriendUsers: { sid: 12, cid: 6, service: "friend", response: [{ type: "PropertyArray", name: "users", entity: "userTag", reflectMapper: Ey.userTag }, { type: "Long", name: "timetag" }] }, syncFriendRequest: { sid: 12, cid: 101, service: "friend", params: [{ type: "String", name: "account" }, { type: "Byte", name: "type" }, { type: "String", name: "ps" }], response: [{ type: "String", name: "account" }, { type: "Byte", name: "type" }, { type: "String", name: "ps" }] }, syncDeleteFriend: { sid: 12, cid: 102, service: "friend", response: [{ type: "String", name: "account" }] }, syncUpdateFriend: { sid: 12, cid: 103, service: "friend", response: [{ type: "Property", name: "friend", reflectMapper: Ey.friendTag }] } }, wy = function(t2) {
        function FriendService(a3) {
          var u2;
          return u2 = t2.call(this, "friend", a3) || this, registerParser({ cmdMap: Cy, cmdConfig: ky }), u2;
        }
        Nt(FriendService, t2);
        var a2 = FriendService.prototype;
        return a2.getFriends = function getFriends() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a3, u2;
            return Ql.wrap(function _callee$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return m2.next = 2, this.core.sendCmd("getFriends", { timetag: 0 });
                  case 2:
                    return a3 = m2.sent, u2 = ((t3 = a3.content) === null || t3 === void 0 ? void 0 : t3.friends) || [], u2 = map$6(u2).call(u2, function(t4) {
                      return reverseFriend(t4);
                    }), m2.abrupt("return", u2);
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee, this);
          }));
        }, a2.addFriend = function addFriend(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a3;
            return Ql.wrap(function _callee2$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ account: { type: "string", allowEmpty: false }, ps: { type: "string", allowEmpty: false, required: false } }, t3), u2.next = 3, this.core.sendCmd("friendReuqest", { account: t3.account, type: 1, ps: t3.ps || "" });
                  case 3:
                    return a3 = new Date().getTime(), this.core.eventBus.emit("forwardSend/friend/addFriend", t3.account), u2.abrupt("return", { account: t3.account, createTime: a3, updateTime: a3, valid: true, source: 0, passRelationShip: 1, relationShip: 1, bitsExtension: 0 });
                  case 6:
                  case "end":
                    return u2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.applyFriend = function applyFriend(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            return Ql.wrap(function _callee3$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ account: { type: "string", allowEmpty: false } }, t3), a3.next = 3, this.core.sendCmd("friendReuqest", { account: t3.account, type: 2, ps: t3.ps || "" });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee3, this);
          }));
        }, a2.passFriendApply = function passFriendApply(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a3 = this;
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ account: { type: "string", allowEmpty: false } }, t3), u2.prev = 1, u2.next = 4, this.core.sendCmd("friendReuqest", { account: t3.account, type: 3, ps: t3.ps || "" }).then(function(u3) {
                      return a3.core.eventBus.emit("systemMessage/passFriendApply", t3), u3;
                    });
                  case 4:
                    this.core.eventBus.emit("forwardSend/friend/passFriendApply", t3.account), u2.next = 11;
                    break;
                  case 7:
                    throw u2.prev = 7, u2.t0 = u2.catch(1), this.core.eventBus.emit("forwardSend/friend/passFriendApply", t3.account, u2.t0), u2.t0;
                  case 11:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this, [[1, 7]]);
          }));
        }, a2.rejectFriendApply = function rejectFriendApply(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var a3 = this;
            return Ql.wrap(function _callee5$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ account: { type: "string", allowEmpty: false } }, t3), u2.prev = 1, u2.next = 4, this.core.sendCmd("friendReuqest", { account: t3.account, type: 4, ps: t3.ps || "" }).then(function(u3) {
                      return a3.core.eventBus.emit("systemMessage/rejectFriendApply", t3), u3;
                    });
                  case 4:
                    this.core.eventBus.emit("forwardSend/friend/rejectFriendApply", t3.account, t3.ps), u2.next = 11;
                    break;
                  case 7:
                    throw u2.prev = 7, u2.t0 = u2.catch(1), this.core.eventBus.emit("forwardSend/friend/rejectFriendApply", t3.account, t3.ps, u2.t0), u2.t0;
                  case 11:
                  case "end":
                    return u2.stop();
                }
            }, _callee5, this, [[1, 7]]);
          }));
        }, a2.deleteFriend = function deleteFriend(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            return Ql.wrap(function _callee6$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ account: { type: "string", allowEmpty: false }, delAlias: { type: "boolean" } }, t3), a3.next = 3, this.core.sendCmd("deleteFriend", { account: t3.account, delFriendParams: { delAlias: t3.delAlias === true ? 1 : 0 } });
                  case 3:
                    this.core.eventBus.emit("forwardSend/friend/deleteFriend", t3.account);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee6, this);
          }));
        }, a2.updateFriend = function updateFriend(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            return Ql.wrap(function _callee7$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ account: { type: "string", allowEmpty: false }, alias: { type: "string" }, ext: { type: "string", required: false } }, t3), a3.next = 3, this.core.sendCmd("updateFriend", { updateFriendTag: t3 });
                  case 3:
                    this.core.eventBus.emit("forwardSend/friend/updateFriend", t3);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee7, this);
          }));
        }, a2.syncFriendRequestHandler = function syncFriendRequestHandler(t3) {
          var a3 = function formatFriendRequest(t4) {
            var a4 = Dt({}, t4);
            try {
              a4.ps = a4.ps && JSON.parse(a4.ps);
            } catch (t5) {
            }
            if (a4.type = Ty[a4.type], a4.type === "addFriend" || a4.type === "passFriendApply") {
              var u2 = new Date().getTime();
              a4.friend = { account: t4.account, alias: "", createTime: u2, ext: "", updateTime: u2, valid: true };
            }
            return a4;
          }(t3.content);
          this.core.emit("syncFriend", a3);
        }, a2.syncDeleteFriendHandler = function syncDeleteFriendHandler(t3) {
          var a3 = t3.content.account;
          this.logger.log("friend::emit syncFriendAction: deleteFriend " + a3), this.core.emit("syncFriend", { type: "deleteFriend", account: a3 });
        }, a2.syncUpdateFriendHandler = function syncUpdateFriendHandler(t3) {
          var a3 = reverseFriend(t3.content.friend);
          this.logger.log("friend::emit syncFriendAction: updateFriend, ", a3 == null ? void 0 : a3.account), this.core.emit("syncFriend", { type: "updateFriend", friend: a3 });
        }, a2.syncFriendsHandler = function syncFriendsHandler(t3) {
          var a3 = t3.content;
          this.core.eventBus.emit("sync/updateTimetag", { friends: Uu(a3.timetag) });
          var u2 = a3 == null ? void 0 : a3.friends;
          if (u2 && u2.length) {
            var m2 = map$6(u2).call(u2, function(t4) {
              return reverseFriend(t4);
            });
            this.core.emit("friends", m2);
          }
        }, a2.syncFriendUsersHandler = function syncFriendUsersHandler(t3) {
          var a3 = t3.content;
          this.core.eventBus.emit("sync/updateTimetag", { friendUsers: Uu(a3.timetag) });
          var u2 = a3 == null ? void 0 : a3.users;
          if (u2 && u2.length) {
            var m2 = map$6(u2).call(u2, function(t4) {
              return formatUser(t4);
            });
            this.core.emit("users", m2);
          }
        }, FriendService;
      }(op);
      function formatSubscribes(t2) {
        return t2 && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return function formatSubscribe(t4) {
            var a2 = Dt({}, t4), u2 = ["subscribeTime", "time"];
            return forEach$1(u2).call(u2, function(t5) {
              a2[t5] && (a2[t5] = Uu(a2[t5]));
            }), a2;
          }(t3);
        }) : [];
      }
      function formatEvent(t2) {
        if (!t2)
          return t2;
        var a2 = t2.serverExt, u2 = __rest(t2, ["serverExt"]), m2 = ["time", "type", "value"];
        if (forEach$1(m2).call(m2, function(t3) {
          u2[t3] && (u2[t3] = Uu(u2[t3]));
        }), u2.clientType && (u2.clientType = getEnumKeyByEnumValue(qd, u2.clientType) || ""), a2)
          try {
            u2.ext = JSON.parse(a2), typeof u2.ext[0] == "string" && (u2.ext = u2.ext[0]);
          } catch (t3) {
          }
        return u2;
      }
      var Ry = { "14_1": "publishEvent", "14_2": "pushEvent", "14_3": "subscribeEvent", "14_4": "unSubscribeEventsByAccounts", "14_5": "unSubscribeEventsByType", "14_6": "querySubscribeEventsByAccounts", "14_7": "querySubscribeEventsByType", "14_9": "pushEvents" }, Ay = { msgEvent: { type: 1, value: 2, idClient: 3, ext: 4, validTime: 5, broadcastType: 6, sync: 7, validTimeType: 8, durable: 9, time: 10, idServer: 11, clientType: 12, serverConfig: 13, serverExt: 14, appid: 101, account: 103, enableMultiClient: 104, consid: 106 }, msgEventSubscribe: { type: 1, subscribeTime: 2, sync: 3, to: 102, from: 104, time: 105 } }, Ny = invertSerializeMap(Ay), xy = { publishEvent: { sid: 14, cid: 1, service: "event", params: [{ type: "Property", name: "msgEvent", reflectMapper: Ay.msgEvent }], response: [{ type: "Property", name: "msgEvent", reflectMapper: Ny.msgEvent }] }, pushEvent: { sid: 14, cid: 2, service: "event", response: [{ type: "Property", name: "msgEvent", reflectMapper: Ny.msgEvent }] }, subscribeEvent: { sid: 14, cid: 3, service: "event", params: [{ type: "Property", name: "msgEventSubscribe", reflectMapper: Ay.msgEventSubscribe }, { type: "StrArray", name: "accounts" }], response: [{ type: "StrArray", name: "accounts" }] }, unSubscribeEventsByAccounts: { sid: 14, cid: 4, service: "event", params: [{ type: "Property", name: "msgEventSubscribe", reflectMapper: Ay.msgEventSubscribe }, { type: "StrArray", name: "accounts" }], response: [{ type: "StrArray", name: "accounts" }] }, unSubscribeEventsByType: { sid: 14, cid: 5, service: "event", params: [{ type: "Property", name: "msgEventSubscribe", reflectMapper: Ay.msgEventSubscribe }] }, querySubscribeEventsByAccounts: { sid: 14, cid: 6, service: "event", params: [{ type: "Property", name: "msgEventSubscribe", reflectMapper: Ay.msgEventSubscribe }, { type: "StrArray", name: "accounts" }], response: [{ type: "PropertyArray", name: "msgEventSubscribes", reflectMapper: Ny.msgEventSubscribe }] }, querySubscribeEventsByType: { sid: 14, cid: 7, service: "event", params: [{ type: "Property", name: "msgEventSubscribe", reflectMapper: Ay.msgEventSubscribe }], response: [{ type: "PropertyArray", name: "msgEventSubscribes", reflectMapper: Ny.msgEventSubscribe }] }, pushEvents: { sid: 14, cid: 9, service: "event", response: [{ type: "PropertyArray", name: "msgEvents", reflectMapper: Ny.msgEvent }] } }, Oy = function(t2) {
        function EventService(a3) {
          var u2;
          return u2 = t2.call(this, "event", a3) || this, registerParser({ cmdMap: Ry, cmdConfig: xy }), u2;
        }
        Nt(EventService, t2);
        var a2 = EventService.prototype;
        return a2.publishEvent = function publishEvent(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2, m2, h2;
            return Ql.wrap(function _callee$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ type: { type: "number" }, value: { type: "number" }, ext: { type: "string", required: false }, validTime: { type: "number", min: 60, max: 2592e3, required: false }, broadcastType: { type: "number", required: false }, sync: { type: "boolean", required: false } }, t3), u2 = Dt(Dt({ validTime: t3.validTime || 604800, broadcastType: t3.broadcastType || 2 }, t3), { idClient: Iu(), sync: t3.sync === true ? 1 : 0 }), g2.next = 4, this.core.sendCmd("publishEvent", { msgEvent: u2 });
                  case 4:
                    return m2 = g2.sent, h2 = ((a3 = m2.content) === null || a3 === void 0 ? void 0 : a3.msgEvent) || {}, g2.abrupt("return", formatEvent(h2));
                  case 7:
                  case "end":
                    return g2.stop();
                }
            }, _callee, this);
          }));
        }, a2.subscribeEvent = function subscribeEvent(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var u2, m2, h2;
            return Ql.wrap(function _callee2$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ type: { type: "number" }, accounts: { type: "array", itemType: "string", max: 100 }, subscribeTime: { type: "number", min: 60, max: 2592e3, required: false } }, t3), u2 = Dt(Dt({ subscribeTime: 2592e3 }, t3), { sync: t3.sync === true ? 1 : 0 }), g2.next = 4, this.core.sendCmd("subscribeEvent", { msgEventSubscribe: u2, accounts: t3.accounts });
                  case 4:
                    return m2 = g2.sent, h2 = ((a3 = m2.content) === null || a3 === void 0 ? void 0 : a3.accounts) || [], g2.abrupt("return", { failedAccounts: h2 });
                  case 7:
                  case "end":
                    return g2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.unSubscribeEvents = function unSubscribeEvents(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var u2, m2, h2;
            return Ql.wrap(function _callee3$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    if (validate({ type: { type: "number" }, accounts: { type: "array", itemType: "string", max: 100, required: false } }, t3), u2 = { type: t3.type }, !(t3.accounts && t3.accounts.length > 0)) {
                      g2.next = 9;
                      break;
                    }
                    return g2.next = 5, this.core.sendCmd("unSubscribeEventsByAccounts", { msgEventSubscribe: u2, accounts: t3.accounts });
                  case 5:
                    h2 = g2.sent, m2 = ((a3 = h2.content) === null || a3 === void 0 ? void 0 : a3.accounts) || [], g2.next = 12;
                    break;
                  case 9:
                    return g2.next = 11, this.core.sendCmd("unSubscribeEventsByType", { msgEventSubscribe: u2 });
                  case 11:
                    m2 = [];
                  case 12:
                    return g2.abrupt("return", { failedAccounts: m2 });
                  case 13:
                  case "end":
                    return g2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.querySubscribeEvents = function querySubscribeEvents(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var u2;
            return Ql.wrap(function _callee4$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    if (validate({ type: { type: "number" }, accounts: { type: "array", itemType: "string", max: 100, required: false } }, t3), !(t3.accounts && t3.accounts.length > 0)) {
                      m2.next = 7;
                      break;
                    }
                    return m2.next = 4, this.core.sendCmd("querySubscribeEventsByAccounts", { msgEventSubscribe: { type: t3.type }, accounts: t3.accounts });
                  case 4:
                    u2 = m2.sent, m2.next = 10;
                    break;
                  case 7:
                    return m2.next = 9, this.core.sendCmd("querySubscribeEventsByType", { msgEventSubscribe: { type: t3.type } });
                  case 9:
                    u2 = m2.sent;
                  case 10:
                    return m2.abrupt("return", formatSubscribes((a3 = u2.content) === null || a3 === void 0 ? void 0 : a3.msgEventSubscribes));
                  case 11:
                  case "end":
                    return m2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.pushEventHandler = function pushEventHandler(t3) {
          var a3, u2 = ((a3 = t3.content) === null || a3 === void 0 ? void 0 : a3.msgEvent) || {};
          this.core.emit("pushEvents", [formatEvent(u2)]);
        }, a2.pushEventsHandler = function pushEventsHandler(t3) {
          var a3, u2 = ((a3 = t3.content) === null || a3 === void 0 ? void 0 : a3.msgEvents) || {};
          this.core.emit("pushEvents", function formatEvents(t4) {
            return Dn(t4) && t4.length > 0 ? map$6(t4).call(t4, function(t5) {
              return formatEvent(t5);
            }) : [];
          }(u2));
        }, EventService;
      }(op);
      function generateThreadMsgsParams(t2) {
        var a2 = { scene: Dd[t2.scene], from: t2.threadMsgFromAccount, to: t2.threadMsgToAccount, time: t2.threadMsgTime, idServer: t2.threadMsgIdServer }, u2 = { limit: t2.limit < 100 ? t2.limit : 100, beginTime: typeof t2.beginTime == "number" ? t2.beginTime : 0, reverse: reverse$1(t2) === true ? 1 : 0 };
        return t2.lastMsgId && (u2.lastMsgId = t2.lastMsgId), { msg: a2, threadMsgReq: u2 };
      }
      var Py, Ly = { "23_1": "getThreadMsgs", "23_2": "getMsgsByIdServer" }, Vy = { msg: Qf, threadMsgReq: { beginTime: 1, endTime: 2, lastMsgId: 3, limit: 4, reverse: 5 }, threadMsgsMeta: { total: 1, lastMsgTime: 2 } }, Uy = invertSerializeMap(Vy), Dy = { getThreadMsgs: { sid: 23, cid: 1, service: "msgExtend", params: [{ type: "Property", name: "msg", reflectMapper: Vy.msg }, { type: "Property", name: "threadMsgReq", reflectMapper: Vy.threadMsgReq }], response: [{ type: "Property", name: "threadMsg", reflectMapper: Uy.msg }, { type: "Property", name: "threadMsgsMeta", reflectMapper: Uy.threadMsgsMeta }, { type: "PropertyArray", name: "msgs", reflectMapper: Uy.msg }] }, getMsgsByIdServer: { sid: 23, cid: 2, service: "msgExtend", params: [{ type: "PropertyArray", name: "reqMsgs", reflectMapper: Vy.msg }], response: [{ type: "PropertyArray", name: "msgs", reflectMapper: Uy.msg }] } }, qy = function(t2) {
        function MsgExtendService(a3) {
          var u2;
          return u2 = t2.call(this, "msgExtend", a3) || this, registerParser({ cmdMap: Ly, cmdConfig: Dy }), u2;
        }
        Nt(MsgExtendService, t2);
        var a2 = MsgExtendService.prototype;
        return a2.getThreadMsgs = function getThreadMsgs(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2, m2, h2, g2, M2, I2, S2;
            return Ql.wrap(function _callee$(T2) {
              for (; ; )
                switch (T2.prev = T2.next) {
                  case 0:
                    return validate({ scene: { type: "enum", values: getEnumKeys(Dd) }, threadMsgFromAccount: { type: "string", allowEmpty: false }, threadMsgIdServer: { type: "string", allowEmpty: false }, threadMsgTime: { type: "number" }, threadMsgToAccount: { type: "string", allowEmpty: false }, beginTime: { type: "number", required: false }, endTime: { type: "number", required: false }, lastMsgId: { type: "string", allowEmpty: false, required: false }, limit: { type: "number", min: 1, max: 100, required: false }, reverse: { type: "boolean", required: false } }, t3), T2.next = 3, this.core.sendCmd("getThreadMsgs", generateThreadMsgsParams(t3));
                  case 3:
                    return u2 = T2.sent, m2 = u2.content, h2 = m2.msgs, g2 = m2.threadMsg, M2 = u2.content.threadMsgsMeta, I2 = getSessionId(g2, this.core.account), S2 = (a3 = this.core.session) === null || a3 === void 0 ? void 0 : a3.getSessionWithUncomplete({ id: I2 }), h2 = formatMsgs$1(h2, S2 ? { account: this.core.account, sessionAck: S2.ack, msgReceiptTime: S2.msgReceiptTime } : { account: this.core.account }), g2 = formatMsg$1(g2, S2 ? { account: this.core.account, sessionAck: S2.ack, msgReceiptTime: S2.msgReceiptTime } : { account: this.core.account }), T2.abrupt("return", { msgs: h2, threadMsg: g2, total: Uu(M2.total), timetag: Uu(M2.lastMsgTime) });
                  case 11:
                  case "end":
                    return T2.stop();
                }
            }, _callee, this);
          }));
        }, a2.getMsgsByIdServer = function getMsgsByIdServer(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a3, u2, m2, h2, g2 = this;
            return Ql.wrap(function _callee2$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return validate({ reqMsgs: { type: "array", rules: { scene: { type: "enum", values: getEnumKeys(Dd) }, from: { type: "string", allowEmpty: false }, to: { type: "string", allowEmpty: false }, idServer: { type: "string", allowEmpty: false }, time: { type: "number" } }, min: 1, max: 100 } }, t3), M2.next = 3, this.core.sendCmd("getMsgsByIdServer", { reqMsgs: map$6(a3 = t3.reqMsgs).call(a3, function(t4) {
                      return Dt(Dt({}, t4), { scene: getEnumKeyByEnumValue(Dd, t4.scene) });
                    }) });
                  case 3:
                    return m2 = M2.sent, h2 = map$6(u2 = m2.content.msgs).call(u2, function(t4) {
                      var a4, u3 = getSessionId(t4, g2.core.account), m3 = (a4 = g2.core.session) === null || a4 === void 0 ? void 0 : a4.getSessionWithUncomplete({ id: u3 });
                      return formatMsg$1(t4, m3 ? { account: g2.core.account, sessionAck: m3.ack, msgReceiptTime: m3.msgReceiptTime } : { account: g2.core.account });
                    }), M2.abrupt("return", h2);
                  case 6:
                  case "end":
                    return M2.stop();
                }
            }, _callee2, this);
          }));
        }, MsgExtendService;
      }(op);
      !function(t2) {
        t2[t2.ASC = 1] = "ASC", t2[t2.DESC = 2] = "DESC";
      }(Py || (Py = {}));
      var By, Fy = { "7_6": "getHistoryMsgs", "7_9": "deleteRoamingMsgs", "4_24": "syncClearServerHistoryMsgs", "7_18": "clearHistoryMsgsFromServer", "7_118": "multiSyncClearServerHistoryMsgs", "7_26": "nimFtsCloudMsgLogsAggWithSession", "7_27": "nimFtsCloudMsgLogs" }, Gy = { msg: Qf, clearHistoryMsgsFromServerReqTag: { type: 0, otherAccid: 1, isDeleteRoam: 2, toTid: 3, isSyncSelf: 4, time: 6, ext: 7 }, clearMsgsParamsWithSync: { type: 0, otherAccid: 1, isDeleteRoam: 2, toTid: 3, isSyncSelf: 4, fromAccid: 5, time: 6, ext: 7 }, ftsReqTag: { keyword: 1, fromTime: 2, toTime: 3, sessionLimit: 4, msglogsLimit: 5, orderRule: 6, p2pSessionList: 7, teamSessionList: 8, senderList: 9, msgTypeList: 10, msgSubTypeList: 11 } }, Hy = invertSerializeMap(Gy), jy = { deleteRoamingMsgs: { sid: 7, cid: 9, service: "msgLog", params: [{ type: "StrArray", name: "ids" }] }, getHistoryMsgs: { sid: 7, cid: 6, params: [{ type: "String", name: "to" }, { type: "Long", name: "beginTime" }, { type: "Long", name: "endTime" }, { type: "Long", name: "lastMsgId" }, { type: "Int", name: "limit" }, { type: "Bool", name: "reverse" }, { type: "LongArray", name: "msgTypes" }], response: [{ type: "PropertyArray", name: "msgs", reflectMapper: Hy.msg }], service: "msgLog" }, clearHistoryMsgsFromServer: { sid: 7, cid: 18, params: [{ type: "Property", name: "clearHistoryMsgsFromServerReqTag", reflectMapper: Gy.clearHistoryMsgsFromServerReqTag }], response: [{ type: "Long", name: "timetag" }], service: "msgLog" }, multiSyncClearServerHistoryMsgs: { sid: 7, cid: 118, response: [{ type: "Property", name: "data", reflectMapper: Hy.clearMsgsParamsWithSync }], service: "msgLog" }, syncClearServerHistoryMsgs: { sid: 4, cid: 24, service: "msgLog", response: [{ type: "PropertyArray", name: "datas", reflectMapper: Hy.clearMsgsParamsWithSync }] }, nimFtsCloudMsgLogsAggWithSession: { sid: 7, cid: 26, service: "msgLog", params: [{ type: "Property", name: "tag", reflectMapper: Gy.ftsReqTag }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: Hy.msg }] }, nimFtsCloudMsgLogs: { sid: 7, cid: 27, service: "msgLog", params: [{ type: "Property", name: "tag", reflectMapper: Gy.ftsReqTag }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: Hy.msg }] } };
      !function(t2) {
        t2[t2.p2p = 1] = "p2p", t2[t2.team = 2] = "team";
      }(By || (By = {}));
      var $y = { type: { type: "enum", values: By }, isDeleteRoam: { type: "boolean" }, isSyncSelf: { type: "boolean" }, time: { type: "number" } };
      function formatClearResult(t2) {
        var a2 = format($y, t2);
        return { sessionId: a2.type === "p2p" ? "p2p-" + a2.otherAccid : "team-" + a2.toTid, time: a2.time };
      }
      var zy = { orderRule: { type: "enum", values: Py } };
      function generateFtsTagForCmd(t2) {
        var a2, u2 = format(zy, t2);
        Dn(u2.msgTypeList) && (u2.msgTypeList = map$6(a2 = u2.msgTypeList).call(a2, function(t3) {
          return Ud[t3];
        }).join(","));
        var m2 = ["p2pSessionList", "teamSessionList", "senderList", "msgSubTypeList"];
        return forEach$1(m2).call(m2, function(t3) {
          Dn(u2[t3]) && (u2[t3] = u2[t3].join(","));
        }), u2;
      }
      var Wy = function(t2) {
        function MsgLogService(a3) {
          var u2;
          return (u2 = t2.call(this, "msgLog", a3) || this).onV2ClearHistoryMessage = function(t3) {
            var a4 = formatClearResult(t3);
            u2.core.eventBus.emit("session/updateForClearMsg", [a4], true);
          }, registerParser({ cmdMap: Fy, cmdConfig: jy }), u2.registerListener(), u2;
        }
        Nt(MsgLogService, t2);
        var a2 = MsgLogService.prototype;
        return a2.registerListener = function registerListener() {
          this.core.eventBus.on("forwardReceive/msgLog/clearHistoryMsgsFromServer", this.onV2ClearHistoryMessage);
        }, a2.deleteRoamingMsgs = function deleteRoamingMsgs(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a3, u2;
            return Ql.wrap(function _callee$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    validate({ ids: { type: "array", itemType: "string" } }, t3), a3 = [], m2.prev = 2, a3 = map$6(u2 = t3.ids).call(u2, function(t4) {
                      var a4 = getAccountFromSessionId(t4);
                      return a4.scene + "|" + a4.accid;
                    }), m2.next = 10;
                    break;
                  case 6:
                    throw m2.prev = 6, m2.t0 = m2.catch(2), this.logger.error("Failed to delete roaming msgs with " + t3.ids, m2.t0), new Error("Failed to create session with " + t3.ids);
                  case 10:
                    return m2.next = 12, this.core.sendCmd("deleteRoamingMsgs", { ids: a3 });
                  case 12:
                  case "end":
                    return m2.stop();
                }
            }, _callee, this, [[2, 6]]);
          }));
        }, a2.getHistoryMsgs = function getHistoryMsgs(t3) {
          var a3, u2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var m2, h2, g2, M2, I2, S2, T2;
            return Ql.wrap(function _callee2$(C2) {
              for (; ; )
                switch (C2.prev = C2.next) {
                  case 0:
                    return typeof ((a3 = this.core.sync) === null || a3 === void 0 ? void 0 : a3.getSyncDoneFlag) != "function" || this.core.sync.getSyncDoneFlag() || this.logger.warn("Please call getHistoryMsgs after syncdone event"), validate({ scene: { type: "enum", values: getEnumKeys(Dd) }, to: { type: "string", allowEmpty: false }, beginTime: { type: "number", required: false }, endTime: { type: "number", required: false }, limit: { type: "number", min: 1, max: 100, required: false }, reverse: { type: "boolean", required: false }, lastMsgId: { type: "string", required: false, allowEmpty: false }, asc: { type: "boolean", required: false }, msgTypes: { type: "array", itemType: "string", required: false } }, t3), h2 = t3.scene === "p2p" ? "getHistoryMsgs" : t3.scene === "team" ? "getHistoryTeamMsgs" : "getHistorySuperTeamMsgs", C2.next = 5, this.core.sendCmd(h2, assignOptions({ beginTime: 0, endTime: 0, lastMsgId: 0, limit: 100, reverse: false }, Dt(Dt({}, t3), { msgTypes: t3.msgTypes ? map$6(m2 = t3.msgTypes).call(m2, function(t4) {
                      return Ud[t4];
                    }) : [] })));
                  case 5:
                    if (g2 = C2.sent, (M2 = g2.content).msgs && M2.msgs.length > 0) {
                      C2.next = 9;
                      break;
                    }
                    return C2.abrupt("return", []);
                  case 9:
                    if (I2 = getSessionId(M2.msgs[0], this.core.account), S2 = (u2 = this.core.session) === null || u2 === void 0 ? void 0 : u2.getSessionWithUncomplete({ id: I2 }), T2 = formatMsgs$1(M2.msgs, S2 ? { account: this.core.account, sessionAck: S2.ack, msgReceiptTime: S2.msgReceiptTime } : { account: this.core.account }), t3.asc !== true) {
                      C2.next = 14;
                      break;
                    }
                    return C2.abrupt("return", sort(T2).call(T2, function(t4, a4) {
                      return t4.time - a4.time;
                    }));
                  case 14:
                    return C2.abrupt("return", T2);
                  case 15:
                  case "end":
                    return C2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.clearHistoryMsgsFromServer = function clearHistoryMsgsFromServer(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3, u2, m2;
            return Ql.wrap(function _callee3$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ scene: { type: "enum", values: ["p2p", "team"] }, to: { type: "string", allowEmpty: false }, ext: { type: "string", required: false }, isSyncSelf: { type: "boolean", required: false } }, t3), (a3 = Dt(Dt({ isDeleteRoam: 1 }, t3), { type: t3.scene === "team" ? 2 : 1, isSyncSelf: t3.isSyncSelf === true ? 1 : 0 }))[a3.type === 2 ? "toTid" : "otherAccid"] = t3.to, h2.next = 5, this.core.sendCmd("clearHistoryMsgsFromServer", { clearHistoryMsgsFromServerReqTag: a3 });
                  case 5:
                    return u2 = h2.sent, m2 = u2.content, this.core.eventBus.emit("session/updateForClearMsg", [{ sessionId: t3.scene + "-" + t3.to }], true), this.core.eventBus.emit("forwardSend/msgLog/clearHistoryMsgsFromServer", Dt(Dt({}, a3), { time: m2.timetag })), h2.abrupt("return", m2);
                  case 10:
                  case "end":
                    return h2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.multiSyncClearServerHistoryMsgsHandler = function multiSyncClearServerHistoryMsgsHandler(t3) {
          var a3 = formatClearResult(t3.content.data);
          this.core.eventBus.emit("session/updateForClearMsg", [a3], true), this.core.emit("clearServerHistoryMsgs", [a3]);
        }, a2.ftsCloudMsgLogs = function ftsCloudMsgLogs(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            return Ql.wrap(function _callee4$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.abrupt("return", this.baseFtsCloudMsgLogs(t3, "nimFtsCloudMsgLogs"));
                  case 1:
                  case "end":
                    return a3.stop();
                }
            }, _callee4, this);
          }));
        }, a2.ftsCloudMsgLogsAggWithSession = function ftsCloudMsgLogsAggWithSession(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            return Ql.wrap(function _callee5$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.abrupt("return", this.baseFtsCloudMsgLogs(t3, "nimFtsCloudMsgLogsAggWithSession"));
                  case 1:
                  case "end":
                    return a3.stop();
                }
            }, _callee5, this);
          }));
        }, a2.baseFtsCloudMsgLogs = function baseFtsCloudMsgLogs(t3, a3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var u2, m2, h2, g2 = this;
            return Ql.wrap(function _callee6$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    if (validate({ keyword: { type: "string", allowEmpty: false }, fromTime: { type: "number", required: false }, toTime: { type: "number", required: false }, sessionLimit: { type: "number", required: false }, msglogsLimit: { type: "number", required: false }, orderRule: { type: "enum", values: getEnumKeys(Py), required: false }, p2pSessionList: { type: "array", itemType: "string", required: false }, teamSessionList: { type: "array", itemType: "string", required: false }, senderList: { type: "array", itemType: "string", required: false }, msgTypeList: { type: "array", itemType: "enum", values: getEnumKeys(Ud), required: false }, msgSubTypeList: { type: "array", itemType: "number", required: false } }, t3), !(t3.fromTime && t3.toTime && t3.toTime < t3.fromTime)) {
                      M2.next = 3;
                      break;
                    }
                    throw new Ll("Request parameter error: toTime should be greater than fromTime", t3, "");
                  case 3:
                    return m2 = generateFtsTagForCmd(t3), M2.next = 6, this.core.sendCmd(a3, { tag: m2 });
                  case 6:
                    return h2 = M2.sent, M2.abrupt("return", map$6(u2 = h2.content.datas).call(u2, function(t4) {
                      var a4, u3 = getSessionId(t4, g2.core.account), m3 = (a4 = g2.core.session) === null || a4 === void 0 ? void 0 : a4.getSessionWithUncomplete({ id: u3 });
                      return formatMsg$1(t4, m3 ? { account: g2.core.account, sessionAck: m3.ack, msgReceiptTime: m3.msgReceiptTime } : { account: g2.core.account });
                    }));
                  case 8:
                  case "end":
                    return M2.stop();
                }
            }, _callee6, this);
          }));
        }, a2.syncClearServerHistoryMsgsHandler = function syncClearServerHistoryMsgsHandler(t3) {
          var a3 = function formatClearResults(t4) {
            return Dn(t4) && t4.length > 0 ? map$6(t4).call(t4, function(t5) {
              return formatClearResult(t5);
            }) : [];
          }(t3.content.datas);
          this.core.emit("clearServerHistoryMsgs", a3);
        }, MsgLogService;
      }(op), Ky = { "22_1": "requestProxy", "22_2": "onRequestProxy" }, Yy = { requestProxyTag: { zone: 1, path: 2, method: 3, header: 4, body: 5 }, requestProxyMsgTag: { from: 1, body: 2, time: 3 } }, Qy = invertSerializeMap(Yy), Jy = { requestProxy: { sid: 22, cid: 1, service: "passThrough", params: [{ type: "Property", name: "requestProxyTag", reflectMapper: Yy.requestProxyTag }], response: [{ type: "Property", name: "requestProxyTag", reflectMapper: Qy.requestProxyTag }] }, onRequestProxy: { sid: 22, cid: 2, service: "passThrough", response: [{ type: "Property", name: "proxyMsg", reflectMapper: Qy.requestProxyMsgTag }] } }, Xy = function(t2) {
        function PassThroughService(a3) {
          var u2;
          return (u2 = t2.call(this, "passThrough", a3) || this).core = a3, registerParser({ cmdMap: Ky, cmdConfig: Jy }), u2;
        }
        Nt(PassThroughService, t2);
        var a2 = PassThroughService.prototype;
        return a2.request = function request(t3) {
          return validate({ path: { type: "string", allowEmpty: false } }, t3), this.core.sendCmd("requestProxy", { requestProxyTag: t3 }).then(function(t4) {
            return t4.content.requestProxyTag;
          });
        }, a2.onRequestProxyHandler = function onRequestProxyHandler(t3) {
          var a3 = t3.content.proxyMsg;
          a3 && a3.time && (a3.time = +a3.time), this.core.emit("proxyMsg", a3);
        }, PassThroughService;
      }(op), Zy = invert({ none: 0, normal: 1, all: 3 }), e_ = invert({ normal: 0, advanced: 1 }), t_ = invert({ normal: 0, owner: 1, manager: 2 }), r_ = { noVerify: 0, needVerify: 1, rejectAll: 2 }, n_ = invert(r_), a_ = { needVerify: 0, noVerify: 1 }, i_ = invert(a_), o_ = { manager: 0, all: 1 }, s_ = invert(o_), c_ = { manager: 0, all: 1 }, l_ = invert(c_), u_ = { manager: 0, all: 1 }, d_ = invert(u_);
      function formatSuperTeam(t2) {
        var a2, u2 = ["teamId"], m2 = ["level", "memberNum", "memberUpdateTime", "createTime", "updateTime"], h2 = ["valid", "validToCurrentUser", "mute"], g2 = { type: e_, muteType: Zy, joinMode: n_, beInviteMode: i_, inviteMode: s_, updateTeamMode: l_, updateExtMode: d_ };
        t2.bits;
        var M2 = __rest(t2, ["bits"]);
        return forEach$1(u2).call(u2, function(t3) {
          M2[t3] && (M2[t3] = M2[t3].toString());
        }), forEach$1(m2).call(m2, function(t3) {
          M2[t3] !== void 0 && (M2[t3] = Uu(M2[t3]));
        }), forEach$1(h2).call(h2, function(t3) {
          M2[t3] !== void 0 && (M2[t3] = Uu(M2[t3]) === 1);
        }), forEach$1(a2 = Ht(g2)).call(a2, function(t3) {
          M2[t3] !== void 0 && (M2[t3] = g2[t3][M2[t3]] || M2[t3]);
        }), M2;
      }
      function formatSuperTeams(t2) {
        return t2 && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return formatSuperTeam(t3);
        }) : [];
      }
      function generateSuperTeam(t2) {
        var a2, u2 = Dt({}, t2), m2 = ["avatar", "name", "intro", "announcement", "ext"], h2 = { joinMode: r_, beInviteMode: a_, inviteMode: o_, updateTeamMode: c_, updateExtMode: u_ };
        return forEach$1(m2).call(m2, function(t3) {
          u2[t3] !== void 0 && (u2[t3] = u2[t3].toString());
        }), forEach$1(a2 = Ht(h2)).call(a2, function(t3) {
          u2[t3] !== void 0 && (u2[t3] = h2[t3][u2[t3]]);
        }), u2;
      }
      function generatorSuperTeamMemberForCmd(t2) {
        var a2 = ["teamId", "ext", "account", "nickInTeam"], u2 = {};
        return t2.bitConfigMask !== void 0 && (u2.bits = Uu(t2.bitConfigMask)), forEach$1(a2).call(a2, function(a3) {
          t2[a3] && (u2[a3] = t2[a3].toString());
        }), Object.prototype.hasOwnProperty.call(t2, "nickInTeam") && (u2.nickInTeam = t2.nickInTeam), u2;
      }
      function formatSuperTeamMember(t2) {
        var a2, u2 = ["teamId"], m2 = ["joinTime", "updateTime", "bitConfigMask"], h2 = ["active", "valid", "mute"], g2 = { type: t_ }, M2 = t2.bits, I2 = __rest(t2, ["bits"]);
        return M2 !== void 0 && (I2.muteTeam = Uu(M2) === 1, I2.bitConfigMask = M2), I2.id = I2.teamId + "-" + I2.account, forEach$1(u2).call(u2, function(t3) {
          I2[t3] && (I2[t3] = I2[t3].toString());
        }), forEach$1(m2).call(m2, function(t3) {
          I2[t3] !== void 0 && (I2[t3] = Uu(I2[t3]));
        }), forEach$1(h2).call(h2, function(t3) {
          I2[t3] !== void 0 && (I2[t3] = Uu(I2[t3]) === 1);
        }), forEach$1(a2 = Ht(g2)).call(a2, function(t3) {
          I2[t3] !== void 0 && (I2[t3] = g2[t3][I2[t3]] || I2[t3]);
        }), I2;
      }
      function formatSuperTeamMembers(t2) {
        return t2 && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return formatSuperTeamMember(t3);
        }) : [];
      }
      function generatorMemberBySuperTeam(t2, a2, u2) {
        return u2 === void 0 && (u2 = "normal"), { id: t2.teamId + "-" + a2, teamId: t2.teamId, account: a2, type: u2, nickInTeam: "", muteTeam: false, mute: false, joinTime: t2.memberUpdateTime, updateTime: t2.memberUpdateTime, active: true, valid: true };
      }
      function generatorMembersBySuperTeam(t2, a2, u2) {
        return u2 === void 0 && (u2 = "normal"), a2 && a2.length > 0 ? map$6(a2).call(a2, function(a3) {
          return generatorMemberBySuperTeam(t2, a3, u2);
        }) : [];
      }
      var p_ = function() {
        function ModuleService(t3) {
          this.core = t3;
        }
        var t2 = ModuleService.prototype;
        return t2.notifyAddSuperTeamMembers = function notifyAddSuperTeamMembers(t3, a2) {
          this.core.emit("addSuperTeamMembers", { team: t3, accounts: a2, members: generatorMembersBySuperTeam(t3, a2) });
        }, t2.notifyUpdateSuperTeamManagers = function notifyUpdateSuperTeamManagers(t3, a2, u2, m2) {
          this.core.emit("updateSuperTeamManagers", { team: { teamId: t3, memberUpdateTime: m2 }, accounts: a2, isManager: u2, members: map$6(a2).call(a2, function(a3) {
            return { id: t3 + "-" + a3, type: u2 ? "manager" : "normal", account: a3, updateTime: m2 };
          }) });
        }, t2.notifyRemoveSuperTeamMembers = function notifyRemoveSuperTeamMembers(t3, a2) {
          this.core.emit("removeSuperTeamMembers", { team: t3, accounts: a2 });
        }, t2.notifyTransferSuperTeam = function notifyTransferSuperTeam(t3, a2, u2) {
          this.core.emit("transferSuperTeam", { team: t3, from: { id: t3.teamId + "-" + a2, account: a2, type: "normal", updateTime: t3.memberUpdateTime }, to: { id: t3.teamId + "-" + u2, account: u2, type: "owner", updateTime: t3.memberUpdateTime } });
        }, t2.notifyUpdateSuperTeamMembersMute = function notifyUpdateSuperTeamMembersMute(t3, a2, u2) {
          this.core.emit("updateSuperTeamMembersMute", { team: t3, accounts: a2, members: map$6(a2).call(a2, function(a3) {
            return { id: t3.teamId + "-" + a3, account: a3, teamId: t3.teamId, mute: u2, updateTime: t3.memberUpdateTime };
          }), mute: u2 });
        }, ModuleService;
      }(), m_ = { "21_5": "addSuperTeamMembers", "21_6": "removeSuperTeamMembers", "21_7": "leaveSuperTeam", "21_8": "updateSuperTeamInfo", "21_9": "getSuperTeamInfo", "21_12": "getSuperTeams", "21_15": "getSuperTeamMembers", "21_10": "updateMySuperTeamMemberInfo", "21_20": "applySuperTeam", "21_21": "passSuperTeamApply", "21_22": "rejectSuperTeamApply", "21_23": "acceptSuperTeamInvite", "21_24": "rejectSuperTeamInvite", "21_26": "addSuperTeamManagers", "21_27": "removeSuperTeamManagers", "21_28": "muteSuperTeam", "21_29": "muteSuperTeamMembers", "21_30": "updateSuperTeamMemberNick", "21_31": "transferSuperTeam", "21_33": "getSuperTeamMembersByAccounts", "21_34": "queryMuteSuperTeamMembers", "21_101": "syncCreateSuperTeam", "21_109": "syncSuperTeams", "21_110": "syncUpdateSuperTeamMember", "21_111": "syncMySuperTeamMembers" }, h_ = { superTeam: { teamId: 1, name: 3, type: 4, owner: 5, level: 6, selfCustom: 7, valid: 8, memberNum: 9, memberUpdateTime: 10, createTime: 11, updateTime: 12, validToCurrentUser: 13, intro: 14, announcement: 15, joinMode: 16, bits: 17, ext: 18, serverExt: 19, avatar: 20, beInviteMode: 21, inviteMode: 22, updateTeamMode: 23, updateExtMode: 24, mute: 100, muteType: 101 }, superTeamMember: { teamId: 1, account: 3, type: 4, nickInTeam: 5, bits: 7, active: 8, valid: 9, updateTime: 11, ext: 12, mute: 13, invitorAccid: 14, joinTime: 15 } }, g_ = invertSerializeMap(h_), v_ = { getSuperTeamInfo: { sid: 21, cid: 9, service: "superTeam", params: [{ type: "Long", name: "teamId" }], response: [{ type: "Property", name: "superTeam", reflectMapper: g_.superTeam }] }, getSuperTeams: { sid: 21, cid: 12, service: "superTeam", params: [{ type: "Long", name: "timetag" }], response: [{ type: "PropertyArray", name: "superTeams", reflectMapper: g_.superTeam }, { type: "Bool", name: "isAll" }, { type: "Long", name: "timetag" }] }, updateSuperTeamInfo: { sid: 21, cid: 8, service: "superTeam", params: [{ type: "Property", name: "superTeam", reflectMapper: h_.superTeam }], response: [{ type: "Long", name: "time" }] }, addSuperTeamMembers: { sid: 21, cid: 5, service: "superTeam", params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }, { type: "String", name: "ps" }], response: [{ type: "StrArray", name: "abortedAccidList" }, { type: "Long", name: "time" }] }, removeSuperTeamMembers: { sid: 21, cid: 6, service: "superTeam", params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, addSuperTeamManagers: { sid: 21, cid: 26, service: "superTeam", params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, removeSuperTeamManagers: { sid: 21, cid: 27, service: "superTeam", params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, applySuperTeam: { sid: 21, cid: 20, service: "superTeam", params: [{ type: "Long", name: "teamId" }, { type: "String", name: "ps" }], response: [{ type: "Property", name: "superTeam", reflectMapper: g_.superTeam }] }, transferSuperTeam: { sid: 21, cid: 31, service: "superTeam", params: [{ type: "Long", name: "teamId" }, { type: "String", name: "account" }, { type: "Bool", name: "leave" }] }, muteSuperTeam: { sid: 21, cid: 28, service: "superTeam", params: [{ type: "Long", name: "teamId" }, { type: "Int", name: "mute" }] }, muteSuperTeamMembers: { sid: 21, cid: 29, service: "superTeam", params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }, { type: "Int", name: "mute" }] }, updateSuperTeamMemberNick: { sid: 21, cid: 30, service: "superTeam", params: [{ type: "Property", name: "teamMember", reflectMapper: h_.superTeamMember }] }, updateMySuperTeamMemberInfo: { sid: 21, cid: 10, service: "superTeam", params: [{ type: "Property", name: "teamMember", reflectMapper: h_.superTeamMember }] }, getSuperTeamMembersByAccounts: { sid: 21, cid: 33, service: "superTeam", params: [{ type: "StrArray", name: "memberIds" }], response: [{ type: "PropertyArray", name: "superTeamMembers", reflectMapper: g_.superTeamMember }] }, getSuperTeamMembers: { sid: 21, cid: 15, service: "superTeam", params: [{ type: "Long", name: "teamId" }, { type: "Long", name: "joinTime" }, { type: "Int", name: "limit" }, { type: "Bool", name: "reverse" }], response: [{ type: "PropertyArray", name: "superTeamMembers", reflectMapper: g_.superTeamMember }] }, queryMuteSuperTeamMembers: { sid: 21, cid: 34, service: "superTeam", params: [{ type: "Long", name: "teamId" }, { type: "Long", name: "joinTime" }, { type: "Int", name: "limit" }, { type: "Bool", name: "reverse" }], response: [{ type: "PropertyArray", name: "superTeamMembers", reflectMapper: g_.superTeamMember }] }, leaveSuperTeam: { sid: 21, cid: 7, service: "superTeam", params: [{ type: "Long", name: "teamId" }] }, passSuperTeamApply: { sid: 21, cid: 21, service: "superTeam", params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }] }, rejectSuperTeamApply: { sid: 21, cid: 22, service: "superTeam", params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, acceptSuperTeamInvite: { sid: 21, cid: 23, service: "superTeam", params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }] }, rejectSuperTeamInvite: { sid: 21, cid: 24, service: "superTeam", params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, syncSuperTeams: { sid: 21, cid: 109, service: "superTeam", response: [{ type: "PropertyArray", name: "teams", reflectMapper: g_.superTeam }, { type: "Bool", name: "isAll" }, { type: "Long", name: "timetag" }] }, syncCreateSuperTeam: { sid: 21, cid: 101, service: "superTeam", response: [{ type: "Property", name: "superTeam", reflectMapper: g_.superTeam }] }, syncUpdateSuperTeamMember: { sid: 21, cid: 110, service: "superTeam", response: [{ type: "Property", name: "teamMember", reflectMapper: g_.superTeamMember }] }, syncMySuperTeamMembers: { sid: 21, cid: 111, ext: "sync", service: "superTeam", response: [{ type: "PropertyArray", name: "teamMembers", reflectMapper: g_.superTeamMember }, { type: "Long", name: "timetag" }] } }, f_ = function(t2) {
        function SuperTeamService(a3) {
          var u2;
          return (u2 = t2.call(this, "superTeam", a3) || this).mySuperTeamMembersMap = new fc(), u2.service = new p_(a3), registerParser({ cmdMap: m_, cmdConfig: v_ }), u2.setListeners(), u2;
        }
        Nt(SuperTeamService, t2);
        var a2 = SuperTeamService.prototype;
        return a2.setListeners = function setListeners() {
          var t3 = this;
          this.core.eventBus.on("forwardReceive/superTeam/updateMyMemberInfo", function(a3) {
            t3.emitMemberUpdate(a3);
          }), this.core.eventBus.on("team/onNotification", function(a3) {
            return t3.notificationHandler(a3);
          });
        }, a2.reset = function reset() {
          this.mySuperTeamMembersMap.clear();
        }, a2.mergeMySuperTeamMembers = function mergeMySuperTeamMembers(t3) {
          var a3 = this;
          forEach$1(t3).call(t3, function(t4) {
            var u2 = t4.teamId, m2 = a3.mySuperTeamMembersMap.get(u2), h2 = Dt({}, m2, t4);
            a3.mySuperTeamMembersMap.set(u2, h2);
          });
        }, a2.getSuperTeamInfo = function getSuperTeamInfo(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a3, u2;
            return Ql.wrap(function _callee$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false } }, t3), m2.next = 3, this.core.sendCmd("getSuperTeamInfo", { teamId: t3.teamId });
                  case 3:
                    return a3 = m2.sent, u2 = a3.content.superTeam, m2.abrupt("return", formatSuperTeam(u2));
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee, this);
          }));
        }, a2.getSuperTeams = function getSuperTeams() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var t3, a3;
            return Ql.wrap(function _callee2$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return u2.next = 2, this.core.sendCmd("getSuperTeams", { timetag: 0 });
                  case 2:
                    return t3 = u2.sent, a3 = t3.content.superTeams, u2.abrupt("return", formatSuperTeams(a3));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.updateSuperTeamInfo = function updateSuperTeamInfo(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3;
            return Ql.wrap(function _callee3$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, name: { type: "string", allowEmpty: false, required: false }, joinMode: { type: "enum", values: ["noVerify", "needVerify", "rejectAll"], required: false }, beInviteMode: { type: "enum", values: ["noVerify", "needVerify"], required: false }, inviteMode: { type: "enum", values: ["manager", "all"], required: false }, updateTeamMode: { type: "enum", values: ["manager", "all"], required: false }, updateExtMode: { type: "enum", values: ["manager", "all"], required: false }, intro: { type: "string", allowEmpty: true, required: false }, announcement: { type: "string", allowEmpty: true, required: false }, avatar: { type: "string", allowEmpty: true, required: false }, ext: { type: "string", allowEmpty: true, required: false } }, t3), a3 = generateSuperTeam(t3), u2.next = 4, this.core.sendCmd("updateSuperTeamInfo", { superTeam: a3 });
                  case 4:
                    return u2.abrupt("return", formatSuperTeam(a3));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.addSuperTeamMembers = function addSuperTeamMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            return Ql.wrap(function _callee4$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, accounts: { type: "array", itemType: "string", min: 1 }, ps: { type: "string", allowEmpty: true, max: 5e3, required: false } }, t3), a3.next = 3, this.core.sendCmd("addSuperTeamMembers", { teamId: t3.teamId, accounts: t3.accounts, ps: t3.ps || "", attach: t3.ext || "" });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee4, this);
          }));
        }, a2.removeSuperTeamMembers = function removeSuperTeamMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            return Ql.wrap(function _callee5$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, accounts: { type: "array", itemType: "string", min: 1 } }, t3), a3.next = 3, this.core.sendCmd("removeSuperTeamMembers", { teamId: t3.teamId, accounts: t3.accounts });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee5, this);
          }));
        }, a2.addSuperTeamManagers = function addSuperTeamManagers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            return Ql.wrap(function _callee6$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, accounts: { type: "array", min: 1, itemType: "string" } }, t3), a3.next = 3, this.core.sendCmd("addSuperTeamManagers", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee6, this);
          }));
        }, a2.removeSuperTeamManagers = function removeSuperTeamManagers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            return Ql.wrap(function _callee7$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, accounts: { type: "array", min: 1, itemType: "string" } }, t3), a3.next = 3, this.core.sendCmd("removeSuperTeamManagers", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee7, this);
          }));
        }, a2.applySuperTeam = function applySuperTeam(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var a3;
            return Ql.wrap(function _callee8$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, ps: { type: "string", allowEmpty: true, max: 5e3, required: false } }, t3), u2.next = 3, this.core.sendCmd("applySuperTeam", { teamId: t3.teamId, ps: t3.ps || "" });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatSuperTeam(a3.content.superTeam));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee8, this);
          }));
        }, a2.transferSuperTeam = function transferSuperTeam(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            return Ql.wrap(function _callee9$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, account: { type: "string", allowEmpty: false }, leave: { type: "boolean" } }, t3), a3.next = 3, this.core.sendCmd("transferSuperTeam", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee9, this);
          }));
        }, a2.muteSuperTeam = function muteSuperTeam(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            return Ql.wrap(function _callee10$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, mute: { type: "boolean" } }, t3), a3.next = 3, this.core.sendCmd("muteSuperTeam", { teamId: t3.teamId, mute: t3.mute ? 1 : 0 });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee10, this);
          }));
        }, a2.muteSuperTeamMembers = function muteSuperTeamMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            return Ql.wrap(function _callee11$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, accounts: { type: "array", itemType: "string" }, mute: { type: "boolean" } }, t3), a3.next = 3, this.core.sendCmd("muteSuperTeamMembers", { teamId: t3.teamId, accounts: t3.accounts, mute: t3.mute ? 1 : 0 });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee11, this);
          }));
        }, a2.updateMemberNick = function updateMemberNick(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            var a3, u2;
            return Ql.wrap(function _callee12$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, account: { type: "string", allowEmpty: false }, nickInTeam: { type: "string", allowEmpty: true } }, t3), a3 = generatorSuperTeamMemberForCmd({ teamId: t3.teamId, nickInTeam: t3.nickInTeam, account: t3.account }), m2.next = 4, this.core.sendCmd("updateSuperTeamMemberNick", { teamMember: a3 });
                  case 4:
                    return u2 = formatSuperTeamMember(Dt({ updateTime: new Date().getTime() }, a3)), m2.abrupt("return", u2);
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee12, this);
          }));
        }, a2.updateMyMemberInfo = function updateMyMemberInfo(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            var a3, u2, m2;
            return Ql.wrap(function _callee13$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, nickInTeam: { type: "string", allowEmpty: true, required: false }, bitConfigMask: { type: "number", min: 0, max: 2, required: false }, ext: { type: "string", required: false } }, t3), a3 = generatorSuperTeamMemberForCmd({ teamId: t3.teamId, nickInTeam: t3.nickInTeam, bitConfigMask: t3.bitConfigMask, ext: t3.ext }), h2.next = 4, this.core.sendCmd("updateMySuperTeamMemberInfo", { teamMember: a3 });
                  case 4:
                    return u2 = formatSuperTeamMember(Dt({ updateTime: new Date().getTime(), account: this.core.account }, a3)), m2 = this.emitMemberUpdate(u2), this.core.eventBus.emit("forwardSend/superTeam/updateMyMemberInfo", m2), h2.abrupt("return", u2);
                  case 8:
                  case "end":
                    return h2.stop();
                }
            }, _callee13, this);
          }));
        }, a2.getSuperTeamMembersByAccounts = function getSuperTeamMembersByAccounts(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee14() {
            var u2, m2, h2;
            return Ql.wrap(function _callee14$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, accounts: { type: "array", itemType: "string", max: 20, min: 1 } }, t3), m2 = map$6(u2 = t3.accounts).call(u2, function(a4) {
                      return t3.teamId + "|" + a4;
                    }), g2.next = 4, this.core.sendCmd("getSuperTeamMembersByAccounts", { memberIds: m2 });
                  case 4:
                    return h2 = g2.sent, g2.abrupt("return", formatSuperTeamMembers((a3 = h2.content) === null || a3 === void 0 ? void 0 : a3.superTeamMembers));
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee14, this);
          }));
        }, a2.getSuperTeamMembers = function getSuperTeamMembers(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee15() {
            var u2;
            return Ql.wrap(function _callee15$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, joinTime: { type: "number", min: 0, required: false }, limit: { type: "number", min: 1, max: 1e3, required: false }, reverse: { type: "boolean", required: false } }, t3), m2.next = 3, this.core.sendCmd("getSuperTeamMembers", Dt({ joinTime: 0, limit: 100, reverse: false }, t3));
                  case 3:
                    return u2 = m2.sent, m2.abrupt("return", formatSuperTeamMembers((a3 = u2.content) === null || a3 === void 0 ? void 0 : a3.superTeamMembers));
                  case 5:
                  case "end":
                    return m2.stop();
                }
            }, _callee15, this);
          }));
        }, a2.queryMuteMembers = function queryMuteMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee16() {
            var a3, u2;
            return Ql.wrap(function _callee16$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, joinTime: { type: "number", min: 0, required: false }, limit: { type: "number", min: 1, required: false }, reverse: { type: "boolean", required: false } }, t3), m2.next = 3, this.core.sendCmd("queryMuteSuperTeamMembers", Dt({ limit: 100, joinTime: 0, reverse: false }, t3));
                  case 3:
                    return a3 = m2.sent, u2 = a3.content, m2.abrupt("return", formatSuperTeamMembers(u2.superTeamMembers));
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee16, this);
          }));
        }, a2.leaveSuperTeam = function leaveSuperTeam(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee17() {
            return Ql.wrap(function _callee17$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false } }, t3), a3.next = 3, this.core.sendCmd("leaveSuperTeam", { teamId: t3.teamId });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee17, this);
          }));
        }, a2.passSuperTeamApply = function passSuperTeamApply(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee18() {
            var a3;
            return Ql.wrap(function _callee18$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, from: { type: "string", allowEmpty: false } }, t3), u2.prev = 1, u2.next = 4, this.core.sendCmd("passSuperTeamApply", t3);
                  case 4:
                    this.core.eventBus.emit("forwardSend/superTeam/passTeamApply", t3), u2.next = 12;
                    break;
                  case 7:
                    throw u2.prev = 7, u2.t0 = u2.catch(1), a3 = u2.t0, this.core.eventBus.emit("forwardSend/superTeam/passTeamApply", t3, a3 == null ? void 0 : a3.code), u2.t0;
                  case 12:
                  case "end":
                    return u2.stop();
                }
            }, _callee18, this, [[1, 7]]);
          }));
        }, a2.rejectSuperTeamApply = function rejectSuperTeamApply(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee19() {
            var a3;
            return Ql.wrap(function _callee19$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, from: { type: "string", allowEmpty: false }, ps: { type: "string", max: 5e3, required: false } }, t3), u2.prev = 1, u2.next = 4, this.core.sendCmd("rejectSuperTeamApply", { teamId: t3.teamId, from: t3.from, ps: t3.ps || "" });
                  case 4:
                    this.core.eventBus.emit("forwardSend/superTeam/rejectSuperTeamApply", t3), u2.next = 12;
                    break;
                  case 7:
                    throw u2.prev = 7, u2.t0 = u2.catch(1), a3 = u2.t0, this.core.eventBus.emit("forwardSend/superTeam/rejectSuperTeamApply", t3, a3 == null ? void 0 : a3.code), u2.t0;
                  case 12:
                  case "end":
                    return u2.stop();
                }
            }, _callee19, this, [[1, 7]]);
          }));
        }, a2.acceptSuperTeamInvite = function acceptSuperTeamInvite(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee20() {
            var a3;
            return Ql.wrap(function _callee20$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, from: { type: "string", allowEmpty: false } }, t3), u2.prev = 1, u2.next = 4, this.core.sendCmd("acceptSuperTeamInvite", t3);
                  case 4:
                    this.core.eventBus.emit("forwardSend/superTeam/acceptSuperTeamInvite", t3), u2.next = 12;
                    break;
                  case 7:
                    throw u2.prev = 7, u2.t0 = u2.catch(1), a3 = u2.t0, this.core.eventBus.emit("forwardSend/superTeam/acceptSuperTeamInvite", t3, a3 == null ? void 0 : a3.code), u2.t0;
                  case 12:
                  case "end":
                    return u2.stop();
                }
            }, _callee20, this, [[1, 7]]);
          }));
        }, a2.rejectSuperTeamInvite = function rejectSuperTeamInvite(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee21() {
            var a3;
            return Ql.wrap(function _callee21$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ teamId: { type: "string", regExp: /\d+/, allowEmpty: false }, from: { type: "string", allowEmpty: false }, ps: { type: "string", max: 5e3, required: false } }, t3), u2.prev = 1, u2.next = 4, this.core.sendCmd("rejectSuperTeamInvite", { teamId: t3.teamId, from: t3.from, ps: t3.ps || "" });
                  case 4:
                    this.core.eventBus.emit("forwardSend/superTeam/rejectSuperTeamInvite", t3), u2.next = 12;
                    break;
                  case 7:
                    throw u2.prev = 7, u2.t0 = u2.catch(1), a3 = u2.t0, this.core.eventBus.emit("forwardSend/superTeam/rejectSuperTeamInvite", t3, a3 == null ? void 0 : a3.code), u2.t0;
                  case 12:
                  case "end":
                    return u2.stop();
                }
            }, _callee21, this, [[1, 7]]);
          }));
        }, a2.emitMemberUpdate = function emitMemberUpdate(t3) {
          t3 = formatSuperTeamMember(t3), this.mergeMyTeamMembers([t3]), this.core.emit("updateTeamMember", t3);
          var a3 = cloneDeep(this.mySuperTeamMembersMap.get(t3.teamId));
          return this.core.emit("myTeamMembers", [a3]), a3;
        }, a2.mergeMyTeamMembers = function mergeMyTeamMembers(t3) {
          var a3 = this;
          forEach$1(t3).call(t3, function(t4) {
            var u2 = t4.teamId, m2 = a3.mySuperTeamMembersMap.get(u2), h2 = Dt({}, m2, t4);
            a3.mySuperTeamMembersMap.set(u2, h2);
          });
        }, a2.syncSuperTeamsHandler = function syncSuperTeamsHandler(t3) {
          var a3 = t3.content;
          this.core.eventBus.emit("sync/updateTimetag", { superTeams: Uu(a3.timetag) });
          var u2 = a3 == null ? void 0 : a3.teams;
          if (u2 && u2.length) {
            var m2 = formatSuperTeams(u2);
            this.core.emit("superTeams", m2);
          }
        }, a2.syncCreateSuperTeamHandler = function syncCreateSuperTeamHandler(t3) {
          var a3 = t3.content, u2 = formatSuperTeam(a3 == null ? void 0 : a3.superTeam), m2 = generatorMemberBySuperTeam(u2, u2.owner, "owner");
          this.core.emit("createSuperTeam", u2, m2);
        }, a2.syncUpdateSuperTeamMemberHandler = function syncUpdateSuperTeamMemberHandler(t3) {
          var a3 = t3.content, u2 = formatSuperTeamMember(a3 == null ? void 0 : a3.teamMember);
          u2.updateTime || (u2.updateTime = new Date().getTime()), this.mergeMySuperTeamMembers([u2]), this.core.emit("updateSuperTeamMember", u2);
          var m2 = cloneDeep(this.mySuperTeamMembersMap.get(u2.teamId));
          this.core.emit("mySuperTeamMembers", [m2]);
        }, a2.syncMySuperTeamMembersHandler = function syncMySuperTeamMembersHandler(t3) {
          var a3, u2 = t3.content;
          this.core.eventBus.emit("sync/updateTimetag", { mySuperTeamMembers: Uu(u2.timetag) });
          var m2 = u2 == null ? void 0 : map$6(a3 = u2.teamMembers).call(a3, function(t4) {
            return formatSuperTeamMember(t4);
          });
          this.mergeMySuperTeamMembers(m2), this.core.emit("mySuperTeamMembers", cloneDeep(m2));
        }, a2.notificationHandler = function notificationHandler(t3) {
          var a3 = t3.attach, u2 = t3.scene, m2 = t3.from, h2 = t3.to, g2 = t3.time, M2 = t3.idServer, I2 = t3.idClient, S2 = a3.team, T2 = a3.account, C2 = a3.accounts, b2 = a3.type;
          if (u2 === "superTeam")
            switch (this.logger.getDebugMode() ? this.logger.debug("superTeam::recvNotification", M2, I2, a3) : this.logger.log("superTeam::recvNotification", M2, I2, h2, b2, T2, C2), b2) {
              case "updateSuperTeam":
                S2.updateTime = g2, this.core.emit("updateSuperTeam", S2);
                break;
              case "addSuperTeamMembers":
                this.service.notifyAddSuperTeamMembers(S2, C2);
                break;
              case "acceptSuperTeamInvite":
                this.service.notifyAddSuperTeamMembers(S2, [m2]);
                break;
              case "passSuperTeamApply":
                this.service.notifyAddSuperTeamMembers(S2, [T2]);
                break;
              case "addSuperTeamManagers":
                this.service.notifyUpdateSuperTeamManagers(h2, C2, true, g2);
                break;
              case "removeSuperTeamManagers":
                this.service.notifyUpdateSuperTeamManagers(h2, C2, false, g2);
                break;
              case "removeSuperTeamMembers":
                this.service.notifyRemoveSuperTeamMembers(S2, C2);
                break;
              case "leaveSuperTeam":
                this.service.notifyRemoveSuperTeamMembers(S2, [m2]);
                break;
              case "dismissSuperTeam":
                this.core.emit("dismissSuperTeam", { teamId: h2 });
                break;
              case "transferSuperTeam":
                this.service.notifyTransferSuperTeam(S2, m2, T2);
                break;
              case "updateSuperTeamMembersMute":
                this.service.notifyUpdateSuperTeamMembersMute(S2, C2, a3.mute);
            }
        }, SuperTeamService;
      }(op), y_ = { "13_1": "getChatroomAddress", "24_1": "getQChatAddress" }, __ = { getChatroomAddress: { sid: 13, cid: 1, service: "plugin", params: [{ type: "Long", name: "chatroomId" }, { type: "Bool", name: "isWeixinApp" }, { type: "Int", name: "ipType" }], response: [{ type: "StrArray", name: "address" }] }, getQChatAddress: { sid: 24, cid: 1, service: "plugin", params: [{ type: "Property", name: "getQChatAddressTag", reflectMapper: { ipType: 1 } }], response: [{ type: "StrArray", name: "address" }] } }, M_ = function(t2) {
        function PluginService(a3) {
          var u2;
          return (u2 = t2.call(this, "plugin", a3) || this).core = a3, registerParser({ cmdMap: y_, cmdConfig: __ }), u2;
        }
        Nt(PluginService, t2);
        var a2 = PluginService.prototype;
        return a2.getChatroomAddress = function getChatroomAddress(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a3;
            return Ql.wrap(function _callee$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ chatroomId: { type: "string", allowEmpty: false }, ipType: { type: "number", required: false } }, t3), u2.next = 3, this.core.sendCmd("getChatroomAddress", { chatroomId: t3.chatroomId, isWeixinApp: Jl.platform === "WXAPP", ipType: t3.ipType || 0 });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", a3.content.address);
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee, this);
          }));
        }, a2.getQChatAddress = function getQChatAddress(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a3;
            return Ql.wrap(function _callee2$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ ipType: { type: "number", required: false } }, t3), u2.next = 3, this.core.sendCmd("getQChatAddress", { getQChatAddressTag: { ipType: (t3 == null ? void 0 : t3.ipType) || 0 } });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", a3.content.address);
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee2, this);
          }));
        }, PluginService;
      }(op), I_ = { "7_19": "nimQueryCloudSessionList", "7_20": "nimQueryCloudSession", "7_21": "nimUpdateCloudSession", "7_22": "nimDeleteCloudSessionList", "7_121": "nimMultiSyncUpdateCloudSession" }, S_ = { sessionReqTag: { minTimestamp: 1, maxTimestamp: 2, includedLastMsg: 3, limit: 4, hasMore: 5 }, sessionTag: { sessionId: 1, updateTime: 2, ext: 3, lastMsg: 4, lastMsgType: 5 } }, T_ = invertSerializeMap(S_), C_ = { nimQueryCloudSessionList: { sid: 7, cid: 19, service: "cloudSession", params: [{ type: "Property", name: "tag", reflectMapper: S_.sessionReqTag }], response: [{ type: "Property", name: "tag", reflectMapper: T_.sessionReqTag }, { type: "PropertyArray", name: "sessions", reflectMapper: T_.sessionTag }] }, nimQueryCloudSession: { sid: 7, cid: 20, service: "cloudSession", params: [{ type: "Property", name: "tag", reflectMapper: S_.sessionTag }], response: [{ type: "Property", name: "session", reflectMapper: T_.sessionTag }] }, nimUpdateCloudSession: { sid: 7, cid: 21, service: "cloudSession", params: [{ type: "Property", name: "tag", reflectMapper: S_.sessionTag }] }, nimDeleteCloudSessionList: { sid: 7, cid: 22, service: "cloudSession", params: [{ type: "PropertyArray", name: "tags", reflectMapper: S_.sessionTag }] }, nimMultiSyncUpdateCloudSession: { sid: 7, cid: 121, service: "cloudSession", response: [{ type: "Property", name: "session", reflectMapper: T_.sessionTag }] } }, b_ = { sessionId: { type: "string" }, updateTime: { type: "number" }, ext: { type: "string" }, lastMsg: { type: "object" }, lastMsgType: { type: "number" } };
      function formatCloudSession(t2, a2, u2) {
        var m2 = format(b_, t2), h2 = getAccountFromSessionId(m2.sessionId, "|"), g2 = h2.accid, M2 = h2.scene;
        if (m2.sessionId = M2 + "-" + g2, m2.lastMsg) {
          var I2 = m2.lastMsgType === 1;
          m2.lastMsgInfo = I2 ? { isLastMsgRecalled: I2, revokedMsg: formatSystemMessage(deserialize(m2.lastMsg, My.sysMsg), u2) } : { isLastMsgRecalled: I2, lastMsg: formatMsg$1(deserialize(m2.lastMsg, Xf.msg), { account: a2 }) };
        }
        return delete m2.lastMsg, delete m2.lastMsgType, m2;
      }
      function formatCloudSessions(t2, a2, u2) {
        return t2 && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return formatCloudSession(t3, a2, u2);
        }) : [];
      }
      var E_ = function(t2) {
        function CloudSessionService(a3) {
          var u2;
          return u2 = t2.call(this, "cloudSession", a3) || this, registerParser({ cmdMap: I_, cmdConfig: C_ }), u2;
        }
        Nt(CloudSessionService, t2);
        var a2 = CloudSessionService.prototype;
        return a2.queryCloudSessionList = function queryCloudSessionList(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2, m2, h2, g2;
            return Ql.wrap(function _callee$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return validate({ minTimestamp: { type: "number", min: 0, required: false }, maxTimestamp: { type: "number", min: 0, required: false }, limit: { type: "number", min: 1, required: false }, includedLastMsg: { type: "boolean", required: false } }, t3), (u2 = Dt({ limit: 100, includedLastMsg: true }, t3)).includedLastMsg = Kd.boolean(t3, "includedLastMsg"), M2.next = 5, this.core.sendCmd("nimQueryCloudSessionList", { tag: u2 });
                  case 5:
                    return m2 = M2.sent, h2 = ((a3 = m2.content) === null || a3 === void 0 ? void 0 : a3.tag) || {}, g2 = m2.content.sessions, M2.abrupt("return", { hasMore: +h2.hasMore > 0, sessionList: formatCloudSessions(g2, this.core.account, this.logger) });
                  case 9:
                  case "end":
                    return M2.stop();
                }
            }, _callee, this);
          }));
        }, a2.queryCloudSession = function queryCloudSession(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee2$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ sessionId: { type: "string", allowEmpty: false } }, t3), a3 = getAccountFromSessionId(t3.sessionId, "-"), u2 = a3.accid, m2 = a3.scene, g2.next = 4, this.core.sendCmd("nimQueryCloudSession", { tag: { sessionId: m2 === "superTeam" ? "super_team|" + u2 : m2 + "|" + u2 } });
                  case 4:
                    return h2 = g2.sent, g2.abrupt("return", formatCloudSession(h2.content.session, this.core.account, this.logger));
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.updateCloudSession = function updateCloudSession(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3, u2, m2;
            return Ql.wrap(function _callee3$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ sessionId: { type: "string", allowEmpty: false }, ext: { type: "string", allowEmpty: false, required: false } }, t3), a3 = getAccountFromSessionId(t3.sessionId, "-"), u2 = a3.accid, m2 = a3.scene, h2.next = 4, this.core.sendCmd("nimUpdateCloudSession", { tag: { sessionId: m2 === "superTeam" ? "super_team|" + u2 : m2 + "|" + u2, ext: t3.ext } });
                  case 4:
                  case "end":
                    return h2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.deleteCloudSessionList = function deleteCloudSessionList(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a3, u2;
            return Ql.wrap(function _callee4$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ sessionIdList: { type: "array", itemType: "string" } }, t3), u2 = map$6(a3 = t3.sessionIdList).call(a3, function(t4) {
                      var a4 = getAccountFromSessionId(t4, "-"), u3 = a4.accid, m3 = a4.scene;
                      return { sessionId: m3 === "superTeam" ? "super_team|" + u3 : m3 + "|" + u3 };
                    }), m2.next = 4, this.core.sendCmd("nimDeleteCloudSessionList", { tags: u2 });
                  case 4:
                  case "end":
                    return m2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.nimMultiSyncUpdateCloudSessionHandler = function nimMultiSyncUpdateCloudSessionHandler(t3) {
          var a3 = formatCloudSession(t3.content.session, this.core.account, this.logger);
          this.core.emit("multiSyncUpdateCloudSession", a3);
        }, CloudSessionService;
      }(op), k_ = { needPush: { type: "boolean", required: false }, pushTitle: { type: "string", required: false }, pushContent: { type: "string", required: false }, pushPayload: { type: "string", required: false }, needPushBadge: { type: "boolean", required: false } }, w_ = { "15_1": "signalingCreate", "15_2": "signalingDelay", "15_3": "signalingClose", "15_4": "signalingJoin", "15_5": "signalingLeave", "15_6": "signalingInvite", "15_7": "signalingCancelInvite", "15_8": "signalingReject", "15_9": "signalingAccept", "15_10": "signalingSendCustomCommand", "15_11": "signalingRecvNotification", "15_12": "signalingMultiSyncNotification", "15_13": "signalingSyncNotification", "15_14": "singalingSyncChannels", "15_15": "signalingQueryInfo", "15_16": "signalingCallEx", "15_17": "signalingJoinAndAccept" }, R_ = { avSignalTag: Dt({ type: 1, name: 2, channelId: 3, createTime: 4, expireTime: 5, creatorAccid: 6, ext: 7, invalid: 8, fromAccid: 10, toAccid: 11, requestId: 12, members: 18, attach: 19, attachExt: 20, needOffline: 21, msgId: 22, uid: 23, time: 24, nertcChannelName: 25, nertcTokenTtl: 26, nertcToken: 27, nertcJoinRoomQueryParamMap: 28, nertcJoinRoomResponse: 29, callStatus: 30 }, { needPush: 13, pushTitle: 14, pushContent: 15, pushPayload: 16, needPushBadge: 17 }) }, A_ = invertSerializeMap(R_), N_ = { signalingCreate: { sid: 15, cid: 1, service: "signaling", params: [{ type: "Property", name: "tag", reflectMapper: R_.avSignalTag }], response: [{ type: "Property", name: "data", reflectMapper: A_.avSignalTag }] }, signalingDelay: { sid: 15, cid: 2, service: "signaling", params: [{ type: "Property", name: "tag", reflectMapper: R_.avSignalTag }], response: [{ type: "Property", name: "data", reflectMapper: A_.avSignalTag }] }, signalingClose: { sid: 15, cid: 3, service: "signaling", params: [{ type: "Property", name: "tag", reflectMapper: R_.avSignalTag }], response: [{ type: "Property", name: "data", reflectMapper: A_.avSignalTag }] }, signalingJoin: { sid: 15, cid: 4, service: "signaling", params: [{ type: "Property", name: "tag", reflectMapper: R_.avSignalTag }], response: [{ type: "Property", name: "data", reflectMapper: A_.avSignalTag }] }, signalingLeave: { sid: 15, cid: 5, service: "signaling", params: [{ type: "Property", name: "tag", reflectMapper: R_.avSignalTag }] }, signalingInvite: { sid: 15, cid: 6, service: "signaling", params: [{ type: "Property", name: "tag", reflectMapper: R_.avSignalTag }] }, signalingCancelInvite: { sid: 15, cid: 7, service: "signaling", params: [{ type: "Property", name: "tag", reflectMapper: R_.avSignalTag }] }, signalingReject: { sid: 15, cid: 8, service: "signaling", params: [{ type: "Property", name: "tag", reflectMapper: R_.avSignalTag }] }, signalingAccept: { sid: 15, cid: 9, service: "signaling", params: [{ type: "Property", name: "tag", reflectMapper: R_.avSignalTag }] }, signalingSendCustomCommand: { sid: 15, cid: 10, service: "signaling", params: [{ type: "Property", name: "tag", reflectMapper: R_.avSignalTag }] }, signalingRecvNotification: { sid: 15, cid: 11, service: "signaling", response: [{ type: "Property", name: "data", reflectMapper: A_.avSignalTag }] }, signalingMultiSyncNotification: { sid: 15, cid: 12, service: "signaling", response: [{ type: "Property", name: "data", reflectMapper: A_.avSignalTag }] }, signalingSyncNotification: { sid: 15, cid: 13, service: "signaling", response: [{ type: "PropertyArray", name: "datas", reflectMapper: A_.avSignalTag }] }, singalingSyncChannels: { sid: 15, cid: 14, service: "signaling", response: [{ type: "PropertyArray", name: "datas", reflectMapper: A_.avSignalTag }] }, signalingQueryInfo: { sid: 15, cid: 15, service: "signaling", params: [{ type: "Property", name: "tag", reflectMapper: R_.avSignalTag }], response: [{ type: "Property", name: "data", reflectMapper: A_.avSignalTag }] }, signalingCallEx: { sid: 15, cid: 16, service: "signaling", params: [{ type: "Property", name: "tag", reflectMapper: R_.avSignalTag }], response: [{ type: "Property", name: "data", reflectMapper: A_.avSignalTag }] }, signalingJoinAndAccept: { sid: 15, cid: 17, service: "signaling", params: [{ type: "Property", name: "tag", reflectMapper: R_.avSignalTag }], response: [{ type: "Property", name: "data", reflectMapper: A_.avSignalTag }] }, signalingBatchMarkRead: { sid: 4, cid: 5, hasPacketResponse: false, service: "signaling", params: [{ type: "Byte", name: "sid" }, { type: "Byte", name: "cid" }, { type: "LongArray", name: "ids" }] } }, x_ = { type: { type: "number" }, createTime: { type: "number" }, expireTime: { type: "number" }, invalid: { type: "boolean" }, pushInfo: k_, pluginSetting: { nertcInfo: { nertcChannelName: { type: "string" }, nertcTokenTtl: { type: "number" }, nertcToken: { type: "string" }, nertcJoinRoomQueryParamMap: { type: "string" }, callStatus: { type: "number" } } }, callStatus: { type: "number" }, attach: { type: "object" }, members: { type: "object" }, needOffline: { type: "boolean" }, uid: { type: "number" }, time: { type: "number" } };
      function formatSignalingChannelMember(t2) {
        return format(x_, deserialize(t2, { 1: "accid", 2: "uid", 3: "createTime", 4: "expireTime" }));
      }
      function formatSignaling(t2) {
        var a2, u2 = format(x_, t2), m2 = [];
        u2.members && u2.members.length > 0 && (m2 = map$6(a2 = u2.members).call(a2, function(t3) {
          return formatSignalingChannelMember(t3);
        }), delete u2.members);
        return m2.length > 0 ? { channelInfo: u2, memberList: m2 } : { channelInfo: u2 };
      }
      function formatSignalingWithCallStatus(t2) {
        var a2, u2 = format(x_, t2), m2 = [];
        u2.members && u2.members.length > 0 && (m2 = map$6(a2 = u2.members).call(a2, function(t3) {
          return formatSignalingChannelMember(t3);
        }), delete u2.members);
        var h2 = 200;
        return t2.callStatus && (h2 = Number(t2.callStatus)), m2.length > 0 ? { channelInfo: u2, memberList: m2, callStatus: h2 } : { channelInfo: u2, callStatus: h2 };
      }
      function generateSignalingForCmd(t2) {
        return formatReverse(x_, t2);
      }
      var O_, P_, L_, V_, U_, D_, q_, B_ = function(t2) {
        function SignalingService(a3) {
          var u2;
          return (u2 = t2.call(this) || this).timer = 0, u2.pollingInterval = 12e4, u2.name = "signaling", u2.logger = a3.logger, u2.core = a3, u2.channels = {}, registerParser({ cmdMap: w_, cmdConfig: N_ }), u2;
        }
        Nt(SignalingService, t2);
        var a2 = SignalingService.prototype;
        return a2.callEx = function callEx(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2, m2, h2, g2;
            return Ql.wrap(function _callee$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return validate({ type: { type: "number" }, toAccid: { type: "string", allowEmpty: false }, requestId: { type: "string", allowEmpty: false }, needOffline: { type: "boolean", required: false }, pushInfo: { type: "object", required: false, rules: k_ }, pluginSetting: { type: "object", required: false, rules: { nertcInfo: { type: "object", required: false } } } }, t3), M2.next = 3, this.core.sendCmd("signalingCallEx", { tag: generateSignalingForCmd(t3) });
                  case 3:
                    return u2 = M2.sent, m2 = ((a3 = u2.content) === null || a3 === void 0 ? void 0 : a3.data) || {}, h2 = formatSignalingWithCallStatus(m2), this.channels[h2.channelInfo.channelId] = cloneDeep(h2.channelInfo), this.timer || (this.timer = this.core.timerManager.addTimer(bind$1(g2 = this.aotoDelay).call(g2, this), this.pollingInterval, -1)), M2.abrupt("return", h2);
                  case 9:
                  case "end":
                    return M2.stop();
                }
            }, _callee, this);
          }));
        }, a2.joinAndAccept = function joinAndAccept(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var u2, m2, h2, g2, M2, I2;
            return Ql.wrap(function _callee2$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    return validate({ channelId: { type: "string", allowEmpty: false }, fromAccid: { type: "string", allowEmpty: false }, requestId: { type: "string", required: false }, needOffline: { type: "boolean", required: false }, uid: { type: "number", required: false }, pluginSetting: { type: "object", required: false, rules: { nertcInfo: { type: "object", required: false } } } }, t3), u2 = t3.fromAccid, (m2 = __rest(t3, ["fromAccid"])).toAccid = u2, S2.next = 5, this.core.sendCmd("signalingJoinAndAccept", { tag: generateSignalingForCmd(m2) });
                  case 5:
                    return h2 = S2.sent, g2 = ((a3 = h2.content) === null || a3 === void 0 ? void 0 : a3.data) || {}, M2 = formatSignalingWithCallStatus(g2), this.channels[M2.channelInfo.channelId] = cloneDeep(M2.channelInfo), this.timer || (this.timer = this.core.timerManager.addTimer(bind$1(I2 = this.aotoDelay).call(I2, this), this.pollingInterval, -1)), S2.abrupt("return", M2);
                  case 11:
                  case "end":
                    return S2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.create = function create(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var u2, m2;
            return Ql.wrap(function _callee3$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ type: { type: "number" }, ext: { type: "string", required: false } }, t3), h2.next = 3, this.core.sendCmd("signalingCreate", { tag: generateSignalingForCmd(t3) });
                  case 3:
                    return u2 = h2.sent, m2 = ((a3 = u2.content) === null || a3 === void 0 ? void 0 : a3.data) || {}, h2.abrupt("return", formatSignaling(m2));
                  case 6:
                  case "end":
                    return h2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.close = function close(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            return Ql.wrap(function _callee4$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ channelId: { type: "string", allowEmpty: false }, attachExt: { type: "string", required: false }, needOffline: { type: "boolean", required: false } }, t3), a3.next = 3, this.core.sendCmd("signalingClose", { tag: generateSignalingForCmd(t3) });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee4, this);
          }));
        }, a2.queryInfo = function queryInfo(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var u2, m2;
            return Ql.wrap(function _callee5$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ name: { type: "string", allowEmpty: false } }, t3), h2.next = 3, this.core.sendCmd("signalingQueryInfo", { tag: t3 });
                  case 3:
                    return u2 = h2.sent, m2 = ((a3 = u2.content) === null || a3 === void 0 ? void 0 : a3.data) || {}, h2.abrupt("return", formatSignaling(m2));
                  case 6:
                  case "end":
                    return h2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.join = function join(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var u2, m2, h2, g2;
            return Ql.wrap(function _callee6$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return validate({ channelId: { type: "string", allowEmpty: false }, attachExt: { type: "string", required: false }, uid: { type: "number", min: 0, required: false }, needOffline: { type: "boolean", required: false } }, t3), M2.next = 3, this.core.sendCmd("signalingJoin", { tag: generateSignalingForCmd(t3) });
                  case 3:
                    return u2 = M2.sent, m2 = ((a3 = u2.content) === null || a3 === void 0 ? void 0 : a3.data) || {}, h2 = formatSignaling(m2), this.channels[h2.channelInfo.channelId] = cloneDeep(h2.channelInfo), this.timer || (this.timer = this.core.timerManager.addTimer(bind$1(g2 = this.aotoDelay).call(g2, this), this.pollingInterval, -1)), M2.abrupt("return", h2);
                  case 9:
                  case "end":
                    return M2.stop();
                }
            }, _callee6, this);
          }));
        }, a2.aotoDelay = function aotoDelay() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            var t3, a3, u2, m2, h2;
            return Ql.wrap(function _callee7$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    if ((t3 = Ht(this.channels)).length !== 0) {
                      g2.next = 5;
                      break;
                    }
                    return this.timer && this.core.timerManager.deleteTimer(this.timer), this.timer = 0, g2.abrupt("return");
                  case 5:
                    this.logger.log("signling:autoDelay", t3), a3 = 0;
                  case 7:
                    if (!(a3 < t3.length)) {
                      g2.next = 24;
                      break;
                    }
                    return u2 = t3[a3], g2.prev = 9, g2.next = 12, this.core.sendCmd("signalingDelay", { tag: { channelId: u2 } });
                  case 12:
                    m2 = g2.sent, h2 = formatSignaling(m2.content.data), this.channels[u2] = h2.channelInfo, g2.next = 21;
                    break;
                  case 17:
                    g2.prev = 17, g2.t0 = g2.catch(9), this.logger.warn("signling:autoDelay " + u2 + " failed", g2.t0), delete this.channels[u2];
                  case 21:
                    a3++, g2.next = 7;
                    break;
                  case 24:
                  case "end":
                    return g2.stop();
                }
            }, _callee7, this, [[9, 17]]);
          }));
        }, a2.leave = function leave(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            return Ql.wrap(function _callee8$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ channelId: { type: "string", allowEmpty: false }, attachExt: { type: "string", required: false }, needOffline: { type: "boolean", required: false } }, t3), a3.next = 3, this.core.sendCmd("signalingLeave", { tag: generateSignalingForCmd(t3) });
                  case 3:
                    delete this.channels[t3.channelId];
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee8, this);
          }));
        }, a2.invite = function invite(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            return Ql.wrap(function _callee9$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ channelId: { type: "string", allowEmpty: false }, toAccid: { type: "string", allowEmpty: false }, requestId: { type: "string", allowEmpty: false }, attachExt: { type: "string", required: false }, needOffline: { type: "boolean", required: false }, pushInfo: { type: "object", required: false, rules: k_ } }, t3), a3.next = 3, this.core.sendCmd("signalingInvite", { tag: generateSignalingForCmd(t3) });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee9, this);
          }));
        }, a2.cancelInvite = function cancelInvite(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            return Ql.wrap(function _callee10$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ channelId: { type: "string", allowEmpty: false }, toAccid: { type: "string", allowEmpty: false }, requestId: { type: "string", allowEmpty: false }, attachExt: { type: "string", required: false }, needOffline: { type: "boolean", required: false } }, t3), a3.next = 3, this.core.sendCmd("signalingCancelInvite", { tag: generateSignalingForCmd(t3) });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee10, this);
          }));
        }, a2.reject = function reject(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            var a3, u2;
            return Ql.wrap(function _callee11$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ channelId: { type: "string", allowEmpty: false }, fromAccid: { type: "string", allowEmpty: false }, requestId: { type: "string", allowEmpty: false }, attachExt: { type: "string", required: false }, needOffline: { type: "boolean", required: false } }, t3), a3 = t3.fromAccid, (u2 = __rest(t3, ["fromAccid"])).toAccid = a3, m2.next = 5, this.core.sendCmd("signalingReject", { tag: generateSignalingForCmd(u2) });
                  case 5:
                  case "end":
                    return m2.stop();
                }
            }, _callee11, this);
          }));
        }, a2.accept = function accept(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            var a3, u2, m2, h2, g2;
            return Ql.wrap(function _callee12$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return validate({ channelId: { type: "string", allowEmpty: false }, fromAccid: { type: "string", allowEmpty: false }, requestId: { type: "string", allowEmpty: false }, attachExt: { type: "string", required: false }, needOffline: { type: "boolean", required: false }, autoJoin: { type: "boolean", required: false }, uid: { type: "number", min: 0, required: false }, joinAttachExt: { type: "string", required: false } }, t3), a3 = t3.autoJoin, u2 = t3.joinAttachExt, m2 = t3.fromAccid, (h2 = __rest(t3, ["autoJoin", "joinAttachExt", "fromAccid"])).toAccid = m2, M2.next = 5, this.core.sendCmd("signalingAccept", { tag: generateSignalingForCmd(h2) });
                  case 5:
                    if (this.logger.log("Signaling:accept, accept success, autoJoin " + t3.autoJoin), !a3) {
                      M2.next = 10;
                      break;
                    }
                    return g2 = { channelId: t3.channelId, needOffline: t3.needOffline, attachExt: u2, uid: t3.uid }, M2.next = 10, this.join(g2);
                  case 10:
                  case "end":
                    return M2.stop();
                }
            }, _callee12, this);
          }));
        }, a2.sendCustomCommand = function sendCustomCommand(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            return Ql.wrap(function _callee13$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ channelId: { type: "string", allowEmpty: false }, fromAccid: { type: "string", allowEmpty: false, required: false }, attachExt: { type: "string", required: false } }, t3), a3.next = 3, this.core.sendCmd("signalingSendCustomCommand", { tag: generateSignalingForCmd(t3) });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee13, this);
          }));
        }, a2.signalingRecvNotificationHandler = function signalingRecvNotificationHandler(t3) {
          var a3 = typeof get(t3, "raw.r[0]") == "number" ? "" + t3.raw.r[0] : "0";
          t3.content.data.msgId = t3.content.data.msgId || a3, this.doNotify(t3.content.data), a3 && Uu(a3) && this.core.sendCmd("signalingBatchMarkRead", { sid: 15, cid: 11, ids: [a3] });
        }, a2.signalingMultiSyncNotificationHandler = function signalingMultiSyncNotificationHandler(t3) {
          this.doNotify(t3.content.data, 3);
        }, a2.doNotify = function doNotify(t3, a3) {
          a3 === void 0 && (a3 = 0);
          var u2 = function formatSignalingNotification(t4, a4) {
            a4 === void 0 && (a4 = 0);
            var u3 = format(x_, t4), m3 = u3.attach, h3 = u3.attachExt, g3 = u3.time, M3 = u3.msgId;
            u3.fromAccid, u3.toAccid, u3.members, u3.requestId, u3.pushInfo;
            var I3 = __rest(u3, ["attach", "attachExt", "time", "msgId", "fromAccid", "toAccid", "members", "requestId", "pushInfo"]);
            if (m3.type === 2)
              try {
                u3.member = { accid: u3.attach.member[1], uid: Number(u3.attach.member[2]), createTime: Number(u3.attach.member[3]), expireTime: Number(u3.attach.member[4]) };
              } catch (t5) {
                delete u3.member;
              }
            var S3 = m3.type;
            return delete u3.attach, { metaData: { eventType: S3, channelInfo: I3, feature: a4, ext: h3 || "", time: g3, msgId: M3 }, rawData: u3 };
          }(t3, a3), m2 = u2.metaData, h2 = u2.rawData, g2 = h2.fromAccid, M2 = h2.toAccid, I2 = h2.requestId, S2 = h2.pushInfo, T2 = h2.msgId, C2 = h2.member;
          switch (m2.eventType) {
            case 1:
              this.emit("signalingClose", { fromAccid: g2, metaData: m2 });
              break;
            case 2:
              this.emit("signalingJoin", { fromAccid: g2, metaData: m2, member: C2 });
              break;
            case 3:
              this.emit("signalingInvite", { fromAccid: g2, toAccid: M2, requestId: I2, pushInfo: S2, metaData: m2 });
              break;
            case 4:
              this.emit("signalingCancelInvite", { fromAccid: g2, toAccid: M2, requestId: I2, metaData: m2 });
              break;
            case 5:
              this.emit("signalingReject", { fromAccid: g2, toAccid: M2, requestId: I2, metaData: m2 });
              break;
            case 6:
              this.emit("signalingAccept", { fromAccid: g2, toAccid: M2, requestId: I2, metaData: m2 });
              break;
            case 7:
              this.emit("signalingLeave", { fromAccid: g2, metaData: m2 });
              break;
            case 8:
              this.emit("signalingCustomCommand", { fromAccid: g2, metaData: m2 });
              break;
            default:
              this.logger.warn("signaling:notification, no such a type " + m2.eventType, h2);
          }
          return T2;
        }, a2.signalingSyncNotificationHandler = function signalingSyncNotificationHandler(t3) {
          var a3, u2, m2 = this;
          if (t3.content.datas && t3.content.datas.length > 0) {
            var h2 = filter(a3 = map$6(u2 = t3.content.datas).call(u2, function(t4) {
              return m2.doNotify(t4, 1);
            })).call(a3, function(t4) {
              return t4;
            });
            h2.length > 0 && this.core.sendCmd("signalingBatchMarkRead", { sid: 15, cid: 11, ids: h2 });
          }
        }, a2.singalingSyncChannelsHandler = function singalingSyncChannelsHandler(t3) {
          var a3, u2 = this;
          if (this.timer = 0, this.channels = {}, t3.content.datas && t3.content.datas.length > 0) {
            var m2 = map$6(a3 = t3.content.datas).call(a3, function(t4) {
              return formatSignaling(t4);
            });
            forEach$1(m2).call(m2, function(t4) {
              var a4 = t4.channelInfo.channelId;
              u2.channels[a4] = cloneDeep(t4.channelInfo);
            }), this.emit("singalingSyncChannels", m2);
          }
        }, a2.process = function process(t3) {
          var a3 = this[t3.cmd + "Handler"];
          if (typeof a3 == "function")
            return a3.call(this, t3), zi.resolve(t3);
          var u2 = get(t3, "error.detail.ignore");
          return t3.error && !u2 ? zi.reject(t3.error) : zi.resolve(t3);
        }, SignalingService;
      }(ho.EventEmitter), F_ = function(t2) {
        function Service(a3, u2) {
          var m2;
          return (m2 = t2.call(this) || this).name = a3, m2.core = u2, m2.name = a3, m2.logger = u2.logger, m2.core = u2, m2;
        }
        Nt(Service, t2);
        var a2 = Service.prototype;
        return a2.emit = function emit(a3) {
          var u2 = this;
          try {
            for (var m2, h2, g2 = arguments.length, M2 = new Array(g2 > 1 ? g2 - 1 : 0), I2 = 1; I2 < g2; I2++)
              M2[I2 - 1] = arguments[I2];
            var S2 = (m2 = t2.prototype.emit).call.apply(m2, concat(h2 = [this, a3]).call(h2, M2));
            return S2;
          } catch (t3) {
            return mo(function() {
              throw u2.logger.error(u2.name + "::emit throw error in setTimeout. event: " + a3.toString() + ". Error", t3), t3;
            }, 0), false;
          }
        }, a2.process = function process(t3) {
          var a3 = this[t3.cmd + "Handler"];
          if (typeof a3 == "function")
            return a3.call(this, t3);
          var u2 = get(t3, "error.detail.ignore");
          return t3.error && !u2 ? zi.reject(t3.error) : zi.resolve(t3);
        }, Service;
      }(ho), G_ = { "24_15": "qchatSubscribe", "24_27": "qchatGetUnreadInfo", "24_48": "qchatCreateChannel", "24_49": "qchatDeleteChannel", "24_50": "qchatUpdateChannel", "24_51": "qchatGetChannels", "24_52": "qchatGetChannelsByPage", "24_53": "qchatGetMembersByPage", "24_54": "qchatUpdateWhiteBlackRole", "24_55": "qchatGetWhiteBlackRolesPage", "24_56": "qchatUpdateWhiteBlackMembers", "24_57": "qchatGetWhiteBlackMembersPage", "24_58": "qchatGetExistingWhiteBlackRoles", "24_59": "qchatGetExistingWhiteBlackMembers", "24_60": "qchatUpdateCategoryInfoOfChannel", "24_109": "qchatCreateChannelCategory", "24_110": "qchatRemoveChannelCategory", "24_111": "qchatUpdateChannelCategory", "24_112": "qchatGetChannelCategoriesByID", "24_113": "qchatUpdateChannelCategoryWhiteBlackRole", "24_114": "qchatGetChannelCategoryWhiteBlackRolesPage", "24_115": "qchatUpdateChannelCategoryWhiteBlackMembers", "24_116": "qchatGetChannelCategoryWhiteBlackMembersPage", "24_117": "qchatGetChannelCategoryWhiteBlackRoles", "24_118": "qchatGetChannelCategoryWhiteBlackMembers", "24_119": "qchatGetChannelCategoriesPage", "24_120": "qchatGetChannelCategoryChannelsPage", "24_93": "qchatGetChannelSearchByPage", "24_95": "qchatChannelMemberSearch", "25_8": "qchatGetRoleIdsByServerId", "25_9": "qchatSubscribeAsVisitor", "25_12": "qchatAutoSubscribe", "25_13": "qchatAutoSubscribeNotification" }, H_ = { serverId: 1, channelId: 2, ackTimestamp: 3, unreadCount: 4, mentionedCount: 5, maxCount: 6, lastMsgTime: 7 }, j_ = { channelInfo: { channelId: 1, serverId: 2, name: 4, topic: 5, ext: 6, type: 7, validFlag: 8, createTime: 9, updateTime: 10, owner: 11, viewMode: 12, categoryId: 13, syncMode: 14, reorderWeight: 15, visitorMode: 16 }, antispamTag: { antiSpamBusinessId: 1 }, memberInfo: { serverId: 1, accid: 3, nick: 4, avatar: 5, ext: 6, type: 7, joinTime: 8, inviter: 9, validFlag: 10, createTime: 11, updateTime: 12 }, serverRole: { serverId: 1, roleId: 2, name: 3, icon: 4, ext: 5, auths: 6, type: 7, memberCount: 8, priority: 9, createTime: 10, updateTime: 11 }, qchatSubReqTag: { type: 1, opeType: 2 }, qchatChannelIdInfoTag: { serverId: 1, channelId: 2 }, unreadInfo: H_, qchatGetChannelListPageTag: { serverId: 1, timetag: 2, limit: 3 }, qchatGetMembersByPageTag: { serverId: 1, channelId: 2, timetag: 3, limit: 4 }, qchatUpdateWhiteBlackRoleTag: { serverId: 1, channelId: 2, type: 3, opeType: 4, roleId: 5 }, qchatGetWhiteBlackRolesPageTag: { serverId: 1, channelId: 2, type: 3, timetag: 4, limit: 5 }, qchatUpdateWhiteBlackMembersTag: { serverId: 1, channelId: 2, type: 3, opeType: 4, toAccids: 5 }, qchatGetWhiteBlackMembersPageTag: { serverId: 1, channelId: 2, type: 3, timetag: 4, limit: 5 }, qchatGetExistingWhiteBlackRolesTag: { serverId: 1, channelId: 2, type: 3, roleIds: 4 }, qchatGetExistingWhiteBlackMembersTag: { serverId: 1, channelId: 2, type: 3, accids: 4 }, QChatChannelCategoryInfo: { categoryId: 1, serverId: 2, name: 4, ext: 5, owner: 6, viewMode: 7, validFlag: 8, createTime: 9, updateTime: 10, channelNumber: 11 }, qchatUpdateChannelCategoryWhiteBlackRoleTag: { serverId: 1, categoryId: 2, type: 3, opeType: 4, roleId: 5 }, qchatGetChannelCategoryWhiteBlackRolesPageTag: { serverId: 1, categoryId: 2, type: 3, timetag: 4, limit: 5 }, qchatUpdateChannelCategoryWhiteBlackMembersTag: { serverId: 1, categoryId: 2, type: 3, opeType: 4, toAccids: 5 }, qchatGetChannelCategoryWhiteBlackMembersPageTag: { serverId: 1, categoryId: 2, type: 3, timetag: 4, limit: 5 }, qchatGetChannelCategoryWhiteBlackRolesTag: { serverId: 1, categoryId: 2, type: 3, roleIds: 4 }, qchatGetChannelCategoryWhiteBlackMembersTag: { serverId: 1, categoryId: 2, type: 3, accids: 4 }, qchatGetChannelCategoriesPageTag: { serverId: 1, timetag: 2, limit: 3 }, qchatGetChannelCategoryChannelsPageTag: { serverId: 1, categoryId: 2, timetag: 3, limit: 4 }, qchatGetChannelSearchByPageTag: { keyword: 1, startTime: 2, endTime: 3, order: 4, limit: 5, serverId: 6, sort: 7, cursor: 8 }, qchatUpdateChannelTag: { channelId: 1, name: 4, topic: 5, ext: 6, viewMode: 12, visitorMode: 16 }, serverRoles: { serverId: 1, roleIds: 2, timeTag: 3 }, qchatChannelMemberSearchTag: { serverId: 1, channelId: 2, keyword: 3, limit: 4 }, qchatChannelMemberInfo: { serverId: 1, channelId: 2, avatar: 3, accid: 4, nick: 5, createTime: 6, updateTime: 7 } }, $_ = function getDeserializeTag() {
        return invertSerializeMap(j_);
      }, z_ = function getCmdConfig() {
        var t2 = $_();
        return { qchatCreateChannel: { sid: 24, cid: 48, service: "qchatChannel", params: [{ type: "Property", name: "channelInfo", reflectMapper: j_.channelInfo }, { type: "Property", name: "antispamTag", reflectMapper: j_.antispamTag }], response: [{ type: "Property", name: "channelInfo", reflectMapper: t2.channelInfo }] }, qchatDeleteChannel: { sid: 24, cid: 49, service: "qchatChannel", params: [{ type: "Long", name: "channelId" }] }, qchatUpdateChannel: { sid: 24, cid: 50, service: "qchatChannel", params: [{ type: "Property", name: "channelInfo", reflectMapper: j_.qchatUpdateChannelTag }, { type: "Property", name: "antispamTag", reflectMapper: j_.antispamTag }], response: [{ type: "Property", name: "channelInfo", reflectMapper: t2.channelInfo }] }, qchatGetChannels: { sid: 24, cid: 51, service: "qchatChannel", params: [{ type: "LongArray", name: "channelIds" }], response: [{ type: "PropertyArray", name: "channelList", reflectMapper: t2.channelInfo }] }, qchatGetChannelsByPage: { sid: 24, cid: 52, service: "qchatChannel", params: [{ type: "Property", name: "qchatGetChannelListPageTag", reflectMapper: j_.qchatGetChannelListPageTag }], response: [{ type: "Property", name: "listQueryTag", reflectMapper: { 1: "hasMore", 2: "nextTimetag" } }, { type: "PropertyArray", name: "datas", reflectMapper: t2.channelInfo }] }, qchatGetMembersByPage: { sid: 24, cid: 53, service: "qchatChannel", params: [{ type: "Property", name: "qchatGetMembersByPageTag", reflectMapper: j_.qchatGetMembersByPageTag }], response: [{ type: "Property", name: "listQueryTag", reflectMapper: { 1: "hasMore", 2: "nextTimetag" } }, { type: "PropertyArray", name: "datas", reflectMapper: t2.memberInfo }] }, qchatUpdateWhiteBlackRole: { sid: 24, cid: 54, service: "qchatChannel", params: [{ type: "Property", name: "qchatUpdateWhiteBlackRoleTag", reflectMapper: j_.qchatUpdateWhiteBlackRoleTag }] }, qchatGetWhiteBlackRolesPage: { sid: 24, cid: 55, service: "qchatChannel", params: [{ type: "Property", name: "qchatGetWhiteBlackRolesPageTag", reflectMapper: j_.qchatGetWhiteBlackRolesPageTag }], response: [{ type: "Property", name: "listQueryTag", reflectMapper: { 1: "hasMore", 2: "nextTimetag" } }, { type: "PropertyArray", name: "datas", reflectMapper: t2.serverRole }] }, qchatUpdateWhiteBlackMembers: { sid: 24, cid: 56, service: "qchatChannel", params: [{ type: "Property", name: "qchatUpdateWhiteBlackMembersTag", reflectMapper: j_.qchatUpdateWhiteBlackMembersTag }] }, qchatGetWhiteBlackMembersPage: { sid: 24, cid: 57, service: "qchatChannel", params: [{ type: "Property", name: "qchatGetWhiteBlackMembersPageTag", reflectMapper: j_.qchatGetWhiteBlackMembersPageTag }], response: [{ type: "Property", name: "listQueryTag", reflectMapper: { 1: "hasMore", 2: "nextTimetag" } }, { type: "PropertyArray", name: "datas", reflectMapper: t2.memberInfo }] }, qchatGetExistingWhiteBlackRoles: { sid: 24, cid: 58, service: "qchatChannel", params: [{ type: "Property", name: "qchatGetExistingWhiteBlackRolesTag", reflectMapper: j_.qchatGetExistingWhiteBlackRolesTag }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: t2.serverRole }] }, qchatGetExistingWhiteBlackMembers: { sid: 24, cid: 59, service: "qchatChannel", params: [{ type: "Property", name: "qchatGetExistingWhiteBlackMembersTag", reflectMapper: j_.qchatGetExistingWhiteBlackMembersTag }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: t2.memberInfo }] }, qchatUpdateCategoryInfoOfChannel: { sid: 24, cid: 60, service: "qchatChannel", params: [{ type: "Property", name: "qchatUpdateCategoryInfoOfChannelTag", reflectMapper: j_.channelInfo }], response: [{ type: "Property", name: "channelInfo", reflectMapper: t2.channelInfo }] }, qchatCreateChannelCategory: { sid: 24, cid: 109, service: "qchatChannel", params: [{ type: "Property", name: "qchatCreateChannelCategoryTag", reflectMapper: j_.QChatChannelCategoryInfo }], response: [{ type: "Property", name: "QChatChannelCategoryInfo", reflectMapper: t2.QChatChannelCategoryInfo }] }, qchatRemoveChannelCategory: { sid: 24, cid: 110, service: "qchatChannel", params: [{ type: "Long", name: "categoryId" }] }, qchatUpdateChannelCategory: { sid: 24, cid: 111, service: "qchatChannel", params: [{ type: "Property", name: "qchatUpdateChannelCategoryTag", reflectMapper: j_.QChatChannelCategoryInfo }], response: [{ type: "Property", name: "QChatChannelCategoryInfo", reflectMapper: t2.QChatChannelCategoryInfo }] }, qchatGetChannelCategoriesByID: { sid: 24, cid: 112, service: "qchatChannel", params: [{ type: "LongArray", name: "categoryIds" }], response: [{ type: "PropertyArray", name: "channelCategoryList", reflectMapper: t2.QChatChannelCategoryInfo }] }, qchatUpdateChannelCategoryWhiteBlackRole: { sid: 24, cid: 113, service: "qchatChannel", params: [{ type: "Property", name: "qchatUpdateChannelCategoryWhiteBlackRoleTag", reflectMapper: j_.qchatUpdateChannelCategoryWhiteBlackRoleTag }] }, qchatGetChannelCategoryWhiteBlackRolesPage: { sid: 24, cid: 114, service: "qchatChannel", params: [{ type: "Property", name: "qchatGetChannelCategoryWhiteBlackRolesPageTag", reflectMapper: j_.qchatGetChannelCategoryWhiteBlackRolesPageTag }], response: [{ type: "Property", name: "listQueryTag", reflectMapper: { 1: "hasMore", 2: "nextTimetag" } }, { type: "PropertyArray", name: "datas", reflectMapper: t2.serverRole }] }, qchatUpdateChannelCategoryWhiteBlackMembers: { sid: 24, cid: 115, service: "qchatChannel", params: [{ type: "Property", name: "qchatUpdateChannelCategoryWhiteBlackMembersTag", reflectMapper: j_.qchatUpdateChannelCategoryWhiteBlackMembersTag }] }, qchatGetChannelCategoryWhiteBlackMembersPage: { sid: 24, cid: 116, service: "qchatChannel", params: [{ type: "Property", name: "qchatGetChannelCategoryWhiteBlackMembersPageTag", reflectMapper: j_.qchatGetChannelCategoryWhiteBlackMembersPageTag }], response: [{ type: "Property", name: "listQueryTag", reflectMapper: { 1: "hasMore", 2: "nextTimetag" } }, { type: "PropertyArray", name: "datas", reflectMapper: t2.memberInfo }] }, qchatGetChannelCategoryWhiteBlackRoles: { sid: 24, cid: 117, service: "qchatChannel", params: [{ type: "Property", name: "qchatGetChannelCategoryWhiteBlackRolesTag", reflectMapper: j_.qchatGetChannelCategoryWhiteBlackRolesTag }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: t2.serverRole }] }, qchatGetChannelCategoryWhiteBlackMembers: { sid: 24, cid: 118, service: "qchatChannel", params: [{ type: "Property", name: "qchatGetChannelCategoryWhiteBlackMembersTag", reflectMapper: j_.qchatGetChannelCategoryWhiteBlackMembersTag }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: t2.memberInfo }] }, qchatGetChannelCategoriesPage: { sid: 24, cid: 119, service: "qchatChannel", params: [{ type: "Property", name: "qchatGetChannelCategoriesPageTag", reflectMapper: j_.qchatGetChannelCategoriesPageTag }], response: [{ type: "Property", name: "listQueryTag", reflectMapper: { 1: "hasMore", 2: "nextTimetag" } }, { type: "PropertyArray", name: "datas", reflectMapper: t2.QChatChannelCategoryInfo }] }, qchatGetChannelCategoryChannelsPage: { sid: 24, cid: 120, service: "qchatChannel", params: [{ type: "Property", name: "qchatGetChannelCategoryChannelsPageTag", reflectMapper: j_.qchatGetChannelCategoryChannelsPageTag }], response: [{ type: "Property", name: "listQueryTag", reflectMapper: { 1: "hasMore", 2: "nextTimetag" } }, { type: "PropertyArray", name: "datas", reflectMapper: t2.channelInfo }] }, qchatSubscribe: { sid: 24, cid: 15, service: "qchatChannel", params: [{ type: "Property", name: "qchatSubReqTag", reflectMapper: j_.qchatSubReqTag }, { type: "PropertyArray", name: "channels", reflectMapper: j_.qchatChannelIdInfoTag }], response: [{ type: "PropertyArray", name: "unreadInfos", reflectMapper: t2.unreadInfo }, { type: "PropertyArray", name: "failedChannels", reflectMapper: t2.qchatChannelIdInfoTag }] }, qchatAutoSubscribe: { sid: 25, cid: 12, service: "qchatChannel", hasPacketTimer: false, params: [{ type: "Property", name: "qchatAutoSubReqTag" }], response: [{ type: "Property", name: "qchatAutoSubInfo", reflectMapper: { 1: "time" } }] }, qchatAutoSubscribeNotification: { service: "qchatChannel", sid: 25, cid: 13, response: [{ type: "PropertyArray", name: "serverIds", reflectMapper: t2.unreadInfo }, { type: "PropertyArray", name: "unreadInfos", reflectMapper: t2.unreadInfo }] }, qchatGetUnreadInfo: { sid: 24, cid: 27, service: "qchatChannel", params: [{ type: "PropertyArray", name: "channels", reflectMapper: j_.qchatChannelIdInfoTag }], response: [{ type: "PropertyArray", name: "unreadInfos", reflectMapper: t2.unreadInfo }] }, qchatGetChannelSearchByPage: { sid: 24, cid: 93, service: "qchatChannel", params: [{ type: "Property", name: "qchatGetChannelSearchByPageTag", reflectMapper: j_.qchatGetChannelSearchByPageTag }], response: [{ type: "Property", name: "listQueryTag", reflectMapper: { 1: "hasMore", 2: "nextTimetag", 3: "cursor" } }, { type: "PropertyArray", name: "datas", reflectMapper: t2.channelInfo }] }, qchatGetRoleIdsByServerId: { sid: 25, cid: 8, service: "qchatChannel", params: [{ type: "Property", name: "qchatGetRoleIdsByServerIdTag", reflectMapper: { serverIdTimeTags: 1 } }], response: [{ type: "PropertyArray", name: "serverRoles", reflectMapper: t2.serverRoles }, { type: "String", name: "failServerIds" }] }, qchatChannelMemberSearch: { sid: 24, cid: 95, service: "qchatChannel", params: [{ type: "Property", name: "qchatChannelMemberSearchTag", reflectMapper: j_.qchatChannelMemberSearchTag }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: t2.qchatChannelMemberInfo }] }, qchatSubscribeAsVisitor: { sid: 25, cid: 9, service: "qchatChannel", params: [{ type: "Property", name: "tag", reflectMapper: j_.qchatSubReqTag }, { type: "PropertyArray", name: "datas", reflectMapper: j_.qchatChannelIdInfoTag }], response: [{ type: "PropertyArray", name: "failedArr", reflectMapper: t2.qchatChannelIdInfoTag }] } };
      };
      !function(t2) {
        t2[t2.reorderWeight = 0] = "reorderWeight", t2[t2.createTime = 1] = "createTime";
      }(O_ || (O_ = {})), function(t2) {
        t2[t2.white = 1] = "white", t2[t2.black = 2] = "black";
      }(P_ || (P_ = {})), function(t2) {
        t2[t2.add = 1] = "add", t2[t2.remove = 2] = "remove";
      }(L_ || (L_ = {})), function(t2) {
        t2[t2.message = 0] = "message", t2[t2.media = 1] = "media", t2[t2.ext = 100] = "ext";
      }(V_ || (V_ = {})), function(t2) {
        t2[t2.ASC = 1] = "ASC", t2[t2.DESC = 2] = "DESC";
      }(U_ || (U_ = {})), function(t2) {
        t2[t2.reorderWeight = 0] = "reorderWeight", t2[t2.createTime = 1] = "createTime", t2[t2.totalMember = 2] = "totalMember";
      }(D_ || (D_ = {})), function(t2) {
        t2[t2.square = 1] = "square", t2[t2.person = 2] = "person";
      }(q_ || (q_ = {}));
      var W_ = { channelId: { type: "string" }, serverId: { type: "string" }, name: { type: "string" }, topic: { type: "string" }, ext: { type: "string" }, type: { type: "enum", values: V_ }, validFlag: { type: "boolean" }, createTime: { type: "number" }, updateTime: { type: "number" }, viewMode: { type: "number" }, categoryId: { type: "string" }, syncMode: { type: "number" }, visitorMode: { type: "number" }, reorderWeight: { type: "string" } }, K_ = { serverId: { type: "string" }, channelId: { type: "string" }, ackTimestamp: { type: "number" }, unreadCount: { type: "number" }, mentionedCount: { type: "number" }, maxCount: { type: "number" }, lastMsgTime: { type: "number" } }, Y_ = { serverId: { type: "string" }, channelId: { type: "string" }, type: { type: "enum", values: P_ }, opeType: { type: "enum", values: L_ }, toAccids: { type: "object" } }, Q_ = { serverId: { type: "string" }, channelId: { type: "string" }, type: { type: "enum", values: P_ }, opeType: { type: "enum", values: L_ }, roleId: { type: "string" } }, J_ = { categoryId: { type: "string" }, serverId: { type: "string" }, name: { type: "string" }, ext: { type: "string" }, owner: { type: "string" }, viewMode: { type: "number" }, validFlag: { type: "boolean" }, createTime: { type: "number" }, updateTime: { type: "number" }, channelNumber: { type: "number" } }, X_ = { serverId: { type: "string" }, channelId: { type: "string" }, accid: { type: "string" }, avatar: { type: "string" }, nick: { type: "string" }, createTime: { type: "number" }, updateTime: { type: "number" } };
      function formatUpdateWhiteBlackRole(t2) {
        return format(Q_, t2);
      }
      function formatChannel(t2) {
        return format(W_, t2);
      }
      function formatChannels(t2) {
        return Dn(t2) && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return formatChannel(t3);
        }) : [];
      }
      function formatUnreadInfo(t2) {
        return format(K_, t2);
      }
      function formatUnreadInfos(t2) {
        return Dn(t2) && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return formatUnreadInfo(t3);
        }) : [];
      }
      function formatChannelCategory(t2) {
        return format(J_, t2);
      }
      function formatChannelCategorys(t2) {
        return Dn(t2) && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return formatChannelCategory(t3);
        }) : [];
      }
      function formatChannelMembers(t2) {
        return Dn(t2) && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return function formatChannelMember(t4) {
            return format(X_, t4);
          }(t3);
        }) : [];
      }
      function formatFailServerIds(t2) {
        try {
          return JSON.parse(t2);
        } catch (t3) {
          return [];
        }
      }
      var Z_ = { serverId: { type: "string" }, name: { type: "string" }, icon: { type: "string" }, ext: { type: "string" }, owner: { type: "string" }, memberNumber: { type: "number" }, inviteMode: { type: "number" }, applyMode: { type: "number" }, validFlag: { type: "boolean" }, createTime: { type: "number" }, updateTime: { type: "number" }, channelNumber: { type: "number" }, categoryNumber: { type: "number" }, searchType: { type: "number" }, searchEnable: { type: "boolean" }, reorderWeight: { type: "string" } }, eM = { serverId: { type: "string" }, uid: { type: "string" }, accid: { type: "string" }, nick: { type: "string" }, avatar: { type: "string" }, ext: { type: "string" }, type: { type: "number" }, joinTime: { type: "number" }, inviter: { type: "string" }, validFlag: { type: "boolean" }, createTime: { type: "number" }, updateTime: { type: "number" } }, tM = { serverId: { type: "string" }, appid: { type: "string" }, accid: { type: "string" }, ext: { type: "string" }, banTime: { type: "number" }, validFlag: { type: "boolean" }, createTime: { type: "number" }, updateTime: { type: "number" } };
      function formatServer(t2) {
        return format(Z_, t2);
      }
      function formatServers(t2) {
        return Dn(t2) && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return formatServer(t3);
        }) : [];
      }
      function formatMember$1(t2) {
        return format(eM, t2);
      }
      function formatMembers$1(t2) {
        return Dn(t2) && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return formatMember$1(t3);
        }) : [];
      }
      function formatServerMemberBanInfos(t2) {
        return Dn(t2) && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return function formatServerMemberBanInfo(t4) {
            return format(tM, t4);
          }(t3);
        }) : [];
      }
      function generateAntispamTag(t2) {
        var a2, u2, m2;
        if (!t2.antispamTag)
          return {};
        var h2 = Dt({}, t2.antispamTag);
        return ((a2 = t2.antispamTag) === null || a2 === void 0 ? void 0 : a2.antiSpamBusinessId) && typeof ((u2 = t2.antispamTag) === null || u2 === void 0 ? void 0 : u2.antiSpamBusinessId) != "string" && (h2.antiSpamBusinessId = Un((m2 = t2.antispamTag) === null || m2 === void 0 ? void 0 : m2.antiSpamBusinessId)), h2;
      }
      var rM = { accid: { type: "string" }, type: { type: "number" }, serverId: { type: "string" }, status: { type: "number" }, requestId: { type: "string" }, createTime: { type: "number" }, updateTime: { type: "number" }, expireTime: { type: "number" }, data: { type: "object" } };
      function formatInviteApplyRecord(t2) {
        return format(rM, t2);
      }
      function formatInviteApplyRecords(t2) {
        return Dn(t2) && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return formatInviteApplyRecord(t3);
        }) : [];
      }
      var nM, aM, iM, oM, sM = { successServerIds: { type: "object" }, failServerIds: { type: "object" }, ackTimestamp: { type: "number" } };
      function formatClearServersUnread(t2) {
        return format(sM, t2);
      }
      !function(t2) {
        t2[t2.everyone = 1] = "everyone", t2[t2.custom = 2] = "custom";
      }(nM || (nM = {})), function(t2) {
        t2[t2.normal = 0] = "normal", t2[t2.owner = 1] = "owner";
      }(aM || (aM = {})), function(t2) {
        t2[t2.ignore = 0] = "ignore", t2[t2.deny = -1] = "deny", t2[t2.allow = 1] = "allow";
      }(iM || (iM = {})), function(t2) {
        t2[t2.manageServer = 1] = "manageServer", t2[t2.manageChannel = 2] = "manageChannel", t2[t2.manageRole = 3] = "manageRole", t2[t2.sendMsg = 4] = "sendMsg", t2[t2.accountInfoSelf = 5] = "accountInfoSelf", t2[t2.inviteServer = 6] = "inviteServer", t2[t2.kickServer = 7] = "kickServer", t2[t2.accountInfoOther = 8] = "accountInfoOther", t2[t2.recallMsg = 9] = "recallMsg", t2[t2.deleteMsg = 10] = "deleteMsg", t2[t2.remindOther = 11] = "remindOther", t2[t2.remindEveryone = 12] = "remindEveryone", t2[t2.manageBlackWhiteList = 13] = "manageBlackWhiteList", t2[t2.banServerMember = 14] = "banServerMember", t2[t2.RTCChannelConnect = 15] = "RTCChannelConnect", t2[t2.RTCChannelDisconnectOther = 16] = "RTCChannelDisconnectOther", t2[t2.RTCChannelOpenMicrophone = 17] = "RTCChannelOpenMicrophone", t2[t2.RTCChannelOpenCamera = 18] = "RTCChannelOpenCamera", t2[t2.RTCChannelOpenCloseOtherMicrophone = 19] = "RTCChannelOpenCloseOtherMicrophone", t2[t2.RTCChannelOpenCloseOtherCamera = 20] = "RTCChannelOpenCloseOtherCamera", t2[t2.RTCChannelOpenCloseEveryoneMicrophone = 21] = "RTCChannelOpenCloseEveryoneMicrophone", t2[t2.RTCChannelOpenCloseEveryoneCamera = 22] = "RTCChannelOpenCloseEveryoneCamera", t2[t2.RTCChannelOpenShareScreen = 23] = "RTCChannelOpenShareScreen", t2[t2.RTCChannelCloseOtherShareScreen = 24] = "RTCChannelCloseOtherShareScreen", t2[t2.manageInviteApply = 25] = "manageInviteApply", t2[t2.manageInviteApplyHistory = 26] = "manageInviteApplyHistory", t2[t2.mentionedRole = 27] = "mentionedRole";
      }(oM || (oM = {}));
      var cM, lM, uM, dM, pM, mM, hM, gM, vM = { type: { type: "enum", values: nM }, memberType: { type: "enum", values: aM }, createTime: { type: "number" }, updateTime: { type: "number" }, priority: { type: "number" }, memberCount: { type: "number" }, joinTime: { type: "number" } }, fM = { roleId: { type: "string" }, categoryId: { type: "string" }, serverId: { type: "string" }, type: { type: "enum", values: nM }, validFlag: { type: "boolean" }, createTime: { type: "number" }, updateTime: { type: "number" }, name: { type: "string" }, icon: { type: "string" }, ext: { type: "string" } }, yM = { id: { type: "string" }, accid: { type: "string" }, categoryId: { type: "string" }, serverId: { type: "string" }, validFlag: { type: "boolean" }, createTime: { type: "number" }, updateTime: { type: "number" }, nick: { type: "string" }, avatar: { type: "string" }, ext: { type: "string" }, memberType: { type: "enum", values: aM }, joinTime: { type: "number" }, inviter: { type: "string" } };
      function generatorRoleForCmd(t2) {
        var a2 = Dt({}, t2), u2 = formatReverse(vM, a2);
        return u2.auths && (u2.auths = function generateRoleAuthsForCmd(t3) {
          var a3, u3 = reduce(a3 = Ht(t3)).call(a3, function(a4, u4) {
            var m2 = oM[u4];
            return m2 ? a4[m2] = iM[t3[u4]] : a4[u4] = iM[t3[u4]], a4;
          }, {});
          return Un(u3);
        }(u2.auths)), u2;
      }
      function formatRoleAuths(t2) {
        var a2;
        return reduce(a2 = Ht(t2)).call(a2, function(a3, u2) {
          var m2 = getEnumKeyByEnumValue(oM, u2);
          m2 ? a3[m2] = iM[t2[u2]] : a3[Uu(u2)] = iM[t2[u2]];
          return a3;
        }, {});
      }
      function formatRole(t2) {
        var a2 = format(vM, t2);
        return t2.auths && (a2.auths = formatRoleAuths(JSON.parse(a2.auths))), a2.isMember && delete a2.isMember, a2;
      }
      function formatRoles(t2) {
        return Dn(t2) && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return formatRole(t3);
        }) : [];
      }
      function formatChannelCategoryRole(t2) {
        return t2.auths && (t2.auths = formatRoleAuths(JSON.parse(t2.auths))), format(fM, t2);
      }
      function formatChannelCategoryMemberRole(t2) {
        return t2.auths && (t2.auths = formatRoleAuths(JSON.parse(t2.auths))), format(yM, t2);
      }
      function isObject(t2) {
        var a2 = typeof t2;
        return t2 != null && (a2 == "object" || a2 == "function");
      }
      !function(t2) {
        t2[t2.default = 1] = "default", t2[t2.sync = 2] = "sync";
      }(cM || (cM = {})), function(t2) {
        t2[t2.sendTime = 1] = "sendTime";
      }(lM || (lM = {})), function(t2) {
        t2[t2.text = 0] = "text", t2[t2.image = 1] = "image", t2[t2.audio = 2] = "audio", t2[t2.video = 3] = "video", t2[t2.geo = 4] = "geo", t2[t2.notification = 5] = "notification", t2[t2.file = 6] = "file", t2[t2.tip = 10] = "tip", t2[t2.robot = 11] = "robot", t2[t2.g2 = 12] = "g2", t2[t2.custom = 100] = "custom";
      }(uM || (uM = {})), function(t2) {
        t2[t2.sending = 1] = "sending", t2[t2.success = 2] = "success", t2[t2.failed = 3] = "failed";
      }(dM || (dM = {})), function(t2) {
        t2[t2.notifyAll = 1] = "notifyAll", t2[t2.notifySubscribe = 2] = "notifySubscribe";
      }(pM || (pM = {})), function(t2) {
        t2[t2.unknown = 0] = "unknown", t2[t2.server = 1] = "server", t2[t2.channel = 2] = "channel", t2[t2.serverAccids = 3] = "serverAccids", t2[t2.channelAccids = 4] = "channelAccids", t2[t2.accids = 5] = "accids";
      }(mM || (mM = {})), function(t2) {
        t2[t2.serverMemberInvite = 1] = "serverMemberInvite", t2[t2.serverMemberInviteReject = 2] = "serverMemberInviteReject", t2[t2.serverMemberApply = 3] = "serverMemberApply", t2[t2.serverMemberApplyReject = 4] = "serverMemberApplyReject", t2[t2.serverCreate = 5] = "serverCreate", t2[t2.serverRemove = 6] = "serverRemove", t2[t2.serverUpdate = 7] = "serverUpdate", t2[t2.serverMemberInviteDone = 8] = "serverMemberInviteDone", t2[t2.serverMemberInviteAccept = 9] = "serverMemberInviteAccept", t2[t2.serverMemberApplyDone = 10] = "serverMemberApplyDone", t2[t2.serverMemberApplyAccept = 11] = "serverMemberApplyAccept", t2[t2.serverMemberKick = 12] = "serverMemberKick", t2[t2.serverMemberLeave = 13] = "serverMemberLeave", t2[t2.serverMemberUpdate = 14] = "serverMemberUpdate", t2[t2.channelCreate = 15] = "channelCreate", t2[t2.channelRemove = 16] = "channelRemove", t2[t2.channelUpdate = 17] = "channelUpdate", t2[t2.channelUpdateWhiteBlackIdentify = 18] = "channelUpdateWhiteBlackIdentify", t2[t2.channelUpdateWhiteBlackIdentifyUser = 19] = "channelUpdateWhiteBlackIdentifyUser", t2[t2.updateQuickComment = 20] = "updateQuickComment", t2[t2.channelCategoryCreate = 21] = "channelCategoryCreate", t2[t2.channelCategoryRemove = 22] = "channelCategoryRemove", t2[t2.channelCategoryUpdate = 23] = "channelCategoryUpdate", t2[t2.channelCategoryUpdateWhiteBlackIdentify = 24] = "channelCategoryUpdateWhiteBlackIdentify", t2[t2.channelCategoryUpdateWhiteBlackIdentifyUser = 25] = "channelCategoryUpdateWhiteBlackIdentifyUser", t2[t2.serverIdentifyAdd = 26] = "serverIdentifyAdd", t2[t2.serverIdentifyRemove = 27] = "serverIdentifyRemove", t2[t2.serverIdentifyUpdate = 28] = "serverIdentifyUpdate", t2[t2.channelIdentifyUpdate = 29] = "channelIdentifyUpdate", t2[t2.userIdentifyUpdate = 30] = "userIdentifyUpdate", t2[t2.channelVisibilityUpdate = 31] = "channelVisibilityUpdate", t2[t2.serverEnterLeave = 32] = "serverEnterLeave", t2[t2.serverMemberJoinByInviteCode = 33] = "serverMemberJoinByInviteCode", t2[t2.channelVisibilityToVisitorUpdate = 34] = "channelVisibilityToVisitorUpdate", t2[t2.myMemberInfoUpdated = 35] = "myMemberInfoUpdated", t2[t2.custom = 100] = "custom", t2[t2.msgTyping = 101] = "msgTyping";
      }(hM || (hM = {})), function(t2) {
        t2[t2.reply = 1] = "reply", t2[t2.thread = 2] = "thread", t2[t2.all = 3] = "all";
      }(gM || (gM = {}));
      var _M = Math.max, MM = Math.min;
      function debounce(t2, a2, u2) {
        var m2, h2, g2, M2, I2, S2, T2 = 0, C2 = false, b2 = false, E2 = true;
        if (typeof t2 != "function")
          throw new TypeError("Expected a function");
        function invokeFunc(a3) {
          var u3 = m2, g3 = h2;
          return m2 = h2 = void 0, T2 = a3, M2 = t2.apply(g3, u3);
        }
        function leadingEdge(t3) {
          return T2 = t3, I2 = mo(timerExpired, a2), C2 ? invokeFunc(t3) : M2;
        }
        function shouldInvoke(t3) {
          var u3 = t3 - S2;
          return S2 === void 0 || u3 >= a2 || u3 < 0 || b2 && t3 - T2 >= g2;
        }
        function timerExpired() {
          var t3 = to();
          if (shouldInvoke(t3))
            return trailingEdge(t3);
          I2 = mo(timerExpired, function remainingWait(t4) {
            var u3 = a2 - (t4 - S2);
            return b2 ? MM(u3, g2 - (t4 - T2)) : u3;
          }(t3));
        }
        function trailingEdge(t3) {
          return I2 = void 0, E2 && m2 ? invokeFunc(t3) : (m2 = h2 = void 0, M2);
        }
        function debounced() {
          var t3 = to(), u3 = shouldInvoke(t3);
          if (m2 = arguments, h2 = this, S2 = t3, u3) {
            if (I2 === void 0)
              return leadingEdge(S2);
            if (b2)
              return clearTimeout(I2), I2 = mo(timerExpired, a2), invokeFunc(S2);
          }
          return I2 === void 0 && (I2 = mo(timerExpired, a2)), M2;
        }
        return a2 = Number(a2) || 0, isObject(u2) && (C2 = !!u2.leading, g2 = (b2 = "maxWait" in u2) ? _M(Number(u2.maxWait) || 0, a2) : g2, E2 = "trailing" in u2 ? !!u2.trailing : E2), debounced.cancel = function cancel() {
          I2 !== void 0 && clearTimeout(I2), T2 = 0, m2 = S2 = h2 = I2 = void 0;
        }, debounced.flush = function flush() {
          return I2 === void 0 ? M2 : trailingEdge(to());
        }, debounced;
      }
      var IM;
      function throttle(t2, a2, u2) {
        var m2 = true, h2 = true;
        if (typeof t2 != "function")
          throw new TypeError("Expected a function");
        return isObject(u2) && (m2 = "leading" in u2 ? !!u2.leading : m2, h2 = "trailing" in u2 ? !!u2.trailing : h2), debounce(t2, a2, { leading: m2, maxWait: a2, trailing: h2 });
      }
      !function(t2) {
        t2[t2.sub = 1] = "sub", t2[t2.unSub = 2] = "unSub";
      }(IM || (IM = {}));
      var SM = function() {
        function UnreadInfoModuleService(t3) {
          var a2 = this;
          this.unreadCount = {}, this.manualSubscribeUnreadMap = {}, this.manualSubscribeServerMap = {}, this.manualSubscribeTypingMap = {}, this.unreadServerCount = {}, this.serverRoleIdsMap = {}, this.autoSubscribeUnreadMap = {}, this.autoSubscribeServerMap = {}, this._serverUnreadInfo = throttle(function(t4) {
            a2.core.emit("serverUnreadInfo", a2.getServerUnreadInfo(t4)), get(a2.core, "qchatServer.emit") && a2.core.qchatServer.emit("serverUnreadInfo", a2.getServerUnreadInfo(t4));
          }, 100), this.core = t3;
        }
        var t2 = UnreadInfoModuleService.prototype;
        return t2.changeCacheServerRoleIds = function changeCacheServerRoleIds(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a2, u2, m2, h2, g2, M2, I2, S2 = this;
            return Ql.wrap(function _callee$(T2) {
              for (; ; )
                switch (T2.prev = T2.next) {
                  case 0:
                    if (u2 = t3.attach.serverIdentifyInfo, m2 = u2.serverId, h2 = u2.roleId, this.serverRoleIdsMap[m2]) {
                      T2.next = 4;
                      break;
                    }
                    return T2.next = 4, this.getRoleIdsByServerId([m2]);
                  case 4:
                    if (g2 = this.serverRoleIdsMap[m2], !(t3.time < g2.timeTag)) {
                      T2.next = 7;
                      break;
                    }
                    return T2.abrupt("return");
                  case 7:
                    if (t3.type === hM[hM.serverIdentifyAdd] ? g2.roleIds.add(h2) : g2.roleIds.delete(h2), this.core.logger.debug("QChatChannel::qchatChannel/serverIdentifyChange::now " + m2 + " roleIds is", concat(a2 = []).call(a2, g2.roleIds)), M2 = this.unreadServerCount[m2]) {
                      T2.next = 12;
                      break;
                    }
                    return T2.abrupt("return");
                  case 12:
                    I2 = chunk(Ht(M2), 100), forEach$1(I2).call(I2, function(t4) {
                      S2.core.qchatChannel.getChannelUnreadInfos({ channels: map$6(t4).call(t4, function(t5) {
                        return { serverId: m2, channelId: t5 };
                      }) });
                    });
                  case 14:
                  case "end":
                    return T2.stop();
                }
            }, _callee, this);
          }));
        }, t2.getRoleIdsByServerId = function getRoleIdsByServerId(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a2, u2, m2, h2, g2 = this;
            return Ql.wrap(function _callee2$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    if ((u2 = filter(t3).call(t3, function(t4) {
                      return !g2.serverRoleIdsMap[t4];
                    })).length) {
                      M2.next = 3;
                      break;
                    }
                    return M2.abrupt("return");
                  case 3:
                    return m2 = { serverIdTimeTags: u2 }, M2.next = 6, this.core.sendCmd("qchatGetRoleIdsByServerId", { qchatGetRoleIdsByServerIdTag: m2 });
                  case 6:
                    h2 = M2.sent, this.core.logger.debug("QChatChannel:: getRoleIdsByServerId, params is ", m2, "result is", h2), forEach$1(a2 = h2.content.serverRoles).call(a2, function(t4) {
                      try {
                        t4.roleIds = JSON.parse(t4.roleIds);
                      } catch (t5) {
                        g2.core.logger.error("QChatChannel:: getRoleIdsByServerId JSON parse roleIds error", t5);
                      }
                      g2.serverRoleIdsMap[t4.serverId] = { roleIds: new Tv(t4.roleIds), timeTag: t4.timeTag };
                    });
                  case 9:
                  case "end":
                    return M2.stop();
                }
            }, _callee2, this);
          }));
        }, t2._unSubscribeChannel = function _unSubscribeChannel(t3, a2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var u2, m2, h2, g2, M2;
            return Ql.wrap(function _callee3$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    if (u2 = t3 + "_" + a2, m2 = [], this.manualSubscribeUnreadMap[u2] ? m2.push(this.manualSubscribeUnreadMap[u2]) : this.autoSubscribeUnreadMap[u2] && m2.push(this.autoSubscribeUnreadMap[u2]), this.manualSubscribeTypingMap[u2] && m2.push(this.manualSubscribeTypingMap[u2]), m2.length !== 0) {
                      I2.next = 6;
                      break;
                    }
                    return I2.abrupt("return");
                  case 6:
                    for (h2 = 0, g2 = m2; h2 < g2.length; h2++)
                      M2 = g2[h2], this.subscribe({ opeType: IM.unSub, type: M2, channels: [{ serverId: t3, channelId: a2 }] });
                    this.manualSubscribeUnreadMap[u2] ? this.manualSubscribeUnreadMap[u2] = void 0 : this.autoSubscribeUnreadMap[u2] && (this.autoSubscribeUnreadMap[u2] = void 0), this.manualSubscribeTypingMap[u2] && (this.manualSubscribeTypingMap[u2] = void 0);
                  case 9:
                  case "end":
                    return I2.stop();
                }
            }, _callee3, this);
          }));
        }, t2._unSubscribeServer = function _unSubscribeServer(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a2, u2;
            return Ql.wrap(function _callee4$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    if (a2 = t3, u2 = this.manualSubscribeServerMap[a2] || this.autoSubscribeServerMap[a2]) {
                      m2.next = 4;
                      break;
                    }
                    return m2.abrupt("return");
                  case 4:
                    this.subscribe({ opeType: IM.unSub, type: u2, channels: [{ serverId: t3, channelId: "" }] }), this.manualSubscribeServerMap[a2] ? this.manualSubscribeServerMap[a2] = void 0 : this.autoSubscribeServerMap[a2] && (this.autoSubscribeServerMap[a2] = void 0);
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee4, this);
          }));
        }, t2.subscribe = function subscribe(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var a2, u2, m2, h2, g2 = this;
            return Ql.wrap(function _callee6$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return validate({ type: { type: "number", min: 1, max: 5 }, opeType: { type: "number", min: 1, max: 2 } }, t3), M2.next = 3, this.core.sendCmd("qchatSubscribe", { qchatSubReqTag: { type: t3.type, opeType: t3.opeType }, channels: t3.channels });
                  case 3:
                    return u2 = M2.sent, m2 = new Tv(), forEach$1(a2 = t3.channels).call(a2, function(t4) {
                      return __awaiter(g2, void 0, void 0, Ql.mark(function _callee5() {
                        return Ql.wrap(function _callee5$(a3) {
                          for (; ; )
                            switch (a3.prev = a3.next) {
                              case 0:
                                this.serverRoleIdsMap[t4.serverId] || m2.add(t4.serverId);
                              case 1:
                              case "end":
                                return a3.stop();
                            }
                        }, _callee5, this);
                      }));
                    }), h2 = chunk(jl(m2), 10), forEach$1(h2).call(h2, function(t4) {
                      g2.getRoleIdsByServerId(t4);
                    }), M2.abrupt("return", u2.content);
                  case 9:
                  case "end":
                    return M2.stop();
                }
            }, _callee6, this);
          }));
        }, t2.autoSubscribe = function autoSubscribe() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            return Ql.wrap(function _callee7$(t3) {
              for (; ; )
                switch (t3.prev = t3.next) {
                  case 0:
                    return t3.next = 2, this.core.sendCmd("qchatAutoSubscribe", { qchatAutoSubReqTag: {} });
                  case 2:
                  case "end":
                    return t3.stop();
                }
            }, _callee7, this);
          }));
        }, t2.resumeSubscribe = function resumeSubscribe(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            var a2, u2, m2, h2, g2, M2, I2, S2 = this;
            return Ql.wrap(function _callee10$(T2) {
              for (; ; )
                switch (T2.prev = T2.next) {
                  case 0:
                    if (this.serverRoleIdsMap = {}, g2 = 100, t3) {
                      T2.next = 6;
                      break;
                    }
                    return this.unreadServerCount = {}, this.unreadCount = {}, T2.abrupt("return");
                  case 6:
                    return M2 = {}, forEach$1(a2 = Ht(this.manualSubscribeUnreadMap)).call(a2, function(t4) {
                      var a3 = S2.manualSubscribeUnreadMap[t4];
                      if (a3) {
                        var u3 = t4.split("_"), m3 = { serverId: u3[0], channelId: u3[1] };
                        M2[a3] = M2[a3] || [], M2[a3].push(m3);
                      }
                    }), M2[5] = [], forEach$1(u2 = Ht(this.manualSubscribeTypingMap)).call(u2, function(t4) {
                      return __awaiter(S2, void 0, void 0, Ql.mark(function _callee8() {
                        var a3, u3, m3, h3;
                        return Ql.wrap(function _callee8$(g3) {
                          for (; ; )
                            switch (g3.prev = g3.next) {
                              case 0:
                                this.manualSubscribeTypingMap[t4] && (a3 = t4.split("_"), u3 = a3[0], m3 = a3[1], h3 = { serverId: u3, channelId: m3 }, M2[5].push(h3));
                              case 2:
                              case "end":
                                return g3.stop();
                            }
                        }, _callee8, this);
                      }));
                    }), M2[4] = [], forEach$1(m2 = Ht(this.manualSubscribeServerMap)).call(m2, function(t4) {
                      return __awaiter(S2, void 0, void 0, Ql.mark(function _callee9() {
                        var a3;
                        return Ql.wrap(function _callee9$(u3) {
                          for (; ; )
                            switch (u3.prev = u3.next) {
                              case 0:
                                this.manualSubscribeServerMap[t4] && (a3 = { serverId: t4 }, M2[4].push(a3));
                              case 2:
                              case "end":
                                return u3.stop();
                            }
                        }, _callee9, this);
                      }));
                    }), I2 = [], forEach$1(h2 = Ht(M2)).call(h2, function(t4) {
                      var a3 = M2[t4];
                      if (a3 && a3.length === 0)
                        return zi.resolve();
                      if (a3.length > g2) {
                        var u3 = chunk(a3, 100);
                        return forEach$1(u3).call(u3, function(a4) {
                          I2.push(S2.createSubscribePromise(a4, t4));
                        });
                      }
                      I2.push(S2.createSubscribePromise(a3, t4));
                    }), T2.next = 16, zi.all(I2);
                  case 16:
                  case "end":
                    return T2.stop();
                }
            }, _callee10, this);
          }));
        }, t2.createSubscribePromise = function createSubscribePromise(t3, a2) {
          var u2 = this, m2 = { type: Uu(a2), opeType: 1, channels: t3 };
          return this.core.logger.debug("qchatChannel:: autoSubscribeUnread params", m2), this.subscribe(m2).then(function(t4) {
            var a3 = t4.unreadInfos;
            a3 && a3.length > 0 && (a3 = formatUnreadInfos(a3), u2.updateUnreads(a3));
          }).catch(function(t4) {
            u2.core.logger.error("qchatChannel:: autoSubscribeUnread error ", t4);
          });
        }, t2.cacheSubscribe = function cacheSubscribe(t3) {
          var a2, u2 = this;
          forEach$1(a2 = t3.channels).call(a2, function(a3) {
            var m2 = a3.channelId ? a3.serverId + "_" + a3.channelId : "" + a3.serverId, h2 = t3.type === 5 ? u2.manualSubscribeTypingMap : t3.type === 4 ? u2.manualSubscribeServerMap : u2.manualSubscribeUnreadMap;
            t3.opeType === IM.sub ? h2[m2] = t3.type : t3.opeType === IM.unSub && (h2[m2] = void 0);
          });
        }, t2.cacheAutoSubscribe = function cacheAutoSubscribe(t3) {
          var a2, u2 = this;
          forEach$1(a2 = t3.channels).call(a2, function(a3) {
            var m2 = a3.channelId ? a3.serverId + "_" + a3.channelId : "" + a3.serverId, h2 = t3.type === 4 ? u2.autoSubscribeServerMap : u2.autoSubscribeUnreadMap;
            t3.opeType === IM.sub ? h2[m2] = t3.type : t3.opeType === IM.unSub && (h2[m2] = void 0);
          });
        }, t2.cacheUnreadCount = function cacheUnreadCount(t3) {
          var a2 = this;
          forEach$1(t3).call(t3, function(t4) {
            var u2 = t4.serverId + "_" + t4.channelId;
            a2.unreadCount[u2] = Dt({}, t4), a2.unreadServerCount[t4.serverId] || (a2.unreadServerCount[t4.serverId] = {}), a2.unreadServerCount[t4.serverId][t4.channelId] = true;
          });
        }, t2.getServerUnreadInfo = function getServerUnreadInfo(t3) {
          var a2, u2 = this, m2 = { serverId: t3, unreadCount: 0, mentionedCount: 0, maxCount: 0 }, h2 = this.unreadServerCount[t3];
          h2 && (forEach$1(a2 = Ht(h2)).call(a2, function(a3) {
            var h3 = t3 + "_" + a3, g2 = u2.unreadCount[h3];
            m2.unreadCount += g2.unreadCount, m2.mentionedCount += g2.mentionedCount, g2.maxCount !== void 0 && (m2.maxCount = g2.maxCount);
          }), m2.unreadCount = m2.unreadCount > m2.maxCount ? m2.maxCount : m2.unreadCount, m2.mentionedCount = m2.mentionedCount > m2.maxCount ? m2.maxCount : m2.mentionedCount);
          return m2;
        }, t2.getUnreadInfo = function getUnreadInfo(t3) {
          validate({ serverId: { type: "string" }, channelId: { type: "string" } }, t3);
          var a2 = t3.serverId + "_" + t3.channelId;
          return this.unreadCount[a2] ? this.unreadCount[a2] : null;
        }, t2.shouldChangeUnread = function shouldChangeUnread(t3, a2) {
          if (!t3.serverId || !t3.channelId)
            return false;
          if (this.core.qchatChannel.subscribeForVisitorService.isInSubscribeChannels(t3.serverId, t3.channelId))
            return false;
          if (t3.historyEnable === false)
            return false;
          if (t3.needBadge === false)
            return false;
          if (t3.fromAccount === this.core.account)
            return false;
          if (a2 && (t3 == null ? void 0 : t3.status) !== 2)
            return false;
          if (t3.notifyReason && t3.notifyReason === getEnumKeyByEnumValue(pM, pM.notifySubscribe)) {
            if (!t3.serverId || !t3.channelId)
              return false;
            var u2 = this.getUnreadInfo({ serverId: t3.serverId, channelId: t3.channelId }), m2 = a2 ? "ackTimestamp" : "lastMsgTime";
            if (!u2)
              return false;
            if (t3.time && u2[m2] && u2[m2] > t3.time)
              return false;
          }
          return true;
        }, t2.shouldChangeMentionedUnread = function shouldChangeMentionedUnread(t3, a2) {
          return a2 === void 0 && (a2 = false), __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            var u2, m2;
            return Ql.wrap(function _callee11$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    if (!t3.accidsOfMentionedRoles || !includes(u2 = t3.accidsOfMentionedRoles).call(u2, this.core.account)) {
                      h2.next = 2;
                      break;
                    }
                    return h2.abrupt("return", true);
                  case 2:
                    if (!t3.mentionRoleIds || !t3.serverId) {
                      h2.next = 16;
                      break;
                    }
                    if (this.serverRoleIdsMap[t3.serverId]) {
                      h2.next = 9;
                      break;
                    }
                    if (a2) {
                      h2.next = 7;
                      break;
                    }
                    return this.handledRoleMsg(t3), h2.abrupt("return", false);
                  case 7:
                    return h2.next = 9, this.getRoleIdsByServerId([t3.serverId]);
                  case 9:
                    m2 = 0;
                  case 10:
                    if (!(m2 < t3.mentionRoleIds.length)) {
                      h2.next = 16;
                      break;
                    }
                    if (!this.serverRoleIdsMap[t3.serverId].roleIds.has(t3.mentionRoleIds[m2])) {
                      h2.next = 13;
                      break;
                    }
                    return h2.abrupt("return", true);
                  case 13:
                    m2++, h2.next = 10;
                    break;
                  case 16:
                    return h2.abrupt("return", false);
                  case 17:
                  case "end":
                    return h2.stop();
                }
            }, _callee11, this);
          }));
        }, t2.handledRoleMsg = function handledRoleMsg(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            var a2, u2, m2, h2, g2, M2 = this;
            return Ql.wrap(function _callee12$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    if (t3.mentionRoleIds) {
                      I2.next = 2;
                      break;
                    }
                    return I2.abrupt("return");
                  case 2:
                    if (this.serverRoleIdsMap[t3.serverId]) {
                      I2.next = 5;
                      break;
                    }
                    return I2.next = 5, this.getRoleIdsByServerId([t3.serverId]);
                  case 5:
                    if (this.serverRoleIdsMap[t3.serverId]) {
                      I2.next = 8;
                      break;
                    }
                    return this.core.logger.warn("QChatChannel::handledRoleMsg::can not get serverRoleIds,server id", t3.serverId), I2.abrupt("return");
                  case 8:
                    if (u2 = false, forEach$1(a2 = t3.mentionRoleIds).call(a2, function(a3) {
                      M2.serverRoleIdsMap[t3.serverId].roleIds.has(a3) && (u2 = true, M2.core.logger.debug("QChatChannel::handledRoleMsg::will update message mentionedCount\uFF0Cmessage is ", t3));
                    }), u2) {
                      I2.next = 12;
                      break;
                    }
                    return I2.abrupt("return");
                  case 12:
                    if (m2 = this.unreadCount[t3.serverId + "_" + t3.channelId], h2 = (t3 == null ? void 0 : t3.status) === 2, m2.mentionedCount = h2 ? m2.mentionedCount ? m2.mentionedCount - 1 : 0 : m2.mentionedCount ? m2.mentionedCount + 1 : 1, typeof m2.maxCount != "number") {
                      I2.next = 25;
                      break;
                    }
                    if (!((g2 = (g2 = m2.mentionedCount) > m2.maxCount ? m2.maxCount : g2) > m2.maxCount)) {
                      I2.next = 21;
                      break;
                    }
                    return this.core.logger.debug("QChatChannel::handledRoleMsg::tempUnreadCount more than maxCount"), I2.abrupt("return");
                  case 21:
                    this.core.emit("unreadInfo", Dt(Dt({}, m2), { mentionedCount: g2 })), this.core.emit("unreadInfos", [Dt(Dt({}, m2), { mentionedCount: g2 })]), this.core.qchatChannel.emit("unreadInfos", [Dt(Dt({}, m2), { mentionedCount: g2 })]), this._serverUnreadInfo(t3.serverId);
                  case 25:
                  case "end":
                    return I2.stop();
                }
            }, _callee12, this);
          }));
        }, t2.getMentionedFlag = function getMentionedFlag(t3, a2) {
          return a2 === void 0 && (a2 = false), __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            var u2;
            return Ql.wrap(function _callee13$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    if (!t3.mentionAll) {
                      m2.next = 4;
                      break;
                    }
                    return m2.abrupt("return", true);
                  case 4:
                    if (!t3.mentionRoleIds && !t3.accidsOfMentionedRoles) {
                      m2.next = 10;
                      break;
                    }
                    return m2.next = 7, this.shouldChangeMentionedUnread(t3, a2);
                  case 7:
                    return m2.abrupt("return", m2.sent);
                  case 10:
                    if (!t3.mentionAccids || !includes(u2 = t3.mentionAccids).call(u2, this.core.account)) {
                      m2.next = 12;
                      break;
                    }
                    return m2.abrupt("return", true);
                  case 12:
                    return m2.abrupt("return", false);
                  case 13:
                  case "end":
                    return m2.stop();
                }
            }, _callee13, this);
          }));
        }, t2.changeUnread = function changeUnread(t3, a2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee14() {
            var u2, m2, h2, g2, M2, I2, S2;
            return Ql.wrap(function _callee14$(T2) {
              for (; ; )
                switch (T2.prev = T2.next) {
                  case 0:
                    if (u2 = t3.serverId, m2 = t3.channelId, h2 = u2 + "_" + m2, this.shouldChangeUnread(t3, a2)) {
                      T2.next = 6;
                      break;
                    }
                    return this.core.logger.debug("changeUnread: " + h2 + " does not need to update unreadInfo"), T2.abrupt("return");
                  case 6:
                    if (this.unreadCount[h2]) {
                      T2.next = 11;
                      break;
                    }
                    return T2.next = 9, this.core.qchatChannel.getChannelUnreadInfos({ channels: [{ serverId: u2, channelId: m2 }] });
                  case 9:
                    return !this.serverRoleIdsMap[u2] && t3.mentionRoleIds && this.getRoleIdsByServerId([u2]), T2.abrupt("return");
                  case 11:
                    return g2 = this.unreadCount[h2], M2 = (t3 == null ? void 0 : t3.status) === 2, T2.next = 15, this.getMentionedFlag(t3);
                  case 15:
                    if (I2 = T2.sent, M2 ? (g2.unreadCount = g2.unreadCount ? g2.unreadCount - 1 : 0, I2 && (g2.mentionedCount = g2.mentionedCount ? g2.mentionedCount - 1 : 0), delete g2.lastMsgTime, this.core.logger.debug("changeUnread: " + h2 + " unread reduce ", g2)) : (g2.unreadCount = g2.unreadCount ? g2.unreadCount + 1 : 1, I2 && (g2.mentionedCount = g2.mentionedCount ? g2.mentionedCount + 1 : 1), t3.time && (g2.lastMsgTime = t3.time), this.core.logger.debug("changeUnread: " + h2 + " unread add ", g2)), S2 = typeof g2.maxCount == "number" ? g2.maxCount : 100, !(g2.unreadCount > S2)) {
                      T2.next = 21;
                      break;
                    }
                    return this.core.logger.debug("QChatChannel::subscribe::tempUnreadCount more than maxCount"), T2.abrupt("return");
                  case 21:
                    this.core.logger.warn("unreadInfo event will abandon,please use unreadInfos"), this.core.emit("unreadInfo", Dt(Dt({}, g2), { mentionedCount: g2.mentionedCount > S2 ? S2 : g2.mentionedCount, unreadCount: g2.unreadCount > S2 ? S2 : g2.unreadCount })), this.core.emit("unreadInfos", [Dt(Dt({}, g2), { mentionedCount: g2.mentionedCount > S2 ? S2 : g2.mentionedCount, unreadCount: g2.unreadCount > S2 ? S2 : g2.unreadCount })]), this.core.qchatChannel.emit("unreadInfos", [Dt(Dt({}, g2), { mentionedCount: g2.mentionedCount > S2 ? S2 : g2.mentionedCount, unreadCount: g2.unreadCount > S2 ? S2 : g2.unreadCount })]), this._serverUnreadInfo(u2);
                  case 26:
                  case "end":
                    return T2.stop();
                }
            }, _callee14, this);
          }));
        }, t2.updateUnreads = function updateUnreads(t3) {
          var a2, u2, m2 = this;
          if (t3 && t3.length > 0) {
            var h2 = [], g2 = [], M2 = map$6(a2 = filter(t3).call(t3, function(t4) {
              var a3 = t4.serverId + "_" + t4.channelId, u3 = m2.unreadCount[a3], h3 = get(u3, "ackTimestamp"), g3 = get(t4, "ackTimestamp");
              return !(h3 && g3 && g3 < h3) && (get(u3, "unreadCount") !== get(t4, "unreadCount") || get(u3, "mentionedCount") !== get(t4, "mentionedCount"));
            })).call(a2, function(t4) {
              h2.push(m2.getServerUnreadInfo(t4.serverId)), g2.push(m2.unreadServerCount[t4.serverId]);
              var a3 = t4.serverId, u3 = t4.channelId, M3 = a3 + "_" + u3;
              return m2.core.logger.debug("qchat channel updateUnread: ", t4), m2.unreadCount[M3] = Dt({}, t4), m2.unreadServerCount[a3] || (m2.unreadServerCount[a3] = {}), m2.unreadServerCount[a3][u3] = true, t4;
            });
            if (M2.length !== 0) {
              this.core.emit("unreadInfos", M2), this.core.qchatChannel.emit("unreadInfos", M2);
              var I2 = {};
              forEach$1(M2).call(M2, function(t4, a3) {
                m2.core.emit("unreadInfo", t4);
                var u3 = h2[a3], M3 = g2[a3], S2 = m2.getServerUnreadInfo(t4.serverId), T2 = m2.unreadServerCount[t4.serverId], C2 = u3.unreadCount !== S2.unreadCount, b2 = !M3 || Ht(M3).length === 0, E2 = T2 && Ht(T2).length > 0, k2 = u3.mentionedCount !== S2.mentionedCount;
                (C2 || k2 || b2 && E2) && (I2[t4.serverId] = true);
              }), forEach$1(u2 = Ht(I2)).call(u2, function(t4) {
                m2.core.emit("serverUnreadInfo", m2.getServerUnreadInfo(t4)), get(m2.core, "qchatServer.emit") && m2.core.qchatServer.emit("serverUnreadInfo", m2.getServerUnreadInfo(t4));
              });
            }
          }
        }, t2.clearUnreadCountByServers = function clearUnreadCountByServers(t3, a2) {
          var u2 = this, m2 = [];
          forEach$1(t3).call(t3, function(t4) {
            var a3;
            u2.unreadServerCount[t4] && forEach$1(a3 = Ht(u2.unreadServerCount[t4])).call(a3, function(a4) {
              m2.push(t4 + "_" + a4);
            });
          });
          var h2 = [];
          forEach$1(m2).call(m2, function(t4) {
            h2.push(Dt(Dt({}, u2.unreadCount[t4]), { unreadCount: 0, mentionedCount: 0, ackTimestamp: a2 }));
          }), this.updateUnreads(h2);
        }, UnreadInfoModuleService;
      }(), TM = function() {
        function SubscribeForVisitorService(t3) {
          this.limitForBatchEnter = 10, this.limitForBatchSubscribe = 100, this.autoServers = new Tv(), this.autoVisitorSubscribeServer = new Tv(), this.autoVisitorSubscribeChannel = new Tv(), this.core = t3;
        }
        var t2 = SubscribeForVisitorService.prototype;
        return t2.subscribeChannelAsVisitor = function subscribeChannelAsVisitor(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a2, u2, m2, h2, g2 = this;
            return Ql.wrap(function _callee$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return M2.next = 2, this.core.sendCmd("qchatSubscribeAsVisitor", { tag: { type: t3.type || 6, opeType: t3.opeType }, datas: t3.channels });
                  case 2:
                    return u2 = M2.sent, m2 = u2.content.failedArr, h2 = filter(a2 = t3.channels).call(a2, function(t4) {
                      return !some(m2).call(m2, function(a3) {
                        return a3.channelId === t4.channelId && a3.serverId === t4.serverId;
                      });
                    }), forEach$1(h2).call(h2, function(a3) {
                      t3.opeType === 1 ? g2.autoVisitorSubscribeChannel.add(a3.serverId + "&" + a3.channelId) : g2.autoVisitorSubscribeChannel.delete(a3.serverId + "&" + a3.channelId);
                    }), M2.abrupt("return", { failedChannels: m2 });
                  case 7:
                  case "end":
                    return M2.stop();
                }
            }, _callee, this);
          }));
        }, t2.subscribeServerAsVisitor = function subscribeServerAsVisitor(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a2, u2, m2, h2, g2, M2, I2 = this;
            return Ql.wrap(function _callee2$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    return S2.next = 2, this.core.sendCmd("qchatSubscribeAsVisitor", { tag: { type: t3.type || 7, opeType: t3.opeType }, datas: map$6(a2 = t3.serverIds).call(a2, function(t4) {
                      return { serverId: t4 };
                    }) });
                  case 2:
                    return h2 = S2.sent, g2 = h2.content.failedArr, M2 = filter(u2 = t3.serverIds).call(u2, function(t4) {
                      return !some(g2).call(g2, function(a3) {
                        return a3.serverId === t4;
                      });
                    }), forEach$1(M2).call(M2, function(a3) {
                      t3.opeType === 1 ? I2.autoVisitorSubscribeServer.add(a3) : I2.autoVisitorSubscribeServer.delete(a3);
                    }), S2.abrupt("return", { failedServers: map$6(m2 = h2.content.failedArr).call(m2, function(t4) {
                      return t4.serverId;
                    }) });
                  case 7:
                  case "end":
                    return S2.stop();
                }
            }, _callee2, this);
          }));
        }, t2.deleteServer = function deleteServer(t3) {
          var a2;
          this.autoServers.delete(t3), this.autoVisitorSubscribeServer.has(t3) && this.subscribeServerAsVisitor({ opeType: 2, serverIds: [t3] });
          var u2 = [];
          forEach$1(a2 = this.autoVisitorSubscribeChannel).call(a2, function(a3) {
            if (indexOf(a3).call(a3, t3) === 0) {
              var m2 = a3.replace(t3 + "&", "");
              u2.push({ serverId: t3, channelId: m2 });
            }
          }), u2.length > 0 && this.subscribeChannelAsVisitor({ opeType: 2, channels: u2 });
        }, t2.deleteAutoSetInServerId = function deleteAutoSetInServerId(t3) {
          var a2, u2 = this;
          this.autoServers.delete(t3), this.autoVisitorSubscribeServer.delete(t3), forEach$1(a2 = this.autoVisitorSubscribeChannel).call(a2, function(a3) {
            indexOf(a3).call(a3, t3) === 0 && u2.autoVisitorSubscribeChannel.delete(a3);
          });
        }, t2.deleteAutoSetInChannel = function deleteAutoSetInChannel(t3, a2) {
          this.autoVisitorSubscribeChannel.delete(t3 + "&" + a2);
        }, t2.unSubscribeChannel = function unSubscribeChannel(t3, a2) {
          this.subscribeChannelAsVisitor({ opeType: 2, channels: [{ serverId: t3, channelId: a2 }] });
        }, t2.isInSubscribeChannels = function isInSubscribeChannels(t3, a2) {
          return this.autoVisitorSubscribeChannel.has(t3 + "&" + a2);
        }, t2.isInAutoServers = function isInAutoServers(t3) {
          return this.autoServers.has(t3);
        }, t2.doAutoSubscribe = function doAutoSubscribe() {
          var t3 = this, a2 = [], u2 = chunk(jl(this.autoVisitorSubscribeServer), this.limitForBatchSubscribe);
          forEach$1(u2).call(u2, function(u3) {
            a2.push(t3.subscribeServerAsVisitor({ opeType: 1, serverIds: u3 }));
          });
          var m2 = chunk(jl(this.autoVisitorSubscribeChannel), this.limitForBatchSubscribe);
          return forEach$1(m2).call(m2, function(u3) {
            a2.push(t3.subscribeChannelAsVisitor({ opeType: 1, channels: map$6(u3).call(u3, function(t4) {
              var a3 = indexOf(t4).call(t4, "&");
              return { serverId: slice(t4).call(t4, 0, a3), channelId: slice(t4).call(t4, a3 + 1) };
            }) }));
          }), zi.all(a2);
        }, t2.doAutoEnterServer = function doAutoEnterServer() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var t3, a2, u2, m2 = this;
            return Ql.wrap(function _callee3$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return t3 = chunk(jl(this.autoServers), this.limitForBatchEnter), a2 = [], forEach$1(t3).call(t3, function(t4) {
                      a2.push(m2.core.qchatServer.enterAsVisitor({ serverIds: t4 }));
                    }), h2.next = 5, zi.all(a2);
                  case 5:
                    u2 = h2.sent, forEach$1(u2).call(u2, function(t4) {
                      var a3;
                      forEach$1(a3 = t4.failedServers).call(a3, function(t5) {
                        m2.deleteAutoSetInServerId(t5);
                      });
                    });
                  case 7:
                  case "end":
                    return h2.stop();
                }
            }, _callee3, this);
          }));
        }, t2.resumeSubscribe = function resumeSubscribe(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            return Ql.wrap(function _callee4$(a2) {
              for (; ; )
                switch (a2.prev = a2.next) {
                  case 0:
                    if (!t3) {
                      a2.next = 7;
                      break;
                    }
                    return a2.next = 3, this.doAutoEnterServer();
                  case 3:
                    return a2.next = 5, this.doAutoSubscribe();
                  case 5:
                    a2.next = 10;
                    break;
                  case 7:
                    this.autoServers.clear(), this.autoVisitorSubscribeChannel.clear(), this.autoVisitorSubscribeServer.clear();
                  case 10:
                  case "end":
                    return a2.stop();
                }
            }, _callee4, this);
          }));
        }, t2.cacheServer = function cacheServer(t3) {
          var a2 = this;
          forEach$1(t3).call(t3, function(t4) {
            return a2.autoServers.add(t4);
          });
        }, SubscribeForVisitorService;
      }();
      function _createForOfIteratorHelperLoose$1(t2, a2) {
        var u2, m2 = es !== void 0 && $l(t2) || t2["@@iterator"];
        if (m2)
          return bind$1(u2 = (m2 = m2.call(t2)).next).call(u2, m2);
        if (Dn(t2) || (m2 = function _unsupportedIterableToArray$1(t3, a3) {
          if (t3) {
            var u3;
            if (typeof t3 == "string")
              return _arrayLikeToArray$1(t3, a3);
            var m3 = slice(u3 = {}.toString.call(t3)).call(u3, 8, -1);
            return m3 === "Object" && t3.constructor && (m3 = t3.constructor.name), m3 === "Map" || m3 === "Set" ? jl(t3) : m3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m3) ? _arrayLikeToArray$1(t3, a3) : void 0;
          }
        }(t2)) || a2 && t2 && typeof t2.length == "number") {
          m2 && (t2 = m2);
          var h2 = 0;
          return function() {
            return h2 >= t2.length ? { done: true } : { done: false, value: t2[h2++] };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _arrayLikeToArray$1(t2, a2) {
        (a2 == null || a2 > t2.length) && (a2 = t2.length);
        for (var u2 = 0, m2 = Array(a2); u2 < a2; u2++)
          m2[u2] = t2[u2];
        return m2;
      }
      var CM = function(t2) {
        function QChatChannelService(a3, u2) {
          var m2;
          return (m2 = t2.call(this, "qchatChannel", a3) || this).config = { autoSubscribe: false }, m2.core = a3, registerParser({ cmdMap: G_, cmdConfig: z_() }), u2 && m2.setOptions(u2), m2.subscribeModuleService = new SM(a3), m2.subscribeForVisitorService = new TM(a3), m2.setListener(), m2;
        }
        Nt(QChatChannelService, t2);
        var a2 = QChatChannelService.prototype;
        return a2.setOptions = function setOptions(t3) {
          t3 && (this.config = Dt(this.config, t3));
        }, a2.setListener = function setListener() {
          var t3, a3, u2, m2, h2, g2 = this;
          this.core.eventBus.on("logined", function(t4) {
            g2.subscribeModuleService.resumeSubscribe(t4.isAutoReconnect), g2.subscribeForVisitorService.resumeSubscribe(t4.isAutoReconnect), g2.config.autoSubscribe && (g2.subscribeModuleService.autoSubscribeServerMap = {}, g2.subscribeModuleService.autoSubscribeUnreadMap = {}, g2.subscribeModuleService.autoSubscribe());
          }), this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", function(t4) {
            g2.subscribeModuleService.resumeSubscribe(t4.isReconnect), g2.subscribeForVisitorService.resumeSubscribe(t4.isReconnect), g2.config.autoSubscribe && (g2.subscribeModuleService.autoSubscribeServerMap = {}, g2.subscribeModuleService.autoSubscribeUnreadMap = {}, g2.subscribeModuleService.autoSubscribe());
          }), this.core.eventBus.on("qchatChannel/changeUnread", bind$1(t3 = this.subscribeModuleService.changeUnread).call(t3, this.subscribeModuleService)), this.core.eventBus.on("qchatChannel/updateUnreads", bind$1(a3 = this.subscribeModuleService.updateUnreads).call(a3, this.subscribeModuleService)), this.core.eventBus.on("qchatChannel/cacheSubscribe", bind$1(u2 = this.subscribeModuleService.cacheSubscribe).call(u2, this.subscribeModuleService)), this.core.eventBus.on("qchatChannel/clearUnreadCountByServers", bind$1(m2 = this.subscribeModuleService.clearUnreadCountByServers).call(m2, this.subscribeModuleService)), this.core.eventBus.on("qchatChannel/getRoleIdsByServerId", bind$1(h2 = this.subscribeModuleService.getRoleIdsByServerId).call(h2, this.subscribeModuleService)), this.core.eventBus.on("qchatChannel/autoUnSubscribe", function(t4) {
            if (g2.logger.log("QChatChannel::enter autoUnSubscribe sysMsg is", t4), t4.type === hM[hM.channelVisibilityUpdate])
              g2.logger.log("QChatChannel::begin autoUnSubscribe channel key is", t4.serverId + "_" + t4.channelId), g2.subscribeModuleService._unSubscribeChannel(t4.serverId, t4.channelId), g2.logger.log("QChatChannel::autoUnSubscribe channel done key is", t4.serverId + "_" + t4.channelId);
            else if (t4.type === hM[hM.serverEnterLeave]) {
              var a4;
              (g2.subscribeModuleService.manualSubscribeServerMap[t4.serverId] || g2.subscribeModuleService.autoSubscribeServerMap[t4.serverId]) && (g2.logger.log("QChatChannel::begin autoUnSubscribe server key is", t4.serverId), g2.subscribeModuleService._unSubscribeServer(t4.serverId), g2.logger.log("QChatChannel::autoUnSubscribe server done key is", t4.serverId));
              var u3 = g2.subscribeModuleService.unreadServerCount[t4.serverId];
              if (!u3)
                return;
              g2.logger.log("QChatChannel::begin autoUnSubscribe channels key is", Ht(u3)), forEach$1(a4 = Ht(u3)).call(a4, function(a5) {
                g2.subscribeModuleService._unSubscribeChannel(t4.serverId, a5);
              }), g2.logger.log("QChatChannel::autoUnSubscribe channels done key is", Ht(u3));
            }
          }), this.core.eventBus.on("qchatChannel/serverIdentifyChange", function(t4) {
            g2.subscribeModuleService.changeCacheServerRoleIds(t4);
          });
        }, a2.createChannel = function createChannel(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a3;
            return Ql.wrap(function _callee$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, type: { type: "enum", values: getEnumKeys(V_) }, name: { type: "string", required: false }, topic: { type: "string", required: false }, ext: { type: "string", required: false }, visitorMode: { type: "number", required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatCreateChannel", { channelInfo: Dt(Dt({}, t3), { type: V_[t3.type] }), antispamTag: generateAntispamTag(t3) });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatChannel(a3.content.channelInfo));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee, this);
          }));
        }, a2.deleteChannel = function deleteChannel(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            return Ql.wrap(function _callee2$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ channelId: { type: "string", allowEmpty: false } }, t3), a3.next = 3, this.core.sendCmd("qchatDeleteChannel", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee2, this);
          }));
        }, a2.updateChannel = function updateChannel(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3, u2;
            return Ql.wrap(function _callee3$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ channelId: { type: "string", min: 1 }, serverId: { type: "string", required: false }, type: { type: "enum", values: getEnumKeys(V_), required: false }, name: { type: "string", required: false }, topic: { type: "string", required: false }, ext: { type: "string", required: false }, visitorMode: { type: "number", required: false } }, t3), a3 = t3, t3.type && (a3.type = V_[t3.type]), m2.next = 5, this.core.sendCmd("qchatUpdateChannel", { channelInfo: a3, antispamTag: generateAntispamTag(t3) });
                  case 5:
                    return u2 = m2.sent, m2.abrupt("return", formatChannel(u2.content.channelInfo));
                  case 7:
                  case "end":
                    return m2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.getChannels = function getChannels(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a3;
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ channelIds: { type: "array", itemType: "string", min: 1 } }, t3), u2.next = 3, this.core.sendCmd("qchatGetChannels", t3);
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatChannels(a3.content.channelList));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.getChannelsByPage = function getChannelsByPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee5$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, timetag: { type: "number" }, limit: { type: "number", min: 1, required: false } }, t3), g2.next = 3, this.core.sendCmd("qchatGetChannelsByPage", { qchatGetChannelListPageTag: Dt({ limit: 100 }, t3) });
                  case 3:
                    return a3 = g2.sent, u2 = a3.content, m2 = u2.datas, h2 = u2.listQueryTag, g2.abrupt("return", { listQueryTag: { hasMore: +h2.hasMore == 1, nextTimetag: Uu(h2.nextTimetag) }, datas: formatChannels(m2) });
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.getMembersByPage = function getMembersByPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee6$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, channelId: { type: "string", min: 1 }, timetag: { type: "number" }, limit: { type: "number", min: 1, required: false } }, t3), g2.next = 3, this.core.sendCmd("qchatGetMembersByPage", { qchatGetMembersByPageTag: t3 });
                  case 3:
                    return a3 = g2.sent, u2 = a3.content, m2 = u2.datas, h2 = u2.listQueryTag, g2.abrupt("return", { listQueryTag: { hasMore: +h2.hasMore == 1, nextTimetag: Uu(h2.nextTimetag) }, datas: formatMembers$1(m2) });
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee6, this);
          }));
        }, a2.updateWhiteBlackRole = function updateWhiteBlackRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            return Ql.wrap(function _callee7$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, channelId: { type: "string", min: 1 }, roleId: { type: "string", min: 1 }, type: { type: "enum", values: getEnumKeys(P_) }, opeType: { type: "enum", values: getEnumKeys(L_) } }, t3), a3.next = 3, this.core.sendCmd("qchatUpdateWhiteBlackRole", { qchatUpdateWhiteBlackRoleTag: Dt(Dt({}, t3), { type: P_[t3.type], opeType: L_[t3.opeType] }) });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee7, this);
          }));
        }, a2.getWhiteBlackRolesPage = function getWhiteBlackRolesPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee8$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, channelId: { type: "string", min: 1 }, type: { type: "enum", values: getEnumKeys(P_) }, timetag: { type: "number" }, limit: { type: "number", min: 1, required: false } }, t3), g2.next = 3, this.core.sendCmd("qchatGetWhiteBlackRolesPage", { qchatGetWhiteBlackRolesPageTag: Dt(Dt({}, t3), { type: P_[t3.type] }) });
                  case 3:
                    return a3 = g2.sent, u2 = a3.content, m2 = u2.datas, h2 = u2.listQueryTag, g2.abrupt("return", { listQueryTag: { hasMore: +h2.hasMore == 1, nextTimetag: Uu(h2.nextTimetag) }, datas: formatRoles(m2) });
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee8, this);
          }));
        }, a2.updateWhiteBlackMembers = function updateWhiteBlackMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            return Ql.wrap(function _callee9$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, channelId: { type: "string", min: 1 }, type: { type: "enum", values: getEnumKeys(P_) }, opeType: { type: "enum", values: getEnumKeys(L_) }, toAccids: { type: "array", itemType: "string", min: 1 } }, t3), a3.next = 3, this.core.sendCmd("qchatUpdateWhiteBlackMembers", { qchatUpdateWhiteBlackMembersTag: Dt(Dt({}, t3), { type: P_[t3.type], opeType: L_[t3.opeType], toAccids: Un(t3.toAccids) }) });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee9, this);
          }));
        }, a2.getWhiteBlackMembersPage = function getWhiteBlackMembersPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee10$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, channelId: { type: "string", min: 1 }, type: { type: "enum", values: getEnumKeys(P_) }, timetag: { type: "number" }, limit: { type: "number", min: 1, required: false } }, t3), g2.next = 3, this.core.sendCmd("qchatGetWhiteBlackMembersPage", { qchatGetWhiteBlackMembersPageTag: Dt(Dt({ limit: 100 }, t3), { type: P_[t3.type] }) });
                  case 3:
                    return a3 = g2.sent, u2 = a3.content, m2 = u2.datas, h2 = u2.listQueryTag, g2.abrupt("return", { listQueryTag: { hasMore: +h2.hasMore == 1, nextTimetag: Uu(h2.nextTimetag) }, datas: formatMembers$1(m2) });
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee10, this);
          }));
        }, a2.getExistingWhiteBlackRoles = function getExistingWhiteBlackRoles(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            var a3, u2;
            return Ql.wrap(function _callee11$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, channelId: { type: "string", min: 1 }, type: { type: "enum", values: getEnumKeys(P_) }, roleIds: { type: "array", itemType: "string", min: 1 } }, t3), m2.next = 3, this.core.sendCmd("qchatGetExistingWhiteBlackRoles", { qchatGetExistingWhiteBlackRolesTag: Dt(Dt({}, t3), { type: P_[t3.type], roleIds: Un(t3.roleIds) }) });
                  case 3:
                    return a3 = m2.sent, u2 = a3.content.datas, m2.abrupt("return", { datas: formatRoles(u2) });
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee11, this);
          }));
        }, a2.getExistingWhiteBlackMembers = function getExistingWhiteBlackMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            var a3, u2;
            return Ql.wrap(function _callee12$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, channelId: { type: "string", min: 1 }, type: { type: "enum", values: getEnumKeys(P_) }, accids: { type: "array", itemType: "string", min: 1 } }, t3), m2.next = 3, this.core.sendCmd("qchatGetExistingWhiteBlackMembers", { qchatGetExistingWhiteBlackMembersTag: Dt(Dt({}, t3), { type: P_[t3.type], accids: Un(t3.accids) }) });
                  case 3:
                    return a3 = m2.sent, u2 = a3.content.datas, m2.abrupt("return", { datas: formatMembers$1(u2) });
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee12, this);
          }));
        }, a2.updateCategoryInfoOfChannel = function updateCategoryInfoOfChannel(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            var a3;
            return Ql.wrap(function _callee13$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ channelId: { type: "string", min: 1 }, categoryId: { type: "string", allowEmpty: false, required: false }, syncMode: { type: "number", min: 0, max: 1, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatUpdateCategoryInfoOfChannel", { qchatUpdateCategoryInfoOfChannelTag: t3 });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatChannel(a3.content.channelInfo));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee13, this);
          }));
        }, a2.createChannelCategory = function createChannelCategory(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee14() {
            var a3;
            return Ql.wrap(function _callee14$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, name: { type: "string", allowEmpty: false, required: false }, ext: { type: "string", required: false }, viewMode: { type: "number", min: 0, max: 1, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatCreateChannelCategory", { qchatCreateChannelCategoryTag: t3 });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatChannelCategory(a3.content.QChatChannelCategoryInfo));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee14, this);
          }));
        }, a2.removeChannelCategory = function removeChannelCategory(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee15() {
            return Ql.wrap(function _callee15$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ categoryId: { type: "string", allowEmpty: false } }, t3), a3.next = 3, this.core.sendCmd("qchatRemoveChannelCategory", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee15, this);
          }));
        }, a2.updateChannelCategory = function updateChannelCategory(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee16() {
            var a3;
            return Ql.wrap(function _callee16$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ categoryId: { type: "string", allowEmpty: false }, name: { type: "string", allowEmpty: false, required: false }, ext: { type: "string", required: false }, viewMode: { type: "number", min: 0, max: 1, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatUpdateChannelCategory", { qchatUpdateChannelCategoryTag: t3 });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatChannelCategory(a3.content.QChatChannelCategoryInfo));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee16, this);
          }));
        }, a2.getChannelCategoriesByID = function getChannelCategoriesByID(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee17() {
            var a3;
            return Ql.wrap(function _callee17$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ categoryIds: { type: "array", itemType: "string", min: 1 } }, t3), u2.next = 3, this.core.sendCmd("qchatGetChannelCategoriesByID", t3);
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatChannelCategorys(a3.content.channelCategoryList));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee17, this);
          }));
        }, a2.updateChannelCategoryWhiteBlackRole = function updateChannelCategoryWhiteBlackRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee18() {
            return Ql.wrap(function _callee18$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ categoryId: { type: "string", allowEmpty: false }, serverId: { type: "string", allowEmpty: false }, type: { type: "enum", values: getEnumKeys(P_) }, opeType: { type: "enum", values: getEnumKeys(L_) }, roleId: { type: "string", allowEmpty: false } }, t3), a3.next = 3, this.core.sendCmd("qchatUpdateChannelCategoryWhiteBlackRole", { qchatUpdateChannelCategoryWhiteBlackRoleTag: Dt(Dt({}, t3), { type: P_[t3.type], opeType: L_[t3.opeType] }) });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee18, this);
          }));
        }, a2.getChannelCategoryWhiteBlackRolesPage = function getChannelCategoryWhiteBlackRolesPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee19() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee19$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ categoryId: { type: "string", allowEmpty: false }, serverId: { type: "string", allowEmpty: false }, type: { type: "enum", values: getEnumKeys(P_) }, timetag: { type: "number", min: 0 }, limit: { type: "number", min: 1, required: false } }, t3), g2.next = 3, this.core.sendCmd("qchatGetChannelCategoryWhiteBlackRolesPage", { qchatGetChannelCategoryWhiteBlackRolesPageTag: Dt(Dt({}, t3), { type: P_[t3.type] }) });
                  case 3:
                    return a3 = g2.sent, u2 = a3.content, m2 = u2.datas, h2 = u2.listQueryTag, g2.abrupt("return", { listQueryTag: { hasMore: +h2.hasMore == 1, nextTimetag: Uu(h2.nextTimetag) }, datas: formatRoles(m2) });
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee19, this);
          }));
        }, a2.updateChannelCategoryWhiteBlackMembers = function updateChannelCategoryWhiteBlackMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee20() {
            return Ql.wrap(function _callee20$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ categoryId: { type: "string", allowEmpty: false }, serverId: { type: "string", allowEmpty: false }, type: { type: "enum", values: getEnumKeys(P_) }, opeType: { type: "enum", values: getEnumKeys(L_) }, toAccids: { type: "array", itemType: "string", min: 1 } }, t3), a3.next = 3, this.core.sendCmd("qchatUpdateChannelCategoryWhiteBlackMembers", { qchatUpdateChannelCategoryWhiteBlackMembersTag: Dt(Dt({}, t3), { type: P_[t3.type], opeType: L_[t3.opeType], toAccids: Un(t3.toAccids) }) });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee20, this);
          }));
        }, a2.getChannelCategoryWhiteBlackMembersPage = function getChannelCategoryWhiteBlackMembersPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee21() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee21$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ categoryId: { type: "string", allowEmpty: false }, serverId: { type: "string", allowEmpty: false }, type: { type: "enum", values: getEnumKeys(P_) }, timetag: { type: "number", min: 0 }, limit: { type: "number", min: 1, required: false } }, t3), g2.next = 3, this.core.sendCmd("qchatGetChannelCategoryWhiteBlackMembersPage", { qchatGetChannelCategoryWhiteBlackMembersPageTag: Dt(Dt({}, t3), { type: P_[t3.type] }) });
                  case 3:
                    return a3 = g2.sent, u2 = a3.content, m2 = u2.datas, h2 = u2.listQueryTag, g2.abrupt("return", { listQueryTag: { hasMore: +h2.hasMore == 1, nextTimetag: Uu(h2.nextTimetag) }, datas: formatMembers$1(m2) });
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee21, this);
          }));
        }, a2.getChannelCategoryWhiteBlackRoles = function getChannelCategoryWhiteBlackRoles(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee22() {
            var a3, u2;
            return Ql.wrap(function _callee22$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ categoryId: { type: "string", allowEmpty: false }, serverId: { type: "string", allowEmpty: false }, type: { type: "enum", values: getEnumKeys(P_) }, roleIds: { type: "array", itemType: "string", min: 1 } }, t3), m2.next = 3, this.core.sendCmd("qchatGetChannelCategoryWhiteBlackRoles", { qchatGetChannelCategoryWhiteBlackRolesTag: Dt(Dt({}, t3), { type: P_[t3.type], roleIds: Un(t3.roleIds) }) });
                  case 3:
                    return a3 = m2.sent, u2 = a3.content.datas, m2.abrupt("return", formatRoles(u2));
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee22, this);
          }));
        }, a2.getChannelCategoryWhiteBlackMembers = function getChannelCategoryWhiteBlackMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee23() {
            var a3, u2;
            return Ql.wrap(function _callee23$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ categoryId: { type: "string", allowEmpty: false }, serverId: { type: "string", allowEmpty: false }, type: { type: "enum", values: getEnumKeys(P_) }, accids: { type: "array", itemType: "string", min: 1 } }, t3), m2.next = 3, this.core.sendCmd("qchatGetChannelCategoryWhiteBlackMembers", { qchatGetChannelCategoryWhiteBlackMembersTag: Dt(Dt({}, t3), { type: P_[t3.type], accids: Un(t3.accids) }) });
                  case 3:
                    return a3 = m2.sent, u2 = a3.content.datas, m2.abrupt("return", formatMembers$1(u2));
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee23, this);
          }));
        }, a2.getChannelCategoriesPage = function getChannelCategoriesPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee24() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee24$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, timetag: { type: "number", min: 0 }, limit: { type: "number", min: 1, required: false } }, t3), g2.next = 3, this.core.sendCmd("qchatGetChannelCategoriesPage", { qchatGetChannelCategoriesPageTag: t3 });
                  case 3:
                    return a3 = g2.sent, u2 = a3.content, m2 = u2.datas, h2 = u2.listQueryTag, g2.abrupt("return", { listQueryTag: { hasMore: +h2.hasMore == 1, nextTimetag: Uu(h2.nextTimetag) }, datas: formatChannelCategorys(m2) });
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee24, this);
          }));
        }, a2.getChannelCategoryChannelsPage = function getChannelCategoryChannelsPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee25() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee25$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, categoryId: { type: "string", allowEmpty: false }, timetag: { type: "number", min: 0 }, limit: { type: "number", min: 1, required: false } }, t3), g2.next = 3, this.core.sendCmd("qchatGetChannelCategoryChannelsPage", { qchatGetChannelCategoryChannelsPageTag: t3 });
                  case 3:
                    return a3 = g2.sent, u2 = a3.content, m2 = u2.datas, h2 = u2.listQueryTag, g2.abrupt("return", { listQueryTag: { hasMore: +h2.hasMore == 1, nextTimetag: Uu(h2.nextTimetag) }, datas: formatChannels(m2) });
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee25, this);
          }));
        }, a2.subscribeChannel = function subscribeChannel(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee26() {
            var a3, u2;
            return Ql.wrap(function _callee26$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    if (validate({ type: { type: "number", min: 1, max: 5 }, opeType: { type: "number", min: 1, max: 2 } }, t3), !this.config.autoSubscribe || t3.isInternalTrigger || t3.type === 5) {
                      m2.next = 3;
                      break;
                    }
                    throw new ql("subscribe server failed, manual subscribe is not allowed in auto subscribe mode", {}, 403);
                  case 3:
                    return m2.next = 5, this.subscribeModuleService.subscribe(t3);
                  case 5:
                    if ((a3 = m2.sent).unreadInfos = formatUnreadInfos(a3.unreadInfos), t3.type !== 5) {
                      m2.next = 10;
                      break;
                    }
                    return this.subscribeModuleService.cacheSubscribe(t3), m2.abrupt("return");
                  case 10:
                    return t3.opeType === 1 && (t3.channels = map$6(u2 = a3.unreadInfos).call(u2, function(t4) {
                      return { serverId: t4.serverId, channelId: t4.channelId };
                    })), this.logger.debug("QChatChannel::subscribeChannel:: cacheSubscribe ", t3), this.config.autoSubscribe ? this.subscribeModuleService.cacheAutoSubscribe(t3) : this.subscribeModuleService.cacheSubscribe(t3), this.subscribeModuleService.updateUnreads(a3.unreadInfos), m2.abrupt("return", a3);
                  case 15:
                  case "end":
                    return m2.stop();
                }
            }, _callee26, this);
          }));
        }, a2.getChannelUnreadInfos = function getChannelUnreadInfos(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee27() {
            var a3, u2;
            return Ql.wrap(function _callee27$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return m2.next = 2, this.core.sendCmd("qchatGetUnreadInfo", t3);
                  case 2:
                    return a3 = m2.sent, u2 = formatUnreadInfos(a3.content.unreadInfos), this.subscribeModuleService.updateUnreads(u2), m2.abrupt("return", u2);
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee27, this);
          }));
        }, a2.getChannelSearchByPage = function getChannelSearchByPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee28() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee28$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    if (validate({ keyword: { type: "string", allowEmpty: false }, startTime: { type: "number", min: 0, required: false }, endTime: { type: "number", min: 1, required: false }, order: { type: "enum", values: getEnumKeys(U_), required: false }, limit: { type: "number", min: 1, required: false }, serverId: { type: "string", required: false }, sort: { type: "enum", values: getEnumKeys(O_), required: false }, cursor: { type: "string", allowEmpty: false, required: false } }, t3), !(t3.startTime && t3.endTime && t3.startTime >= t3.endTime)) {
                      g2.next = 3;
                      break;
                    }
                    throw new Ll("startTime more than endTime", t3, "timeRule");
                  case 3:
                    return g2.next = 5, this.core.sendCmd("qchatGetChannelSearchByPage", { qchatGetChannelSearchByPageTag: Dt(Dt({}, t3), { order: t3.order && U_[t3.order], sort: sort(t3) && O_[sort(t3)] }) });
                  case 5:
                    return a3 = g2.sent, u2 = a3.content, m2 = u2.datas, h2 = u2.listQueryTag, g2.abrupt("return", { listQueryTag: { hasMore: +h2.hasMore == 1, nextTimetag: Uu(h2.nextTimetag), cursor: h2.cursor }, datas: formatChannels(m2) });
                  case 8:
                  case "end":
                    return g2.stop();
                }
            }, _callee28, this);
          }));
        }, a2.channelMemberSearch = function channelMemberSearch(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee29() {
            var a3;
            return Ql.wrap(function _callee29$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, keyword: { type: "string", allowEmpty: false }, limit: { type: "number", min: 1, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatChannelMemberSearch", { qchatChannelMemberSearchTag: t3 });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatChannelMembers(a3.content.datas));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee29, this);
          }));
        }, a2.subscribeAsVisitor = function subscribeAsVisitor(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee30() {
            return Ql.wrap(function _callee30$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ opeType: { type: "number", min: 1, max: 2 }, type: { type: "number", required: false }, channels: { type: "array", rules: { serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false } }, min: 1 } }, t3), a3.next = 3, this.subscribeForVisitorService.subscribeChannelAsVisitor(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee30, this);
          }));
        }, a2.qchatAutoSubscribeNotificationHandler = function qchatAutoSubscribeNotificationHandler(t3) {
          var a3 = formatUnreadInfos(t3.content.unreadInfos), u2 = t3.content.serverIds;
          this.subscribeModuleService.updateUnreads(a3);
          var m2 = [];
          if (u2.length) {
            var h2 = { opeType: 1 };
            h2.channels = map$6(u2).call(u2, function(t4) {
              return { serverId: t4.serverId, channelId: "" };
            }), h2.type = 4, m2.push(h2);
          }
          if (a3.length) {
            var g2 = { opeType: 1 };
            g2.channels = map$6(a3).call(a3, function(t4) {
              return { serverId: t4.serverId, channelId: t4.channelId };
            }), g2.type = 1, m2.push(g2);
          }
          if (m2.length)
            for (var M2, I2 = _createForOfIteratorHelperLoose$1(m2); !(M2 = I2()).done; ) {
              var S2 = M2.value;
              this.subscribeModuleService.cacheAutoSubscribe(S2);
            }
        }, QChatChannelService;
      }(F_), bM = { serverId: { type: "string" }, uid: { type: "string" }, accid: { type: "string" }, nick: { type: "string" }, avatar: { type: "string" }, ext: { type: "string" }, type: { type: "number" }, joinTime: { type: "number" }, inviter: { type: "string" }, validFlag: { type: "boolean" }, createTime: { type: "number" }, updateTime: { type: "number" } }, EM = { limit: { type: "number" } };
      function formatMembers(t2) {
        return Dn(t2) && t2.length > 0 ? map$6(t2).call(t2, function(t3) {
          return function formatMember(t4) {
            return format(bM, t4);
          }(t3);
        }) : [];
      }
      function formatRTCChannelConfig(t2) {
        try {
          t2.audio && (t2.audio = JSON.parse(t2.audio));
        } catch (t3) {
          throw new Ll('result "audio" JSON parse error', { key: "audio" }, "JSON parse error");
        }
        try {
          t2.video && (t2.video = JSON.parse(t2.video));
        } catch (t3) {
          throw new Ll('result "video" JSON parse error', { key: "video" }, "JSON parse error");
        }
        return format(EM, t2);
      }
      var kM, wM = { "25_1": "qchatGetNeroomToken", "25_2": "qchatUpdateRTCChannelConfig", "25_3": "qchatGetRTCChannelConfig", "25_4": "qchatGetRTCChannelMembers" }, RM = { QChatRTCChannelConfigTag: { serverId: 1, channelId: 2, limit: 3, audio: 4, video: 5 }, QChatRTCChannelConfigResultTag: { limit: 1, audio: 2, video: 3 }, QChatGetRTCParams: { serverId: 1, channelId: 2 }, qchatGetRTCChannelMembersTag: { serverId: 1, channelId: 2 }, memberInfo: { serverId: 1, accid: 3, nick: 4, avatar: 5, ext: 6, type: 7, joinTime: 8, inviter: 9, validFlag: 10, createTime: 11, updateTime: 12 }, QChatGetNeroomTokenResultTag: { token: 1, expire: 2 }, QChatGetNeroomTokenParams: { neroomDeviceId: 1 } }, AM = function getCmdConfig() {
        var t2 = function getDeserializeTag() {
          return invertSerializeMap(RM);
        }();
        return { qchatGetNeroomToken: { sid: 25, cid: 1, service: "qchatMedia", params: [{ type: "Property", name: "qchatGetNeroomTokenTag", reflectMapper: RM.QChatGetNeroomTokenParams }], response: [{ type: "Property", name: "neroomToken", reflectMapper: t2.QChatGetNeroomTokenResultTag }] }, qchatUpdateRTCChannelConfig: { sid: 25, cid: 2, service: "qchatMedia", params: [{ type: "Property", name: "RTCChannelConfig", reflectMapper: RM.QChatRTCChannelConfigTag }] }, qchatGetRTCChannelConfig: { sid: 25, cid: 3, service: "qchatMedia", params: [{ type: "Property", name: "qchatGetRTCChannelConfigTag", reflectMapper: RM.QChatGetRTCParams }], response: [{ type: "Property", name: "RTCChannelConfig", reflectMapper: t2.QChatRTCChannelConfigResultTag }] }, qchatGetRTCChannelMembers: { sid: 25, cid: 4, service: "qchatMedia", params: [{ type: "Property", name: "qchatGetRTCChannelMembersTag", reflectMapper: RM.QChatGetRTCParams }], response: [{ type: "PropertyArray", name: "memberList", reflectMapper: t2.memberInfo }] } };
      }, NM = function(t2) {
        function QChatMediaService(a3, u2) {
          var m2;
          return (m2 = t2.call(this, "qchatMedia", a3) || this).config = {}, m2.tokenExpireTime = 24e4, m2.getTokenState = false, m2.core = a3, registerParser({ cmdMap: wM, cmdConfig: AM() }), u2 && m2.setOptions(u2), m2.setListener(), m2.tokenExpireTime = 24e4, m2.channelId = "", m2.serverId = "", m2;
        }
        Nt(QChatMediaService, t2);
        var a2 = QChatMediaService.prototype;
        return a2.setOptions = function setOptions(t3) {
          t3 && (this.config = Dt(this.config, t3), (t3 == null ? void 0 : t3.neroom) && this.setNeroom(t3.neroom));
        }, a2.setNeroom = function setNeroom(t3) {
          this.neroom = new t3();
        }, a2.setListener = function setListener() {
          var t3, a3, u2, m2, h2 = this;
          this.core.eventBus.on("disconnect", bind$1(t3 = this._existRomm).call(t3, this)), this.core.eventBus.on("kicked", bind$1(a3 = this._existRomm).call(a3, this)), this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLogout", bind$1(u2 = this._existRomm).call(u2, this)), this.core.eventBus.on("V2NIMLoginService/loginLifeCycleKicked", bind$1(m2 = this._existRomm).call(m2, this)), this.core.eventBus.on("qchatMedia/serverOrChannelLeave", function(t4) {
            return __awaiter(h2, void 0, void 0, Ql.mark(function _callee() {
              return Ql.wrap(function _callee$(a4) {
                for (; ; )
                  switch (a4.prev = a4.next) {
                    case 0:
                      if (!(t4.type === hM[hM.channelVisibilityUpdate] && t4.channelId === this.channelId || t4.type === hM[hM.serverEnterLeave] && t4.serverId === this.serverId)) {
                        a4.next = 4;
                        break;
                      }
                      if (!this.roomContext || !this.roomContext.roomUuid) {
                        a4.next = 4;
                        break;
                      }
                      return a4.next = 4, this.disconnectChannel();
                    case 4:
                    case "end":
                      return a4.stop();
                  }
              }, _callee, this);
            }));
          });
        }, a2._existRomm = function _existRomm() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            return Ql.wrap(function _callee2$(t3) {
              for (; ; )
                switch (t3.prev = t3.next) {
                  case 0:
                    if (!this.roomContext) {
                      t3.next = 3;
                      break;
                    }
                    return t3.next = 3, this.disconnectChannel();
                  case 3:
                    this.tokenTimer && (this.core.timerManager.deleteTimer(this.tokenTimer), this.tokenTimer = void 0);
                  case 4:
                  case "end":
                    return t3.stop();
                }
            }, _callee2, this);
          }));
        }, a2._checkPermission = function _checkPermission(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3;
            return Ql.wrap(function _callee3$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return u2.next = 2, this.core.qchatRole.checkPermission(t3);
                  case 2:
                    return a3 = u2.sent, u2.abrupt("return", a3);
                  case 4:
                  case "end":
                    return u2.stop();
                }
            }, _callee3, this);
          }));
        }, a2._checkConnectState = function _checkConnectState() {
          if (this.state !== "connect")
            throw new ql("QChatMedia::you should connect first");
        }, a2.kickMemberOut = function kickMemberOut(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this._checkConnectState(), validate({ accid: { type: "string", allowEmpty: false } }, t3), u2.prev = 2, u2.next = 5, (a3 = this.roomContext) === null || a3 === void 0 ? void 0 : a3.kickMemberOut(t3.accid);
                  case 5:
                    u2.next = 11;
                    break;
                  case 7:
                    throw u2.prev = 7, u2.t0 = u2.catch(2), this.logger.error("QChatMedia::kickMemberOut error params is " + Un(t3), u2.t0), new ql("QChatMedia::kickMemberOut error", u2.t0);
                  case 11:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this, [[2, 7]]);
          }));
        }, a2.disconnectChannel = function disconnectChannel() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            return Ql.wrap(function _callee5$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this.logger.debug("QChatMedia::disconnect begin disconnect"), a3.prev = 1, a3.next = 4, (t3 = this.roomContext) === null || t3 === void 0 ? void 0 : t3.leaveRoom();
                  case 4:
                    a3.next = 9;
                    break;
                  case 6:
                    a3.prev = 6, a3.t0 = a3.catch(1), this.logger.error("QChatMedia::disconnect error", a3.t0);
                  case 9:
                    if (!this.authService) {
                      a3.next = 12;
                      break;
                    }
                    return a3.next = 12, this.authService.logout();
                  case 12:
                    this._setStateInit(), this.core.emit("qchatMediaDisconnect"), this.core.qchatMedia.emit("qchatMediaDisconnect");
                  case 15:
                  case "end":
                    return a3.stop();
                }
            }, _callee5, this, [[1, 6]]);
          }));
        }, a2._setStateInit = function _setStateInit() {
          this.logger.debug("QChatMedia::disconnect end"), this.roomContext = void 0, this.rtcController = void 0, this.state = "init", this.tokenTimer && (this.core.timerManager.deleteTimer(this.tokenTimer), this.tokenTimer = void 0), this.channelId = "", this.serverId = "";
        }, a2.muteAudio = function muteAudio(t3) {
          var a3, u2, m2, h2, g2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var M2;
            return Ql.wrap(function _callee6$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    if (this._checkConnectState(), validate({ accid: { type: "string", allowEmpty: false } }, t3), ((a3 = this.roomContext) === null || a3 === void 0 ? void 0 : a3.localMember.uuid) !== t3.accid) {
                      I2.next = 14;
                      break;
                    }
                    return I2.prev = 3, I2.next = 6, (u2 = this.rtcController) === null || u2 === void 0 ? void 0 : u2.muteMyAudio();
                  case 6:
                    I2.next = 12;
                    break;
                  case 8:
                    throw I2.prev = 8, I2.t0 = I2.catch(3), this.logger.error("QChatMedia::muteAudio error", I2.t0), new ql("QChatMedia::muteAudio error", I2.t0);
                  case 12:
                  case 25:
                    I2.next = 31;
                    break;
                  case 14:
                    if (I2.prev = 14, !(M2 = (m2 = this.roomContext) === null || m2 === void 0 ? void 0 : m2.roomProperties.audioOff) || ((h2 = M2.value) === null || h2 === void 0 ? void 0 : h2.split("_")[0]) !== "offNotAllowSelfOn") {
                      I2.next = 23;
                      break;
                    }
                    return I2.next = 19, this._checkPermission({ serverId: this.serverId, channelId: this.channelId, auth: "RTCChannelOpenCloseEveryoneMicrophone" });
                  case 19:
                    if (I2.sent) {
                      I2.next = 23;
                      break;
                    }
                    return this.logger.error("QChatMedia::unMuteAudio not allow open auido"), I2.abrupt("return");
                  case 23:
                    return I2.next = 25, (g2 = this.rtcController) === null || g2 === void 0 ? void 0 : g2.muteMemberAudio(t3.accid);
                  case 27:
                    throw I2.prev = 27, I2.t1 = I2.catch(14), this.logger.error("QChatMedia::muteAudio error params is " + Un(t3), I2.t1), new ql("QChatMedia::muteAudio error", I2.t1);
                  case 31:
                  case "end":
                    return I2.stop();
                }
            }, _callee6, this, [[3, 8], [14, 27]]);
          }));
        }, a2.unMuteAudio = function unMuteAudio(t3) {
          var a3, u2, m2, h2, g2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            var M2;
            return Ql.wrap(function _callee7$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    if (this._checkConnectState(), validate({ accid: { type: "string", allowEmpty: false } }, t3), !(M2 = (a3 = this.roomContext) === null || a3 === void 0 ? void 0 : a3.roomProperties.audioOff) || ((u2 = M2.value) === null || u2 === void 0 ? void 0 : u2.split("_")[0]) !== "offNotAllowSelfOn") {
                      I2.next = 10;
                      break;
                    }
                    return I2.next = 6, this._checkPermission({ serverId: this.serverId, channelId: this.channelId, auth: "RTCChannelOpenCloseEveryoneMicrophone" });
                  case 6:
                    if (I2.sent) {
                      I2.next = 10;
                      break;
                    }
                    return this.logger.error("QChatMedia::unMuteAudio not allow open auido"), I2.abrupt("return");
                  case 10:
                    if (((m2 = this.roomContext) === null || m2 === void 0 ? void 0 : m2.localMember.uuid) !== t3.accid) {
                      I2.next = 22;
                      break;
                    }
                    return I2.prev = 11, I2.next = 14, (h2 = this.rtcController) === null || h2 === void 0 ? void 0 : h2.unmuteMyAudio();
                  case 14:
                    I2.next = 20;
                    break;
                  case 16:
                    throw I2.prev = 16, I2.t0 = I2.catch(11), this.logger.error("QChatMedia::unMuteAudio error", I2.t0), new ql("QChatMedia::unMuteAudio error", I2.t0);
                  case 20:
                  case 25:
                    I2.next = 31;
                    break;
                  case 22:
                    return I2.prev = 22, I2.next = 25, (g2 = this.rtcController) === null || g2 === void 0 ? void 0 : g2.unmuteMemberAudio(t3.accid);
                  case 27:
                    throw I2.prev = 27, I2.t1 = I2.catch(22), this.logger.error("QChatMedia::unMuteAudio error params is " + Un(t3), I2.t1), new ql("QChatMedia::unMuteAudio error", I2.t1);
                  case 31:
                  case "end":
                    return I2.stop();
                }
            }, _callee7, this, [[11, 16], [22, 27]]);
          }));
        }, a2.muteVideo = function muteVideo(t3) {
          var a3, u2, m2, h2, g2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var M2;
            return Ql.wrap(function _callee8$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    if (this._checkConnectState(), validate({ accid: { type: "string", allowEmpty: false } }, t3), ((a3 = this.roomContext) === null || a3 === void 0 ? void 0 : a3.localMember.uuid) !== t3.accid) {
                      I2.next = 14;
                      break;
                    }
                    return I2.prev = 3, I2.next = 6, (u2 = this.rtcController) === null || u2 === void 0 ? void 0 : u2.muteMyVideo();
                  case 6:
                    I2.next = 12;
                    break;
                  case 8:
                    throw I2.prev = 8, I2.t0 = I2.catch(3), this.logger.error("QChatMedia::muteVideo error", I2.t0), new ql("QChatMedia::muteVideo error", I2.t0);
                  case 12:
                  case 25:
                    I2.next = 31;
                    break;
                  case 14:
                    if (I2.prev = 14, !(M2 = (m2 = this.roomContext) === null || m2 === void 0 ? void 0 : m2.roomProperties.videoOff) || ((h2 = M2.value) === null || h2 === void 0 ? void 0 : h2.split("_")[0]) !== "offNotAllowSelfOn") {
                      I2.next = 23;
                      break;
                    }
                    return I2.next = 19, this._checkPermission({ serverId: this.serverId, channelId: this.channelId, auth: "RTCChannelOpenCloseEveryoneCamera" });
                  case 19:
                    if (I2.sent) {
                      I2.next = 23;
                      break;
                    }
                    return this.logger.error("QChatMedia::unMuteVideo not allow open video"), I2.abrupt("return");
                  case 23:
                    return I2.next = 25, (g2 = this.rtcController) === null || g2 === void 0 ? void 0 : g2.muteMemberVideo(t3.accid);
                  case 27:
                    throw I2.prev = 27, I2.t1 = I2.catch(14), this.logger.error("QChatMedia::muteVideo error params is " + Un(t3), I2.t1), new ql("QChatMedia::muteVideo error", I2.t1);
                  case 31:
                  case "end":
                    return I2.stop();
                }
            }, _callee8, this, [[3, 8], [14, 27]]);
          }));
        }, a2.unMuteVideo = function unMuteVideo(t3) {
          var a3, u2, m2, h2, g2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            var M2;
            return Ql.wrap(function _callee9$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    if (this._checkConnectState(), validate({ accid: { type: "string", allowEmpty: false } }, t3), !(M2 = (a3 = this.roomContext) === null || a3 === void 0 ? void 0 : a3.roomProperties.videoOff) || ((u2 = M2.value) === null || u2 === void 0 ? void 0 : u2.split("_")[0]) !== "offNotAllowSelfOn") {
                      I2.next = 10;
                      break;
                    }
                    return I2.next = 6, this._checkPermission({ serverId: this.serverId, channelId: this.channelId, auth: "RTCChannelOpenCloseEveryoneCamera" });
                  case 6:
                    if (I2.sent) {
                      I2.next = 10;
                      break;
                    }
                    return this.logger.error("QChatMedia::unMuteVideo not allow open video"), I2.abrupt("return");
                  case 10:
                    if (((m2 = this.roomContext) === null || m2 === void 0 ? void 0 : m2.localMember.uuid) !== t3.accid) {
                      I2.next = 22;
                      break;
                    }
                    return I2.prev = 11, I2.next = 14, (h2 = this.rtcController) === null || h2 === void 0 ? void 0 : h2.unmuteMyVideo();
                  case 14:
                    I2.next = 20;
                    break;
                  case 16:
                    throw I2.prev = 16, I2.t0 = I2.catch(11), this.logger.error("QChatMedia::unMuteVideo error", I2.t0), new ql("QChatMedia::unMuteVideo error", I2.t0);
                  case 20:
                    I2.next = 30;
                    break;
                  case 22:
                    I2.prev = 22, (g2 = this.rtcController) === null || g2 === void 0 || g2.unmuteMemberVideo(t3.accid), I2.next = 30;
                    break;
                  case 26:
                    throw I2.prev = 26, I2.t1 = I2.catch(22), this.logger.error("QChatMedia::unMuteVideo error", I2.t1), new ql("QChatMedia::unMuteVideo error", I2.t1);
                  case 30:
                  case "end":
                    return I2.stop();
                }
            }, _callee9, this, [[11, 16], [22, 26]]);
          }));
        }, a2.startScreenShare = function startScreenShare() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            return Ql.wrap(function _callee10$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    this._checkConnectState(), a3.prev = 1, (t3 = this.rtcController) === null || t3 === void 0 || t3.startScreenShare(), a3.next = 9;
                    break;
                  case 5:
                    throw a3.prev = 5, a3.t0 = a3.catch(1), this.logger.error("QChatMedia::startScreenShare error", a3.t0), new ql("QChatMedia::startScreenShare error", a3.t0);
                  case 9:
                  case "end":
                    return a3.stop();
                }
            }, _callee10, this, [[1, 5]]);
          }));
        }, a2.stopScreenShare = function stopScreenShare() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            return Ql.wrap(function _callee11$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    this._checkConnectState(), a3.prev = 1, (t3 = this.rtcController) === null || t3 === void 0 || t3.stopScreenShare(), a3.next = 9;
                    break;
                  case 5:
                    throw a3.prev = 5, a3.t0 = a3.catch(1), this.logger.error("QChatMedia::stopScreenShare error", a3.t0), new ql("QChatMedia::stopScreenShare error", a3.t0);
                  case 9:
                  case "end":
                    return a3.stop();
                }
            }, _callee11, this, [[1, 5]]);
          }));
        }, a2.stopMemberScreenShare = function stopMemberScreenShare(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            return Ql.wrap(function _callee12$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    this._checkConnectState(), validate({ accid: { type: "string", allowEmpty: false } }, t3), u2.prev = 2, (a3 = this.rtcController) === null || a3 === void 0 || a3.stopMemberScreenShare(t3.accid), u2.next = 10;
                    break;
                  case 6:
                    throw u2.prev = 6, u2.t0 = u2.catch(2), this.logger.error("QChatMedia::stopMemberScreenShare error", u2.t0), new ql("QChatMedia::stopMemberScreenShare error", u2.t0);
                  case 10:
                  case "end":
                    return u2.stop();
                }
            }, _callee12, this, [[2, 6]]);
          }));
        }, a2.subscribeRemoteVideoStream = function subscribeRemoteVideoStream(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            return Ql.wrap(function _callee13$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    this._checkConnectState(), validate({ accid: { type: "string", allowEmpty: false }, streamType: { type: "number", allowEmpty: false, min: 0, max: 1 } }, t3), u2.prev = 2, (a3 = this.rtcController) === null || a3 === void 0 || a3.subscribeRemoteVideoStream(t3.accid, t3.streamType), u2.next = 10;
                    break;
                  case 6:
                    throw u2.prev = 6, u2.t0 = u2.catch(2), this.logger.error("QChatMedia::subscribeRemoteVideoStream error", u2.t0), new ql("QChatMedia::subscribeRemoteVideoStream error", u2.t0);
                  case 10:
                  case "end":
                    return u2.stop();
                }
            }, _callee13, this, [[2, 6]]);
          }));
        }, a2.unSubscribeRemoteVideoStream = function unSubscribeRemoteVideoStream(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee14() {
            return Ql.wrap(function _callee14$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    this._checkConnectState(), validate({ accid: { type: "string", allowEmpty: false }, streamType: { type: "number", allowEmpty: false, min: 0, max: 1 } }, t3), u2.prev = 2, (a3 = this.rtcController) === null || a3 === void 0 || a3.unsubscribeRemoteVideoStream(t3.accid, t3.streamType), u2.next = 10;
                    break;
                  case 6:
                    throw u2.prev = 6, u2.t0 = u2.catch(2), this.logger.error("QChatMedia::unSubscribeRemoteVideoStream error", u2.t0), new ql("QChatMedia::unSubscribeRemoteVideoStream error", u2.t0);
                  case 10:
                  case "end":
                    return u2.stop();
                }
            }, _callee14, this, [[2, 6]]);
          }));
        }, a2.setupVideoCanvas = function setupVideoCanvas(t3) {
          var a3;
          if (this._checkConnectState(), ((a3 = this.roomContext) === null || a3 === void 0 ? void 0 : a3.localMember.uuid) === t3.accid)
            try {
              return this.rtcController.setupLocalVideoCanvas(t3.videoView);
            } catch (t4) {
              throw this.logger.error("QChatMedia::setupVideoCanvas error", t4), new ql("QChatMedia::setupVideoCanvas error", t4);
            }
          else
            try {
              return this.rtcController.setupRemoteVideoCanvas(t3.videoView, t3.accid);
            } catch (t4) {
              throw this.logger.error("QChatMedia::setupVideoCanvas error", t4), new ql("QChatMedia::setupVideoCanvas error", t4);
            }
        }, a2.setupRemoteVideoSubStreamCanvas = function setupRemoteVideoSubStreamCanvas(t3) {
          this._checkConnectState(), validate({ accid: { type: "string", allowEmpty: false } }, t3);
          try {
            return this.rtcController.setupRemoteVideoSubStreamCanvas(t3.videoView, t3.accid);
          } catch (t4) {
            throw this.logger.error("QChatMedia::setupRemoteVideoSubStreamCanvas error", t4), new ql("QChatMedia::setupRemoteVideoSubStreamCanvas error", t4);
          }
        }, a2.getScreenSharingUserUuid = function getScreenSharingUserUuid() {
          this._checkConnectState();
          try {
            return this.rtcController.getScreenSharingUserUuid();
          } catch (t3) {
            throw this.logger.error("QChatMedia::getScreenSharingUserUuid error", t3), new ql("QChatMedia::getScreenSharingUserUuid error", t3);
          }
        }, a2.initQChatMedia = function initQChatMedia(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee15() {
            return Ql.wrap(function _callee15$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    if (this.neroom) {
                      a3.next = 3;
                      break;
                    }
                    return this.logger.warn("QChatMedia::init::you should import neroom SDK"), a3.abrupt("return");
                  case 3:
                    if (this.state === void 0) {
                      a3.next = 6;
                      break;
                    }
                    return this.logger.error("QChatMedia::init::you already init QChatMedia"), a3.abrupt("return");
                  case 6:
                    a3.prev = 6, this.neroom.initialize({ appKey: this.core.options.appkey, serverConfig: t3.serverConfig }), a3.next = 14;
                    break;
                  case 10:
                    throw a3.prev = 10, a3.t0 = a3.catch(6), this.logger.error("QChatMedia::initQChatMedia error", a3.t0), new ql("QChatMedia::initQChatMedia error", a3.t0);
                  case 14:
                    this.authService = this.neroom.authService, this.roomService = this.neroom.roomService, this.messageChannelService = this.neroom.messageChannelService, this.state = "init";
                  case 18:
                  case "end":
                    return a3.stop();
                }
            }, _callee15, this, [[6, 10]]);
          }));
        }, a2.loginByIM = function loginByIM() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee16() {
            var a3, u2;
            return Ql.wrap(function _callee16$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    if (this.state === "init") {
                      m2.next = 3;
                      break;
                    }
                    return this.logger.error("QChatMedia::connect::you should init before login"), m2.abrupt("return");
                  case 3:
                    return m2.next = 5, this._getToken();
                  case 5:
                    return a3 = m2.sent, u2 = get(this.core, "options.token") || get(this.core, "V2NIMLoginService.token"), m2.prev = 7, m2.next = 10, (t3 = this.authService) === null || t3 === void 0 ? void 0 : t3.loginByIM(this.core.account, a3, u2);
                  case 10:
                    m2.next = 16;
                    break;
                  case 12:
                    throw m2.prev = 12, m2.t0 = m2.catch(7), this.logger.error("QChatMedia::loginByIM error", m2.t0), new ql("QChatMedia::loginByIM error", m2.t0);
                  case 16:
                    this.state = "login";
                  case 17:
                  case "end":
                    return m2.stop();
                }
            }, _callee16, this, [[7, 12]]);
          }));
        }, a2._getToken = function _getToken() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee18() {
            var a3, u2, m2, h2, g2 = this;
            return Ql.wrap(function _callee18$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return this.logger.log("QChatMedia::getToken begin getToken"), M2.next = 3, this.core.sendCmd("qchatGetNeroomToken", { qchatGetNeroomTokenTag: { neroomDeviceId: (t3 = this.neroom) === null || t3 === void 0 ? void 0 : t3.deviceId } });
                  case 3:
                    return a3 = M2.sent, u2 = a3.content.neroomToken, m2 = u2.token, h2 = u2.expire, this.logger.log("QChatMedia::getToken success token is " + m2 + ",expire is " + h2 + " "), this.tokenTimer || (this.logger.debug("QChatMedia::getToken set token timer,expire is " + (1e3 * h2 - this.tokenExpireTime) + " "), this.tokenTimer = this.core.timerManager.addTimer(function() {
                      return __awaiter(g2, void 0, void 0, Ql.mark(function _callee17() {
                        var t4;
                        return Ql.wrap(function _callee17$(a4) {
                          for (; ; )
                            switch (a4.prev = a4.next) {
                              case 0:
                                return this.tokenTimer && this.core.timerManager.deleteTimer(this.tokenTimer), this.tokenTimer = void 0, a4.next = 4, this._getToken();
                              case 4:
                                t4 = a4.sent, this.authService && this.authService.renewToken(t4);
                              case 6:
                              case "end":
                                return a4.stop();
                            }
                        }, _callee17, this);
                      }));
                    }, 1e3 * h2 - this.tokenExpireTime)), M2.abrupt("return", m2);
                  case 8:
                  case "end":
                    return M2.stop();
                }
            }, _callee18, this);
          }));
        }, a2.connectChannel = function connectChannel(t3) {
          var a3, u2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee19() {
            var m2;
            return Ql.wrap(function _callee19$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    if (this.state !== void 0) {
                      h2.next = 3;
                      break;
                    }
                    return this.logger.error("QChatMedia::connect::you should init before login"), h2.abrupt("return");
                  case 3:
                    if (this.state !== "init") {
                      h2.next = 6;
                      break;
                    }
                    return h2.next = 6, this.loginByIM();
                  case 6:
                    return this.serverId = t3.serverId, this.channelId = t3.channelId, h2.prev = 8, h2.next = 11, (a3 = this.roomService) === null || a3 === void 0 ? void 0 : a3.joinRoom({ roomUuid: t3.channelId, role: "qchatAudience", userName: this.core.account, initialProperties: {} }, {});
                  case 11:
                    h2.next = 17;
                    break;
                  case 13:
                    throw h2.prev = 13, h2.t0 = h2.catch(8), this.logger.error("QChatMedia::connectChannel error", h2.t0), new ql("QChatMedia::connectChannel error", h2.t0);
                  case 17:
                    if (!(m2 = (u2 = this.roomService) === null || u2 === void 0 ? void 0 : u2.getRoomContext(t3.channelId))) {
                      h2.next = 28;
                      break;
                    }
                    return this.roomContext = m2, this.rtcController = this.roomContext.rtcController, this.state = "connect", h2.next = 24, this.rtcController.joinRtcChannel();
                  case 24:
                    this.core.emit("connectChannel"), this.core.qchatMedia.emit("connectChannel"), h2.next = 29;
                    break;
                  case 28:
                    this.logger.error("QChatMedia::connect room not exited");
                  case 29:
                  case "end":
                    return h2.stop();
                }
            }, _callee19, this, [[8, 13]]);
          }));
        }, a2.updateRTCChannelInfo = function updateRTCChannelInfo(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee20() {
            return Ql.wrap(function _callee20$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, limit: { type: "number", allowEmpty: false } }, t3), a3.next = 3, this.core.sendCmd("qchatUpdateRTCChannelConfig", { RTCChannelConfig: Dt(Dt({}, t3), { audio: Un(t3.audio), video: Un(t3.video) }) });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee20, this);
          }));
        }, a2.getRTCChannelInfo = function getRTCChannelInfo(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee21() {
            var a3;
            return Ql.wrap(function _callee21$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false } }, t3), u2.next = 3, this.core.sendCmd("qchatGetRTCChannelConfig", { qchatGetRTCChannelConfigTag: t3 });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatRTCChannelConfig(a3.content.RTCChannelConfig));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee21, this);
          }));
        }, a2.getRTCChannelOnlineMembers = function getRTCChannelOnlineMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee22() {
            var a3;
            return Ql.wrap(function _callee22$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false } }, t3), u2.next = 3, this.core.sendCmd("qchatGetRTCChannelMembers", { qchatGetRTCChannelMembersTag: t3 });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatMembers(a3.content.memberList));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee22, this);
          }));
        }, a2.addRTCChannelListener = function addRTCChannelListener() {
          var t3, a3, u2 = this;
          this._checkConnectState();
          try {
            (t3 = this.authService) === null || t3 === void 0 || t3.addAuthListener({ onAuthEvent: function onAuthEvent(t4) {
              return __awaiter(u2, void 0, void 0, Ql.mark(function _callee23() {
                var a4;
                return Ql.wrap(function _callee23$(u3) {
                  for (; ; )
                    switch (u3.prev = u3.next) {
                      case 0:
                        if (t4 !== 1026 || this.getTokenState) {
                          u3.next = 10;
                          break;
                        }
                        return this.logger.log("QChatMedia::loginByIM token expire,begin get new token "), this.getTokenState = true, u3.next = 5, this._getToken();
                      case 5:
                        if (a4 = u3.sent, !this.authService) {
                          u3.next = 9;
                          break;
                        }
                        return u3.next = 9, this.authService.renewToken(a4);
                      case 9:
                        this.getTokenState = false;
                      case 10:
                      case "end":
                        return u3.stop();
                    }
                }, _callee23, this);
              }));
            } });
          } catch (t4) {
            throw this.getTokenState = false, this.logger.error("QChatMedia::loginByIM addAuthListener error", t4), new ql("QChatMedia::loginByIM addAuthListener error", t4);
          }
          (a3 = this.roomContext) === null || a3 === void 0 || a3.addRoomListener({ onRoomPropertiesChanged: function onRoomPropertiesChanged(t4) {
            var a4, m2, h2, g2, M2, I2;
            if (u2.logger.log("QChatMedia::addRTCChannelListener::onRoomPropertiesChanged", t4), t4.audioOff) {
              var S2 = (a4 = t4.audioOff.value) === null || a4 === void 0 ? void 0 : a4.split("_")[0];
              S2 !== "offNotAllowSelfOn" && S2 !== "offAllowSelfOn" || ((m2 = u2.roomContext) === null || m2 === void 0 ? void 0 : m2.localMember.isAudioOn) && ((h2 = u2.rtcController) === null || h2 === void 0 || h2.muteMyAudio());
            } else if (t4.videoOff) {
              var T2 = (g2 = t4.videoOff.value) === null || g2 === void 0 ? void 0 : g2.split("_")[0];
              T2 !== "offNotAllowSelfOn" && T2 !== "offAllowSelfOn" || ((M2 = u2.roomContext) === null || M2 === void 0 ? void 0 : M2.localMember.isVideoOn) && ((I2 = u2.rtcController) === null || I2 === void 0 || I2.muteMyVideo());
            }
          }, onRoomPropertiesDeleted: function onRoomPropertiesDeleted(t4) {
            u2.logger.log("QChatMedia::addRTCChannelListener::onRoomPropertiesDeleted", t4);
          }, onMemberJoinRtcChannel: function onMemberJoinRtcChannel(t4) {
            u2.logger.log("QChatMedia::addRTCChannelListener::onMemberJoinRTCChannel", t4);
            var a4 = map$6(t4).call(t4, function(t5) {
              return t5.uuid;
            });
            u2.core.emit("memberJoinRTCChannel", a4), u2.core.qchatMedia.emit("memberJoinRTCChannel", a4);
          }, onMemberLeaveRoom: function onMemberLeaveRoom(t4) {
            u2.logger.log("QChatMedia::addRTCChannelListener::onMemberLeaveRoom", t4);
            var a4 = map$6(t4).call(t4, function(t5) {
              return t5.uuid;
            });
            u2.core.emit("memberLeaveRTCChannel", a4), u2.core.qchatMedia.emit("memberLeaveRTCChannel", a4);
          }, onRoomEnded: function onRoomEnded(t4) {
            u2.authService && u2.authService.logout(), u2._setStateInit(), u2.logger.log("QChatMedia::addRTCChannelListener::onRoomEnded", t4), u2.core.emit("RTCChannelEnded", t4), u2.core.qchatMedia.emit("RTCChannelEnded", t4);
          }, onRtcChannelError: function onRtcChannelError(t4) {
            u2.logger.log("QChatMedia::addRTCChannelListener::onRtcChannelError", t4), t4 === "SOCKET_ERROR" && u2.disconnectChannel(), u2.core.emit("RTCChannelError", t4), u2.core.qchatMedia.emit("RTCChannelError", t4);
          }, onRtcAudioVolumeIndication: function onRtcAudioVolumeIndication(t4) {
            u2.logger.log("QChatMedia::addRTCChannelListener::onRtcAudioVolumeIndication", t4), u2.core.emit("onRtcAudioVolumeIndication", t4), u2.core.qchatMedia.emit("onRtcAudioVolumeIndication", t4);
          }, onMemberAudioMuteChanged: function onMemberAudioMuteChanged(t4, a4, m2) {
            u2.logger.log("QChatMedia::addRTCChannelListener::onMemberAudioMuteChanged", t4, a4), u2.core.emit("memberAudioMuteChanged", { memberAccId: t4.uuid, mute: a4, operateByAccId: m2.uuid }), u2.core.qchatMedia.emit("memberAudioMuteChanged", { memberAccId: t4.uuid, mute: a4, operateByAccId: m2.uuid });
          }, onMemberScreenShareStateChanged: function onMemberScreenShareStateChanged(t4, a4, m2) {
            u2.logger.log("QChatMedia::addRTCChannelListener::onMemberScreenShareStateChanged", t4, a4), u2.core.emit("memberScreenShareStateChanged", { memberAccId: t4.uuid, isSharing: a4, operateByAccId: m2.uuid }), u2.core.qchatMedia.emit("memberScreenShareStateChanged", { memberAccId: t4.uuid, isSharing: a4, operateByAccId: m2.uuid });
          }, onMemberVideoMuteChanged: function onMemberVideoMuteChanged(t4, a4, m2) {
            u2.logger.log("QChatMedia::addRTCChannelListener::onMemberVideoMuteChanged", t4, a4), u2.core.emit("memberVideoMuteChanged", { memberAccId: t4.uuid, mute: a4, operateByAccId: m2.uuid }), u2.core.qchatMedia.emit("memberVideoMuteChanged", { memberAccId: t4.uuid, mute: a4, operateByAccId: m2.uuid });
          } });
        }, a2.enumCameraDevices = function enumCameraDevices() {
          var t3 = this;
          return this._checkConnectState(), this.rtcController.enumCameraDevices().then(function(t4) {
            return t4.data;
          }, function(a3) {
            throw t3.logger.error("QChatMedia::enumCameraDevices error", a3), new ql("QChatMedia::enumCameraDevices error", a3);
          });
        }, a2.enumPlayoutDevices = function enumPlayoutDevices() {
          var t3 = this;
          return this._checkConnectState(), this.rtcController.enumPlayoutDevices().then(function(t4) {
            return t4.data;
          }, function(a3) {
            throw t3.logger.error("QChatMedia::enumPlayoutDevices error", a3), new ql("QChatMedia::enumPlayoutDevices error", a3);
          });
        }, a2.enumRecordDevices = function enumRecordDevices() {
          var t3 = this;
          return this._checkConnectState(), this.rtcController.enumRecordDevices().then(function(t4) {
            return t4.data;
          }, function(a3) {
            throw t3.logger.error("QChatMedia::enumRecordDevices error", a3), new ql("QChatMedia::enumRecordDevices error", a3);
          });
        }, a2.removeRTCChannelListener = function removeRTCChannelListener() {
          var t3, a3;
          this._checkConnectState(), (t3 = this.roomContext) === null || t3 === void 0 || t3.removeRoomListener({}), (a3 = this.authService) === null || a3 === void 0 || a3.removeAuthListener({});
        }, a2.setSelectedCameraDevice = function setSelectedCameraDevice(t3) {
          var a3 = this;
          return this._checkConnectState(), validate({ deviceId: { type: "string", allowEmpty: false } }, t3), this.rtcController.setSelectedCameraDevice(t3.deviceId).then(function(t4) {
            return t4.data;
          }, function(t4) {
            throw a3.logger.error("QChatMedia::setSelectedCameraDevice error", t4), new ql("QChatMedia::setSelectedCameraDevice error", t4);
          });
        }, a2.setSelectedPlayoutDevice = function setSelectedPlayoutDevice(t3) {
          var a3 = this;
          return this._checkConnectState(), validate({ deviceId: { type: "string", allowEmpty: false } }, t3), this.rtcController.setSelectedPlayoutDevice(t3.deviceId).then(function(t4) {
            return t4.data;
          }, function(t4) {
            throw a3.logger.error("QChatMedia::setSelectedPlayoutDevice error", t4), new ql("QChatMedia::setSelectedPlayoutDevice error", t4);
          });
        }, a2.setSelectedRecordDevice = function setSelectedRecordDevice(t3) {
          var a3 = this;
          return this._checkConnectState(), validate({ deviceId: { type: "string", allowEmpty: false } }, t3), this.rtcController.setSelectedRecordDevice(t3.deviceId).then(function(t4) {
            return t4.data;
          }, function(t4) {
            throw a3.logger.error("QChatMedia::setSelectedRecordDevice error", t4), new ql("QChatMedia::setSelectedRecordDevice error", t4);
          });
        }, a2.getRTCMembers = function getRTCMembers() {
          var t3, a3;
          return this._checkConnectState(), map$6(t3 = filter(a3 = this.roomContext.remoteMembers).call(a3, function(t4) {
            return t4.isInRtcChannel;
          })).call(t3, function(t4) {
            return { accid: t4.uuid, isAudioOn: !!t4.isAudioOn, isVideoOn: !!t4.isVideoOn, isSharingScreen: !!t4.isSharingScreen, properties: t4.properties };
          });
        }, a2.subscribeRemoteVideoSubStream = function subscribeRemoteVideoSubStream(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee24() {
            return Ql.wrap(function _callee24$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    this._checkConnectState(), validate({ accid: { type: "string", allowEmpty: false } }, t3), u2.prev = 2, (a3 = this.rtcController) === null || a3 === void 0 || a3.subscribeRemoteVideoSubStream(t3.accid), u2.next = 10;
                    break;
                  case 6:
                    throw u2.prev = 6, u2.t0 = u2.catch(2), this.logger.error("QChatMedia::subscribeRemoteVideoSubStream error", u2.t0), new ql("QChatMedia::subscribeRemoteVideoSubStream error", u2.t0);
                  case 10:
                  case "end":
                    return u2.stop();
                }
            }, _callee24, this, [[2, 6]]);
          }));
        }, a2.unsubscribeRemoteVideoSubStream = function unsubscribeRemoteVideoSubStream(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee25() {
            return Ql.wrap(function _callee25$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    this._checkConnectState(), validate({ accid: { type: "string", allowEmpty: false } }, t3), u2.prev = 2, (a3 = this.rtcController) === null || a3 === void 0 || a3.unsubscribeRemoteVideoSubStream(t3.accid), u2.next = 10;
                    break;
                  case 6:
                    throw u2.prev = 6, u2.t0 = u2.catch(2), this.logger.error("QChatMedia::unsubscribeRemoteVideoSubStream error", u2.t0), new ql("QChatMedia::unsubscribeRemoteVideoSubStream error", u2.t0);
                  case 10:
                  case "end":
                    return u2.stop();
                }
            }, _callee25, this, [[2, 6]]);
          }));
        }, a2.muteAllAudio = function muteAllAudio() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee26() {
            return Ql.wrap(function _callee26$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this._checkConnectState(), a3.next = 3, this._checkPermission({ serverId: this.serverId, channelId: this.channelId, auth: "RTCChannelOpenCloseEveryoneMicrophone" });
                  case 3:
                    if (a3.sent) {
                      a3.next = 7;
                      break;
                    }
                    return this.logger.error("QChatMedia::connect::auth your have not RTCChannelOpenCloseEveryoneMicrophone auth"), a3.abrupt("return");
                  case 7:
                    a3.prev = 7, (t3 = this.roomContext) === null || t3 === void 0 || t3.updateRoomProperty("audioOff", Un({ value: "offNotAllowSelfOn_" + new Date().getTime() })), a3.next = 15;
                    break;
                  case 11:
                    throw a3.prev = 11, a3.t0 = a3.catch(7), this.logger.error("QChatMedia::muteAllAudio error", a3.t0), new ql("QChatMedia::muteAllAudio error", a3.t0);
                  case 15:
                  case "end":
                    return a3.stop();
                }
            }, _callee26, this, [[7, 11]]);
          }));
        }, a2.muteAllVideo = function muteAllVideo() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee27() {
            return Ql.wrap(function _callee27$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this._checkConnectState(), a3.next = 3, this._checkPermission({ serverId: this.serverId, channelId: this.channelId, auth: "RTCChannelOpenCloseEveryoneCamera" });
                  case 3:
                    if (a3.sent) {
                      a3.next = 7;
                      break;
                    }
                    return this.logger.error("QChatMedia::connect::auth your have not RTCChannelOpenCloseEveryoneCamera auth"), a3.abrupt("return");
                  case 7:
                    a3.prev = 7, (t3 = this.roomContext) === null || t3 === void 0 || t3.updateRoomProperty("videoOff", Un({ value: "offNotAllowSelfOn_" + new Date().getTime() })), a3.next = 15;
                    break;
                  case 11:
                    throw a3.prev = 11, a3.t0 = a3.catch(7), this.logger.error("QChatMedia::muteAllVideo error", a3.t0), new ql("QChatMedia::muteAllVideo error", a3.t0);
                  case 15:
                  case "end":
                    return a3.stop();
                }
            }, _callee27, this, [[7, 11]]);
          }));
        }, a2.unMuteAllAudio = function unMuteAllAudio() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee28() {
            return Ql.wrap(function _callee28$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this._checkConnectState(), a3.next = 3, this._checkPermission({ serverId: this.serverId, channelId: this.channelId, auth: "RTCChannelOpenCloseEveryoneMicrophone" });
                  case 3:
                    if (a3.sent) {
                      a3.next = 7;
                      break;
                    }
                    return this.logger.error("QChatMedia::connect::auth your have not RTCChannelOpenCloseEveryoneMicrophone auth"), a3.abrupt("return");
                  case 7:
                    a3.prev = 7, (t3 = this.roomContext) === null || t3 === void 0 || t3.updateRoomProperty("audioOff", Un({ value: "disable_" + new Date().getTime() })), a3.next = 15;
                    break;
                  case 11:
                    throw a3.prev = 11, a3.t0 = a3.catch(7), this.logger.error("QChatMedia::unMuteAllAudio error", a3.t0), new ql("QChatMedia::unMuteAllAudio error", a3.t0);
                  case 15:
                  case "end":
                    return a3.stop();
                }
            }, _callee28, this, [[7, 11]]);
          }));
        }, a2.unMuteAllVideo = function unMuteAllVideo() {
          var t3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee29() {
            return Ql.wrap(function _callee29$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this._checkConnectState(), a3.next = 3, this._checkPermission({ serverId: this.serverId, channelId: this.channelId, auth: "RTCChannelOpenCloseEveryoneCamera" });
                  case 3:
                    if (a3.sent) {
                      a3.next = 7;
                      break;
                    }
                    return this.logger.error("QChatMedia::connect::auth your have not RTCChannelOpenCloseEveryoneCamera auth"), a3.abrupt("return");
                  case 7:
                    a3.prev = 7, (t3 = this.roomContext) === null || t3 === void 0 || t3.updateRoomProperty("videoOff", Un({ value: "disable_" + new Date().getTime() })), a3.next = 15;
                    break;
                  case 11:
                    throw a3.prev = 11, a3.t0 = a3.catch(7), this.logger.error("QChatMedia::unMuteAllVideo error", a3.t0), new ql("QChatMedia::unMuteAllVideo error", a3.t0);
                  case 15:
                  case "end":
                    return a3.stop();
                }
            }, _callee29, this, [[7, 11]]);
          }));
        }, QChatMediaService;
      }(F_), xM = { "24_10": "qchatSendMsg", "24_11": "qchatOnMsg", "24_12": "qchatOnRecvUnreadInfo", "24_13": "qchatSendCustomSysMsg", "24_14": "qchatOnSysMsg", "24_16": "qchatGetHistoryMsg", "24_17": "qchatMarkMessageRead", "24_18": "qchatMultiSyncMessageRead", "24_22": "qchatUpdateSystemNotification", "24_23": "qchatMultiSyncSystemNotificationUpdate", "24_24": "qchatSyncSystemNotification", "24_25": "qchatUpdateMessage", "24_26": "qchatRecvMessageUpdate", "24_28": "qchatMarkSysMsgRead", "24_94": "qchatMessageSearchByPage", "24_100": "qchatGetMessageHistoryByIds", "24_101": "qchatGetThreadMessages", "24_102": "qchatUpdateQuickComment", "24_103": "qchatGetQuickComments", "24_108": "qchatGetThreadRootMessagesMeta", "24_121": "qchatGetLastMessageOfChannels", "24_127": "qchatGetMentionedMeMessages", "25_6": "qchatMultiSyncServersMessageRead" }, OM = { getHistoryMsgTag: { serverId: 1, channelId: 2, beginTime: 3, endTime: 4, excludeMsgId: 5, limit: 6, reverse: 7 }, getThreadHistoryMsgTag: { beginTime: 1, endTime: 2, excludeMsgId: 3, limit: 4, reverse: 5 }, qchatMsgTag: { serverId: 1, channelId: 2, fromAccount: 3, fromClientType: 4, fromDeviceId: 5, fromNick: 6, time: 7, updateTime: 8, type: 9, body: 10, attach: 11, ext: 12, msgIdClient: 13, msgIdServer: 14, resendFlag: 15, status: 16, pushPayload: 17, pushContent: 18, mentionAccids: 19, mentionAll: 20, env: 21, callbackExt: 22, replyMsgFromAccount: 23, replyMsgTime: 24, replyMsgIdServer: 25, replyMsgIdClient: 26, threadMsgFromAccount: 27, threadMsgTime: 28, threadMsgIdServer: 29, threadMsgIdClient: 30, useCustomContent: 31, antiSpamContent: 32, antiSpamBusinessId: 33, antiSpamUsingYidun: 34, yidunCallback: 35, yidunAntiCheating: 36, yidunAntiSpamExt: 37, yidunAntiSpamRes: 38, mentionRoleIds: 41, accidsOfMentionedRoles: 42, updateContent: 39, updateOperatorInfo: 40, subType: 61, historyEnable: 100, pushEnable: 101, needBadge: 102, needPushNick: 103, notifyReason: 104, routeEnable: 105, isAntispam: 106 }, sysMsg: { toType: 1, serverId: 2, channelId: 3, toAccids: 4, fromAccount: 5, fromClientType: 6, fromDeviceId: 7, fromNick: 8, time: 9, updateTime: 10, type: 11, msgIdClient: 12, msgIdServer: 13, body: 14, attach: 15, ext: 16, resendFlag: 17, status: 18, pushPayload: 19, pushContent: 20, env: 21, callbackExt: 22, persistEnable: 100, pushEnable: 101, needBadge: 102, needPushNick: 103, routeEnable: 104 }, qchatMsgUpdateTag: { operatorAccount: 1, operatorClientType: 2, ps: 3, ext: 4, pushContent: 5, pushPayload: 6, env: 7, routeEnable: 100 }, markMsgReadTag: { serverId: 1, channelId: 2, time: 3 }, qchatQuickCommentRequestTag: { serverId: 1, channelId: 2, fromAccount: 3, msgIdServer: 4, time: 5, type: 6, opeType: 7, opeAccid: 8 }, qchatQuickCommentQueryTag: { serverId: 1, channelId: 2, msgIdServerList: 3 }, qchatGetLastMessageOfChannelsTag: { serverId: 1, channelIdList: 2 }, qchatMultiSyncServersMessageReadTag: { successServerIds: 1, failServerIds: 2, ackTimestamp: 3 }, qchatMessageSearchByPageTag: { keyword: 1, serverId: 2, channelId: 3, fromAccid: 4, fromTime: 5, toTime: 6, msgTypes: 7, subTypes: 8, includeSelf: 9, order: 10, limit: 11, sort: 12, cursor: 13 }, qchatPageQueryTag: { hasMore: 1, nextTimetag: 2, cursor: 3 }, unreadInfo: H_ }, PM = function getDeserializeTag() {
        return invertSerializeMap(OM);
      }, LM = function getCmdConfig() {
        var t2 = PM();
        return { qchatSendMsg: { service: "qchatMsg", sid: 24, cid: 10, params: [{ type: "Property", name: "qchatMsg", reflectMapper: OM.qchatMsgTag }], response: [{ type: "Property", name: "qchatMsg", reflectMapper: t2.qchatMsgTag }] }, qchatOnMsg: { service: "qchatMsg", sid: 24, cid: 11, response: [{ type: "Property", name: "qchatMsg", reflectMapper: t2.qchatMsgTag }] }, qchatOnRecvUnreadInfo: { service: "qchatMsg", sid: 24, cid: 12, response: [{ type: "Property", name: "qchatMsg", reflectMapper: t2.qchatMsgTag }] }, qchatSendCustomSysMsg: { service: "qchatMsg", sid: 24, cid: 13, params: [{ type: "Property", name: "sysMsg", reflectMapper: OM.sysMsg }], response: [{ type: "Property", name: "sysMsg", reflectMapper: t2.sysMsg }] }, qchatOnSysMsg: { service: "qchatMsg", sid: 24, cid: 14, response: [{ type: "Property", name: "sysMsg", reflectMapper: t2.sysMsg }] }, qchatGetHistoryMsg: { service: "qchatMsg", sid: 24, cid: 16, params: [{ type: "Property", name: "getHistoryMsgTag", reflectMapper: OM.getHistoryMsgTag }], response: [{ type: "PropertyArray", name: "qchatMsgs", reflectMapper: t2.qchatMsgTag }] }, qchatUpdateMessage: { service: "qchatMsg", sid: 24, cid: 25, params: [{ type: "Property", name: "qchatMsgUpdateTag", reflectMapper: OM.qchatMsgUpdateTag }, { type: "Property", name: "qchatMsg", reflectMapper: OM.qchatMsgTag }], response: [{ type: "Property", name: "qchatMsg", reflectMapper: t2.qchatMsgTag }] }, qchatRecvMessageUpdate: { service: "qchatMsg", sid: 24, cid: 26, response: [{ type: "Property", name: "qchatMsgUpdateInfo", reflectMapper: t2.qchatMsgUpdateTag }, { type: "Property", name: "qchatMsg", reflectMapper: t2.qchatMsgTag }] }, qchatMarkMessageRead: { sid: 24, cid: 17, service: "qchatMsg", params: [{ type: "Property", name: "markMsgReadTag", reflectMapper: OM.markMsgReadTag }], response: [{ type: "Property", name: "unreadInfo", reflectMapper: t2.unreadInfo }] }, qchatMultiSyncMessageRead: { sid: 24, cid: 18, service: "qchatMsg", response: [{ type: "Property", name: "unreadInfo", reflectMapper: t2.unreadInfo }] }, qchatUpdateSystemNotification: { service: "qchatMsg", sid: 24, cid: 22, params: [{ type: "Property", name: "qchatMsgUpdateTag", reflectMapper: OM.qchatMsgUpdateTag }, { type: "Property", name: "sysMsg", reflectMapper: OM.sysMsg }], response: [{ type: "Property", name: "sysMsg", reflectMapper: t2.sysMsg }] }, qchatMultiSyncSystemNotificationUpdate: { service: "qchatMsg", sid: 24, cid: 23, response: [{ type: "Property", name: "qchatMsgUpdateTag", reflectMapper: t2.qchatMsgUpdateTag }, { type: "Property", name: "sysMsg", reflectMapper: t2.sysMsg }] }, qchatSyncSystemNotification: { service: "qchatMsg", sid: 24, cid: 24, response: [{ type: "PropertyArray", name: "systemNotifications", reflectMapper: t2.sysMsg }] }, qchatMarkSysMsgRead: { service: "qchatMsg", sid: 24, cid: 28, params: [{ type: "PropertyArray", name: "sysMsgs", reflectMapper: OM.sysMsg }] }, qchatMessageSearchByPage: { service: "qchatMsg", sid: 24, cid: 94, params: [{ type: "Property", name: "qchatMessageSearchByPageTag", reflectMapper: OM.qchatMessageSearchByPageTag }], response: [{ type: "Property", name: "listQueryTag", reflectMapper: t2.qchatPageQueryTag }, { type: "PropertyArray", name: "datas", reflectMapper: t2.qchatMsgTag }] }, qchatGetMessageHistoryByIds: { service: "qchatMsg", sid: 24, cid: 100, params: [{ type: "Property", name: "channelInfo", reflectMapper: { serverId: 1, channelId: 2 } }, { type: "PropertyArray", name: "messageReferList", reflectMapper: { msgIdServer: 1, time: 2 } }], response: [{ type: "PropertyArray", name: "qchatMsgs", reflectMapper: t2.qchatMsgTag }] }, qchatGetThreadMessages: { service: "qchatMsg", sid: 24, cid: 101, params: [{ type: "Property", name: "qchatMsg", reflectMapper: OM.qchatMsgTag }, { type: "Property", name: "getThreadHistoryMsgTag", reflectMapper: OM.getThreadHistoryMsgTag }], response: [{ type: "Property", name: "thread", reflectMapper: t2.qchatMsgTag }, { type: "Property", name: "threadInfo", reflectMapper: { 1: "messageCount", 2: "lastMessageTimestamp" } }, { type: "PropertyArray", name: "qchatMsgs", reflectMapper: t2.qchatMsgTag }] }, qchatUpdateQuickComment: { service: "qchatMsg", sid: 24, cid: 102, params: [{ type: "Property", name: "tag", reflectMapper: OM.qchatQuickCommentRequestTag }] }, qchatGetQuickComments: { service: "qchatMsg", sid: 24, cid: 103, params: [{ type: "Property", name: "tag", reflectMapper: OM.qchatQuickCommentQueryTag }], response: [{ type: "PropertyArray", name: "quickCommentResponse", reflectMapper: { 1: "serverId", 2: "channelId", 3: "msgIdServer", 4: "totalCount", 5: "lastUpdateTime", 6: "details" } }] }, qchatGetThreadRootMessagesMeta: { service: "qchatMsg", sid: 24, cid: 108, params: [{ type: "Property", name: "tag", reflectMapper: { serverId: 1, channelId: 2 } }, { type: "PropertyArray", name: "qchatMsgs", reflectMapper: { time: 7, msgIdServer: 14 } }], response: [{ type: "PropertyArray", name: "metas", reflectMapper: { 1: "total", 2: "timestamp", 3: "msgIdServer", 4: "msgTime" } }] }, qchatGetLastMessageOfChannels: { service: "qchatMsg", sid: 24, cid: 121, params: [{ type: "Property", name: "tag", reflectMapper: OM.qchatGetLastMessageOfChannelsTag }], response: [{ type: "PropertyArray", name: "msgs", reflectMapper: t2.qchatMsgTag }] }, qchatMultiSyncServersMessageRead: { service: "qchatMsg", sid: 25, cid: 6, response: [{ type: "Property", name: "qchatMultiSyncServersMessageReadTag", reflectMapper: t2.qchatMultiSyncServersMessageReadTag }] }, qchatGetMentionedMeMessages: { service: "qchatMsg", sid: 24, cid: 127, params: [{ type: "Property", name: "tag", reflectMapper: { serverId: 1, channelId: 2, timestamp: 3, limit: 4 } }], response: [{ type: "Property", name: "page", reflectMapper: t2.qchatPageQueryTag }, { type: "PropertyArray", name: "datas", reflectMapper: t2.qchatMsgTag }] } };
      };
      !function(t2) {
        t2[t2.Android = 1] = "Android", t2[t2.iOS = 2] = "iOS", t2[t2.PC = 4] = "PC", t2[t2.WindowsPhone = 8] = "WindowsPhone", t2[t2.Web = 16] = "Web", t2[t2.Server = 32] = "Server", t2[t2.Mac = 64] = "Mac", t2[t2.HarmonyOS = 65] = "HarmonyOS";
      }(kM || (kM = {}));
      var VM, UM = { "24_31": "qchatCreateServer", "24_32": "qchatDeleteServer", "24_33": "qchatUpdateServer", "24_34": "qchatGetServers", "24_35": "qchatGetServersByPage", "24_36": "qchatInviteServerMembers", "24_37": "qchatAcceptServerInvite", "24_38": "qchatRejectInviteServer", "24_39": "qchatApplyServerJoin", "24_40": "qchatAcceptServerApply", "24_41": "qchatRejectServerApply", "24_42": "qchatKickServerMembers", "24_43": "qchatLeaveServer", "24_44": "qchatUpdateMyMemberInfo", "24_45": "qchatUpdateServerMemberInfo", "24_46": "qchatGetServerMembers", "24_47": "qchatGetServerMembersByPage", "24_104": "qchatUpdateServerMemberBan", "24_105": "qchatGetBannedMembersByPage", "24_91": "qchatServerSearchByPage", "24_92": "qchatServerMemberSearchByPage", "24_122": "qchatGenerateInviteCode", "24_123": "qchatJoinByInviteCode", "24_124": "qchatGetInviteApplyRecordOfServer", "24_125": "qchatGetInviteApplyRecordOfSelf", "25_5": "qchatClearServersUnread", "25_7": "qchatSubscribeChannelsByServers", "25_10": "qchatEnterAsVisitor", "25_11": "qchatLeaveAsVisitor" }, DM = { serverInfo: { serverId: 1, name: 3, icon: 4, ext: 5, owner: 6, memberNumber: 7, inviteMode: 8, applyMode: 9, validFlag: 10, createTime: 11, updateTime: 12, channelNumber: 13, categoryNumber: 14, searchType: 15, searchEnable: 16, reorderWeight: 17 }, antispamTag: { antiSpamBusinessId: 1 }, memberInfo: { serverId: 1, accid: 3, nick: 4, avatar: 5, ext: 6, type: 7, joinTime: 8, inviter: 9, validFlag: 10, createTime: 11, updateTime: 12 }, otherMemberInfo: { serverId: 1, accid: 3, nick: 4, avatar: 5, type: 7, joinTime: 8, inviter: 9, validFlag: 10, createTime: 11, updateTime: 12 }, getServerListPageTag: { timestamp: 1, limit: 2 }, getServerMemberListPageTag: { serverId: 1, timetag: 2, limit: 3 }, updateServerMemberBanTag: { serverId: 1, opeType: 2, accid: 3, ext: 4 }, getBannedMembersByPageTag: { serverId: 1, timetag: 2, limit: 3 }, serverMemberBanInfo: { serverId: 1, appid: 2, accid: 3, ext: 4, banTime: 5, validFlag: 6, createTime: 7, updateTime: 8 }, serverSearchByPageTag: { keyword: 1, startTime: 2, endTime: 3, order: 4, limit: 5, serverType: 6, searchType: 7, sort: 8, cursor: 9 }, serverMemberSearchByPageTag: { serverId: 1, keyword: 3, limit: 4 }, inviteRespParamTag: { requestId: 1 }, applyRespParamTag: { requestId: 1, expireTime: 2 }, inviteApplyRecord: { accid: 1, type: 2, serverId: 3, status: 4, requestId: 5, createTime: 6, updateTime: 7, expireTime: 8, data: 9, recordId: 10 }, clearServersUnreadTag: { successServerIds: 1, failServerIds: 2, ackTimestamp: 3 }, unreadInfo: H_ }, qM = function getDeserializeTag() {
        return invertSerializeMap(DM);
      }, BM = function getCmdConfig() {
        var t2 = qM();
        return { qchatCreateServer: { sid: 24, cid: 31, service: "qchatServer", params: [{ type: "Property", name: "serverInfo", reflectMapper: DM.serverInfo }, { type: "Property", name: "antispamTag", reflectMapper: DM.antispamTag }], response: [{ type: "Property", name: "serverInfo", reflectMapper: t2.serverInfo }] }, qchatDeleteServer: { sid: 24, cid: 32, service: "qchatServer", params: [{ type: "Long", name: "serverId" }] }, qchatUpdateServer: { sid: 24, cid: 33, service: "qchatServer", params: [{ type: "Property", name: "serverInfo", reflectMapper: DM.serverInfo }, { type: "Property", name: "antispamTag", reflectMapper: DM.antispamTag }], response: [{ type: "Property", name: "serverInfo", reflectMapper: t2.serverInfo }] }, qchatGetServers: { sid: 24, cid: 34, service: "qchatServer", params: [{ type: "LongArray", name: "serverIds" }], response: [{ type: "PropertyArray", name: "serverList", reflectMapper: t2.serverInfo }] }, qchatGetServersByPage: { sid: 24, cid: 35, service: "qchatServer", params: [{ type: "Property", name: "tag", reflectMapper: DM.getServerListPageTag }], response: [{ type: "Property", name: "listQueryTag", reflectMapper: { 1: "hasMore", 2: "nextTimetag" } }, { type: "PropertyArray", name: "datas", reflectMapper: t2.serverInfo }] }, qchatInviteServerMembers: { sid: 24, cid: 36, service: "qchatServer", params: [{ type: "Long", name: "serverId" }, { type: "StrArray", name: "accids" }, { type: "String", name: "ps" }, { type: "Property", name: "params", reflectMapper: { ttl: 1 } }], response: [{ type: "StrArray", name: "failByOverAccids" }, { type: "StrArray", name: "failByBanAccids" }, { type: "Property", name: "record", reflectMapper: t2.applyRespParamTag }] }, qchatAcceptServerInvite: { sid: 24, cid: 37, service: "qchatServer", params: [{ type: "Long", name: "serverId" }, { type: "String", name: "accid" }, { type: "Property", name: "recordInfo", reflectMapper: DM.inviteRespParamTag }] }, qchatRejectInviteServer: { sid: 24, cid: 38, service: "qchatServer", params: [{ type: "Long", name: "serverId" }, { type: "String", name: "accid" }, { type: "String", name: "ps" }, { type: "Property", name: "recordInfo", reflectMapper: DM.inviteRespParamTag }] }, qchatApplyServerJoin: { sid: 24, cid: 39, service: "qchatServer", params: [{ type: "Long", name: "serverId" }, { type: "String", name: "ps" }, { type: "Property", name: "params", reflectMapper: { ttl: 1 } }], response: [{ type: "Property", name: "data", reflectMapper: t2.applyRespParamTag }] }, qchatAcceptServerApply: { sid: 24, cid: 40, service: "qchatServer", params: [{ type: "Long", name: "serverId" }, { type: "String", name: "accid" }, { type: "Property", name: "recordInfo", reflectMapper: DM.applyRespParamTag }] }, qchatRejectServerApply: { sid: 24, cid: 41, service: "qchatServer", params: [{ type: "Long", name: "serverId" }, { type: "String", name: "accid" }, { type: "String", name: "ps" }, { type: "Property", name: "recordInfo", reflectMapper: DM.applyRespParamTag }] }, qchatKickServerMembers: { sid: 24, cid: 42, service: "qchatServer", params: [{ type: "Long", name: "serverId" }, { type: "StrArray", name: "accids" }] }, qchatLeaveServer: { sid: 24, cid: 43, service: "qchatServer", params: [{ type: "Long", name: "serverId" }] }, qchatUpdateMyMemberInfo: { sid: 24, cid: 44, service: "qchatServer", params: [{ type: "Property", name: "memberInfo", reflectMapper: DM.memberInfo }, { type: "Property", name: "antispamTag", reflectMapper: DM.antispamTag }], response: [{ type: "Property", name: "memberInfo", reflectMapper: t2.memberInfo }] }, qchatUpdateServerMemberInfo: { sid: 24, cid: 45, service: "qchatServer", params: [{ type: "Property", name: "memberInfo", reflectMapper: DM.otherMemberInfo }, { type: "Property", name: "antispamTag", reflectMapper: DM.antispamTag }], response: [{ type: "Property", name: "memberInfo", reflectMapper: t2.memberInfo }] }, qchatGetServerMembers: { sid: 24, cid: 46, service: "qchatServer", params: [{ type: "StrArray", name: "accids" }], response: [{ type: "PropertyArray", name: "accidList", reflectMapper: t2.memberInfo }] }, qchatGetServerMembersByPage: { sid: 24, cid: 47, service: "qchatServer", params: [{ type: "Property", name: "tag", reflectMapper: DM.getServerMemberListPageTag }], response: [{ type: "Property", name: "listQueryTag", reflectMapper: { 1: "hasMore", 2: "nextTimetag" } }, { type: "PropertyArray", name: "datas", reflectMapper: t2.memberInfo }] }, qchatUpdateServerMemberBan: { sid: 24, cid: 104, service: "qchatServer", params: [{ type: "Property", name: "tag", reflectMapper: DM.updateServerMemberBanTag }] }, qchatGetBannedMembersByPage: { sid: 24, cid: 105, service: "qchatServer", params: [{ type: "Property", name: "tag", reflectMapper: DM.getBannedMembersByPageTag }], response: [{ type: "Property", name: "listQueryTag", reflectMapper: { 1: "hasMore", 2: "nextTimetag" } }, { type: "PropertyArray", name: "datas", reflectMapper: t2.serverMemberBanInfo }] }, qchatServerSearchByPage: { sid: 24, cid: 91, service: "qchatServer", params: [{ type: "Property", name: "tag", reflectMapper: DM.serverSearchByPageTag }], response: [{ type: "Property", name: "listQueryTag", reflectMapper: { 1: "hasMore", 2: "nextTimetag", 3: "cursor" } }, { type: "PropertyArray", name: "datas", reflectMapper: t2.serverInfo }] }, qchatServerMemberSearchByPage: { sid: 24, cid: 92, service: "qchatServer", params: [{ type: "Property", name: "tag", reflectMapper: DM.serverMemberSearchByPageTag }], response: [{ type: "PropertyArray", name: "members", reflectMapper: t2.memberInfo }] }, qchatGenerateInviteCode: { sid: 24, cid: 122, service: "qchatServer", params: [{ type: "Property", name: "tag", reflectMapper: { serverId: 1, ttl: 2 } }], response: [{ type: "Property", name: "data", reflectMapper: { 1: "serverId", 2: "requestId", 3: "inviteCode", 4: "expireTime" } }] }, qchatJoinByInviteCode: { sid: 24, cid: 123, service: "qchatServer", params: [{ type: "Property", name: "tag", reflectMapper: { serverId: 1, inviteCode: 2, ps: 3 } }] }, qchatGetInviteApplyRecordOfServer: { sid: 24, cid: 124, service: "qchatServer", params: [{ type: "Property", name: "tag", reflectMapper: { serverId: 1, fromTime: 2, toTime: 3, reverse: 4, limit: 5, cursor: 6 } }], response: [{ type: "PropertyArray", name: "data", reflectMapper: t2.inviteApplyRecord }] }, qchatGetInviteApplyRecordOfSelf: { sid: 24, cid: 125, service: "qchatServer", params: [{ type: "Property", name: "tag", reflectMapper: { fromTime: 1, toTime: 2, reverse: 3, limit: 4, cursor: 5 } }], response: [{ type: "PropertyArray", name: "data", reflectMapper: t2.inviteApplyRecord }] }, qchatClearServersUnread: { sid: 25, cid: 5, service: "qchatServer", params: [{ type: "LongArray", name: "serverIds" }], response: [{ type: "Property", name: "clearServersUnreadTag", reflectMapper: t2.clearServersUnreadTag }] }, qchatSubscribeChannelsByServers: { sid: 25, cid: 7, service: "qchatServer", params: [{ type: "Int", name: "type" }, { type: "LongArray", name: "serverIds" }], response: [{ type: "PropertyArray", name: "unreadInfos", reflectMapper: t2.unreadInfo }, { type: "String", name: "failServerIds" }] }, qchatEnterAsVisitor: { sid: 25, cid: 10, service: "qchatServer", params: [{ type: "Property", name: "tag", reflectMapper: { serverIds: 1 } }], response: [{ type: "String", name: "failServerIds" }] }, qchatLeaveAsVisitor: { sid: 25, cid: 11, service: "qchatServer", params: [{ type: "Property", name: "tag", reflectMapper: { serverIds: 1 } }], response: [{ type: "String", name: "failServerIds" }] } };
      }, FM = { "24_61": "qchatCreateServerRole", "24_62": "qchatDeleteServerRole", "24_63": "qchatUpdateServerRole", "24_64": "qchatGetServerRoles", "24_65": "qchatAddChannelRole", "24_66": "qchatRemoveChannelRole", "24_67": "qchatUpdateChannelRole", "24_68": "qchatGetChannelRoles", "24_69": "qchatAddMemberRole", "24_70": "qchatRemoveMemberRole", "24_71": "qchatUpdateMemberRole", "24_72": "qchatGetMemberRoles", "24_73": "qchatAddMembersToServerRole", "24_74": "qchatRemoveMembersFromServerRole", "24_75": "qchatGetMembersFromServerRole", "24_76": "qchatGetServerRolesByAccid", "24_77": "qchatGetExistingServerRolesByAccids", "24_78": "qchatGetExistingChannelRolesByServerRoleIds", "24_79": "qchatGetExistingAccidsOfMemberRoles", "24_80": "qchatUpdateServerRolePriorities", "24_81": "qchatGetExistingAccidsInServerRole", "24_82": "qchatCheckPermission", "24_83": "qchatAddChannelCategoryRole", "24_84": "qchatRemoveChannelCategoryRole", "24_85": "qchatUpdateChannelCategoryRole", "24_86": "qchatGetChannelCategoryRole", "24_87": "qchatAddChannelCategoryMemberRole", "24_88": "qchatRemoveChannelCategoryMemberRole", "24_89": "qchatUpdateChannelCategoryMemberRole", "24_90": "qchatGetChannelCategoryMemberRole", "24_126": "qchatCheckPermissions" }, GM = { channelRole: { serverId: 1, roleId: 2, parentRoleId: 3, channelId: 4, name: 5, icon: 6, ext: 7, auths: 8, type: 9, createTime: 10, updateTime: 11 }, memberRole: { serverId: 1, id: 2, accid: 3, channelId: 4, auths: 5, createTime: 6, updateTime: 7, nick: 8, avatar: 9, ext: 10, memberType: 11, joinTime: 12, inviter: 13 }, antispamTag: { antiSpamBusinessId: 1 }, serverRole: { serverId: 1, roleId: 2, name: 3, icon: 4, ext: 5, auths: 6, type: 7, memberCount: 8, priority: 9, createTime: 10, updateTime: 11, isMember: 12 }, getRoleByPagesTag: { serverId: 1, channelId: 2, time: 3, limit: 4 }, checkPermissionTag: { serverId: 1, channelId: 2, auth: 3 }, member: { serverId: 1, roleId: 2, accid: 3, createTime: 4, updateTime: 5, nick: 6, avatar: 7, ext: 8, type: 9, joinTime: 10, inviter: 11 }, qchatAddChannelCategoryRoleTag: { categoryId: 3, serverId: 4, parentRoleId: 5 }, channelCategoryRole: { roleId: 1, categoryId: 3, serverId: 4, parentRoleId: 5, type: 6, validFlag: 7, createTime: 8, updateTime: 9, auths: 10, name: 11, icon: 12, ext: 13 }, qchatGetChannelCategoryRoleTag: { serverId: 1, categoryId: 2, timetag: 3, limit: 4 }, channelCategoryMemberRole: { id: 1, accid: 3, categoryId: 4, serverId: 5, validFlag: 6, createTime: 7, updateTime: 8, auths: 9, nick: 10, avatar: 11, ext: 12, memberType: 13, joinTime: 14, inviter: 15 }, qchatGetChannelCategoryMemberRoleTag: { serverId: 1, categoryId: 2, timetag: 3, limit: 4 }, checkPermissionsTag: { serverId: 1, channelId: 2, auths: 3 } }, HM = function getDeserializeTag() {
        return invertSerializeMap(GM);
      }, jM = function getCmdConfig() {
        var t2 = HM();
        return { qchatCreateServerRole: { service: "qchatRole", sid: 24, cid: 61, params: [{ type: "Property", name: "serverRole", reflectMapper: GM.serverRole }, { type: "Property", name: "antispamTag", reflectMapper: GM.antispamTag }], response: [{ type: "Property", name: "serverRole", reflectMapper: t2.serverRole }] }, qchatDeleteServerRole: { service: "qchatRole", sid: 24, cid: 62, params: [{ type: "Long", name: "serverId" }, { type: "Long", name: "roleId" }] }, qchatUpdateServerRole: { service: "qchatRole", sid: 24, cid: 63, params: [{ type: "Property", name: "updateServerRoleTag", reflectMapper: { serverId: 1, roleId: 2, name: 3, icon: 4, ext: 5, auths: 6, priority: 7 } }, { type: "Property", name: "antispamTag", reflectMapper: GM.antispamTag }], response: [{ type: "Property", name: "serverRole", reflectMapper: t2.serverRole }] }, qchatGetServerRoles: { service: "qchatRole", sid: 24, cid: 64, params: [{ type: "Property", name: "getServerRolesTag", reflectMapper: { serverId: 1, timetag: 2, limit: 3, priority: 4, channelId: 5, categoryId: 6 } }], response: [{ type: "PropertyArray", name: "serverRoles", reflectMapper: t2.serverRole }] }, qchatAddChannelRole: { service: "qchatRole", sid: 24, cid: 65, params: [{ type: "Property", name: "channelRole", reflectMapper: GM.channelRole }], response: [{ type: "Property", name: "channelRole", reflectMapper: t2.channelRole }] }, qchatRemoveChannelRole: { service: "qchatRole", sid: 24, cid: 66, params: [{ type: "Long", name: "serverId" }, { type: "Long", name: "channelId" }, { type: "Long", name: "roleId" }] }, qchatUpdateChannelRole: { service: "qchatRole", sid: 24, cid: 67, params: [{ type: "Property", name: "updateChannelRoleTag", reflectMapper: { serverId: 1, roleId: 2, channelId: 3, auths: 4 } }], response: [{ type: "Property", name: "channelRole", reflectMapper: t2.channelRole }] }, qchatGetChannelRoles: { service: "qchatRole", sid: 24, cid: 68, params: [{ type: "Property", name: "getChannelRolesTag", reflectMapper: { serverId: 1, channelId: 2, timetag: 3, limit: 4 } }], response: [{ type: "PropertyArray", name: "channelRoles", reflectMapper: t2.channelRole }] }, qchatAddMemberRole: { service: "qchatRole", sid: 24, cid: 69, params: [{ type: "Property", name: "memberRole", reflectMapper: GM.memberRole }], response: [{ type: "Property", name: "memberRole", reflectMapper: t2.memberRole }] }, qchatRemoveMemberRole: { service: "qchatRole", sid: 24, cid: 70, params: [{ type: "Property", name: "memberRole", reflectMapper: GM.memberRole }] }, qchatUpdateMemberRole: { service: "qchatRole", sid: 24, cid: 71, params: [{ type: "Property", name: "updateMemberRoleTag", reflectMapper: { serverId: 1, accid: 2, channelId: 3, auths: 4 } }], response: [{ type: "Property", name: "memberRole", reflectMapper: t2.memberRole }] }, qchatGetMemberRoles: { service: "qchatRole", sid: 24, cid: 72, params: [{ type: "Property", name: "getMemberRolesTag", reflectMapper: { serverId: 1, channelId: 2, timetag: 3, limit: 4 } }], response: [{ type: "PropertyArray", name: "memberRoles", reflectMapper: t2.memberRole }] }, qchatAddMembersToServerRole: { service: "qchatRole", sid: 24, cid: 73, params: [{ type: "Long", name: "serverId" }, { type: "Long", name: "roleId" }, { type: "String", name: "accids" }], response: [{ type: "Property", name: "accids", reflectMapper: { 1: "successAccids", 2: "failedAccids" } }] }, qchatRemoveMembersFromServerRole: { service: "qchatRole", sid: 24, cid: 74, params: [{ type: "Long", name: "serverId" }, { type: "Long", name: "roleId" }, { type: "String", name: "accids" }], response: [{ type: "Property", name: "accids", reflectMapper: { 1: "successAccids", 2: "failedAccids" } }] }, qchatGetMembersFromServerRole: { service: "qchatRole", sid: 24, cid: 75, params: [{ type: "Property", name: "getMembersFromServerRoleTag", reflectMapper: { serverId: 1, roleId: 2, timetag: 3, accid: 4, limit: 5 } }], response: [{ type: "PropertyArray", name: "members", reflectMapper: t2.member }] }, qchatGetServerRolesByAccid: { service: "qchatRole", sid: 24, cid: 76, params: [{ type: "Property", name: "getServerRolesByAccidTag", reflectMapper: { serverId: 1, accid: 2, timetag: 3, limit: 4 } }], response: [{ type: "PropertyArray", name: "serverRoles", reflectMapper: t2.serverRole }] }, qchatGetExistingServerRolesByAccids: { service: "qchatRole", sid: 24, cid: 77, params: [{ type: "Long", name: "serverId" }, { type: "String", name: "accids" }], response: [{ type: "String", name: "serverRoles" }] }, qchatGetExistingChannelRolesByServerRoleIds: { service: "qchatRole", sid: 24, cid: 78, params: [{ type: "Long", name: "serverId" }, { type: "Long", name: "channelId" }, { type: "String", name: "roleIds" }], response: [{ type: "PropertyArray", name: "channelRoles", reflectMapper: t2.channelRole }] }, qchatGetExistingAccidsOfMemberRoles: { service: "qchatRole", sid: 24, cid: 79, params: [{ type: "Long", name: "serverId" }, { type: "Long", name: "channelId" }, { type: "String", name: "accids" }], response: [{ type: "PropertyArray", name: "memberRoles", reflectMapper: t2.memberRole }] }, qchatUpdateServerRolePriorities: { service: "qchatRole", sid: 24, cid: 80, params: [{ type: "Long", name: "serverId" }, { type: "PropertyArray", name: "serverRoles", reflectMapper: { serverId: 1, roleId: 2, priority: 7 } }], response: [{ type: "PropertyArray", name: "serverRoles", reflectMapper: t2.serverRole }] }, qchatGetExistingAccidsInServerRole: { service: "qchatRole", sid: 24, cid: 81, params: [{ type: "Long", name: "serverId" }, { type: "Long", name: "roleId" }, { type: "String", name: "accids" }], response: [{ type: "PropertyArray", name: "members", reflectMapper: t2.member }] }, qchatCheckPermission: { service: "qchatRole", sid: 24, cid: 82, params: [{ type: "Property", name: "checkPermissionTag", reflectMapper: GM.checkPermissionTag }], response: [{ type: "Bool", name: "checked" }] }, qchatAddChannelCategoryRole: { service: "qchatRole", sid: 24, cid: 83, params: [{ type: "Property", name: "qchatAddChannelCategoryRoleTag", reflectMapper: GM.channelCategoryRole }], response: [{ type: "Property", name: "channelCategoryRole", reflectMapper: t2.channelCategoryRole }] }, qchatRemoveChannelCategoryRole: { service: "qchatRole", sid: 24, cid: 84, params: [{ type: "Long", name: "serverId" }, { type: "Long", name: "categoryId" }, { type: "Long", name: "roleId" }] }, qchatUpdateChannelCategoryRole: { service: "qchatRole", sid: 24, cid: 85, params: [{ type: "Property", name: "qchatUpdateChannelCategoryRoleTag", reflectMapper: GM.channelCategoryRole }], response: [{ type: "Property", name: "channelCategoryRole", reflectMapper: t2.channelCategoryRole }] }, qchatGetChannelCategoryRole: { service: "qchatRole", sid: 24, cid: 86, params: [{ type: "Property", name: "qchatGetChannelCategoryRoleTag", reflectMapper: GM.qchatGetChannelCategoryRoleTag }], response: [{ type: "PropertyArray", name: "list", reflectMapper: t2.channelCategoryRole }] }, qchatAddChannelCategoryMemberRole: { service: "qchatRole", sid: 24, cid: 87, params: [{ type: "Property", name: "qchatAddChannelCategoryMemberRoleTag", reflectMapper: GM.channelCategoryMemberRole }], response: [{ type: "Property", name: "channelCategoryMemberRole", reflectMapper: t2.channelCategoryMemberRole }] }, qchatRemoveChannelCategoryMemberRole: { service: "qchatRole", sid: 24, cid: 88, params: [{ type: "Long", name: "serverId" }, { type: "Long", name: "categoryId" }, { type: "String", name: "accid" }] }, qchatUpdateChannelCategoryMemberRole: { service: "qchatRole", sid: 24, cid: 89, params: [{ type: "Property", name: "qchatUpdateChannelCategoryMemberRoleTag", reflectMapper: GM.channelCategoryMemberRole }], response: [{ type: "Property", name: "channelCategoryMemberRole", reflectMapper: t2.channelCategoryMemberRole }] }, qchatGetChannelCategoryMemberRole: { service: "qchatRole", sid: 24, cid: 90, params: [{ type: "Property", name: "qchatGetChannelCategoryMemberRoleTag", reflectMapper: GM.qchatGetChannelCategoryMemberRoleTag }], response: [{ type: "PropertyArray", name: "list", reflectMapper: t2.channelCategoryMemberRole }] }, qchatCheckPermissions: { service: "qchatRole", sid: 24, cid: 126, params: [{ type: "Property", name: "checkPermissionsTag", reflectMapper: GM.checkPermissionsTag }], response: [{ type: "PropertyArray", name: "checkPermissionsResult", reflectMapper: { 1: "auth", 2: "isAllow" } }] } };
      }, $M = ["image", "audio", "video", "file"], zM = { time: { type: "number" }, updateTime: { type: "number" }, resendFlag: { type: "boolean" }, persistEnable: { type: "boolean" }, routeEnable: { type: "boolean" }, pushEnable: { type: "boolean" }, needBadge: { type: "boolean" }, needPushNick: { type: "boolean" }, type: { type: "enum", values: hM }, fromClientType: { type: "enum", values: kM }, status: { type: "number" }, toAccids: { type: "object" }, toType: { type: "number" }, attach: { type: "object" }, pushPayload: { type: "object" } };
      function generatorSysMsgForCmd(t2, a2) {
        var u2 = Dt({}, t2), m2 = Dt({ type: a2 || hM.custom }, formatReverse(zM, u2));
        return m2.serverId && m2.channelId && m2.toAccids ? m2.toType = 4 : m2.serverId && m2.toAccids ? m2.toType = 3 : m2.serverId && m2.channelId ? m2.toType = 2 : m2.serverId ? m2.toType = 1 : m2.toAccids ? m2.toType = 5 : m2.toType = 0, m2;
      }
      function generatorSysMsgMarkersForCmd(t2) {
        var a2 = pick(t2, ["msgIdServer", "type"]);
        return formatReverse(zM, a2);
      }
      var WM = ((VM = {})[hM.channelUpdateWhiteBlackIdentify] = function(t2) {
        var a2 = $_();
        return t2.notify = formatUpdateWhiteBlackRole(deserialize(t2.notify, a2.qchatUpdateWhiteBlackRoleTag)), t2;
      }, VM[hM.channelUpdateWhiteBlackIdentifyUser] = function(t2) {
        var a2 = $_();
        return t2.notify = function formatUpdateWhiteBlackMembers(t3) {
          return format(Y_, t3);
        }(deserialize(t2.notify, a2.qchatUpdateWhiteBlackMembersTag)), t2;
      }, VM[hM.updateQuickComment] = function(t2) {
        var a2 = PM();
        return t2.notify = function formatQuickCommentRequest(t3) {
          return format(QM, t3);
        }(deserialize(t2.notify, a2.qchatQuickCommentRequestTag)), t2;
      }, VM[hM.channelCategoryCreate] = function(t2) {
        var a2 = $_();
        return t2.categoryInfo = formatChannelCategory(deserialize(t2.categoryInfo, a2.QChatChannelCategoryInfo)), t2;
      }, VM[hM.channelCategoryUpdate] = function(t2) {
        var a2 = $_();
        return t2.categoryInfo = formatChannelCategory(deserialize(t2.categoryInfo, a2.QChatChannelCategoryInfo)), t2;
      }, VM[hM.channelCategoryUpdateWhiteBlackIdentify] = function(t2) {
        var a2 = $_();
        return t2.notify = formatUpdateWhiteBlackRole(deserialize(t2.notify, a2.qchatUpdateChannelCategoryWhiteBlackRoleTag)), t2;
      }, VM[hM.channelCategoryUpdateWhiteBlackIdentifyUser] = function(t2) {
        var a2 = $_();
        return t2.notify = formatUpdateWhiteBlackRole(deserialize(t2.notify, a2.qchatUpdateChannelCategoryWhiteBlackMembersTag)), t2;
      }, VM[hM.serverIdentifyAdd] = function(t2) {
        var a2 = HM();
        return t2.serverIdentifyInfo = formatRole(deserialize(t2.serverIdentifyInfo, a2.serverRole)), t2;
      }, VM[hM.serverIdentifyRemove] = function(t2) {
        var a2 = HM();
        return t2.serverIdentifyInfo = formatRole(deserialize(t2.serverIdentifyInfo, a2.serverRole)), t2;
      }, VM[hM.serverIdentifyUpdate] = function(t2) {
        var a2 = HM();
        return t2.serverIdentifyInfo = formatRole(deserialize(t2.serverIdentifyInfo, a2.serverRole)), t2;
      }, VM[hM.channelIdentifyUpdate] = function(t2) {
        var a2 = HM();
        return t2.channelIdentifyInfo = formatRole(deserialize(t2.channelIdentifyInfo, a2.channelRole)), t2;
      }, VM[hM.userIdentifyUpdate] = function(t2) {
        var a2 = HM();
        return t2.userIdentifyInfo = formatRole(deserialize(t2.userIdentifyInfo, a2.memberRole)), t2;
      }, VM[hM.myMemberInfoUpdated] = function(t2) {
        var a2, u2 = get(t2, "userInfo.name"), m2 = get(t2, "userInfo.icon");
        return t2.updatedInfos = map$6(a2 = t2.reuseServers).call(a2, function(t3) {
          var a3 = { serverId: t3.serverId };
          return (1 & t3.bits) == 1 && typeof u2 == "string" && Dt(a3, { nickChanged: true, nick: u2 }), (2 & t3.bits) == 2 && typeof m2 == "string" && Dt(a3, { avatarChanged: true, avatar: m2 }), a3;
        }), delete t2.userInfo, delete t2.reuseServers, t2;
      }, VM);
      function formatSystemNotification(t2, a2) {
        var u2 = format(zM, t2);
        if (!u2.attach)
          return u2;
        var m2 = qM(), h2 = $_();
        if (u2.attach.serverInfo && (u2.attach.serverInfo = formatServer(deserialize(u2.attach.serverInfo, m2.serverInfo))), u2.attach.channelInfo && (u2.attach.channelInfo = formatChannel(deserialize(u2.attach.channelInfo, h2.channelInfo))), u2.attach.serverMember && (u2.attach.serverMember = formatMember$1(deserialize(u2.attach.serverMember, m2.memberInfo))), WM[u2.attach.type] && (u2.attach = WM[u2.attach.type](u2.attach)), u2.attach.updateAuths)
          try {
            u2.attach.updateAuths = formatRoleAuths(JSON.parse(u2.attach.updateAuths));
          } catch (t3) {
            a2.error("formatSystemNotification:JSON parse updateAuths error: ", t3);
          }
        return u2.attach.type && (u2.attach.rawType = u2.attach.type, u2.attach.type = hM[u2.attach.type]), u2;
      }
      var KM = { type: { type: "enum", values: uM }, fromClientType: { type: "enum", values: kM }, status: { type: "number" }, resendFlag: { type: "boolean" }, mentionAll: { type: "boolean" }, notifyReason: { type: "enum", values: pM }, pushEnable: { type: "boolean" }, historyEnable: { type: "boolean" }, needBadge: { type: "boolean" }, needPushNick: { type: "boolean" }, routeEnable: { type: "boolean" }, time: { type: "number" }, updateTime: { type: "number" }, mentionAccids: { type: "object" }, mentionRoleIds: { type: "object" }, accidsOfMentionedRoles: { type: "object" }, attach: { type: "object" }, pushPayload: { type: "object" }, isAntispam: { type: "boolean" }, antiSpamInfo: { useCustomContent: { type: "boolean" }, antiSpamContent: { type: "string" }, antiSpamBusinessId: { type: "string" }, antiSpamUsingYidun: { type: "boolean" }, yidunCallback: { type: "string" }, yidunAntiCheating: { type: "object" }, yidunAntiSpamExt: { type: "object" }, yidunAntiSpamRes: { type: "string" } }, replyRefer: { fromAccount: { type: "string", rawKey: "replyMsgFromAccount" }, time: { type: "number", rawKey: "replyMsgTime" }, msgIdServer: { type: "string", rawKey: "replyMsgIdServer" }, msgIdClient: { type: "string", rawKey: "replyMsgIdClient" } }, threadRefer: { fromAccount: { type: "string", rawKey: "threadMsgFromAccount" }, time: { type: "number", rawKey: "threadMsgTime" }, msgIdServer: { type: "string", rawKey: "threadMsgIdServer" }, msgIdClient: { type: "string", rawKey: "threadMsgIdClient" } } };
      function generatorMsgForCmd(t2) {
        t2.onSendBefore, t2.onUploadStart, t2.onUploadDone, t2.onUploadProgress;
        var a2 = __rest(t2, ["onSendBefore", "onUploadStart", "onUploadDone", "onUploadProgress"]), u2 = formatReverse(KM, a2);
        if (u2.msgIdClient = t2.resendFlag ? t2.msgIdClient : Iu(), !u2.msgIdClient)
          throw new Ul("msgIdClient is required for resend a message", "msgIdClient", "required");
        return t2.replyMessage && t2.replyMessage.msgIdServer && (u2.replyMsgFromAccount = t2.replyMessage.fromAccount, u2.replyMsgTime = +t2.replyMessage.time, u2.replyMsgIdServer = t2.replyMessage.msgIdServer, u2.replyMsgIdClient = t2.replyMessage.msgIdClient, t2.replyMessage.threadRefer && t2.replyMessage.threadRefer.msgIdServer ? (u2.threadMsgFromAccount = t2.replyMessage.threadRefer.fromAccount, u2.threadMsgTime = +t2.replyMessage.threadRefer.time, u2.threadMsgIdServer = t2.replyMessage.threadRefer.msgIdServer, u2.threadMsgIdClient = t2.replyMessage.threadRefer.msgIdClient) : (u2.threadMsgFromAccount = t2.replyMessage.fromAccount, u2.threadMsgTime = +t2.replyMessage.time, u2.threadMsgIdServer = t2.replyMessage.msgIdServer, u2.threadMsgIdClient = t2.replyMessage.msgIdClient), delete u2.replyMessage), u2;
      }
      function formatMsgOperatorInfo(t2) {
        return format({ operatorClientType: { type: "enum", values: kM }, pushPayload: { type: "object" } }, t2);
      }
      function formatMsg(t2, a2, u2) {
        var m2, h2;
        return a2 === void 0 && (a2 = {}), __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
          var g2, M2, I2, S2;
          return Ql.wrap(function _callee$(T2) {
            for (; ; )
              switch (T2.prev = T2.next) {
                case 0:
                  return (g2 = format(KM, t2)).deliveryStatus = a2.deliveryStatus ? dM[a2.deliveryStatus] : dM[dM.success], a2.time && (g2.time = a2.time), M2 = PM(), g2.updateContent && (I2 = format({ status: { type: "number" } }, I2 = deserialize(I2 = JSON.parse(g2.updateContent), M2.qchatMsgTag)), g2.updateContent = I2), g2.updateOperatorInfo && (S2 = formatMsgOperatorInfo(deserialize(S2 = JSON.parse(g2.updateOperatorInfo), M2.qchatMsgUpdateTag)), g2.updateOperatorInfo = S2), ((m2 = g2 == null ? void 0 : g2.threadRefer) === null || m2 === void 0 ? void 0 : m2.fromAccount) === "" && delete g2.threadRefer, ((h2 = g2 == null ? void 0 : g2.replyRefer) === null || h2 === void 0 ? void 0 : h2.fromAccount) === "" && delete g2.replyRefer, g2.attach && a2.attachUrl && (g2.attach.url = a2.attachUrl), T2.next = 11, formatMsgAttach(g2, u2);
                case 11:
                  return T2.abrupt("return", T2.sent);
                case 12:
                case "end":
                  return T2.stop();
              }
          }, _callee);
        }));
      }
      function formatMsgAttach(t2, a2) {
        return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
          var u2;
          return Ql.wrap(function _callee2$(m2) {
            for (; ; )
              switch (m2.prev = m2.next) {
                case 0:
                  if (includes($M).call($M, t2.type) && t2.attach && t2.attach.url) {
                    m2.next = 2;
                    break;
                  }
                  return m2.abrupt("return", t2);
                case 2:
                  if (a2 && a2.cloudStorage && typeof a2.cloudStorage.getPrivateUrl == "function" && typeof a2.cloudStorage.getOriginUrl == "function") {
                    m2.next = 4;
                    break;
                  }
                  return m2.abrupt("return", t2);
                case 4:
                  if (!(indexOf(u2 = t2.attach.url).call(u2, "_im_url=1") < 0)) {
                    m2.next = 7;
                    break;
                  }
                  return t2.attach.url = a2.cloudStorage.getPrivateUrl(t2.attach.url), m2.abrupt("return", t2);
                case 7:
                  return m2.prev = 7, m2.next = 10, a2.cloudStorage.getOriginUrl(t2.attach.url);
                case 10:
                  t2.attach.url = m2.sent, m2.next = 16;
                  break;
                case 13:
                  throw m2.prev = 13, m2.t0 = m2.catch(7), new Ul('url "' + t2.attach.url + '" parse error', "message.attach.url", "parse error");
                case 16:
                  return m2.abrupt("return", t2);
                case 17:
                case "end":
                  return m2.stop();
              }
          }, _callee2, null, [[7, 13]]);
        }));
      }
      function formatMsgs(t2, a2, u2) {
        return a2 === void 0 && (a2 = {}), __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
          var m2;
          return Ql.wrap(function _callee3$(h2) {
            for (; ; )
              switch (h2.prev = h2.next) {
                case 0:
                  if (Dn(t2) && t2.length > 0) {
                    h2.next = 2;
                    break;
                  }
                  return h2.abrupt("return", []);
                case 2:
                  return m2 = map$6(t2).call(t2, function(t3) {
                    return formatMsg(t3, a2, u2);
                  }), h2.next = 5, zi.all(m2);
                case 5:
                  return h2.abrupt("return", h2.sent);
                case 6:
                case "end":
                  return h2.stop();
              }
          }, _callee3);
        }));
      }
      var YM = { totalCount: { type: "number" }, lastUpdateTime: { type: "number" }, details: { type: "object" } };
      function formatQuickComments(t2) {
        var a2 = map$6(t2).call(t2, function(t3) {
          var a3, u3 = format(YM, t3);
          return u3.details = map$6(a3 = u3.details).call(a3, function(t4) {
            var a4 = t4.createTime ? Uu(t4.createTime) : 0;
            return a4 = isNaN(a4) ? 0 : a4, { count: t4.count, hasSelf: t4.self, severalAccids: t4.topN, type: t4.type, createTime: a4 };
          }), u3;
        }), u2 = {};
        return forEach$1(a2).call(a2, function(t3) {
          return u2[t3.msgIdServer] = t3;
        }), u2;
      }
      var QM = { type: { type: "number" }, time: { type: "number" }, opeType: { type: "number" } };
      var JM = { includeSelf: { type: "number" }, order: { type: "enum", values: U_ }, sort: { type: "enum", values: lM }, msgTypes: { type: "object" }, subTypes: { type: "object" } };
      var XM = { hasMore: { type: "boolean" }, nextTimetag: { type: "number" }, cursor: { type: "string" } };
      var ZM = { 6: function _(t2) {
        return this.core.qchatChannel.subscribeForVisitorService.deleteAutoSetInServerId(t2.serverId), true;
      }, 16: function _(t2) {
        return this.core.qchatChannel.subscribeForVisitorService.deleteAutoSetInChannel(t2.serverId, t2.channelId), true;
      }, 26: function _(t2) {
        var a2 = get(t2, "attach.addAccids");
        return a2 && includes(a2).call(a2, this.core.account) && this.core.eventBus.emit("qchatChannel/serverIdentifyChange", t2), true;
      }, 27: function _(t2) {
        var a2 = get(t2, "attach.deleteAccids");
        return a2 && includes(a2).call(a2, this.core.account) && this.core.eventBus.emit("qchatChannel/serverIdentifyChange", t2), true;
      }, 31: function _(t2) {
        var a2, u2;
        return t2.attach.event === 1 ? ((u2 = (a2 = this.core.qchatChannel) === null || a2 === void 0 ? void 0 : a2.config) === null || u2 === void 0 ? void 0 : u2.autoSubscribe) && this.core.qchatChannel.subscribeChannel({ type: 1, opeType: 1, channels: [{ serverId: t2.serverId, channelId: t2.channelId }], isInternalTrigger: true }) : t2.attach.event === 2 && (this.core.eventBus.emit("qchatChannel/autoUnSubscribe", t2), this.core.eventBus.emit("qchatMedia/serverOrChannelLeave", t2)), true;
      }, 32: function _(t2) {
        var a2, u2;
        return t2.attach.event === 2 ? (this.core.eventBus.emit("qchatChannel/autoUnSubscribe", t2), this.core.eventBus.emit("qchatMedia/serverOrChannelLeave", t2)) : t2.attach.event === 1 && (this.core.qchatChannel.subscribeForVisitorService.deleteServer(t2.serverId), ((u2 = (a2 = this.core.qchatChannel) === null || a2 === void 0 ? void 0 : a2.config) === null || u2 === void 0 ? void 0 : u2.autoSubscribe) && this.core.qchatServer.subscribeServer({ type: 4, opeType: 1, servers: [{ serverId: t2.serverId }], isInternalTrigger: true })), true;
      }, 34: function _(t2) {
        return t2.attach.event === 2 && this.core.qchatChannel.subscribeForVisitorService.unSubscribeChannel(t2.serverId, t2.channelId), true;
      }, 101: function _(t2) {
        var a2 = pick(t2, ["serverId", "channelId", "ext", "fromAccount", "fromNick", "time"]);
        return this.logger.log("qchat on recvTypingEvent: ", a2), this.core.emit("recvTypingEvent", a2), this.core.qchatMsg.emit("recvTypingEvent", a2), false;
      } }, eI = function() {
        function NotificationModuleService(t3) {
          this.core = t3, this.logger = t3.logger;
        }
        var t2 = NotificationModuleService.prototype;
        return t2.sendSystemNotification = function sendSystemNotification(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a2, u2;
            return Ql.wrap(function _callee$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return m2.next = 2, this.core.sendCmd("qchatSendCustomSysMsg", { sysMsg: generatorSysMsgForCmd(t3) });
                  case 2:
                    return a2 = m2.sent, u2 = formatSystemNotification(a2.content.sysMsg, this.logger), this.logger.getDebugMode() ? this.logger.debug("sendCustomSysMsg success", u2) : this.logger.log("sendCustomSysMsg success", u2.serverId, u2.channelId, u2.msgIdServer), m2.abrupt("return", u2);
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee, this);
          }));
        }, t2.updateSystemNotification = function updateSystemNotification(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a2, u2, m2, h2, g2;
            return Ql.wrap(function _callee2$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return a2 = t3.systemNotification, u2 = __rest(t3, ["systemNotification"]), m2 = pick(a2, ["msgIdServer", "type", "body", "ext", "status"]), h2 = generatorSysMsgForCmd(m2), M2.next = 5, this.core.sendCmd("qchatUpdateSystemNotification", { sysMsg: h2, qchatMsgUpdateTag: Dt(Dt({}, u2), { operatorAccount: this.core.account, operatorClientType: kM.Web, pushPayload: Un(t3.pushPayload), routeEnable: Kd.boolean(t3, "routeEnable") }) });
                  case 5:
                    return g2 = M2.sent, M2.abrupt("return", formatSystemNotification(g2.content.sysMsg, this.logger));
                  case 7:
                  case "end":
                    return M2.stop();
                }
            }, _callee2, this);
          }));
        }, t2.markSystemNotificationsRead = function markSystemNotificationsRead(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a2;
            return Ql.wrap(function _callee3$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return u2.next = 2, this.core.sendCmd("qchatMarkSysMsgRead", { sysMsgs: map$6(a2 = t3.systemNotifications).call(a2, function(t4) {
                      return generatorSysMsgMarkersForCmd(t4);
                    }) });
                  case 2:
                  case "end":
                    return u2.stop();
                }
            }, _callee3, this);
          }));
        }, t2.onSysMsg = function onSysMsg(t3) {
          var a2 = t3.content.sysMsg;
          if (a2) {
            var u2 = formatSystemNotification(a2, this.core.logger), m2 = ZM[hM[u2.type]];
            if (m2) {
              if (m2.call(this, u2) === false)
                return;
            }
            var h2 = { feature: "default", systemNotifications: [u2] };
            this.logger.log("qchat on systemNotification: ", h2), this.core.emit("systemNotification", h2), this.core.qchatMsg.emit("systemNotification", h2);
          } else
            this.core.logger.warn("No sysMsg in onSysMsg packet");
        }, t2.onMultiSysMsg = function onMultiSysMsg(t3) {
          var a2 = t3.content.sysMsg;
          if (a2) {
            var u2 = formatSystemNotification(a2, this.logger);
            this.core.emit("systemNotificationUpdate", u2), this.core.qchatMsg.emit("systemNotificationUpdate", u2);
          }
        }, t2.onSyncSysMsg = function onSyncSysMsg(t3) {
          var a2 = this, u2 = t3.content.systemNotifications;
          if (u2 && u2.length > 0) {
            var m2 = map$6(u2).call(u2, function(t4) {
              return formatSystemNotification(t4, a2.logger);
            });
            this.core.emit("systemNotification", { feature: "sync", systemNotifications: m2 }), this.core.qchatMsg.emit("systemNotification", { feature: "sync", systemNotifications: m2 });
          } else
            this.logger.warn("sync system notification not exist");
        }, NotificationModuleService;
      }(), tI = ["image", "audio", "video", "file"], rI = function() {
        function MessageModuleService(t3) {
          var a2 = this;
          this.markMessageRead = throttle(function(t4) {
            return __awaiter(a2, void 0, void 0, Ql.mark(function _callee() {
              var a3, u2;
              return Ql.wrap(function _callee$(m2) {
                for (; ; )
                  switch (m2.prev = m2.next) {
                    case 0:
                      return m2.next = 2, this.core.sendCmd("qchatMarkMessageRead", { markMsgReadTag: t4 });
                    case 2:
                      a3 = m2.sent, u2 = formatUnreadInfo(a3.content.unreadInfo), this.core.eventBus.emit("qchatChannel/updateUnreads", [u2]);
                    case 5:
                    case "end":
                      return m2.stop();
                  }
              }, _callee, this);
            }));
          }, 200), this.core = t3, this.logger = t3.logger;
        }
        var t2 = MessageModuleService.prototype;
        return t2.sendMessage = function sendMessage(t3) {
          var a2, u2, m2, h2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var g2, M2, I2, S2, T2, C2;
            return Ql.wrap(function _callee2$(b2) {
              for (; ; )
                switch (b2.prev = b2.next) {
                  case 0:
                    if (!(indexOf(tI).call(tI, t3.type) > -1)) {
                      b2.next = 4;
                      break;
                    }
                    return b2.next = 3, this.doSendFile(t3);
                  case 3:
                    t3.attach = b2.sent;
                  case 4:
                    return g2 = generatorMsgForCmd(Dt({ fromAccount: this.core.account }, t3)), b2.next = 7, formatMsg(g2, { time: new Date().getTime(), deliveryStatus: dM.sending }, this.core);
                  case 7:
                    M2 = b2.sent;
                    try {
                      t3.onSendBefore && t3.onSendBefore(M2);
                    } catch (t4) {
                      this.logger.error("sendMsg: options.onSendBefore error", t4);
                    }
                    return b2.prev = 9, b2.next = 12, this.core.sendCmd("qchatSendMsg", { qchatMsg: g2 });
                  case 12:
                    I2 = b2.sent, b2.next = 22;
                    break;
                  case 15:
                    return b2.prev = 15, b2.t0 = b2.catch(9), b2.next = 19, formatMsg(g2, { time: new Date().getTime(), deliveryStatus: dM.failed, attachUrl: (a2 = M2.attach) === null || a2 === void 0 ? void 0 : a2.url }, this.core);
                  case 19:
                    throw S2 = b2.sent, b2.t0.msg = S2, b2.t0;
                  case 22:
                    return T2 = I2.content, b2.next = 25, formatMsg(Dt({}, T2.qchatMsg), { deliveryStatus: dM.success, attachUrl: (u2 = M2.attach) === null || u2 === void 0 ? void 0 : u2.url }, this.core);
                  case 25:
                    if (!(C2 = b2.sent).isAntispam) {
                      b2.next = 29;
                      break;
                    }
                    throw { code: 10403, msg: C2, message: ((m2 = C2 == null ? void 0 : C2.antiSpamInfo) === null || m2 === void 0 ? void 0 : m2.yidunAntiSpamRes) || "message has be antispam", isAntispam: true, yidunAntiSpamRes: ((h2 = C2 == null ? void 0 : C2.antiSpamInfo) === null || h2 === void 0 ? void 0 : h2.yidunAntiSpamRes) || "" };
                  case 29:
                    return b2.abrupt("return", C2);
                  case 30:
                  case "end":
                    return b2.stop();
                }
            }, _callee2, this, [[9, 15]]);
          }));
        }, t2.doSendFile = function doSendFile(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a2;
            return Ql.wrap(function _callee3$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    if (validate({ type: { type: "enum", values: ["image", "audio", "video", "file"] }, attach: { type: "object", rules: { url: { type: "string", allowEmpty: false } }, required: false }, maxSize: { type: "number", min: 1, required: false } }, t3), a2 = t3.attach) {
                      u2.next = 15;
                      break;
                    }
                    if (this.core.cloudStorage && this.core.cloudStorage.uploadFile) {
                      u2.next = 5;
                      break;
                    }
                    throw new Error('Service "cloudStorage" does not exist');
                  case 5:
                    return u2.prev = 5, u2.next = 8, this.core.cloudStorage.uploadFile(t3);
                  case 8:
                    a2 = u2.sent, u2.next = 15;
                    break;
                  case 11:
                    throw u2.prev = 11, u2.t0 = u2.catch(5), this.logger.error("sendFile:: upload File error or abort.", u2.t0), u2.t0;
                  case 15:
                    return u2.abrupt("return", a2);
                  case 16:
                  case "end":
                    return u2.stop();
                }
            }, _callee3, this, [[5, 11]]);
          }));
        }, t2.resendMessage = function resendMessage(t3) {
          var a2, u2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var m2, h2, g2, M2, I2;
            return Ql.wrap(function _callee4$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    return (m2 = generatorMsgForCmd(Dt(Dt({}, t3), { resendFlag: true }))).deliveryStatus = dM.sending, S2.prev = 2, S2.next = 5, this.core.sendCmd("qchatSendMsg", { qchatMsg: m2 });
                  case 5:
                    h2 = S2.sent, S2.next = 15;
                    break;
                  case 8:
                    return S2.prev = 8, S2.t0 = S2.catch(2), S2.next = 12, formatMsg(m2, { time: new Date().getTime(), deliveryStatus: dM.failed }, this.core);
                  case 12:
                    throw g2 = S2.sent, S2.t0.msg = g2, S2.t0;
                  case 15:
                    return M2 = h2.content, S2.next = 18, formatMsg(Dt({}, M2.qchatMsg), { deliveryStatus: dM.success }, this.core);
                  case 18:
                    if (!(I2 = S2.sent).isAntispam) {
                      S2.next = 22;
                      break;
                    }
                    throw { code: 10403, msg: I2, message: ((a2 = I2 == null ? void 0 : I2.antiSpamInfo) === null || a2 === void 0 ? void 0 : a2.yidunAntiSpamRes) || "message has be antispam", isAntispam: true, yidunAntiSpamRes: ((u2 = I2 == null ? void 0 : I2.antiSpamInfo) === null || u2 === void 0 ? void 0 : u2.yidunAntiSpamRes) || "" };
                  case 22:
                    return S2.abrupt("return", I2);
                  case 23:
                  case "end":
                    return S2.stop();
                }
            }, _callee4, this, [[2, 8]]);
          }));
        }, t2.doUpdateMessage = function doUpdateMessage(t3) {
          var a2, u2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var m2, h2, g2, M2, I2;
            return Ql.wrap(function _callee5$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    return m2 = t3.message, h2 = __rest(t3, ["message"]), (g2 = generatorMsgForCmd(m2)).msgIdClient = void 0, g2.time = m2.time, S2.next = 6, this.core.sendCmd("qchatUpdateMessage", { qchatMsg: g2, qchatMsgUpdateTag: Dt(Dt({}, h2), { operatorAccount: this.core.account, operatorClientType: kM.Web, pushPayload: Un(t3.pushPayload), routeEnable: Kd.boolean(t3, "routeEnable") }) });
                  case 6:
                    return M2 = S2.sent, S2.next = 9, formatMsg(M2.content.qchatMsg, {}, this.core);
                  case 9:
                    if (I2 = S2.sent, this.core.eventBus.emit("qchatChannel/changeUnread", I2, true), !M2.content.qchatMsg.isAntispam) {
                      S2.next = 14;
                      break;
                    }
                    throw { code: 10403, msg: g2, message: ((a2 = M2.content.qchatMsg) === null || a2 === void 0 ? void 0 : a2.yidunAntiSpamRes) || "message has be antispam", isAntispam: true, yidunAntiSpamRes: ((u2 = M2.content.qchatMsg) === null || u2 === void 0 ? void 0 : u2.yidunAntiSpamRes) || "" };
                  case 14:
                    return S2.abrupt("return", I2);
                  case 15:
                  case "end":
                    return S2.stop();
                }
            }, _callee5, this);
          }));
        }, t2.getHistoryMessage = function getHistoryMessage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var a2, u2, m2, h2 = this;
            return Ql.wrap(function _callee6$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return g2.next = 2, this.core.sendCmd("qchatGetHistoryMsg", { getHistoryMsgTag: Dt(Dt({}, t3), { reverse: reverse$1(t3) ? 1 : 0 }) });
                  case 2:
                    return u2 = g2.sent, m2 = u2.content, g2.next = 6, zi.all(map$6(a2 = m2.qchatMsgs).call(a2, function(t4) {
                      return formatMsg(t4, {}, h2.core);
                    }));
                  case 6:
                    return g2.abrupt("return", g2.sent);
                  case 7:
                  case "end":
                    return g2.stop();
                }
            }, _callee6, this);
          }));
        }, t2.getMentionedMeMessages = function getMentionedMeMessages(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            var a2, u2, m2, h2, g2, M2 = this;
            return Ql.wrap(function _callee7$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    return I2.next = 2, this.core.sendCmd("qchatGetMentionedMeMessages", { tag: t3 });
                  case 2:
                    return u2 = I2.sent, m2 = u2.content, S2 = m2.page, h2 = format(XM, S2), I2.next = 7, zi.all(map$6(a2 = m2.datas).call(a2, function(t4) {
                      return formatMsg(t4, {}, M2.core);
                    }));
                  case 7:
                    return g2 = I2.sent, I2.abrupt("return", { pageInfo: h2, messages: g2 });
                  case 9:
                  case "end":
                    return I2.stop();
                }
              var S2;
            }, _callee7, this);
          }));
        }, t2.areMentionedMeMessages = function areMentionedMeMessages(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var a2, u2, m2;
            return Ql.wrap(function _callee8$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    a2 = {}, u2 = 0;
                  case 2:
                    if (!(u2 < t3.length)) {
                      h2.next = 13;
                      break;
                    }
                    if ((m2 = t3[u2]).fromAccount !== this.core.account) {
                      h2.next = 7;
                      break;
                    }
                    return a2[m2.msgIdClient] = false, h2.abrupt("continue", 10);
                  case 7:
                    return h2.next = 9, this.core.qchatChannel.subscribeModuleService.getMentionedFlag(m2, true);
                  case 9:
                    a2[m2.msgIdClient] = h2.sent;
                  case 10:
                    u2++, h2.next = 2;
                    break;
                  case 13:
                    return h2.abrupt("return", a2);
                  case 14:
                  case "end":
                    return h2.stop();
                }
            }, _callee8, this);
          }));
        }, t2.getLastMessageOfChannels = function getLastMessageOfChannels(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            var a2, u2, m2;
            return Ql.wrap(function _callee9$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return h2.next = 2, this.core.sendCmd("qchatGetLastMessageOfChannels", { tag: t3 });
                  case 2:
                    return a2 = h2.sent, u2 = a2.content.msgs, h2.next = 6, formatMsgs(u2, {}, this.core);
                  case 6:
                    return m2 = h2.sent, h2.abrupt("return", reduce(m2).call(m2, function(t4, a3) {
                      return t4[a3.channelId] = a3, t4;
                    }, {}));
                  case 8:
                  case "end":
                    return h2.stop();
                }
            }, _callee9, this);
          }));
        }, t2.messageSearchByPage = function messageSearchByPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            var a2, u2, m2, h2, g2;
            return Ql.wrap(function _callee10$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return M2.next = 2, this.core.sendCmd("qchatMessageSearchByPage", { qchatMessageSearchByPageTag: Dt(Dt({}, (I2 = t3, formatReverse(JM, I2))), { includeSelf: t3.includeSelf ? 1 : "" }) });
                  case 2:
                    return a2 = M2.sent, u2 = a2.content, m2 = u2.datas, h2 = u2.listQueryTag, M2.next = 6, formatMsgs(m2, {}, this.core);
                  case 6:
                    return g2 = M2.sent, M2.abrupt("return", { listQueryTag: { hasMore: +h2.hasMore == 1, nextTimetag: h2.nextTimetag ? Uu(h2.nextTimetag) : 0, cursor: h2.cursor }, datas: g2 });
                  case 8:
                  case "end":
                    return M2.stop();
                }
              var I2;
            }, _callee10, this);
          }));
        }, t2.onMsg = function onMsg(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            var a2, u2;
            return Ql.wrap(function _callee11$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    if (a2 = t3.content.qchatMsg) {
                      m2.next = 4;
                      break;
                    }
                    return this.logger.warn("No qchatMsg in qchatMsg packet"), m2.abrupt("return");
                  case 4:
                    return m2.next = 6, formatMsg(a2, {}, this.core);
                  case 6:
                    u2 = m2.sent, this.core.eventBus.emit("qchatChannel/changeUnread", u2, false), this.core.emit("message", u2), this.core.qchatMsg.emit("message", u2);
                  case 10:
                  case "end":
                    return m2.stop();
                }
            }, _callee11, this);
          }));
        }, t2.onRecvUnreadInfo = function onRecvUnreadInfo(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            var a2, u2;
            return Ql.wrap(function _callee12$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    if (a2 = t3.content.qchatMsg) {
                      m2.next = 3;
                      break;
                    }
                    return m2.abrupt("return");
                  case 3:
                    return m2.next = 5, formatMsg(a2);
                  case 5:
                    u2 = m2.sent, this.core.eventBus.emit("qchatChannel/changeUnread", u2, false);
                  case 7:
                  case "end":
                    return m2.stop();
                }
            }, _callee12, this);
          }));
        }, t2.onMultiSyncRead = function onMultiSyncRead(t3) {
          var a2 = t3.content.unreadInfo;
          if (a2) {
            var u2 = formatUnreadInfo(a2);
            this.core.eventBus.emit("qchatChannel/updateUnreads", [u2]);
          }
        }, t2.onMultiSyncServersRead = function onMultiSyncServersRead(t3) {
          var a2 = t3.content.qchatMultiSyncServersMessageReadTag;
          if (a2) {
            var u2 = formatClearServersUnread(a2), m2 = u2.successServerIds, h2 = u2.ackTimestamp;
            this.core.eventBus.emit("qchatChannel/clearUnreadCountByServers", m2, h2);
          }
        }, t2.onRecvMsgUpdate = function onRecvMsgUpdate(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            var a2, u2, m2, h2;
            return Ql.wrap(function _callee13$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    if (a2 = t3.content.qchatMsg, u2 = t3.content.qchatMsgUpdateInfo, a2) {
                      g2.next = 4;
                      break;
                    }
                    return g2.abrupt("return");
                  case 4:
                    return g2.next = 6, formatMsg(a2, {}, this.core);
                  case 6:
                    m2 = g2.sent, h2 = formatMsgOperatorInfo(u2), this.core.eventBus.emit("qchatChannel/changeUnread", m2, true), this.core.emit("messageUpdate", m2, h2), this.core.qchatMsg.emit("messageUpdate", m2, h2);
                  case 11:
                  case "end":
                    return g2.stop();
                }
            }, _callee13, this);
          }));
        }, MessageModuleService;
      }(), nI = function() {
        function ExtendModuleService(t3) {
          var a2 = this;
          this._sendTypingEvent = throttle(function(t4) {
            return __awaiter(a2, void 0, void 0, Ql.mark(function _callee() {
              return Ql.wrap(function _callee$(a3) {
                for (; ; )
                  switch (a3.prev = a3.next) {
                    case 0:
                      return a3.next = 2, this.core.sendCmd("qchatSendCustomSysMsg", { sysMsg: generatorSysMsgForCmd(Dt(Dt({}, t4), { resendFlag: false, persistEnable: false, routeEnable: false, pushEnable: false, needBadge: false, needPushNick: false }), hM.msgTyping) });
                    case 2:
                    case "end":
                      return a3.stop();
                  }
              }, _callee, this);
            }));
          }, 3e3), this.core = t3, this.logger = t3.logger, this.lastChannelIdInTyping = "";
        }
        var t2 = ExtendModuleService.prototype;
        return t2.getMessageHistoryByIds = function getMessageHistoryByIds(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a2, u2;
            return Ql.wrap(function _callee2$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return m2.next = 2, this.core.sendCmd("qchatGetMessageHistoryByIds", { channelInfo: { serverId: t3.serverId, channelId: t3.channelId }, messageReferList: t3.messageReferList });
                  case 2:
                    return u2 = m2.sent, m2.abrupt("return", zi.all(map$6(a2 = u2.content.qchatMsgs).call(a2, function(t4) {
                      return formatMsg(t4);
                    })));
                  case 4:
                  case "end":
                    return m2.stop();
                }
            }, _callee2, this);
          }));
        }, t2.getReferMessages = function getReferMessages(t3) {
          var a2, u2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var m2;
            return Ql.wrap(function _callee3$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    if (((a2 = t3.message.replyRefer) === null || a2 === void 0 ? void 0 : a2.msgIdServer) && ((u2 = t3.message.threadRefer) === null || u2 === void 0 ? void 0 : u2.msgIdServer)) {
                      h2.next = 2;
                      break;
                    }
                    throw new Error("Message has no reply");
                  case 2:
                    return h2.next = 4, this.getMessageHistoryByIds({ serverId: t3.message.serverId, channelId: t3.message.channelId, messageReferList: [t3.message.replyRefer, t3.message.threadRefer] });
                  case 4:
                    if (m2 = h2.sent, t3.referType !== gM[gM.all]) {
                      h2.next = 9;
                      break;
                    }
                    return h2.abrupt("return", { replyMessage: m2[0], threadMessage: m2[1] });
                  case 9:
                    if (t3.referType !== gM[gM.reply]) {
                      h2.next = 13;
                      break;
                    }
                    return h2.abrupt("return", { replyMessage: m2[0] });
                  case 13:
                    if (t3.referType !== gM[gM.thread]) {
                      h2.next = 15;
                      break;
                    }
                    return h2.abrupt("return", { threadMessage: m2[1] });
                  case 15:
                    return h2.abrupt("return", { replyMessage: m2[0], threadMessage: m2[1] });
                  case 16:
                  case "end":
                    return h2.stop();
                }
            }, _callee3, this);
          }));
        }, t2.getThreadMessages = function getThreadMessages(t3) {
          var a2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var u2, m2, h2, g2, M2;
            return Ql.wrap(function _callee4$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    return m2 = ((a2 = t3.message.threadRefer) === null || a2 === void 0 ? void 0 : a2.msgIdServer) ? Dt({ serverId: t3.message.serverId, channelId: t3.message.channelId }, t3.message.threadRefer) : t3.message, I2.next = 3, this.core.sendCmd("qchatGetThreadMessages", { qchatMsg: m2, getThreadHistoryMsgTag: Dt(Dt({}, t3.messageQueryOption), { reverse: Kd.boolean(t3.messageQueryOption, "reverse") }) });
                  case 3:
                    return h2 = I2.sent, I2.next = 6, formatMsg(h2.content.thread);
                  case 6:
                    return g2 = I2.sent, I2.next = 9, zi.all(map$6(u2 = h2.content.qchatMsgs).call(u2, function(t4) {
                      return formatMsg(t4);
                    }));
                  case 9:
                    return M2 = I2.sent, I2.abrupt("return", { thread: g2, threadInfo: { messageCount: +h2.content.threadInfo.messageCount, lastMessageTimestamp: +h2.content.threadInfo.lastMessageTimestamp }, messages: M2 });
                  case 11:
                  case "end":
                    return I2.stop();
                }
            }, _callee4, this);
          }));
        }, t2.getThreadRootMessagesMeta = function getThreadRootMessagesMeta(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var a2, u2, m2, h2;
            return Ql.wrap(function _callee5$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return a2 = t3.threadRootMessages, u2 = __rest(t3, ["threadRootMessages"]), g2.next = 3, this.core.sendCmd("qchatGetThreadRootMessagesMeta", { qchatMsgs: a2, tag: u2 });
                  case 3:
                    if (m2 = g2.sent, !((h2 = m2.content.metas) && h2.length > 0)) {
                      g2.next = 7;
                      break;
                    }
                    return g2.abrupt("return", map$6(h2).call(h2, function(t4) {
                      return Dt(Dt({}, t4), { total: Uu(t4.total), timestamp: Uu(t4.timestamp), msgTime: Uu(t4.msgTime) });
                    }));
                  case 7:
                    return g2.abrupt("return", []);
                  case 8:
                  case "end":
                    return g2.stop();
                }
            }, _callee5, this);
          }));
        }, t2.getQuickComments = function getQuickComments(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var a2, u2, m2;
            return Ql.wrap(function _callee6$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return h2.next = 2, this.core.sendCmd("qchatGetQuickComments", { tag: { serverId: t3.serverId, channelId: t3.channelId, msgIdServerList: Un(map$6(a2 = t3.msgList).call(a2, function(t4) {
                      return t4.msgIdServer;
                    })) } });
                  case 2:
                    return u2 = h2.sent, m2 = u2.content.quickCommentResponse, h2.abrupt("return", formatQuickComments(m2));
                  case 5:
                  case "end":
                    return h2.stop();
                }
            }, _callee6, this);
          }));
        }, t2.updateQuickComment = function updateQuickComment(t3, a2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            var u2, m2, h2, g2, M2, I2;
            return Ql.wrap(function _callee7$(S2) {
              for (; ; )
                switch (S2.prev = S2.next) {
                  case 0:
                    return validate({ type: { type: "number" }, commentMessage: { type: "object", rules: { msgIdServer: { type: "string", allowEmpty: false } } } }, t3), u2 = t3.commentMessage, m2 = u2.serverId, h2 = u2.channelId, g2 = u2.fromAccount, M2 = u2.msgIdServer, I2 = u2.time, S2.next = 4, this.core.sendCmd("qchatUpdateQuickComment", { tag: { serverId: m2, channelId: h2, fromAccount: g2, msgIdServer: M2, time: I2, type: t3.type, opeType: a2, opeAccid: this.core.account } });
                  case 4:
                  case "end":
                    return S2.stop();
                }
            }, _callee7, this);
          }));
        }, t2.sendTypingEvent = function sendTypingEvent(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            return Ql.wrap(function _callee8$(a2) {
              for (; ; )
                switch (a2.prev = a2.next) {
                  case 0:
                    if (t3.channelId !== this.lastChannelIdInTyping) {
                      a2.next = 4;
                      break;
                    }
                    return this.logger.log("qchatMsg sendTypingEvent throttle"), this._sendTypingEvent(t3), a2.abrupt("return");
                  case 4:
                    this.lastChannelIdInTyping = t3.channelId, this._sendTypingEvent.flush(), this._sendTypingEvent(t3);
                  case 7:
                  case "end":
                    return a2.stop();
                }
            }, _callee8, this);
          }));
        }, ExtendModuleService;
      }(), aI = function(t2) {
        function QChatMsgService(a3) {
          var u2;
          return (u2 = t2.call(this, "qchatMsg", a3) || this).core = a3, u2.lastChannelIdInMark = "", registerParser({ cmdMap: xM, cmdConfig: LM() }), u2.notificationModuleService = new eI(a3), u2.messageModuleService = new rI(a3), u2.extendModuleService = new nI(a3), u2;
        }
        Nt(QChatMsgService, t2);
        var a2 = QChatMsgService.prototype;
        return a2.sendMessage = function sendMessage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            return Ql.wrap(function _callee$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, type: { type: "enum", values: getEnumKeys(uM) }, ext: { type: "string", required: false }, mentionAll: { type: "boolean", required: false }, mentionAccids: { type: "array", itemType: "string", required: false }, mentionRoleIds: { type: "array", itemType: "string", required: false, min: 1 }, historyEnable: { type: "boolean", required: false }, pushEnable: { type: "boolean", required: false } }, t3), a3.next = 3, this.messageModuleService.sendMessage(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee, this);
          }));
        }, a2.updateMessage = function updateMessage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            return Ql.wrap(function _callee2$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    if (validate({ message: { type: "object", rules: { serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, msgIdServer: { type: "string", allowEmpty: false }, time: { type: "number", min: 0 }, body: { type: "string", required: false }, ext: { type: "string", required: false } } } }, t3), !(typeof t3.message.status == "number" && t3.message.status < 1e4)) {
                      a3.next = 3;
                      break;
                    }
                    throw new ql("Status should be greater than or equal to 10000");
                  case 3:
                    return a3.next = 5, this.messageModuleService.doUpdateMessage(t3);
                  case 5:
                    return a3.abrupt("return", a3.sent);
                  case 6:
                  case "end":
                    return a3.stop();
                }
            }, _callee2, this);
          }));
        }, a2.resendMessage = function resendMessage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            return Ql.wrap(function _callee3$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, msgIdClient: { type: "string", allowEmpty: false } }, t3), a3.next = 3, this.messageModuleService.resendMessage(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee3, this);
          }));
        }, a2.deleteMessage = function deleteMessage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a3;
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ message: { type: "object", rules: { serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, msgIdServer: { type: "string", allowEmpty: false }, time: { type: "number", min: 0 } } } }, t3), (a3 = JSON.parse(Un(t3))).message.status = 2, u2.next = 5, this.messageModuleService.doUpdateMessage(a3);
                  case 5:
                    return u2.abrupt("return", u2.sent);
                  case 6:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.revokeMessage = function revokeMessage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var a3;
            return Ql.wrap(function _callee5$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ message: { type: "object", rules: { serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, msgIdServer: { type: "string", allowEmpty: false }, time: { type: "number", min: 0 } } } }, t3), (a3 = JSON.parse(Un(t3))).message = pick(a3.message, ["serverId", "channelId", "msgIdServer", "time"]), a3.message.status = 1, u2.next = 6, this.messageModuleService.doUpdateMessage(a3);
                  case 6:
                    return u2.abrupt("return", u2.sent);
                  case 7:
                  case "end":
                    return u2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.markMessageRead = function markMessageRead(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            return Ql.wrap(function _callee6$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    validate({ serverId: { type: "string" }, channelId: { type: "string" }, time: { type: "number", min: 0 } }, t3), t3.channelId !== this.lastChannelIdInMark && this.messageModuleService.markMessageRead.flush(), this.lastChannelIdInMark = t3.channelId, this.messageModuleService.markMessageRead(t3);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee6, this);
          }));
        }, a2.replyMessage = function replyMessage(t3) {
          validate({ replyMessage: { type: "object", rules: { msgIdServer: { type: "string", allowEmpty: false } } } }, t3);
          var replyMessage2 = t3.replyMessage;
          if (t3.serverId !== replyMessage2.serverId || t3.channelId !== replyMessage2.channelId)
            throw new ql("Forbid replying to message from other server, channel");
          return this.sendMessage(t3);
        }, a2.getMessageHistoryByIds = function getMessageHistoryByIds(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            return Ql.wrap(function _callee7$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, messageReferList: { type: "array", rules: { msgIdServer: { type: "string", allowEmpty: false }, time: { type: "number" } } } }, t3), a3.next = 3, this.extendModuleService.getMessageHistoryByIds(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee7, this);
          }));
        }, a2.getReferMessages = function getReferMessages(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            return Ql.wrap(function _callee8$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ message: { type: "object", rules: { msgIdServer: { type: "string", allowEmpty: false }, time: { type: "number" } } }, referType: { type: "enum", values: getEnumKeys(gM), required: false } }, t3), a3.next = 3, this.extendModuleService.getReferMessages(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee8, this);
          }));
        }, a2.getThreadMessages = function getThreadMessages(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            return Ql.wrap(function _callee9$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ message: { type: "object", rules: { msgIdServer: { type: "string", allowEmpty: false }, time: { type: "number" } } }, messageQueryOption: { type: "object", rules: { beginTime: { type: "number", required: false }, endTime: { type: "number", required: false }, excludeMsgId: { type: "string", required: false }, limit: { type: "number", required: false }, reverse: { type: "boolean", required: false } } } }, t3), a3.next = 3, this.extendModuleService.getThreadMessages(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee9, this);
          }));
        }, a2.getThreadRootMessagesMeta = function getThreadRootMessagesMeta(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            return Ql.wrap(function _callee10$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, threadRootMessages: { type: "array", rules: { msgIdServer: { type: "string", allowEmpty: false }, time: { type: "number" } } } }, t3), a3.next = 3, this.extendModuleService.getThreadRootMessagesMeta(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee10, this);
          }));
        }, a2.sendSystemNotification = function sendSystemNotification(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            return Ql.wrap(function _callee11$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false, required: false }, attach: { type: "object", required: false } }, t3), a3.next = 3, this.notificationModuleService.sendSystemNotification(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee11, this);
          }));
        }, a2.updateSystemNotification = function updateSystemNotification(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            return Ql.wrap(function _callee12$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ systemNotification: { type: "object", rules: { msgIdServer: { type: "string", allowEmpty: false }, type: { type: "enum", values: getEnumKeys(hM) }, body: { type: "string", required: false }, ext: { type: "string", required: false }, status: { type: "number", required: false } } } }, t3), a3.next = 3, this.notificationModuleService.updateSystemNotification(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee12, this);
          }));
        }, a2.markSystemNotificationsRead = function markSystemNotificationsRead(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            return Ql.wrap(function _callee13$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ systemNotifications: { type: "array", rules: { msgIdServer: { type: "string", allowEmpty: false }, type: { type: "string", allowEmpty: false } }, min: 1 } }, t3), a3.next = 3, this.notificationModuleService.markSystemNotificationsRead(t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee13, this);
          }));
        }, a2.getHistoryMessage = function getHistoryMessage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee14() {
            return Ql.wrap(function _callee14$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, beginTime: { type: "number", min: 0, required: false }, endTime: { type: "number", min: 0, required: false }, excludeMsgId: { type: "string", allowEmpty: false, required: false }, limit: { type: "number", min: 1, required: false }, reverse: { type: "boolean", required: false } }, t3), a3.next = 3, this.messageModuleService.getHistoryMessage(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee14, this);
          }));
        }, a2.getMentionedMeMessages = function getMentionedMeMessages(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee15() {
            return Ql.wrap(function _callee15$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, timestamp: { type: "number", min: 0, required: false }, limit: { type: "number", min: 1, required: false } }, t3), a3.next = 3, this.messageModuleService.getMentionedMeMessages(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee15, this);
          }));
        }, a2.areMentionedMeMessages = function areMentionedMeMessages(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee16() {
            var a3;
            return Ql.wrap(function _callee16$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    if (validate({ messages: { type: "array", rules: { serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, msgIdServer: { type: "string", allowEmpty: false } }, min: 1 } }, t3), every(a3 = t3.messages).call(a3, function(a4) {
                      return t3.messages[0].serverId === a4.serverId;
                    })) {
                      u2.next = 4;
                      break;
                    }
                    throw new ql("Different serverId", t3, 10414);
                  case 4:
                    if (!this.core.qchatChannel.subscribeForVisitorService.isInAutoServers(t3.messages[0].serverId)) {
                      u2.next = 7;
                      break;
                    }
                    throw new ql("Not allowed for visitor", t3, 10403);
                  case 7:
                    return u2.next = 9, this.messageModuleService.areMentionedMeMessages(t3.messages);
                  case 9:
                    return u2.abrupt("return", u2.sent);
                  case 10:
                  case "end":
                    return u2.stop();
                }
            }, _callee16, this);
          }));
        }, a2.addQuickComment = function addQuickComment(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee17() {
            return Ql.wrap(function _callee17$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.next = 2, this.extendModuleService.updateQuickComment(t3, 1);
                  case 2:
                  case "end":
                    return a3.stop();
                }
            }, _callee17, this);
          }));
        }, a2.removeQuickComment = function removeQuickComment(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee18() {
            return Ql.wrap(function _callee18$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.next = 2, this.extendModuleService.updateQuickComment(t3, 2);
                  case 2:
                  case "end":
                    return a3.stop();
                }
            }, _callee18, this);
          }));
        }, a2.getQuickComments = function getQuickComments(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee19() {
            return Ql.wrap(function _callee19$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, msgList: { type: "array", rules: { msgIdServer: { type: "string", allowEmpty: false } }, min: 1 } }, t3), a3.next = 3, this.extendModuleService.getQuickComments(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee19, this);
          }));
        }, a2.sendTypingEvent = function sendTypingEvent(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee20() {
            return Ql.wrap(function _callee20$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, ext: { type: "string", required: false } }, t3), a3.next = 3, this.extendModuleService.sendTypingEvent(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee20, this);
          }));
        }, a2.getLastMessageOfChannels = function getLastMessageOfChannels(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee21() {
            return Ql.wrap(function _callee21$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelIdList: { type: "array", itemType: "string" } }, t3), a3.next = 3, this.messageModuleService.getLastMessageOfChannels(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee21, this);
          }));
        }, a2.qchatOnMsgHandler = function qchatOnMsgHandler(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee22() {
            return Ql.wrap(function _callee22$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    this.messageModuleService.onMsg(t3);
                  case 1:
                  case "end":
                    return a3.stop();
                }
            }, _callee22, this);
          }));
        }, a2.qchatOnRecvUnreadInfoHandler = function qchatOnRecvUnreadInfoHandler(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee23() {
            return Ql.wrap(function _callee23$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    this.messageModuleService.onRecvUnreadInfo(t3);
                  case 1:
                  case "end":
                    return a3.stop();
                }
            }, _callee23, this);
          }));
        }, a2.qchatOnSysMsgHandler = function qchatOnSysMsgHandler(t3) {
          this.notificationModuleService.onSysMsg(t3);
        }, a2.qchatMultiSyncMessageReadHandler = function qchatMultiSyncMessageReadHandler(t3) {
          this.messageModuleService.onMultiSyncRead(t3);
        }, a2.qchatMultiSyncSystemNotificationUpdateHandler = function qchatMultiSyncSystemNotificationUpdateHandler(t3) {
          this.notificationModuleService.onMultiSysMsg(t3);
        }, a2.qchatSyncSystemNotificationHandler = function qchatSyncSystemNotificationHandler(t3) {
          this.notificationModuleService.onSyncSysMsg(t3);
        }, a2.qchatRecvMessageUpdateHandler = function qchatRecvMessageUpdateHandler(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee24() {
            return Ql.wrap(function _callee24$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    this.messageModuleService.onRecvMsgUpdate(t3);
                  case 1:
                  case "end":
                    return a3.stop();
                }
            }, _callee24, this);
          }));
        }, a2.searchMsgByPage = function searchMsgByPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee25() {
            return Ql.wrap(function _callee25$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ keyword: { type: "string", allowEmpty: false, required: false }, serverId: { type: "string", allowEmpty: false, required: true }, channelId: { type: "string", allowEmpty: false, required: false }, fromAccid: { type: "string", allowEmpty: false, required: false }, fromTime: { type: "number", allowEmpty: false, required: false }, toTime: { type: "number", allowEmpty: false, required: false }, msgTypes: { type: "array", itemType: "string", allowEmpty: false, required: true }, subTypes: { type: "array", itemType: "string", allowEmpty: false, required: false }, includeSelf: { type: "boolean", allowEmpty: false, required: false }, order: { type: "enum", values: getEnumKeys(U_), required: false }, limit: { type: "number", min: 0, required: false }, sort: { type: "enum", values: getEnumKeys(lM), required: false }, cursor: { type: "string", allowEmpty: false, required: false } }, t3), a3.next = 3, this.messageModuleService.messageSearchByPage(t3);
                  case 3:
                    return a3.abrupt("return", a3.sent);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee25, this);
          }));
        }, a2.qchatMultiSyncServersMessageReadHandler = function qchatMultiSyncServersMessageReadHandler(t3) {
          this.messageModuleService.onMultiSyncServersRead(t3);
        }, QChatMsgService;
      }(F_), iI = function() {
        function CategoryModuleService(t3) {
          this.core = t3;
        }
        var t2 = CategoryModuleService.prototype;
        return t2.addChannelCategoryRole = function addChannelCategoryRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a2;
            return Ql.wrap(function _callee$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, categoryId: { type: "string", allowEmpty: false }, parentRoleId: { type: "string", allowEmpty: false } }, t3), u2.next = 3, this.core.sendCmd("qchatAddChannelCategoryRole", { qchatAddChannelCategoryRoleTag: t3 });
                  case 3:
                    return a2 = u2.sent, u2.abrupt("return", formatChannelCategoryRole(a2.content.channelCategoryRole));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee, this);
          }));
        }, t2.removeChannelCategoryRole = function removeChannelCategoryRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            return Ql.wrap(function _callee2$(a2) {
              for (; ; )
                switch (a2.prev = a2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, categoryId: { type: "string", allowEmpty: false }, roleId: { type: "string", allowEmpty: false } }, t3), a2.next = 3, this.core.sendCmd("qchatRemoveChannelCategoryRole", t3);
                  case 3:
                  case "end":
                    return a2.stop();
                }
            }, _callee2, this);
          }));
        }, t2.updateChannelCategoryRole = function updateChannelCategoryRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a2;
            return Ql.wrap(function _callee3$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, categoryId: { type: "string", allowEmpty: false }, roleId: { type: "string", allowEmpty: false }, auths: { type: "object" } }, t3), u2.next = 3, this.core.sendCmd("qchatUpdateChannelCategoryRole", { qchatUpdateChannelCategoryRoleTag: generatorRoleForCmd(t3) });
                  case 3:
                    if ((a2 = u2.sent).raw.code !== 406) {
                      u2.next = 6;
                      break;
                    }
                    throw new ql("No update required", {}, 406);
                  case 6:
                    return u2.abrupt("return", formatChannelCategoryRole(a2.content.channelCategoryRole));
                  case 7:
                  case "end":
                    return u2.stop();
                }
            }, _callee3, this);
          }));
        }, t2.getChannelCategoryRole = function getChannelCategoryRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a2;
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, categoryId: { type: "string", allowEmpty: false }, timetag: { type: "number", min: 0, required: false }, limit: { type: "number", min: 1, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatGetChannelCategoryRole", { qchatGetChannelCategoryRoleTag: t3 });
                  case 3:
                    return a2 = u2.sent, u2.abrupt("return", (m2 = a2.content.list, Dn(m2) && m2.length > 0 ? map$6(m2).call(m2, function(t4) {
                      return formatChannelCategoryRole(t4);
                    }) : []));
                  case 5:
                  case "end":
                    return u2.stop();
                }
              var m2;
            }, _callee4, this);
          }));
        }, t2.addChannelCategoryMemberRole = function addChannelCategoryMemberRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var a2;
            return Ql.wrap(function _callee5$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, categoryId: { type: "string", allowEmpty: false }, accid: { type: "string", allowEmpty: false } }, t3), u2.next = 3, this.core.sendCmd("qchatAddChannelCategoryMemberRole", { qchatAddChannelCategoryMemberRoleTag: t3 });
                  case 3:
                    return a2 = u2.sent, u2.abrupt("return", formatChannelCategoryMemberRole(a2.content.channelCategoryMemberRole));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee5, this);
          }));
        }, t2.removeChannelCategoryMemberRole = function removeChannelCategoryMemberRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            return Ql.wrap(function _callee6$(a2) {
              for (; ; )
                switch (a2.prev = a2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, categoryId: { type: "string", allowEmpty: false }, accid: { type: "string", allowEmpty: false } }, t3), a2.next = 3, this.core.sendCmd("qchatRemoveChannelCategoryMemberRole", t3);
                  case 3:
                  case "end":
                    return a2.stop();
                }
            }, _callee6, this);
          }));
        }, t2.updateChannelCategoryMemberRole = function updateChannelCategoryMemberRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            var a2;
            return Ql.wrap(function _callee7$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, categoryId: { type: "string", allowEmpty: false }, accid: { type: "string", allowEmpty: false }, auths: { type: "object" } }, t3), u2.next = 3, this.core.sendCmd("qchatUpdateChannelCategoryMemberRole", { qchatUpdateChannelCategoryMemberRoleTag: generatorRoleForCmd(t3) });
                  case 3:
                    if ((a2 = u2.sent).raw.code !== 406) {
                      u2.next = 6;
                      break;
                    }
                    throw new ql("No update required", {}, 406);
                  case 6:
                    return u2.abrupt("return", formatChannelCategoryMemberRole(a2.content.channelCategoryMemberRole));
                  case 7:
                  case "end":
                    return u2.stop();
                }
            }, _callee7, this);
          }));
        }, t2.getChannelCategoryMemberRole = function getChannelCategoryMemberRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var a2;
            return Ql.wrap(function _callee8$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, categoryId: { type: "string", allowEmpty: false }, timetag: { type: "number", min: 0, required: false }, limit: { type: "number", min: 1, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatGetChannelCategoryMemberRole", { qchatGetChannelCategoryMemberRoleTag: t3 });
                  case 3:
                    return a2 = u2.sent, u2.abrupt("return", (m2 = a2.content.list, Dn(m2) && m2.length > 0 ? map$6(m2).call(m2, function(t4) {
                      return formatChannelCategoryMemberRole(t4);
                    }) : []));
                  case 5:
                  case "end":
                    return u2.stop();
                }
              var m2;
            }, _callee8, this);
          }));
        }, CategoryModuleService;
      }(), oI = function(t2) {
        function QChatRoleService(a3) {
          var u2;
          return (u2 = t2.call(this, "qchatRole", a3) || this).core = a3, registerParser({ cmdMap: FM, cmdConfig: jM() }), u2.category = new iI(a3), u2;
        }
        Nt(QChatRoleService, t2);
        var a2 = QChatRoleService.prototype;
        return a2.createServerRole = function createServerRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a3;
            return Ql.wrap(function _callee$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, name: { type: "string", allowEmpty: false }, priority: { type: "number", min: 1 }, icon: { type: "string", required: false }, ext: { type: "string", required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatCreateServerRole", { serverRole: Dt(Dt({}, generatorRoleForCmd(t3)), { type: nM.custom }), antispamTag: generateAntispamTag(t3) });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatRole(a3.content.serverRole));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee, this);
          }));
        }, a2.updateServerRole = function updateServerRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a3;
            return Ql.wrap(function _callee2$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, roleId: { type: "string", allowEmpty: false }, name: { type: "string", required: false }, icon: { type: "string", required: false }, ext: { type: "string", required: false }, priority: { type: "number", required: false }, auths: { type: "object", required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatUpdateServerRole", { updateServerRoleTag: generatorRoleForCmd(t3), antispamTag: generateAntispamTag(t3) });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatRole(a3.content.serverRole));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.deleteServerRole = function deleteServerRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            return Ql.wrap(function _callee3$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, roleId: { type: "string", allowEmpty: false } }, t3), a3.next = 3, this.core.sendCmd("qchatDeleteServerRole", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee3, this);
          }));
        }, a2.getServerRoles = function getServerRoles(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a3, u2, m2;
            return Ql.wrap(function _callee4$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false, required: false }, categoryId: { type: "string", allowEmpty: false, required: false }, limit: { type: "number", min: 1, required: false }, priority: { type: "number", required: false } }, t3), h2.next = 3, this.core.sendCmd("qchatGetServerRoles", { getServerRolesTag: generatorRoleForCmd(t3) });
                  case 3:
                    return u2 = h2.sent, m2 = filter(a3 = u2.content.serverRoles).call(a3, function(t4) {
                      return Uu(t4.isMember) === 1;
                    }), m2 = map$6(m2).call(m2, function(t4) {
                      return t4.roleId;
                    }), h2.abrupt("return", { roles: formatRoles(u2.content.serverRoles), isMemberRoles: m2 });
                  case 7:
                  case "end":
                    return h2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.addChannelRole = function addChannelRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var a3;
            return Ql.wrap(function _callee5$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, parentRoleId: { type: "string", allowEmpty: false } }, t3), u2.next = 3, this.core.sendCmd("qchatAddChannelRole", { channelRole: generatorRoleForCmd(t3) });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatRole(a3.content.channelRole));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.getChannelRoles = function getChannelRoles(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var a3;
            return Ql.wrap(function _callee6$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, timetag: { type: "number", required: false }, limit: { type: "number", min: 1, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatGetChannelRoles", { getChannelRolesTag: t3 });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatRoles(a3.content.channelRoles));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee6, this);
          }));
        }, a2.removeChannelRole = function removeChannelRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            return Ql.wrap(function _callee7$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, roleId: { type: "string", allowEmpty: false } }, t3), a3.next = 3, this.core.sendCmd("qchatRemoveChannelRole", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee7, this);
          }));
        }, a2.updateChannelRole = function updateChannelRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var a3;
            return Ql.wrap(function _callee8$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, roleId: { type: "string", allowEmpty: false }, auths: { type: "object", required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatUpdateChannelRole", { updateChannelRoleTag: generatorRoleForCmd(t3) });
                  case 3:
                    if ((a3 = u2.sent).raw.code !== 406) {
                      u2.next = 6;
                      break;
                    }
                    throw new ql("No update required", {}, 406);
                  case 6:
                    return u2.abrupt("return", formatRole(a3.content.channelRole));
                  case 7:
                  case "end":
                    return u2.stop();
                }
            }, _callee8, this);
          }));
        }, a2.addMemberRole = function addMemberRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            var a3;
            return Ql.wrap(function _callee9$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, accid: { type: "string", allowEmpty: false } }, t3), u2.next = 3, this.core.sendCmd("qchatAddMemberRole", { memberRole: t3 });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatRole(a3.content.memberRole));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee9, this);
          }));
        }, a2.getMemberRoles = function getMemberRoles(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            var a3;
            return Ql.wrap(function _callee10$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, timetag: { type: "number", required: false }, limit: { type: "number", min: 1, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatGetMemberRoles", { getMemberRolesTag: t3 });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatRoles(a3.content.memberRoles));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee10, this);
          }));
        }, a2.removeMemberRole = function removeMemberRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            return Ql.wrap(function _callee11$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, accid: { type: "string", allowEmpty: false } }, t3), a3.next = 3, this.core.sendCmd("qchatRemoveMemberRole", { memberRole: t3 });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee11, this);
          }));
        }, a2.updateMemberRole = function updateMemberRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            var a3;
            return Ql.wrap(function _callee12$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, accid: { type: "string", allowEmpty: false }, auths: { type: "object", required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatUpdateMemberRole", { updateMemberRoleTag: generatorRoleForCmd(t3) });
                  case 3:
                    if ((a3 = u2.sent).raw.code !== 406) {
                      u2.next = 6;
                      break;
                    }
                    throw new ql("No update required", {}, 406);
                  case 6:
                    return u2.abrupt("return", formatRole(a3.content.memberRole));
                  case 7:
                  case "end":
                    return u2.stop();
                }
            }, _callee12, this);
          }));
        }, a2.addMembersToServerRole = function addMembersToServerRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            var a3, u2, m2;
            return Ql.wrap(function _callee13$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, roleId: { type: "string", allowEmpty: false }, accids: { type: "array", itemType: "string", min: 1 } }, t3), h2.next = 3, this.core.sendCmd("qchatAddMembersToServerRole", Dt(Dt({}, t3), { accids: Un(t3.accids) }));
                  case 3:
                    return a3 = h2.sent, u2 = get(a3, "content.accids.successAccids"), m2 = get(a3, "content.accids.failedAccids"), h2.abrupt("return", { successAccids: u2 ? JSON.parse(u2) : [], failedAccids: m2 ? JSON.parse(m2) : [] });
                  case 7:
                  case "end":
                    return h2.stop();
                }
            }, _callee13, this);
          }));
        }, a2.removeMembersFromServerRole = function removeMembersFromServerRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee14() {
            var a3, u2, m2;
            return Ql.wrap(function _callee14$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, roleId: { type: "string", allowEmpty: false }, accids: { type: "array", itemType: "string", min: 1 } }, t3), h2.next = 3, this.core.sendCmd("qchatRemoveMembersFromServerRole", Dt(Dt({}, t3), { accids: Un(t3.accids) }));
                  case 3:
                    return a3 = h2.sent, u2 = get(a3, "content.accids.successAccids"), m2 = get(a3, "content.accids.failedAccids"), h2.abrupt("return", { successAccids: u2 ? JSON.parse(u2) : [], failedAccids: m2 ? JSON.parse(m2) : [] });
                  case 7:
                  case "end":
                    return h2.stop();
                }
            }, _callee14, this);
          }));
        }, a2.getMembersFromServerRole = function getMembersFromServerRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee15() {
            var a3;
            return Ql.wrap(function _callee15$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, roleId: { type: "string", allowEmpty: false }, timetag: { type: "number", required: false }, accid: { type: "string", allowEmpty: false, required: false }, limit: { type: "number", min: 1, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatGetMembersFromServerRole", { getMembersFromServerRoleTag: t3 });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatRoles(a3.content.members));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee15, this);
          }));
        }, a2.getServerRolesByAccid = function getServerRolesByAccid(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee16() {
            var a3;
            return Ql.wrap(function _callee16$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, accid: { type: "string", allowEmpty: false }, timetag: { type: "number", required: false }, limit: { type: "number", min: 1, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatGetServerRolesByAccid", { getServerRolesByAccidTag: t3 });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatRoles(a3.content.serverRoles));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee16, this);
          }));
        }, a2.getExistingServerRolesByAccids = function getExistingServerRolesByAccids(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee17() {
            var a3, u2, m2;
            return Ql.wrap(function _callee17$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, accids: { type: "array", itemType: "string" } }, t3), h2.next = 3, this.core.sendCmd("qchatGetExistingServerRolesByAccids", { serverId: t3.serverId, accids: Un(t3.accids) });
                  case 3:
                    return a3 = h2.sent, h2.prev = 4, m2 = JSON.parse(a3.content.serverRoles), forEach$1(u2 = Ht(m2)).call(u2, function(t4) {
                      var a4;
                      forEach$1(a4 = m2[t4]).call(a4, function(a5, u3) {
                        m2[t4][u3] = deserialize(a5, HM().serverRole);
                      }), m2[t4] = formatRoles(m2[t4]);
                    }), h2.abrupt("return", m2);
                  case 10:
                    throw h2.prev = 10, h2.t0 = h2.catch(4), this.logger.error("can not parse serverRolesGroupByAccid from " + t3.serverId + " and " + t3.accids, a3.content.serverRoles), h2.t0;
                  case 14:
                  case "end":
                    return h2.stop();
                }
            }, _callee17, this, [[4, 10]]);
          }));
        }, a2.getExistingChannelRolesByServerRoleIds = function getExistingChannelRolesByServerRoleIds(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee18() {
            var a3;
            return Ql.wrap(function _callee18$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, roleIds: { type: "array", itemType: "string" } }, t3), u2.next = 3, this.core.sendCmd("qchatGetExistingChannelRolesByServerRoleIds", { serverId: t3.serverId, channelId: t3.channelId, roleIds: Un(t3.roleIds) });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatRoles(a3.content.channelRoles));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee18, this);
          }));
        }, a2.getExistingAccidsOfMemberRoles = function getExistingAccidsOfMemberRoles(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee19() {
            var a3, u2;
            return Ql.wrap(function _callee19$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false }, accids: { type: "array", itemType: "string" } }, t3), m2.next = 3, this.core.sendCmd("qchatGetExistingAccidsOfMemberRoles", { serverId: t3.serverId, channelId: t3.channelId, accids: Un(t3.accids) });
                  case 3:
                    return a3 = m2.sent, u2 = a3.content.memberRoles, m2.abrupt("return", u2 && u2.length > 0 ? map$6(u2).call(u2, function(t4) {
                      return t4.accid;
                    }) : []);
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee19, this);
          }));
        }, a2.getExistingAccidsInServerRole = function getExistingAccidsInServerRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee20() {
            var a3, u2;
            return Ql.wrap(function _callee20$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, roleId: { type: "string", allowEmpty: false }, accids: { type: "array", itemType: "string" } }, t3), m2.next = 3, this.core.sendCmd("qchatGetExistingAccidsInServerRole", { serverId: t3.serverId, roleId: t3.roleId, accids: Un(t3.accids) });
                  case 3:
                    return a3 = m2.sent, u2 = a3.content.members, m2.abrupt("return", u2 && u2.length > 0 ? map$6(u2).call(u2, function(t4) {
                      return t4.accid;
                    }) : []);
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee20, this);
          }));
        }, a2.updateServerRolePriorities = function updateServerRolePriorities(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee21() {
            var a3, u2;
            return Ql.wrap(function _callee21$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, serverRoles: { type: "array" } }, t3), m2.next = 3, this.core.sendCmd("qchatUpdateServerRolePriorities", { serverId: t3.serverId, serverRoles: map$6(a3 = t3.serverRoles).call(a3, function(t4) {
                      return { serverId: t4.serverId, roleId: t4.roleId, priority: t4.priority };
                    }) });
                  case 3:
                    return u2 = m2.sent, m2.abrupt("return", formatRoles(u2.content.serverRoles));
                  case 5:
                  case "end":
                    return m2.stop();
                }
            }, _callee21, this);
          }));
        }, a2.checkPermission = function checkPermission(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee22() {
            var a3;
            return Ql.wrap(function _callee22$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false, required: false }, auth: { type: "string" } }, t3), u2.next = 3, this.core.sendCmd("qchatCheckPermission", { checkPermissionTag: Dt(Dt({}, t3), { auth: oM[t3.auth] || t3.auth }) });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", a3.content.checked);
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee22, this);
          }));
        }, a2.addChannelCategoryRole = function addChannelCategoryRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee23() {
            return Ql.wrap(function _callee23$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.next = 2, this.category.addChannelCategoryRole(t3);
                  case 2:
                    return a3.abrupt("return", a3.sent);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee23, this);
          }));
        }, a2.removeChannelCategoryRole = function removeChannelCategoryRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee24() {
            return Ql.wrap(function _callee24$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.next = 2, this.category.removeChannelCategoryRole(t3);
                  case 2:
                    return a3.abrupt("return", a3.sent);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee24, this);
          }));
        }, a2.updateChannelCategoryRole = function updateChannelCategoryRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee25() {
            return Ql.wrap(function _callee25$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.next = 2, this.category.updateChannelCategoryRole(t3);
                  case 2:
                    return a3.abrupt("return", a3.sent);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee25, this);
          }));
        }, a2.getChannelCategoryRole = function getChannelCategoryRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee26() {
            return Ql.wrap(function _callee26$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.next = 2, this.category.getChannelCategoryRole(t3);
                  case 2:
                    return a3.abrupt("return", a3.sent);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee26, this);
          }));
        }, a2.addChannelCategoryMemberRole = function addChannelCategoryMemberRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee27() {
            return Ql.wrap(function _callee27$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.next = 2, this.category.addChannelCategoryMemberRole(t3);
                  case 2:
                    return a3.abrupt("return", a3.sent);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee27, this);
          }));
        }, a2.removeChannelCategoryMemberRole = function removeChannelCategoryMemberRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee28() {
            return Ql.wrap(function _callee28$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.next = 2, this.category.removeChannelCategoryMemberRole(t3);
                  case 2:
                    return a3.abrupt("return", a3.sent);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee28, this);
          }));
        }, a2.updateChannelCategoryMemberRole = function updateChannelCategoryMemberRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee29() {
            return Ql.wrap(function _callee29$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.next = 2, this.category.updateChannelCategoryMemberRole(t3);
                  case 2:
                    return a3.abrupt("return", a3.sent);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee29, this);
          }));
        }, a2.getChannelCategoryMemberRole = function getChannelCategoryMemberRole(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee30() {
            return Ql.wrap(function _callee30$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.next = 2, this.category.getChannelCategoryMemberRole(t3);
                  case 2:
                    return a3.abrupt("return", a3.sent);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee30, this);
          }));
        }, a2.checkPermissions = function checkPermissions(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee31() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee31$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, channelId: { type: "string", allowEmpty: false, required: false }, auths: { type: "array", itemType: "string" } }, t3), this.core.logger.log("qchatRole::checkPermission options is", t3), g2.next = 4, this.core.sendCmd("qchatCheckPermissions", { checkPermissionsTag: Dt(Dt({}, t3), { auths: Un(map$6(a3 = t3.auths).call(a3, function(t4) {
                      return oM[t4] || t4;
                    })) }) });
                  case 4:
                    return m2 = g2.sent, this.core.logger.log("qchatRole::checkPermission result is", m2.content), h2 = {}, forEach$1(u2 = m2.content.checkPermissionsResult).call(u2, function(t4) {
                      h2[t4.auth] = t4.isAllow;
                    }), this.core.logger.log("qchatRole::checkPermission auths is", h2), g2.abrupt("return", formatRoleAuths(h2));
                  case 10:
                  case "end":
                    return g2.stop();
                }
            }, _callee31, this);
          }));
        }, QChatRoleService;
      }(F_);
      function _createForOfIteratorHelperLoose(t2, a2) {
        var u2, m2 = es !== void 0 && $l(t2) || t2["@@iterator"];
        if (m2)
          return bind$1(u2 = (m2 = m2.call(t2)).next).call(u2, m2);
        if (Dn(t2) || (m2 = function _unsupportedIterableToArray(t3, a3) {
          if (t3) {
            var u3;
            if (typeof t3 == "string")
              return _arrayLikeToArray(t3, a3);
            var m3 = slice(u3 = {}.toString.call(t3)).call(u3, 8, -1);
            return m3 === "Object" && t3.constructor && (m3 = t3.constructor.name), m3 === "Map" || m3 === "Set" ? jl(t3) : m3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m3) ? _arrayLikeToArray(t3, a3) : void 0;
          }
        }(t2)) || a2 && t2 && typeof t2.length == "number") {
          m2 && (t2 = m2);
          var h2 = 0;
          return function() {
            return h2 >= t2.length ? { done: true } : { done: false, value: t2[h2++] };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _arrayLikeToArray(t2, a2) {
        (a2 == null || a2 > t2.length) && (a2 = t2.length);
        for (var u2 = 0, m2 = Array(a2); u2 < a2; u2++)
          m2[u2] = t2[u2];
        return m2;
      }
      var sI = function(t2) {
        function QChatServerService(a3) {
          var u2;
          return (u2 = t2.call(this, "qchatServer", a3) || this).core = a3, registerParser({ cmdMap: UM, cmdConfig: BM() }), u2;
        }
        Nt(QChatServerService, t2);
        var a2 = QChatServerService.prototype;
        return a2.createServer = function createServer(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a3;
            return Ql.wrap(function _callee$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ icon: { type: "string", required: false }, name: { type: "string", required: false }, ext: { type: "string", required: false }, searchType: { type: "number", required: false, min: 0 }, searchEnable: { type: "boolean", required: false }, inviteMode: { type: "number", min: 0, max: 1, required: false }, applyMode: { type: "number", min: 0, max: 1, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatCreateServer", { serverInfo: Dt(Dt({}, t3), { searchEnable: t3.searchEnable === false ? 0 : 1 }), antispamTag: generateAntispamTag(t3) });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatServer(a3.content.serverInfo));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee, this);
          }));
        }, a2.deleteServer = function deleteServer(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            return Ql.wrap(function _callee2$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 } }, t3), a3.next = 3, this.core.sendCmd("qchatDeleteServer", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee2, this);
          }));
        }, a2.updateServer = function updateServer(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3;
            return Ql.wrap(function _callee3$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, icon: { type: "string", required: false }, name: { type: "string", required: false }, ext: { type: "string", required: false }, searchType: { type: "number", required: false, min: 0 }, searchEnable: { type: "boolean", required: false }, inviteMode: { type: "number", min: 0, max: 1, required: false }, applyMode: { type: "number", min: 0, max: 1, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatUpdateServer", { serverInfo: Dt(Dt({}, t3), { searchEnable: t3.searchEnable === false ? 0 : 1 }), antispamTag: generateAntispamTag(t3) });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatServer(a3.content.serverInfo));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.getServers = function getServers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a3;
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverIds: { type: "array", itemType: "string", min: 1 } }, t3), u2.next = 3, this.core.sendCmd("qchatGetServers", t3);
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatServers(a3.content.serverList));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.getServersByPage = function getServersByPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee5$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ timestamp: { type: "number" }, limit: { type: "number", min: 1, required: false } }, t3), g2.next = 3, this.core.sendCmd("qchatGetServersByPage", { tag: t3 });
                  case 3:
                    return a3 = g2.sent, u2 = a3.content, m2 = u2.datas, h2 = u2.listQueryTag, g2.abrupt("return", { listQueryTag: { hasMore: +h2.hasMore == 1, nextTimetag: Uu(h2.nextTimetag) }, datas: formatServers(m2) });
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.inviteServerMembers = function inviteServerMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var a3, u2;
            return Ql.wrap(function _callee6$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, accids: { type: "array", itemType: "string", min: 1 }, ps: { type: "string" }, params: { type: "object", rules: { ttl: { type: "number" } }, required: false } }, t3), m2.next = 3, this.core.sendCmd("qchatInviteServerMembers", t3);
                  case 3:
                    return a3 = m2.sent, u2 = a3.content.record || {}, m2.abrupt("return", { failByOverAccids: a3.content.failByOverAccids, failByBanAccids: a3.content.failByBanAccids, recordInfo: formatInviteApplyRecord(u2) });
                  case 6:
                  case "end":
                    return m2.stop();
                }
            }, _callee6, this);
          }));
        }, a2.acceptServerInvite = function acceptServerInvite(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            return Ql.wrap(function _callee7$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, accid: { type: "string", allowEmpty: false }, recordInfo: { type: "object", rules: { requestId: { type: "string", allowEmpty: false } } } }, t3), a3.next = 3, this.core.sendCmd("qchatAcceptServerInvite", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee7, this);
          }));
        }, a2.rejectInviteServer = function rejectInviteServer(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            return Ql.wrap(function _callee8$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, accid: { type: "string", min: 1 }, ps: { type: "string" }, recordInfo: { type: "object", rules: { requestId: { type: "string", allowEmpty: false } } } }, t3), a3.next = 3, this.core.sendCmd("qchatRejectInviteServer", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee8, this);
          }));
        }, a2.applyServerJoin = function applyServerJoin(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            var a3;
            return Ql.wrap(function _callee9$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, ps: { type: "string" }, params: { type: "object", rules: { ttl: { type: "number" } }, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatApplyServerJoin", t3);
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatInviteApplyRecord(a3.content.data));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee9, this);
          }));
        }, a2.acceptServerApply = function acceptServerApply(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            return Ql.wrap(function _callee10$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, accid: { type: "string", min: 1 }, recordInfo: { type: "object", rules: { requestId: { type: "string", allowEmpty: false } } } }, t3), a3.next = 3, this.core.sendCmd("qchatAcceptServerApply", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee10, this);
          }));
        }, a2.rejectServerApply = function rejectServerApply(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            return Ql.wrap(function _callee11$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, accid: { type: "string", min: 1 }, ps: { type: "string" }, recordInfo: { type: "object", rules: { requestId: { type: "string", allowEmpty: false } } } }, t3), a3.next = 3, this.core.sendCmd("qchatRejectServerApply", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee11, this);
          }));
        }, a2.kickServerMembers = function kickServerMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            return Ql.wrap(function _callee12$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, accids: { type: "array", itemType: "string", min: 1 } }, t3), a3.next = 3, this.core.sendCmd("qchatKickServerMembers", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee12, this);
          }));
        }, a2.leaveServer = function leaveServer(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            return Ql.wrap(function _callee13$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 } }, t3), a3.next = 3, this.core.sendCmd("qchatLeaveServer", t3);
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee13, this);
          }));
        }, a2.updateMyMemberInfo = function updateMyMemberInfo(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee14() {
            var a3;
            return Ql.wrap(function _callee14$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, accid: { type: "string", required: false }, nick: { type: "string", allowEmpty: true, required: false }, avatar: { type: "string", required: false }, ext: { type: "string", required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatUpdateMyMemberInfo", { memberInfo: t3, antispamTag: generateAntispamTag(t3) });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatMember$1(a3.content.memberInfo));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee14, this);
          }));
        }, a2.updateServerMemberInfo = function updateServerMemberInfo(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee15() {
            var a3;
            return Ql.wrap(function _callee15$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, accid: { type: "string", min: 1 }, nick: { type: "string", required: false }, avatar: { type: "string", required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatUpdateServerMemberInfo", { memberInfo: t3, antispamTag: generateAntispamTag(t3) });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatMember$1(a3.content.memberInfo));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee15, this);
          }));
        }, a2.getServerMembers = function getServerMembers(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee16() {
            var a3, u2, m2, h2, g2;
            return Ql.wrap(function _callee16$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    if (validate({ accids: { type: "array" } }, t3), a3 = [], t3.accids.length)
                      for (u2 = _createForOfIteratorHelperLoose(t3.accids); !(m2 = u2()).done; )
                        h2 = m2.value, a3.push(h2.serverId + "|" + h2.accid);
                    return M2.next = 5, this.core.sendCmd("qchatGetServerMembers", { accids: a3 });
                  case 5:
                    return g2 = M2.sent, M2.abrupt("return", formatMembers$1(g2.content.accidList));
                  case 7:
                  case "end":
                    return M2.stop();
                }
            }, _callee16, this);
          }));
        }, a2.getServerMembersByPage = function getServerMembersByPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee17() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee17$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", min: 1 }, timetag: { type: "number" }, limit: { type: "number", min: 1, required: false } }, t3), g2.next = 3, this.core.sendCmd("qchatGetServerMembersByPage", { tag: t3 });
                  case 3:
                    return a3 = g2.sent, u2 = a3.content, m2 = u2.datas, h2 = u2.listQueryTag, g2.abrupt("return", { listQueryTag: { hasMore: +h2.hasMore == 1, nextTimetag: Uu(h2.nextTimetag) }, datas: formatMembers$1(m2) });
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee17, this);
          }));
        }, a2.subscribeServer = function subscribeServer(t3) {
          var a3, u2, m2, h2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee18() {
            var g2, M2, I2, S2;
            return Ql.wrap(function _callee18$(T2) {
              for (; ; )
                switch (T2.prev = T2.next) {
                  case 0:
                    if (validate({ type: { type: "number", min: 4, max: 4, required: false }, opeType: { type: "number", min: 1, max: 2 } }, t3), !((u2 = (a3 = this.core.qchatChannel) === null || a3 === void 0 ? void 0 : a3.config) === null || u2 === void 0 ? void 0 : u2.autoSubscribe) || t3.isInternalTrigger) {
                      T2.next = 3;
                      break;
                    }
                    throw new ql("subscribe server failed, manual subscribe is not allowed in auto subscribe mode", {}, 403);
                  case 3:
                    if (t3.type || (t3.type = 4), !t3.servers.length) {
                      T2.next = 12;
                      break;
                    }
                    return M2 = Dt(Dt({}, t3), { channels: map$6(g2 = t3.servers).call(g2, function(t4) {
                      return { serverId: t4.serverId, channelId: "" };
                    }) }), T2.next = 8, this.core.qchatChannel.subscribeModuleService.subscribe(M2);
                  case 8:
                    return I2 = T2.sent, S2 = I2.failedChannels, ((h2 = (m2 = this.core.qchatChannel) === null || m2 === void 0 ? void 0 : m2.config) === null || h2 === void 0 ? void 0 : h2.autoSubscribe) ? this.core.qchatChannel.subscribeModuleService.cacheAutoSubscribe(M2) : this.core.qchatChannel.subscribeModuleService.cacheSubscribe(M2), T2.abrupt("return", { failedServers: S2 });
                  case 12:
                  case "end":
                    return T2.stop();
                }
            }, _callee18, this);
          }));
        }, a2.banServerMember = function banServerMember(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee19() {
            return Ql.wrap(function _callee19$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, accid: { type: "string", allowEmpty: false }, ext: { type: "string", required: false } }, t3), a3.next = 3, this.core.sendCmd("qchatUpdateServerMemberBan", { tag: Dt(Dt({}, t3), { opeType: 1 }) });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee19, this);
          }));
        }, a2.unbanServerMember = function unbanServerMember(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee20() {
            return Ql.wrap(function _callee20$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, accid: { type: "string", allowEmpty: false }, ext: { type: "string", required: false } }, t3), a3.next = 3, this.core.sendCmd("qchatUpdateServerMemberBan", { tag: Dt(Dt({}, t3), { opeType: 2 }) });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee20, this);
          }));
        }, a2.getBannedMembersByPage = function getBannedMembersByPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee21() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee21$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, timetag: { type: "number", min: 0 }, limit: { type: "number", min: 1, required: false } }, t3), g2.next = 3, this.core.sendCmd("qchatGetBannedMembersByPage", { tag: t3 });
                  case 3:
                    return a3 = g2.sent, u2 = a3.content, m2 = u2.datas, h2 = u2.listQueryTag, g2.abrupt("return", { listQueryTag: { hasMore: +h2.hasMore == 1, nextTimetag: Uu(h2.nextTimetag) }, datas: formatServerMemberBanInfos(m2) });
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee21, this);
          }));
        }, a2.serverSearchByPage = function serverSearchByPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee22() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee22$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    if (validate({ keyword: { type: "string", allowEmpty: false }, startTime: { type: "number", min: 0, required: false }, endTime: { type: "number", min: 0, required: false }, limit: { type: "number", min: 1, required: false }, serverType: { type: "array", itemType: "number", min: 0, required: false }, order: { type: "enum", values: getEnumKeys(U_), required: false }, searchType: { type: "enum", values: getEnumKeys(q_) }, sort: { type: "enum", values: getEnumKeys(D_), required: false }, cursor: { type: "string", allowEmpty: false, required: false } }, t3), !(t3.startTime && t3.endTime && t3.startTime >= t3.endTime)) {
                      g2.next = 3;
                      break;
                    }
                    throw new Ll("startTime more than endTime", t3, "timeRule");
                  case 3:
                    return g2.next = 5, this.core.sendCmd("qchatServerSearchByPage", { tag: Dt(Dt({}, t3), { order: t3.order && U_[t3.order], searchType: q_[t3.searchType], sort: sort(t3) && D_[sort(t3)], serverType: Un(t3.serverType) }) });
                  case 5:
                    return a3 = g2.sent, u2 = a3.content, m2 = u2.datas, h2 = u2.listQueryTag, g2.abrupt("return", { listQueryTag: { hasMore: +h2.hasMore == 1, nextTimetag: Uu(h2.nextTimetag), cursor: h2.cursor }, datas: formatServers(m2) });
                  case 8:
                  case "end":
                    return g2.stop();
                }
            }, _callee22, this);
          }));
        }, a2.serverMemberSearchByPage = function serverMemberSearchByPage(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee23() {
            var a3;
            return Ql.wrap(function _callee23$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, keyword: { type: "string", allowEmpty: false }, limit: { type: "number", min: 1, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatServerMemberSearchByPage", { tag: t3 });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatMembers$1(a3.content.members));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee23, this);
          }));
        }, a2.generateInviteCode = function generateInviteCode(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee24() {
            var a3;
            return Ql.wrap(function _callee24$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, ttl: { type: "number", min: 0, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatGenerateInviteCode", { tag: t3 });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", format({ expireTime: { type: "number" } }, a3.content.data));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee24, this);
          }));
        }, a2.joinByInviteCode = function joinByInviteCode(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee25() {
            return Ql.wrap(function _callee25$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, inviteCode: { type: "string", allowEmpty: false }, ps: { type: "string", required: false } }, t3), a3.next = 3, this.core.sendCmd("qchatJoinByInviteCode", { tag: t3 });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee25, this);
          }));
        }, a2.getInviteApplyRecordOfServer = function getInviteApplyRecordOfServer(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee26() {
            var a3;
            return Ql.wrap(function _callee26$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ serverId: { type: "string", allowEmpty: false }, fromTime: { type: "number", min: 0 }, toTime: { type: "number", min: 0 }, reverse: { type: "boolean", required: false }, limit: { type: "number", min: 1, required: false }, cursor: { type: "string", allowEmpty: false, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatGetInviteApplyRecordOfServer", { tag: Dt(Dt({}, t3), { reverse: reverse$1(t3) ? 1 : 0 }) });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatInviteApplyRecords(a3.content.data));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee26, this);
          }));
        }, a2.getInviteApplyRecordOfSelf = function getInviteApplyRecordOfSelf(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee27() {
            var a3;
            return Ql.wrap(function _callee27$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return validate({ fromTime: { type: "number", min: 0 }, toTime: { type: "number", min: 0 }, reverse: { type: "boolean", required: false }, limit: { type: "number", min: 1, required: false }, cursor: { type: "string", allowEmpty: false, required: false } }, t3), u2.next = 3, this.core.sendCmd("qchatGetInviteApplyRecordOfSelf", { tag: Dt(Dt({}, t3), { reverse: reverse$1(t3) ? 1 : 0 }) });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", formatInviteApplyRecords(a3.content.data));
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee27, this);
          }));
        }, a2.markRead = function markRead(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee28() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee28$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ serverIds: { type: "array", itemType: "string", required: true } }, t3), g2.next = 3, this.core.sendCmd("qchatClearServersUnread", t3);
                  case 3:
                    return a3 = g2.sent, u2 = formatClearServersUnread(a3.content.clearServersUnreadTag), m2 = u2.successServerIds, h2 = u2.ackTimestamp, this.logger.log("qchatServer::clearServersUnread:: begin auto clear servers unreadInfo"), this.core.eventBus.emit("qchatChannel/clearUnreadCountByServers", m2, h2), g2.abrupt("return", u2);
                  case 9:
                  case "end":
                    return g2.stop();
                }
            }, _callee28, this);
          }));
        }, a2.subscribeAllChannel = function subscribeAllChannel(t3) {
          var a3, u2;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee29() {
            var m2, h2, g2;
            return Ql.wrap(function _callee29$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    if (validate({ type: { type: "number", required: true }, serverIds: { type: "array", itemType: "string", required: true, max: 10 } }, t3), !((u2 = (a3 = this.core.qchatChannel) === null || a3 === void 0 ? void 0 : a3.config) === null || u2 === void 0 ? void 0 : u2.autoSubscribe)) {
                      M2.next = 3;
                      break;
                    }
                    throw new ql("subscribe channel failed, manual subscribe is not allowed in auto subscribe mode.", {}, 403);
                  case 3:
                    return M2.next = 5, this.core.sendCmd("qchatSubscribeChannelsByServers", t3, { timeout: 3e4 });
                  case 5:
                    return (h2 = M2.sent).content.unreadInfos = formatUnreadInfos(h2.content.unreadInfos), h2.content.failServerIds = formatFailServerIds(h2.content.failServerIds), g2 = { type: t3.type, opeType: 1, channels: map$6(m2 = h2.content.unreadInfos).call(m2, function(t4) {
                      return { serverId: t4.serverId, channelId: t4.channelId };
                    }) }, this.core.eventBus.emit("qchatChannel/cacheSubscribe", g2), this.core.eventBus.emit("qchatChannel/getRoleIdsByServerId", t3.serverIds), this.core.eventBus.emit("qchatChannel/updateUnreads", h2.content.unreadInfos), M2.abrupt("return", h2.content);
                  case 13:
                  case "end":
                    return M2.stop();
                }
            }, _callee29, this);
          }));
        }, a2.enterAsVisitor = function enterAsVisitor(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee30() {
            var a3, u2, m2;
            return Ql.wrap(function _callee30$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return validate({ serverIds: { type: "array", itemType: "string", min: 1 } }, t3), h2.next = 3, this.core.sendCmd("qchatEnterAsVisitor", { tag: { serverIds: Un(t3.serverIds) } });
                  case 3:
                    return a3 = h2.sent, u2 = formatFailServerIds(a3.content.failServerIds), m2 = difference(t3.serverIds, u2), this.core.qchatChannel.subscribeForVisitorService.cacheServer(m2), h2.abrupt("return", { failedServers: u2 });
                  case 8:
                  case "end":
                    return h2.stop();
                }
            }, _callee30, this);
          }));
        }, a2.leaveAsVisitor = function leaveAsVisitor(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee31() {
            var a3, u2, m2, h2 = this;
            return Ql.wrap(function _callee31$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ serverIds: { type: "array", itemType: "string", min: 1 } }, t3), g2.next = 3, this.core.sendCmd("qchatLeaveAsVisitor", { tag: { serverIds: Un(t3.serverIds) } });
                  case 3:
                    return a3 = g2.sent, u2 = formatFailServerIds(a3.content.failServerIds), m2 = difference(t3.serverIds, u2), forEach$1(m2).call(m2, function(t4) {
                      h2.core.qchatChannel.subscribeForVisitorService.deleteServer(t4);
                    }), g2.abrupt("return", { failedServers: u2 });
                  case 8:
                  case "end":
                    return g2.stop();
                }
            }, _callee31, this);
          }));
        }, a2.subscribeAsVisitor = function subscribeAsVisitor(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee32() {
            return Ql.wrap(function _callee32$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    if (validate({ opeType: { type: "number", min: 1, max: 2 }, type: { type: "number", required: false }, serverIds: { type: "array", itemType: "string", min: 1 } }, t3), !t3.serverIds.length) {
                      a3.next = 5;
                      break;
                    }
                    return a3.next = 4, this.core.qchatChannel.subscribeForVisitorService.subscribeServerAsVisitor(t3);
                  case 4:
                    return a3.abrupt("return", a3.sent);
                  case 5:
                    return a3.abrupt("return", { failedServers: [] });
                  case 6:
                  case "end":
                    return a3.stop();
                }
            }, _callee32, this);
          }));
        }, QChatServerService;
      }(F_), cI = function(t2) {
        function V2NIMNotificationServiceImpl(a3, u2) {
          var m2;
          return (m2 = t2.call(this, "V2NIMNotificationService", a3) || this).config = { compatibleWithV1: true }, m2.notificationUtil = new qh(m2.core), m2.core._registerDep(om, "V2NIMConversationIdUtil"), m2.core.options.apiVersion !== "v2" ? Qe(m2) : (registerParser({ cmdMap: Nh, cmdConfig: Ph }), m2.setOptions(u2), m2);
        }
        Nt(V2NIMNotificationServiceImpl, t2);
        var a2 = V2NIMNotificationServiceImpl.prototype;
        return a2.setOptions = function setOptions(t3) {
          var a3;
          ((a3 = this.core.systemMessage) === null || a3 === void 0 ? void 0 : a3.name) ? this.config.compatibleWithV1 = true : this.config.compatibleWithV1 = false, this.config = Dt(this.config, t3);
        }, a2.emit = function emit(a3) {
          for (var u2, m2, h2 = this.name + "::emit " + a3.toString(), g2 = arguments.length, M2 = new Array(g2 > 1 ? g2 - 1 : 0), I2 = 1; I2 < g2; I2++)
            M2[I2 - 1] = arguments[I2];
          if (a3 === "onReceiveCustomNotifications") {
            var S2 = M2[0];
            this.logger.log("" + h2, map$6(S2).call(S2, function(t3) {
              return "sender:" + t3.senderId + ";receiver:" + t3.receiverId + ";ctype:" + t3.conversationType + ";time:" + t3.timestamp;
            }));
          } else if (a3 === "onReceiveBroadcastNotifications") {
            var T2 = M2[0];
            this.logger.log("" + h2, map$6(T2).call(T2, function(t3) {
              return "id:" + t3.id + ";sender:" + t3.senderId + ";time:" + t3.time;
            }));
          } else {
            var C2, b2;
            (C2 = this.logger).log.apply(C2, concat(b2 = ["" + h2]).call(b2, M2));
          }
          return (u2 = t2.prototype.emit).call.apply(u2, concat(m2 = [this, a3]).call(m2, M2));
        }, a2.sendCustomNotification = function sendCustomNotification(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var m2, h2, g2;
            return Ql.wrap(function _callee$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return this.checkV2(), validateConversationId(this.core.account, t3), validate(Dh, { content: a3, params: u2 }, "", true), m2 = this.core.V2NIMConversationIdUtil.parseConversationType(t3), h2 = m2 === 3 ? "v2SendCustomNotificationWithSuperTeam" : "v2SendCustomNotification", g2 = this.notificationUtil.generateNotificationTag(t3, a3, u2), M2.next = 8, this.core.sendCmd(h2, { tag: g2 });
                  case 8:
                  case "end":
                    return M2.stop();
                }
            }, _callee, this);
          }));
        }, a2.processSystemNotification = function processSystemNotification(t3) {
          var a3 = [0, 1, 2, 3, 4, 15, 16, 17, 18], u2 = [5, 6], m2 = t3.type;
          if (includes(a3).call(a3, m2))
            this.core.eventBus.emit("V2NIMTeamService/sysNotification", t3);
          else {
            if (!includes(u2).call(u2, m2)) {
              var h2 = Dt(Dt({}, t3), { conversationType: { 100: 1, 101: 2, 102: 1, 103: 3 }[m2] });
              return delete h2.type, h2;
            }
            this.core.eventBus.emit("V2NIMFriendService/sysNotification", t3);
          }
        }, a2.markBroadcastMsgAck = function markBroadcastMsgAck(t3) {
          this.config.compatibleWithV1 || this.core.sendCmd("v2BatchMarkRead", { sid: 7, cid: 17, ids: map$6(t3).call(t3, function(t4) {
            return t4.id;
          }) });
        }, a2.syncBroadcastMsgHandler = function syncBroadcastMsgHandler(t3) {
          var a3 = t3.content.datas;
          this.markBroadcastMsgAck(a3), this.emit("onReceiveBroadcastNotifications", a3);
        }, a2.onBroadcastMsgHandler = function onBroadcastMsgHandler(t3) {
          var a3 = t3.content.data;
          this.markBroadcastMsgAck([a3]), this.emit("onReceiveBroadcastNotifications", [a3]);
        }, a2.onSysNotificationHandler = function onSysNotificationHandler(t3) {
          this.markSysNotificationAck([t3.content.data]);
          var a3 = this.processSystemNotification(t3.content.data);
          a3 && this.emit("onReceiveCustomNotifications", [a3]);
        }, a2.v2SyncOfflineSysNotificationsHandler = function v2SyncOfflineSysNotificationsHandler(t3) {
          var a3, u2, m2, h2 = this;
          this.markSysNotificationAck(t3.content.datas);
          var g2 = filter(a3 = map$6(u2 = sort(m2 = t3.content.datas).call(m2, function(t4, a4) {
            return t4.timestamp - a4.timestamp;
          })).call(u2, function(t4) {
            return h2.processSystemNotification(t4);
          })).call(a3, function(t4) {
            return t4;
          });
          g2 && this.emit("onReceiveCustomNotifications", g2);
        }, a2.v2NotificationRevokeHandler = function v2NotificationRevokeHandler(t3) {
          this.markSysNotificationAck([t3.content.data]);
        }, a2.v2NotificationSyncRevokeHandler = function v2NotificationSyncRevokeHandler(t3) {
          var a3 = t3.content.type;
          Uu(a3) === 1 && this.markSysNotificationAck(t3.content.datas);
        }, a2.markSysNotificationAck = function markSysNotificationAck(t3) {
          if (!this.config.compatibleWithV1) {
            var a3 = [], u2 = [], m2 = [15, 16, 17, 18, 103];
            forEach$1(t3).call(t3, function(t4) {
              t4.idServer && (includes(m2).call(m2, t4.type) ? u2.push(t4.idServer) : a3.push(t4.idServer));
            }), a3.length > 0 && this.core.sendCmd("v2BatchMarkRead", { sid: "7", cid: "3", ids: a3 }), u2.length > 0 && this.core.sendCmd("v2BatchMarkRead", { sid: "21", cid: "19", ids: u2 });
          }
        }, V2NIMNotificationServiceImpl;
      }(ip), lI = { "27_1": "v2NIMSync", "27_10": "v2QChatSync" }, uI = { v2NIMSync: { sid: 27, cid: 1, service: "V2NIMSyncService", hasPacketTimer: false, params: [{ type: "Property", name: "tag", reflectMapper: { myInfo: 1, offlineMsgs: 2, teams: 3, roamingMsgs: 7, relations: 9, friends: 11, friendUsers: 13, msgReceipts: 14, myTeamMembers: 15, donnop: 16, recallMsg: 17, sessionAck: 18, broadcastMsgs: 20, avSignal: 21, superTeams: 22, mySuperTeamMembers: 23, superTeamRoamingMsgs: 24, deleteSuperTeamMsg: 25, superTeamSessionAck: 26, deleteSelfMsgs: 27, stickTopSessions: 28, sessionHistoryMsgsDelete: 29, p2pTeamModifyMessage: 30, superTeamModifyMessage: 31, filterMsgs: 100 } }], response: [{ type: "Long", name: "timetag" }] }, v2QChatSync: { sid: 27, cid: 10, service: "V2NIMSyncService", hasPacketTimer: false, params: [{ type: "Property", name: "tag", reflectMapper: { systemNotification: 1, pushConfig: 2 } }], response: [{ type: "Long", name: "timetag" }] } }, dI = function(t2) {
        function V2NIMSyncServiceImpl(a3) {
          var u2;
          return (u2 = t2.call(this, "V2NIMSyncService", a3) || this).teamKey = ["teams", "superTeams", "myTeamMembers", "mySuperTeamMembers"], u2.config = {}, u2.timetags = {}, u2.core.options.apiVersion !== "v2" ? Qe(u2) : (u2.initEventListeners(), registerParser({ cmdMap: lI, cmdConfig: uI }), u2);
        }
        Nt(V2NIMSyncServiceImpl, t2);
        var a2 = V2NIMSyncServiceImpl.prototype;
        return a2.reset = function reset() {
          this.timetags = {};
        }, a2.setOptions = function setOptions(t3) {
          var a3 = this.core;
          return this.config = Dt({ myInfo: !!a3.user.name, offlineMsgs: !!a3.V2NIMMessageService.name, roamingMsgs: !!a3.V2NIMMessageService.name, relations: !!a3.user.name, friends: !!a3.friend.name, friendUsers: !!a3.user.name, msgReceipts: !!a3.V2NIMMessageService.name, broadcastMsgs: !!a3.V2NIMNotificationService.name, recallMsg: !!a3.V2NIMMessageService.name, sessionAck: !!a3.V2NIMConversationService.name, superTeamSessionAck: !!a3.V2NIMConversationService.name, superTeamRoamingMsgs: !!a3.V2NIMTeamService.name, deleteSuperTeamMsg: !!a3.V2NIMTeamService.name, deleteSelfMsgs: !!a3.V2NIMMessageService.name, sessionHistoryMsgsDelete: !!a3.V2NIMMessageService.name, avSignal: !!a3.signaling.name, teams: !!a3.V2NIMTeamService.name, superTeams: !!a3.V2NIMTeamService.name, myTeamMembers: !!a3.V2NIMTeamService.name, mySuperTeamMembers: !!a3.V2NIMTeamService.name, p2pTeamModifyMessage: !!a3.V2NIMMessageService.name, superTeamModifyMessage: !!a3.V2NIMMessageService.name }, t3), this.config;
        }, a2.doBasicSync = function doBasicSync() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var t3, a3, u2, m2, h2, g2 = this;
            return Ql.wrap(function _callee$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    return t3 = Ht(this.config), a3 = filter(t3).call(t3, function(t4) {
                      var a4;
                      return !includes(a4 = g2.teamKey).call(a4, t4) && g2.config[t4];
                    }), u2 = this.genSyncParams(a3), this.logger.log("V2Sync:basic", u2), M2.next = 6, this.core.clientSocket.sendCmd("v2NIMSync", { tag: u2 });
                  case 6:
                    return m2 = M2.sent, h2 = m2.content.timetag, this.setTimetags(h2, a3), M2.next = 11, this.delaySyncDone();
                  case 11:
                    return M2.next = 13, this.handleImmediate();
                  case 13:
                    this.core.logger.log("sync::basic sync complete in", h2);
                  case 14:
                  case "end":
                    return M2.stop();
                }
            }, _callee, this);
          }));
        }, a2.doTeamSync = function doTeamSync() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var t3, a3, u2, m2, h2, g2 = this;
            return Ql.wrap(function _callee2$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    if ((a3 = filter(t3 = this.teamKey).call(t3, function(t4) {
                      return g2.config[t4];
                    })).length !== 0) {
                      M2.next = 3;
                      break;
                    }
                    return M2.abrupt("return");
                  case 3:
                    return u2 = this.genSyncParams(a3), this.core.eventBus.emit("V2NIMTeamService/onSyncStarted"), this.logger.log("V2Sync:team", u2), m2 = null, M2.prev = 7, M2.next = 10, this.core.clientSocket.sendCmd("v2NIMSync", { tag: u2 });
                  case 10:
                    m2 = M2.sent, M2.next = 17;
                    break;
                  case 13:
                    throw M2.prev = 13, M2.t0 = M2.catch(7), this.core.eventBus.emit("V2NIMTeamService/onSyncFailed", M2.t0), M2.t0;
                  case 17:
                    this.core.eventBus.emit("V2NIMTeamService/onSyncFinished"), h2 = m2.content.timetag, this.setTimetags(h2, this.teamKey), this.core.logger.log("sync::team sync complete in", h2);
                  case 21:
                  case "end":
                    return M2.stop();
                }
            }, _callee2, this, [[7, 13]]);
          }));
        }, a2.doQchatSync = function doQchatSync() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var t3;
            return Ql.wrap(function _callee3$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return a3.next = 2, this.core.clientSocket.sendCmd("v2QChatSync", { tag: { systemNotification: 0 } });
                  case 2:
                    t3 = a3.sent, this.core.logger.log("sync::qchat sync complete in", t3.content.timetag);
                  case 4:
                  case "end":
                    return a3.stop();
                }
            }, _callee3, this);
          }));
        }, a2.doSync = function doSync() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var t3;
            return Ql.wrap(function _callee4$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    if ((t3 = get(this.core, "V2NIMLoginService.authenticator.loginClientOfThisConnection.loginType")) !== void 0) {
                      a3.next = 4;
                      break;
                    }
                    return this.logger.warn("sync::doSync: no loginType, stop sync"), a3.abrupt("return");
                  case 4:
                    if (this.logger.log("sync::doSync:type " + t3), this.core.V2NIMLoginService.dataSync.switchDataSync({ type: 1, state: 2 }), t3 !== 1) {
                      a3.next = 20;
                      break;
                    }
                    return a3.prev = 7, a3.next = 10, this.doBasicSync();
                  case 10:
                    return a3.next = 12, this.doTeamSync();
                  case 12:
                    a3.next = 18;
                    break;
                  case 14:
                    return a3.prev = 14, a3.t0 = a3.catch(7), this.doSyncComplete(a3.t0), a3.abrupt("return");
                  case 18:
                    a3.next = 49;
                    break;
                  case 20:
                    if (t3 !== 2) {
                      a3.next = 32;
                      break;
                    }
                    return a3.prev = 21, a3.next = 24, this.doQchatSync();
                  case 24:
                    a3.next = 30;
                    break;
                  case 26:
                    return a3.prev = 26, a3.t1 = a3.catch(21), this.doSyncComplete(a3.t1), a3.abrupt("return");
                  case 30:
                    a3.next = 49;
                    break;
                  case 32:
                    if (t3 !== 3) {
                      a3.next = 48;
                      break;
                    }
                    return a3.prev = 33, a3.next = 36, this.doBasicSync();
                  case 36:
                    return a3.next = 38, this.doTeamSync();
                  case 38:
                    return a3.next = 40, this.doQchatSync();
                  case 40:
                    a3.next = 46;
                    break;
                  case 42:
                    return a3.prev = 42, a3.t2 = a3.catch(33), this.doSyncComplete(a3.t2), a3.abrupt("return");
                  case 46:
                    a3.next = 49;
                    break;
                  case 48:
                    return a3.abrupt("return");
                  case 49:
                    this.doSyncComplete();
                  case 50:
                  case "end":
                    return a3.stop();
                }
            }, _callee4, this, [[7, 14], [21, 26], [33, 42]]);
          }));
        }, a2.doSyncComplete = function doSyncComplete(t3) {
          t3 && this.core.logger.log("sync::doSync complete but got error", t3), this.core.V2NIMLoginService.dataSync.switchDataSync({ type: 1, state: 3, error: t3, subType: "mainSync" });
        }, a2.initEventListeners = function initEventListeners() {
          var t3 = this;
          this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", function() {
            t3.doSync();
          });
        }, a2.genSyncParams = function genSyncParams(t3) {
          var a3 = this;
          return reduce(t3).call(t3, function(t4, u2) {
            var m2 = u2;
            return t4[m2] = a3.timetags[m2] || 0, t4;
          }, {});
        }, a2.setTimetags = function setTimetags(t3, a3) {
          var u2 = this;
          forEach$1(a3).call(a3, function(a4) {
            u2.timetags[a4] = t3;
          });
        }, a2.handleImmediate = function handleImmediate() {
          return this.core.session && this.core.session.onSyncDone && this.core.session.onSyncDone(), zi.resolve();
        }, a2.delaySyncDone = function delaySyncDone() {
          return getMiniappEnv() === "ALI" ? (this.core.logger.log("sync: emit ALIAPP sycnHandler, handle later"), new zi(function(t3) {
            mo(function() {
              t3();
            }, 100);
          })) : zi.resolve();
        }, V2NIMSyncServiceImpl;
      }(ip);
      var pI = "V2NIMAIService", mI = { "4_26": "v2AIChatNotify", "29_35": "v2AIProxyModelCall", "29_36": "v2AIGetUserList" }, hI = { accountId: 1, messages: { id: 2, converter: objectToJSONString, retConverter: stringToJSONObject }, requestId: 3, content: { id: 4, converter: objectToJSONString, retConverter: stringToJSONObject }, promptVariables: 5, modelConfigParams: { id: 6, converter: objectToJSONString, retConverter: stringToJSONObject }, antispamBusinessId: 7, antispamEnabled: { id: 8, converter: boolToInt } }, gI = { accountId: 1, name: 3, avatar: 4, sign: 5, gender: { id: 6, retType: "number" }, email: 7, birthday: 8, mobile: 9, serverExtension: 10, modelType: { id: 11, retType: "number" }, modelConfig: { id: 12, retConverter: function retConverter(t2) {
        if (t2 = stringToJSONObject(t2)) {
          var a2 = Ht(t2), u2 = reduce(a2).call(a2, function(a3, u3) {
            var m2 = function camelCase(t3) {
              var a4;
              return map$6(a4 = (t3 = t3 || "").split("_")).call(a4, function(t4, a5) {
                return a5 === 0 ? t4 : t4[0].toUpperCase() + slice(t4).call(t4, 1);
              }).join("");
            }(u3);
            return a3[m2] = t2[u3], a3;
          }, {});
          if (typeof u2.promptKeys == "string")
            try {
              u2.promptKeys = JSON.parse(u2.promptKeys);
            } catch (t3) {
            }
          return u2;
        }
      } }, yunxinConfig: { id: 13, retConverter: function retConverter(t2) {
        if (t2 = stringToJSONObject(t2))
          return t2;
      } }, valid: { id: 14, retType: "boolean" }, createTime: { id: 15, retType: "number" }, updateTime: { id: 16, retType: "number" } }, vI = { v2AIChatNotify: { sid: 4, cid: 26, service: pI, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem({ code: { id: 1, retType: "number" }, accountId: 2, requestId: 3, content: { id: 4, retConverter: stringToJSONObject } }) }] }, v2AIProxyModelCall: { sid: 29, cid: 35, service: pI, params: [{ type: "Property", name: "tag", reflectMapper: hI }] }, v2AIGetUserList: { sid: 29, cid: 36, service: pI, params: [{ type: "Property", name: "tag", reflectMapper: { pageToken: 1, limit: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(gI) }, { type: "Property", name: "queryTag", reflectMapper: invertSerializeItem({ hasMore: { id: 16, retType: "boolean" }, nextToken: 2 }) }] } }, fI = function(t2) {
        function V2NIMAIServiceImpl(a3) {
          var u2;
          return u2 = t2.call(this, "V2NIMAIService", a3) || this, registerParser({ cmdMap: mI, cmdConfig: vI }), u2;
        }
        Nt(V2NIMAIServiceImpl, t2);
        var a2 = V2NIMAIServiceImpl.prototype;
        return a2.emit = function emit(a3) {
          for (var u2, m2, h2 = this.name + "::emit " + a3.toString(), g2 = arguments.length, M2 = new Array(g2 > 1 ? g2 - 1 : 0), I2 = 1; I2 < g2; I2++)
            M2[I2 - 1] = arguments[I2];
          if (a3 === "onProxyAIModelCall") {
            var S2 = M2[0];
            this.logger.log("" + h2, "code:" + S2.code + ";accountId:" + S2.accountId + ";requestId:" + S2.requestId);
          } else {
            var T2, C2;
            (T2 = this.logger).log.apply(T2, concat(C2 = ["" + h2]).call(C2, M2));
          }
          return (u2 = t2.prototype.emit).call.apply(u2, concat(m2 = [this, a3]).call(m2, M2));
        }, a2.getAIUserList = function getAIUserList() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var t3;
            return Ql.wrap(function _callee$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return this.checkV2(), a3.next = 3, this.core.sendCmd("v2AIGetUserList", { tag: {} });
                  case 3:
                    return t3 = a3.sent, a3.abrupt("return", t3.content.datas);
                  case 5:
                  case "end":
                    return a3.stop();
                }
            }, _callee, this);
          }));
        }, a2.proxyAIModelCall = function proxyAIModelCall(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            return Ql.wrap(function _callee2$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    return validate($m, t3, "", true), a3.next = 3, this.core.sendCmd("v2AIProxyModelCall", { tag: t3 });
                  case 3:
                  case "end":
                    return a3.stop();
                }
            }, _callee2, this);
          }));
        }, a2.v2AIChatNotifyHandler = function v2AIChatNotifyHandler(t3) {
          var a3 = t3.content.data;
          a3 && a3.requestId ? this.emit("onProxyAIModelCall", { code: a3.code || 200, accountId: a3.accountId, requestId: a3.requestId, content: a3.content }) : this.logger.warn("v2AIChatNotifyHandler: invalid data", a3);
        }, V2NIMAIServiceImpl;
      }(ip), yI = { "18_1": "v2SignallingCreateRoom", "18_2": "v2SignallingDelayRoom", "18_3": "v2SignallingCloseRoom", "18_4": "v2SignallingJoinRoom", "18_5": "v2SignallingLeaveRoom", "18_6": "v2SignallingInvite", "18_7": "v2SignallingCancelInvite", "18_16": "v2SignallingCall", "18_17": "v2SignallingCallSetup", "18_8": "v2SignallingRejectInvite", "18_9": "v2SignallingAcceptInvite", "18_10": "v2SignallingSendControl", "15_11": "v2SignallingOnlineEvent", "15_12": "v2SignallingMultiClientEvent", "15_13": "v2SignallingOfflineEvent", "15_14": "v2SignallingSyncChannels", "18_15": "v2SignallingGetRoomInfo" }, _I = "V2NIMSignallingService", MI = { accountId: 1, uid: { id: 2, retType: "number" }, joinTime: { id: 3, retType: "number" }, expireTime: { id: 4, retType: "number" }, deviceId: 5 }, II = { channelType: { id: 1, retType: "number", retAccess: "channelInfo.channelType" }, channelName: { id: 2, retAccess: "channelInfo.channelName" }, channelId: { id: 3, retAccess: "channelInfo.channelId" }, createTime: { id: 4, retType: "number", retAccess: "channelInfo.createTime" }, expireTime: { id: 5, retType: "number", retAccess: "channelInfo.expireTime" }, creatorAccountId: { id: 6, retAccess: "channelInfo.creatorAccountId" }, channelExtension: { id: 7, retAccess: "channelInfo.channelExtension" }, invalid: 8, fromAccid: 10, toAccid: 11, requestId: 12, pushEnabled: { id: 13, access: "pushConfig.pushEnabled", converter: boolToInt, retType: "boolean" }, pushTitle: { id: 14, access: "pushConfig.pushTitle" }, pushContent: { id: 15, access: "pushConfig.pushContent" }, pushPayload: { id: 16, access: "pushConfig.pushPayload" }, unreadEnabled: { id: 17, access: "signallingConfig.unreadEnabled", converter: boolToInt, retType: "boolean", def: 1 }, members: { id: 18, retAccess: "members", retConverter: function retConverter(t2) {
        try {
          var a2 = JSON.parse(t2);
          return map$6(a2).call(a2, function(t3) {
            return deserialize(t3, invertSerializeItem(MI));
          });
        } catch (t3) {
          return;
        }
      } }, attach: { id: 19, retConverter: stringToJSONObject }, serverExtension: { id: 20, retDef: "" }, offlineEnabled: { id: 21, converter: boolToInt, retType: "boolean", def: 1 }, msgId: 22, selfUid: { id: 23, retType: "number", access: "signallingConfig.selfUid" }, time: { id: 24, retType: "number" }, rtcChannelName: { id: 25, access: "rtcConfig.rtcChannelName" }, rtcTokenTtl: { id: 26, retType: "number", access: "rtcConfig.rtcTokenTtl", retAccess: "rtcInfo.rtcTokenTtl" }, rtcToken: { id: 27, retAccess: "rtcInfo.rtcToken" }, rtcParams: { id: 28, access: "rtcConfig.rtcParams", retAccess: "rtcInfo.rtcParams" }, callStatus: { id: 30, retType: "number" } }, SI = { v2SignallingCall: { sid: 18, cid: 16, service: _I, params: [{ type: "Property", name: "tag", reflectMapper: II }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(II) }] }, v2SignallingCallSetup: { sid: 18, cid: 17, service: _I, params: [{ type: "Property", name: "tag", reflectMapper: II }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(II) }] }, v2SignallingCreateRoom: { sid: 18, cid: 1, service: _I, params: [{ type: "Property", name: "tag", reflectMapper: II }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(II) }] }, v2SignallingDelayRoom: { sid: 18, cid: 2, service: _I, params: [{ type: "Property", name: "tag", reflectMapper: II }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(II) }] }, v2SignallingCloseRoom: { sid: 18, cid: 3, service: _I, params: [{ type: "Property", name: "tag", reflectMapper: II }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(II) }] }, v2SignallingJoinRoom: { sid: 18, cid: 4, service: _I, params: [{ type: "Property", name: "tag", reflectMapper: II }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(II) }] }, v2SignallingLeaveRoom: { sid: 18, cid: 5, service: _I, params: [{ type: "Property", name: "tag", reflectMapper: II }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(II) }] }, v2SignallingInvite: { sid: 18, cid: 6, service: _I, params: [{ type: "Property", name: "tag", reflectMapper: II }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(II) }] }, v2SignallingCancelInvite: { sid: 18, cid: 7, service: _I, params: [{ type: "Property", name: "tag", reflectMapper: II }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(II) }] }, v2SignallingRejectInvite: { sid: 18, cid: 8, service: _I, params: [{ type: "Property", name: "tag", reflectMapper: II }] }, v2SignallingAcceptInvite: { sid: 18, cid: 9, service: _I, params: [{ type: "Property", name: "tag", reflectMapper: II }] }, v2SignallingSendControl: { sid: 18, cid: 10, service: _I, params: [{ type: "Property", name: "tag", reflectMapper: II }] }, v2SignallingOnlineEvent: { sid: 15, cid: 11, service: _I, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(II) }] }, v2SignallingMultiClientEvent: { sid: 15, cid: 12, service: _I, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(II) }] }, v2SignallingOfflineEvent: { sid: 15, cid: 13, service: _I, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(II) }] }, v2SignallingSyncChannels: { sid: 15, cid: 14, service: _I, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(II) }] }, v2SignallingGetRoomInfo: { sid: 18, cid: 15, service: _I, params: [{ type: "Property", name: "tag", reflectMapper: II }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(II) }] }, v2SignallingBatchMarkRead: { sid: 4, cid: 5, hasPacketResponse: false, service: _I, params: [{ type: "Byte", name: "sid" }, { type: "Byte", name: "cid" }, { type: "LongArray", name: "ids" }] } }, TI = { calleeAccountId: { type: "string", required: true, allowEmpty: false }, requestId: { type: "string", required: true, allowEmpty: false }, channelType: { type: "enum", values: [1, 3, 2] }, channelName: { type: "string", required: false, allowEmpty: true }, channelExtension: { type: "string", required: false, allowEmpty: true }, serverExtension: { type: "string", required: false, allowEmpty: true }, signallingConfig: { type: "object", required: false, rules: { offlineEnabled: { type: "boolean", required: false }, unreadEnabled: { type: "boolean", required: false }, selfUid: { type: "number", required: false } } }, pushConfig: { type: "object", required: false, rules: { pushEnabled: { type: "boolean", required: false }, pushTitle: { type: "string", required: false, allowEmpty: true }, pushContent: { type: "string", required: false, allowEmpty: true }, pushPayload: { type: "string", required: false, allowEmpty: true } } }, rtcConfig: { type: "object", required: false, rules: { rtcChannelName: { type: "string", required: false, allowEmpty: true }, rtcTokenTtl: { type: "number", required: false }, rtcParams: { type: "string", required: false, allowEmpty: true } } } }, CI = { channelId: { type: "string", required: true, allowEmpty: false }, callerAccountId: { type: "string", required: true, allowEmpty: false }, requestId: { type: "string", required: true, allowEmpty: false }, serverExtension: { type: "string", required: false, allowEmpty: true }, signallingConfig: { type: "object", required: false, rules: { offlineEnabled: { type: "boolean", required: false }, unreadEnabled: { type: "boolean", required: false }, selfUid: { type: "number", required: false } } }, rtcConfig: { type: "object", required: false, rules: { rtcChannelName: { type: "string", required: false, allowEmpty: true }, rtcTokenTtl: { type: "number", required: false }, rtcParams: { type: "string", required: false, allowEmpty: true } } } }, bI = { channelType: { type: "enum", values: [1, 3, 2] }, channelName: { type: "string", required: false, allowEmpty: true }, channelExtension: { type: "string", required: false, allowEmpty: true } }, EI = { channelId: { type: "string", required: true, allowEmpty: false }, offlineEnabled: { type: "boolean", required: false }, serverExtension: { type: "string", required: false, allowEmpty: true } }, kI = { channelId: { type: "string", required: true, allowEmpty: false }, serverExtension: { type: "string", required: false, allowEmpty: true }, signallingConfig: { type: "object", required: false, rules: { offlineEnabled: { type: "boolean", required: false }, unreadEnabled: { type: "boolean", required: false }, selfUid: { type: "number", required: false } } }, rtcConfig: { type: "object", required: false, rules: { rtcChannelName: { type: "string", required: false, allowEmpty: true }, rtcTokenTtl: { type: "number", required: false }, rtcParams: { type: "string", required: false, allowEmpty: true } } } }, wI = { channelId: { type: "string", required: true, allowEmpty: false }, offlineEnabled: { type: "boolean", required: false }, serverExtension: { type: "string", required: false, allowEmpty: true } }, RI = { channelId: { type: "string", required: true, allowEmpty: false }, inviteeAccountId: { type: "string", required: true, allowEmpty: false }, requestId: { type: "string", required: true, allowEmpty: false }, serverExtension: { type: "string", required: false, allowEmpty: true }, signallingConfig: { type: "object", required: false, rules: { offlineEnabled: { type: "boolean", required: false }, unreadEnabled: { type: "boolean", required: false }, selfUid: { type: "number", required: false } } }, pushConfig: { type: "object", required: false, rules: { pushEnabled: { type: "boolean", required: false }, pushTitle: { type: "string", required: false, allowEmpty: true }, pushContent: { type: "string", required: false, allowEmpty: true }, pushPayload: { type: "string", required: false, allowEmpty: true } } } }, AI = { channelId: { type: "string", required: true, allowEmpty: false }, inviteeAccountId: { type: "string", required: true, allowEmpty: false }, requestId: { type: "string", required: true, allowEmpty: false }, serverExtension: { type: "string", required: false, allowEmpty: true }, offlineEnabled: { type: "boolean", required: false } }, NI = { channelId: { type: "string", allowEmpty: false }, receiverAccountId: { type: "string", required: false }, serverExtension: { type: "string", required: false, allowEmpty: true } }, xI = { channelId: { type: "string", allowEmpty: false }, inviterAccountId: { type: "string", allowEmpty: false }, requestId: { type: "string", allowEmpty: false }, serverExtension: { type: "string", required: false, allowEmpty: true }, offlineEnabled: { type: "boolean", required: false } }, OI = xI;
      function formatSignalingEvent(t2) {
        var a2, u2 = t2.attach, m2 = { eventType: u2.type, channelInfo: t2.channelInfo, operatorAccountId: t2.fromAccid, time: t2.time, serverExtension: t2.serverExtension, requestId: t2.requestId, pushConfig: t2.pushConfig, unreadEnabled: (a2 = t2.signallingConfig) === null || a2 === void 0 ? void 0 : a2.unreadEnabled }, h2 = t2.fromAccid, g2 = t2.toAccid;
        switch (m2.eventType) {
          case 1:
            break;
          case 2:
            m2.member = { accountId: u2.member[1], uid: Number(u2.member[2]), joinTime: Number(u2.member[3]), expireTime: Number(u2.member[4]), deviceId: u2.member[5] };
            break;
          case 3:
          case 4:
            m2.operatorAccountId = h2, m2.inviteeAccountId = g2, m2.inviterAccountId = h2;
            break;
          case 5:
          case 6:
            m2.operatorAccountId = h2, m2.inviterAccountId = g2, m2.inviteeAccountId = h2;
        }
        return JSON.parse(Un(m2));
      }
      var PI, LI = function(t2) {
        function V2NIMSignallingServiceImpl(a3, u2) {
          var m2;
          return u2 === void 0 && (u2 = {}), (m2 = t2.call(this, "V2NIMSignallingService", a3) || this).config = { compatibleWithV1: true }, m2.channels = {}, m2.timer = 0, m2.pollingInterval = 12e4, m2.core.options.apiVersion !== "v2" ? Qe(m2) : (registerParser({ cmdMap: yI, cmdConfig: SI }), m2.setOptions(u2), m2);
        }
        Nt(V2NIMSignallingServiceImpl, t2);
        var a2 = V2NIMSignallingServiceImpl.prototype;
        return a2.reset = function reset() {
          this.timer = 0, this.channels = {};
        }, a2.setOptions = function setOptions(t3) {
          var a3;
          ((a3 = this.core.signaling) === null || a3 === void 0 ? void 0 : a3.name) ? this.config.compatibleWithV1 = true : this.config.compatibleWithV1 = false, this.config = Dt(this.config, t3);
        }, a2.emit = function emit(a3) {
          for (var u2, m2, h2, g2, M2 = this.name + "::emit " + a3.toString(), I2 = arguments.length, S2 = new Array(I2 > 1 ? I2 - 1 : 0), T2 = 1; T2 < I2; T2++)
            S2[T2 - 1] = arguments[T2];
          return (u2 = this.logger).log.apply(u2, concat(m2 = ["" + M2]).call(m2, S2)), (h2 = t2.prototype.emit).call.apply(h2, concat(g2 = [this, a3]).call(g2, S2));
        }, a2.call = function call(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var u2, m2, h2, g2;
            return Ql.wrap(function _callee$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    if (this.checkV2(), validate(TI, t3, "", true), t3.calleeAccountId !== this.core.account) {
                      M2.next = 4;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "You cannot call yourself" } });
                  case 4:
                    return u2 = t3.pushConfig !== void 0 && (t3.pushConfig.pushEnabled !== void 0 && t3.pushConfig.pushEnabled), M2.next = 7, this.core.sendCmd("v2SignallingCall", { tag: Dt(Dt({}, t3), { toAccid: t3.calleeAccountId, offlineEnabled: ((a3 = t3.signallingConfig) === null || a3 === void 0 ? void 0 : a3.offlineEnabled) === void 0 || t3.signallingConfig.offlineEnabled, pushConfig: Dt(Dt({}, t3.pushConfig || {}), { pushEnabled: u2 }) }) });
                  case 7:
                    return m2 = M2.sent, h2 = m2.content.data, this.channels[h2.channelInfo.channelId] = cloneDeep(h2.channelInfo), this.timer || (this.timer = this.core.timerManager.addTimer(bind$1(g2 = this.aotoDelay).call(g2, this), this.pollingInterval, -1)), M2.abrupt("return", { callStatus: h2.callStatus, rtcInfo: h2.rtcInfo, roomInfo: { channelInfo: h2.channelInfo, members: h2.members } });
                  case 12:
                  case "end":
                    return M2.stop();
                }
            }, _callee, this);
          }));
        }, a2.callSetup = function callSetup(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var u2, m2, h2;
            return Ql.wrap(function _callee2$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    if (this.checkV2(), validate(CI, t3, "", true), t3.callerAccountId !== this.core.account) {
                      g2.next = 4;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "callSetup: cannot be yourself" } });
                  case 4:
                    return g2.next = 6, this.core.sendCmd("v2SignallingCallSetup", { tag: Dt(Dt({}, t3), { toAccid: t3.callerAccountId, offlineEnabled: ((a3 = t3.signallingConfig) === null || a3 === void 0 ? void 0 : a3.offlineEnabled) === void 0 || t3.signallingConfig.offlineEnabled }) });
                  case 6:
                    return u2 = g2.sent, m2 = u2.content.data, this.channels[m2.channelInfo.channelId] = cloneDeep(m2.channelInfo), this.timer || (this.timer = this.core.timerManager.addTimer(bind$1(h2 = this.aotoDelay).call(h2, this), this.pollingInterval, -1)), g2.abrupt("return", { callStatus: m2.callStatus, rtcInfo: m2.rtcInfo, roomInfo: { channelInfo: m2.channelInfo, members: m2.members } });
                  case 11:
                  case "end":
                    return g2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.createRoom = function createRoom(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var m2;
            return Ql.wrap(function _callee3$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    return this.checkV2(), validate(bI, { channelType: t3, channelName: a3, channelExtension: u2 }, "", true), h2.next = 4, this.core.sendCmd("v2SignallingCreateRoom", { tag: { channelType: t3, channelName: a3, channelExtension: u2 } });
                  case 4:
                    return m2 = h2.sent, h2.abrupt("return", m2.content.data.channelInfo);
                  case 6:
                  case "end":
                    return h2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.delayRoom = function delayRoom(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a3;
            return Ql.wrap(function _callee4$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.checkV2(), u2.next = 3, this.core.sendCmd("v2SignallingDelayRoom", { tag: { channelId: t3 } });
                  case 3:
                    return a3 = u2.sent, u2.abrupt("return", { channelInfo: a3.content.data.channelInfo, members: a3.content.data.members });
                  case 5:
                  case "end":
                    return u2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.closeRoom = function closeRoom(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee5() {
            return Ql.wrap(function _callee5$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this.checkV2(), validate(EI, { channelId: t3, offlineEnabled: a3, serverExtension: u2 }, "", true), m2.next = 4, this.core.sendCmd("v2SignallingCloseRoom", { tag: { channelId: t3, offlineEnabled: a3 !== void 0 && a3, serverExtension: u2 } });
                  case 4:
                  case "end":
                    return m2.stop();
                }
            }, _callee5, this);
          }));
        }, a2.joinRoom = function joinRoom(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee6() {
            var u2, m2, h2;
            return Ql.wrap(function _callee6$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return this.checkV2(), validate(kI, t3, "", true), g2.next = 4, this.core.sendCmd("v2SignallingJoinRoom", { tag: Dt(Dt({}, t3), { offlineEnabled: ((a3 = t3.signallingConfig) === null || a3 === void 0 ? void 0 : a3.offlineEnabled) === void 0 || t3.signallingConfig.offlineEnabled }) });
                  case 4:
                    return u2 = g2.sent, m2 = u2.content.data, this.channels[m2.channelInfo.channelId] = cloneDeep(m2.channelInfo), this.timer || (this.timer = this.core.timerManager.addTimer(bind$1(h2 = this.aotoDelay).call(h2, this), this.pollingInterval, -1)), g2.abrupt("return", { channelInfo: u2.content.data.channelInfo, members: u2.content.data.members });
                  case 9:
                  case "end":
                    return g2.stop();
                }
            }, _callee6, this);
          }));
        }, a2.leaveRoom = function leaveRoom(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee7() {
            return Ql.wrap(function _callee7$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return this.checkV2(), validate(wI, { channelId: t3, offlineEnabled: a3, serverExtension: u2 }, "", true), m2.next = 4, this.core.sendCmd("v2SignallingLeaveRoom", { tag: { channelId: t3, offlineEnabled: a3 !== void 0 && a3, serverExtension: u2 } });
                  case 4:
                    delete this.channels[t3];
                  case 5:
                  case "end":
                    return m2.stop();
                }
            }, _callee7, this);
          }));
        }, a2.invite = function invite(t3) {
          var a3;
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee8() {
            var u2, m2;
            return Ql.wrap(function _callee8$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    if (this.checkV2(), validate(RI, t3, "", true), t3.inviteeAccountId !== this.core.account) {
                      h2.next = 4;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "invite: cannot be yourself" } });
                  case 4:
                    return u2 = t3.pushConfig !== void 0 && (t3.pushConfig.pushEnabled !== void 0 && t3.pushConfig.pushEnabled), h2.next = 7, this.core.sendCmd("v2SignallingInvite", { tag: Dt(Dt({}, t3), { toAccid: t3.inviteeAccountId, offlineEnabled: ((a3 = t3.signallingConfig) === null || a3 === void 0 ? void 0 : a3.offlineEnabled) === void 0 || t3.signallingConfig.offlineEnabled, pushConfig: Dt(Dt({}, t3.pushConfig || {}), { pushEnabled: u2 }) }) });
                  case 7:
                    return m2 = h2.sent, h2.abrupt("return", m2.content.data);
                  case 9:
                  case "end":
                    return h2.stop();
                }
            }, _callee8, this);
          }));
        }, a2.cancelInvite = function cancelInvite(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee9() {
            var a3;
            return Ql.wrap(function _callee9$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.checkV2(), validate(AI, t3, "", true), u2.next = 4, this.core.sendCmd("v2SignallingCancelInvite", { tag: Dt(Dt({}, t3), { toAccid: t3.inviteeAccountId }) });
                  case 4:
                    return a3 = u2.sent, u2.abrupt("return", a3.content.data);
                  case 6:
                  case "end":
                    return u2.stop();
                }
            }, _callee9, this);
          }));
        }, a2.rejectInvite = function rejectInvite(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee10() {
            return Ql.wrap(function _callee10$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    if (validate(xI, t3, "", true), t3.inviterAccountId !== this.core.account) {
                      a3.next = 3;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "rejectInvite: cannot be yourself" } });
                  case 3:
                    return a3.next = 5, this.core.sendCmd("v2SignallingRejectInvite", { tag: Dt(Dt({}, t3), { toAccid: t3.inviterAccountId }) });
                  case 5:
                  case "end":
                    return a3.stop();
                }
            }, _callee10, this);
          }));
        }, a2.acceptInvite = function acceptInvite(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee11() {
            return Ql.wrap(function _callee11$(a3) {
              for (; ; )
                switch (a3.prev = a3.next) {
                  case 0:
                    if (validate(OI, t3, "", true), t3.inviterAccountId !== this.core.account) {
                      a3.next = 3;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "acceptInvite: cannot be yourself" } });
                  case 3:
                    return a3.next = 5, this.core.sendCmd("v2SignallingAcceptInvite", { tag: Dt(Dt({}, t3), { toAccid: t3.inviterAccountId }) });
                  case 5:
                  case "end":
                    return a3.stop();
                }
            }, _callee11, this);
          }));
        }, a2.sendControl = function sendControl(t3, a3, u2) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee12() {
            return Ql.wrap(function _callee12$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    return validate(NI, { channelId: t3, receiverAccountId: a3, serverExtension: u2 }, "", true), m2.next = 3, this.core.sendCmd("v2SignallingSendControl", { tag: { channelId: t3, toAccid: a3, serverExtension: u2 } });
                  case 3:
                  case "end":
                    return m2.stop();
                }
            }, _callee12, this);
          }));
        }, a2.getRoomInfoByChannelName = function getRoomInfoByChannelName(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee13() {
            var a3, u2, m2, h2;
            return Ql.wrap(function _callee13$(g2) {
              for (; ; )
                switch (g2.prev = g2.next) {
                  case 0:
                    return validate({ channelName: { type: "string", allowEmpty: false } }, { channelName: t3 }, "", true), g2.next = 3, this.core.sendCmd("v2SignallingGetRoomInfo", { tag: { channelName: t3 } });
                  case 3:
                    return a3 = g2.sent, u2 = a3.content.data, m2 = u2.members, h2 = u2.channelInfo, g2.abrupt("return", { channelInfo: h2, members: m2 || [] });
                  case 6:
                  case "end":
                    return g2.stop();
                }
            }, _callee13, this);
          }));
        }, a2.aotoDelay = function aotoDelay() {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee14() {
            var t3, a3, u2, m2;
            return Ql.wrap(function _callee14$(h2) {
              for (; ; )
                switch (h2.prev = h2.next) {
                  case 0:
                    if ((t3 = Ht(this.channels)).length !== 0) {
                      h2.next = 5;
                      break;
                    }
                    return this.timer && this.core.timerManager.deleteTimer(this.timer), this.timer = 0, h2.abrupt("return");
                  case 5:
                    this.logger.log("v2Signlling:autoDelay", t3), a3 = 0;
                  case 7:
                    if (!(a3 < t3.length)) {
                      h2.next = 23;
                      break;
                    }
                    return u2 = t3[a3], h2.prev = 9, h2.next = 12, this.core.sendCmd("v2SignallingDelayRoom", { tag: { channelId: u2 } });
                  case 12:
                    m2 = h2.sent, this.channels[u2] = m2.content.data.channelInfo, h2.next = 20;
                    break;
                  case 16:
                    h2.prev = 16, h2.t0 = h2.catch(9), this.logger.warn("signling:autoDelay " + u2 + " failed", h2.t0), delete this.channels[u2];
                  case 20:
                    a3++, h2.next = 7;
                    break;
                  case 23:
                  case "end":
                    return h2.stop();
                }
            }, _callee14, this, [[9, 16]]);
          }));
        }, a2.v2SignallingOnlineEventHandler = function v2SignallingOnlineEventHandler(t3) {
          var a3 = t3.content.data, u2 = typeof get(t3, "raw.r[0]") == "number" ? "" + t3.raw.r[0] : "0";
          !this.config.compatibleWithV1 && u2 && Uu(u2) && this.core.sendCmd("v2SignallingBatchMarkRead", { sid: 15, cid: 11, ids: [u2] }), this.emit("onOnlineEvent", formatSignalingEvent(a3));
        }, a2.v2SignallingMultiClientEventHandler = function v2SignallingMultiClientEventHandler(t3) {
          this.emit("onMultiClientEvent", formatSignalingEvent(t3.content.data));
        }, a2.v2SignallingOfflineEventHandler = function v2SignallingOfflineEventHandler(t3) {
          var a3;
          if (t3.content.datas && t3.content.datas.length > 0) {
            if (!this.config.compatibleWithV1) {
              var u2, m2 = map$6(u2 = t3.content.datas).call(u2, function(t4) {
                return t4.msgId;
              });
              m2.length > 0 && this.core.sendCmd("v2SignallingBatchMarkRead", { sid: 15, cid: 11, ids: m2 });
            }
            var h2 = map$6(a3 = t3.content.datas).call(a3, function(t4) {
              return formatSignalingEvent(t4);
            });
            this.emit("onOfflineEvent", h2);
          }
        }, a2.v2SignallingSyncChannelsHandler = function v2SignallingSyncChannelsHandler(t3) {
          var a3 = this;
          if (this.timer = 0, this.channels = {}, t3.content.datas && t3.content.datas.length > 0) {
            var u2, m2 = t3.content.datas;
            if (forEach$1(m2).call(m2, function(t4) {
              var u3 = t4.channelInfo.channelId;
              a3.channels[u3] = cloneDeep(t4.channelInfo);
            }), !this.timer)
              this.timer = this.core.timerManager.addTimer(bind$1(u2 = this.aotoDelay).call(u2, this), this.pollingInterval, -1);
            this.emit("onSyncRoomInfoList", m2);
          }
        }, V2NIMSignallingServiceImpl;
      }(ip), VI = { "19_1": "v2PublishEvent", "14_2": "v2OnUserStatusChange", "19_3": "v2SubscribeUserStatus", "19_4": "v2UnsubscribeUserStatus", "19_5": "v2UnsubscribeAllUserStatus", "19_6": "v2QuerySubscribeEvent", "19_7": "v2QueryAllSubscribeEvent", "14_9": "v2OnMultiUserStatusChange" }, UI = "V2NIMSubscriptionService", DI = { eventType: { id: 1, retType: "number" }, statusType: { id: 2, retType: "number" }, uniqueId: 3, extension: 4, duration: { id: 5, retType: "number" }, onlineOnly: { id: 6, retType: "boolean", converter: function converter(t2) {
        return t2 ? 1 : 2;
      } }, multiSync: { id: 7, retType: "boolean", converter: boolToInt }, publishTime: { id: 10, retType: "number" }, serverId: 11, clientType: { id: 12, retType: "number" }, serverExtension: 13, extensionReceived: 14, accountId: 103 }, qI = { eventType: { id: 1, retType: "number" }, duration: { id: 2, retType: "number" }, immediateSync: { id: 3, retType: "number", converter: boolToInt }, accountId: 102, subscribeTime: { id: 105, retType: "number" } }, BI = { v2PublishEvent: { sid: 19, cid: 1, service: UI, params: [{ type: "Property", name: "tag", reflectMapper: DI }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(DI) }] }, v2OnUserStatusChange: { sid: 14, cid: 2, service: UI, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(DI) }] }, v2SubscribeUserStatus: { sid: 19, cid: 3, service: UI, params: [{ type: "Property", name: "tag", reflectMapper: qI }, { type: "StrArray", name: "accountIds" }], response: [{ type: "StrArray", name: "failedList" }] }, v2UnsubscribeUserStatus: { sid: 19, cid: 4, service: UI, params: [{ type: "Property", name: "tag", reflectMapper: qI }, { type: "StrArray", name: "accountIds" }], response: [{ type: "StrArray", name: "failedList" }] }, v2UnsubscribeAllUserStatus: { sid: 19, cid: 5, service: UI, params: [{ type: "Property", name: "tag", reflectMapper: qI }] }, v2QuerySubscribeEvent: { sid: 19, cid: 6, service: UI, params: [{ type: "Property", name: "tag", reflectMapper: qI }, { type: "StrArray", name: "accountIds" }], response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(qI) }] }, v2QueryAllSubscribeEvent: { sid: 19, cid: 7, service: UI, params: [{ type: "Property", name: "tag", reflectMapper: qI }], response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(qI) }] }, v2OnMultiUserStatusChange: { sid: 14, cid: 9, service: UI, response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(DI) }] } }, FI = { accountIds: { type: "array", required: true, itemType: "string", min: 1, max: 100 }, duration: { type: "number", required: false, min: 60, max: 2592e3 }, immediateSync: { type: "boolean", required: false } }, GI = { accountIds: { type: "array", required: false, itemType: "string", max: 100 } }, HI = { statusType: { type: "number", required: true, min: 1e4, max: 2147483647 }, duration: { type: "number", required: false, min: 60, max: 604800 }, extension: { type: "jsonstr", required: false }, onlineOnly: { type: "boolean", required: false }, multiSync: { type: "boolean", required: false } }, jI = function(t2) {
        function V2NIMSubscriptionServiceImpl(a3) {
          var u2;
          return (u2 = t2.call(this, "V2NIMSubscriptionService", a3) || this).core.options.apiVersion !== "v2" ? Qe(u2) : (registerParser({ cmdMap: VI, cmdConfig: BI }), u2);
        }
        Nt(V2NIMSubscriptionServiceImpl, t2);
        var a2 = V2NIMSubscriptionServiceImpl.prototype;
        return a2.emit = function emit(a3) {
          for (var u2, m2, h2, g2, M2 = this.name + "::emit " + a3.toString(), I2 = arguments.length, S2 = new Array(I2 > 1 ? I2 - 1 : 0), T2 = 1; T2 < I2; T2++)
            S2[T2 - 1] = arguments[T2];
          return (u2 = this.logger).log.apply(u2, concat(m2 = ["" + M2]).call(m2, S2)), (h2 = t2.prototype.emit).call.apply(h2, concat(g2 = [this, a3]).call(g2, S2));
        }, a2.subscribeUserStatus = function subscribeUserStatus(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a3;
            return Ql.wrap(function _callee$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.checkLogin(), this.checkV2(), validate(FI, t3, "", true), u2.next = 5, this.core.sendCmd("v2SubscribeUserStatus", { tag: { eventType: 1, duration: t3.duration || 60, immediateSync: t3.immediateSync !== void 0 && t3.immediateSync }, accountIds: t3.accountIds });
                  case 5:
                    return a3 = u2.sent, u2.abrupt("return", a3.content.failedList);
                  case 7:
                  case "end":
                    return u2.stop();
                }
            }, _callee, this);
          }));
        }, a2.unsubscribeUserStatus = function unsubscribeUserStatus(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee2() {
            var a3, u2;
            return Ql.wrap(function _callee2$(m2) {
              for (; ; )
                switch (m2.prev = m2.next) {
                  case 0:
                    if (this.checkLogin(), this.checkV2(), validate(GI, t3, "", true), a3 = [], !(t3.accountIds.length > 0)) {
                      m2.next = 11;
                      break;
                    }
                    return m2.next = 7, this.core.sendCmd("v2UnsubscribeUserStatus", { tag: { eventType: 1 }, accountIds: t3.accountIds });
                  case 7:
                    u2 = m2.sent, a3 = u2.content.failedList, m2.next = 15;
                    break;
                  case 11:
                    return m2.next = 14, this.core.sendCmd("v2UnsubscribeAllUserStatus", { tag: { eventType: 1 } });
                  case 14:
                    a3 = [];
                  case 15:
                    return m2.abrupt("return", a3);
                  case 16:
                  case "end":
                    return m2.stop();
                }
            }, _callee2, this);
          }));
        }, a2.publishCustomUserStatus = function publishCustomUserStatus(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee3() {
            var a3;
            return Ql.wrap(function _callee3$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    return this.checkLogin(), this.checkV2(), validate(HI, t3, "", true), u2.next = 5, this.core.sendCmd("v2PublishEvent", { tag: Dt(Dt({}, t3), { eventType: 1, uniqueId: Iu(), duration: t3.duration || 60, onlineOnly: t3.onlineOnly === void 0 || t3.onlineOnly, multiSync: t3.multiSync !== void 0 && t3.multiSync }) });
                  case 5:
                    return a3 = u2.sent, u2.abrupt("return", a3.content.data);
                  case 7:
                  case "end":
                    return u2.stop();
                }
            }, _callee3, this);
          }));
        }, a2.queryUserStatusSubscriptions = function queryUserStatusSubscriptions(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee4() {
            var a3, u2, m2, h2, g2, M2;
            return Ql.wrap(function _callee4$(I2) {
              for (; ; )
                switch (I2.prev = I2.next) {
                  case 0:
                    if (this.checkLogin(), this.checkV2(), validate({ accountIds: { type: "array", required: true, itemType: "string", max: 3e3 } }, { accountIds: t3 }, "", true), a3 = [], !(t3.length > 0)) {
                      I2.next = 16;
                      break;
                    }
                    u2 = 0;
                  case 6:
                    if (!(u2 < t3.length)) {
                      I2.next = 14;
                      break;
                    }
                    return I2.next = 9, this.core.sendCmd("v2QuerySubscribeEvent", { tag: { eventType: 1 }, accountIds: slice(t3).call(t3, u2, u2 + 100) });
                  case 9:
                    h2 = I2.sent, a3 = concat(a3).call(a3, map$6(m2 = h2.content.data).call(m2, function(t4) {
                      return { accountId: t4.accountId, subscribeTime: t4.subscribeTime, duration: t4.duration };
                    }));
                  case 11:
                    u2 += 100, I2.next = 6;
                    break;
                  case 14:
                    I2.next = 20;
                    break;
                  case 16:
                    return I2.next = 18, this.core.sendCmd("v2QueryAllSubscribeEvent", { tag: { eventType: 1 } });
                  case 18:
                    M2 = I2.sent, a3 = concat(a3).call(a3, map$6(g2 = M2.content.data).call(g2, function(t4) {
                      return { accountId: t4.accountId, subscribeTime: t4.subscribeTime, duration: t4.duration };
                    }));
                  case 20:
                    return I2.abrupt("return", a3);
                  case 21:
                  case "end":
                    return I2.stop();
                }
            }, _callee4, this);
          }));
        }, a2.v2OnUserStatusChangeHandler = function v2OnUserStatusChangeHandler(t3) {
          var a3 = t3.content.data, u2 = a3.eventType, m2 = a3.extensionReceived, h2 = __rest(a3, ["eventType", "extensionReceived"]);
          u2 === 1 ? this.emit("onUserStatusChanged", [Dt(Dt({}, h2), { extension: m2 })]) : this.logger.log("v2OnUserStatusChangeHandler eventType = ", u2, "msgEvent = ", a3);
        }, a2.v2OnMultiUserStatusChangeHandler = function v2OnMultiUserStatusChangeHandler(t3) {
          var a3, u2 = t3.content.data, m2 = map$6(a3 = filter(u2).call(u2, function(t4) {
            return t4.eventType === 1;
          })).call(a3, function(t4) {
            t4.eventType;
            var a4 = t4.extensionReceived, u3 = __rest(t4, ["eventType", "extensionReceived"]);
            return Dt(Dt({}, u3), { extension: a4 });
          });
          m2.length > 0 && this.emit("onUserStatusChanged", m2);
        }, V2NIMSubscriptionServiceImpl;
      }(ip);
      !function(t2) {
        t2[t2.V2NIM_PROXY_REQUEST_METHOD_GET = 1] = "V2NIM_PROXY_REQUEST_METHOD_GET", t2[t2.V2NIM_PROXY_REQUEST_METHOD_POST = 2] = "V2NIM_PROXY_REQUEST_METHOD_POST", t2[t2.V2NIM_PROXY_REQUEST_METHOD_PUT = 3] = "V2NIM_PROXY_REQUEST_METHOD_PUT", t2[t2.V2NIM_PROXY_REQUEST_METHOD_DELETE = 4] = "V2NIM_PROXY_REQUEST_METHOD_DELETE";
      }(PI || (PI = {}));
      var $I = "V2NIMPassthroughService", zI = { "22_1": "v2ProxyRequest", "22_2": "v2ProxyOnRequest" }, WI = { zone: 1, path: 2, method: 3, header: 4, body: 5 }, KI = { v2ProxyRequest: { sid: 22, cid: 1, service: $I, params: [{ type: "Property", name: "tag", reflectMapper: WI }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(WI) }] }, v2ProxyOnRequest: { sid: 22, cid: 2, service: $I, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem({ fromAccountId: 1, body: 2, time: { id: 3, retType: "number" } }) }] } }, YI = { path: { type: "string", allowEmpty: false }, zone: { type: "string", required: false }, method: { type: "enum", values: [PI.V2NIM_PROXY_REQUEST_METHOD_DELETE, PI.V2NIM_PROXY_REQUEST_METHOD_GET, PI.V2NIM_PROXY_REQUEST_METHOD_POST, PI.V2NIM_PROXY_REQUEST_METHOD_PUT], required: false }, header: { type: "jsonstr", required: false }, body: { type: "string", required: false } }, QI = function(t2) {
        function V2NIMPassthroughServiceImpl(a3) {
          var u2;
          return u2 = t2.call(this, "V2NIMPassthroughService", a3) || this, registerParser({ cmdMap: zI, cmdConfig: KI }), u2;
        }
        Nt(V2NIMPassthroughServiceImpl, t2);
        var a2 = V2NIMPassthroughServiceImpl.prototype;
        return a2.emit = function emit(a3) {
          for (var u2, m2, h2, g2, M2 = this.name + "::emit " + a3.toString(), I2 = arguments.length, S2 = new Array(I2 > 1 ? I2 - 1 : 0), T2 = 1; T2 < I2; T2++)
            S2[T2 - 1] = arguments[T2];
          return (u2 = this.logger).log.apply(u2, concat(m2 = ["" + M2]).call(m2, S2)), (h2 = t2.prototype.emit).call.apply(h2, concat(g2 = [this, a3]).call(g2, S2));
        }, a2.httpProxy = function httpProxy(t3) {
          return __awaiter(this, void 0, void 0, Ql.mark(function _callee() {
            var a3;
            return Ql.wrap(function _callee$(u2) {
              for (; ; )
                switch (u2.prev = u2.next) {
                  case 0:
                    if (validate(YI, t3, "", true), !(t3.method === PI.V2NIM_PROXY_REQUEST_METHOD_GET && t3.body || t3.method === PI.V2NIM_PROXY_REQUEST_METHOD_POST && !t3.body || t3.method === PI.V2NIM_PROXY_REQUEST_METHOD_PUT && !t3.body)) {
                      u2.next = 3;
                      break;
                    }
                    throw new Pl({ code: Nl.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "method " + t3.method + ", incorrect body" } });
                  case 3:
                    return u2.next = 5, this.core.sendCmd("v2ProxyRequest", { tag: t3 });
                  case 5:
                    return a3 = u2.sent, u2.abrupt("return", a3.content.data);
                  case 7:
                  case "end":
                    return u2.stop();
                }
            }, _callee, this);
          }));
        }, a2.v2ProxyOnRequestHandler = function v2ProxyOnRequestHandler(t3) {
          var a3 = t3.content.data;
          this.emit("onProxyNotify", a3);
        }, V2NIMPassthroughServiceImpl;
      }(ip), JI = createCommonjsModule(function(t2, a2) {
        t2.exports = function(t3) {
          var add32 = function(t4, a4) {
            return t4 + a4 & 4294967295;
          }, a3 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
          function cmn(t4, a4, u2, m2, h2, g2) {
            return a4 = add32(add32(a4, t4), add32(m2, g2)), add32(a4 << h2 | a4 >>> 32 - h2, u2);
          }
          function ff(t4, a4, u2, m2, h2, g2, M2) {
            return cmn(a4 & u2 | ~a4 & m2, t4, a4, h2, g2, M2);
          }
          function gg(t4, a4, u2, m2, h2, g2, M2) {
            return cmn(a4 & m2 | u2 & ~m2, t4, a4, h2, g2, M2);
          }
          function hh(t4, a4, u2, m2, h2, g2, M2) {
            return cmn(a4 ^ u2 ^ m2, t4, a4, h2, g2, M2);
          }
          function ii(t4, a4, u2, m2, h2, g2, M2) {
            return cmn(u2 ^ (a4 | ~m2), t4, a4, h2, g2, M2);
          }
          function md5cycle(t4, a4) {
            var u2 = t4[0], m2 = t4[1], h2 = t4[2], g2 = t4[3];
            u2 = ff(u2, m2, h2, g2, a4[0], 7, -680876936), g2 = ff(g2, u2, m2, h2, a4[1], 12, -389564586), h2 = ff(h2, g2, u2, m2, a4[2], 17, 606105819), m2 = ff(m2, h2, g2, u2, a4[3], 22, -1044525330), u2 = ff(u2, m2, h2, g2, a4[4], 7, -176418897), g2 = ff(g2, u2, m2, h2, a4[5], 12, 1200080426), h2 = ff(h2, g2, u2, m2, a4[6], 17, -1473231341), m2 = ff(m2, h2, g2, u2, a4[7], 22, -45705983), u2 = ff(u2, m2, h2, g2, a4[8], 7, 1770035416), g2 = ff(g2, u2, m2, h2, a4[9], 12, -1958414417), h2 = ff(h2, g2, u2, m2, a4[10], 17, -42063), m2 = ff(m2, h2, g2, u2, a4[11], 22, -1990404162), u2 = ff(u2, m2, h2, g2, a4[12], 7, 1804603682), g2 = ff(g2, u2, m2, h2, a4[13], 12, -40341101), h2 = ff(h2, g2, u2, m2, a4[14], 17, -1502002290), u2 = gg(u2, m2 = ff(m2, h2, g2, u2, a4[15], 22, 1236535329), h2, g2, a4[1], 5, -165796510), g2 = gg(g2, u2, m2, h2, a4[6], 9, -1069501632), h2 = gg(h2, g2, u2, m2, a4[11], 14, 643717713), m2 = gg(m2, h2, g2, u2, a4[0], 20, -373897302), u2 = gg(u2, m2, h2, g2, a4[5], 5, -701558691), g2 = gg(g2, u2, m2, h2, a4[10], 9, 38016083), h2 = gg(h2, g2, u2, m2, a4[15], 14, -660478335), m2 = gg(m2, h2, g2, u2, a4[4], 20, -405537848), u2 = gg(u2, m2, h2, g2, a4[9], 5, 568446438), g2 = gg(g2, u2, m2, h2, a4[14], 9, -1019803690), h2 = gg(h2, g2, u2, m2, a4[3], 14, -187363961), m2 = gg(m2, h2, g2, u2, a4[8], 20, 1163531501), u2 = gg(u2, m2, h2, g2, a4[13], 5, -1444681467), g2 = gg(g2, u2, m2, h2, a4[2], 9, -51403784), h2 = gg(h2, g2, u2, m2, a4[7], 14, 1735328473), u2 = hh(u2, m2 = gg(m2, h2, g2, u2, a4[12], 20, -1926607734), h2, g2, a4[5], 4, -378558), g2 = hh(g2, u2, m2, h2, a4[8], 11, -2022574463), h2 = hh(h2, g2, u2, m2, a4[11], 16, 1839030562), m2 = hh(m2, h2, g2, u2, a4[14], 23, -35309556), u2 = hh(u2, m2, h2, g2, a4[1], 4, -1530992060), g2 = hh(g2, u2, m2, h2, a4[4], 11, 1272893353), h2 = hh(h2, g2, u2, m2, a4[7], 16, -155497632), m2 = hh(m2, h2, g2, u2, a4[10], 23, -1094730640), u2 = hh(u2, m2, h2, g2, a4[13], 4, 681279174), g2 = hh(g2, u2, m2, h2, a4[0], 11, -358537222), h2 = hh(h2, g2, u2, m2, a4[3], 16, -722521979), m2 = hh(m2, h2, g2, u2, a4[6], 23, 76029189), u2 = hh(u2, m2, h2, g2, a4[9], 4, -640364487), g2 = hh(g2, u2, m2, h2, a4[12], 11, -421815835), h2 = hh(h2, g2, u2, m2, a4[15], 16, 530742520), u2 = ii(u2, m2 = hh(m2, h2, g2, u2, a4[2], 23, -995338651), h2, g2, a4[0], 6, -198630844), g2 = ii(g2, u2, m2, h2, a4[7], 10, 1126891415), h2 = ii(h2, g2, u2, m2, a4[14], 15, -1416354905), m2 = ii(m2, h2, g2, u2, a4[5], 21, -57434055), u2 = ii(u2, m2, h2, g2, a4[12], 6, 1700485571), g2 = ii(g2, u2, m2, h2, a4[3], 10, -1894986606), h2 = ii(h2, g2, u2, m2, a4[10], 15, -1051523), m2 = ii(m2, h2, g2, u2, a4[1], 21, -2054922799), u2 = ii(u2, m2, h2, g2, a4[8], 6, 1873313359), g2 = ii(g2, u2, m2, h2, a4[15], 10, -30611744), h2 = ii(h2, g2, u2, m2, a4[6], 15, -1560198380), m2 = ii(m2, h2, g2, u2, a4[13], 21, 1309151649), u2 = ii(u2, m2, h2, g2, a4[4], 6, -145523070), g2 = ii(g2, u2, m2, h2, a4[11], 10, -1120210379), h2 = ii(h2, g2, u2, m2, a4[2], 15, 718787259), m2 = ii(m2, h2, g2, u2, a4[9], 21, -343485551), t4[0] = add32(u2, t4[0]), t4[1] = add32(m2, t4[1]), t4[2] = add32(h2, t4[2]), t4[3] = add32(g2, t4[3]);
          }
          function md5blk(t4) {
            var a4, u2 = [];
            for (a4 = 0; a4 < 64; a4 += 4)
              u2[a4 >> 2] = t4.charCodeAt(a4) + (t4.charCodeAt(a4 + 1) << 8) + (t4.charCodeAt(a4 + 2) << 16) + (t4.charCodeAt(a4 + 3) << 24);
            return u2;
          }
          function md5blk_array(t4) {
            var a4, u2 = [];
            for (a4 = 0; a4 < 64; a4 += 4)
              u2[a4 >> 2] = t4[a4] + (t4[a4 + 1] << 8) + (t4[a4 + 2] << 16) + (t4[a4 + 3] << 24);
            return u2;
          }
          function md51(t4) {
            var a4, u2, m2, h2, g2, M2, I2 = t4.length, S2 = [1732584193, -271733879, -1732584194, 271733878];
            for (a4 = 64; a4 <= I2; a4 += 64)
              md5cycle(S2, md5blk(t4.substring(a4 - 64, a4)));
            for (u2 = (t4 = t4.substring(a4 - 64)).length, m2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], a4 = 0; a4 < u2; a4 += 1)
              m2[a4 >> 2] |= t4.charCodeAt(a4) << (a4 % 4 << 3);
            if (m2[a4 >> 2] |= 128 << (a4 % 4 << 3), a4 > 55)
              for (md5cycle(S2, m2), a4 = 0; a4 < 16; a4 += 1)
                m2[a4] = 0;
            return h2 = (h2 = 8 * I2).toString(16).match(/(.*?)(.{0,8})$/), g2 = parseInt(h2[2], 16), M2 = parseInt(h2[1], 16) || 0, m2[14] = g2, m2[15] = M2, md5cycle(S2, m2), S2;
          }
          function md51_array(t4) {
            var a4, u2, m2, h2, g2, M2, I2 = t4.length, S2 = [1732584193, -271733879, -1732584194, 271733878];
            for (a4 = 64; a4 <= I2; a4 += 64)
              md5cycle(S2, md5blk_array(t4.subarray(a4 - 64, a4)));
            for (u2 = (t4 = a4 - 64 < I2 ? t4.subarray(a4 - 64) : new Uint8Array(0)).length, m2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], a4 = 0; a4 < u2; a4 += 1)
              m2[a4 >> 2] |= t4[a4] << (a4 % 4 << 3);
            if (m2[a4 >> 2] |= 128 << (a4 % 4 << 3), a4 > 55)
              for (md5cycle(S2, m2), a4 = 0; a4 < 16; a4 += 1)
                m2[a4] = 0;
            return h2 = (h2 = 8 * I2).toString(16).match(/(.*?)(.{0,8})$/), g2 = parseInt(h2[2], 16), M2 = parseInt(h2[1], 16) || 0, m2[14] = g2, m2[15] = M2, md5cycle(S2, m2), S2;
          }
          function rhex(t4) {
            var u2, m2 = "";
            for (u2 = 0; u2 < 4; u2 += 1)
              m2 += a3[t4 >> 8 * u2 + 4 & 15] + a3[t4 >> 8 * u2 & 15];
            return m2;
          }
          function hex(t4) {
            var a4;
            for (a4 = 0; a4 < t4.length; a4 += 1)
              t4[a4] = rhex(t4[a4]);
            return t4.join("");
          }
          function toUtf8(t4) {
            return /[\u0080-\uFFFF]/.test(t4) && (t4 = unescape(encodeURIComponent(t4))), t4;
          }
          function utf8Str2ArrayBuffer(t4, a4) {
            var u2, m2 = t4.length, h2 = new ArrayBuffer(m2), g2 = new Uint8Array(h2);
            for (u2 = 0; u2 < m2; u2 += 1)
              g2[u2] = t4.charCodeAt(u2);
            return a4 ? g2 : h2;
          }
          function arrayBuffer2Utf8Str(t4) {
            return String.fromCharCode.apply(null, new Uint8Array(t4));
          }
          function concatenateArrayBuffers(t4, a4, u2) {
            var m2 = new Uint8Array(t4.byteLength + a4.byteLength);
            return m2.set(new Uint8Array(t4)), m2.set(new Uint8Array(a4), t4.byteLength), u2 ? m2 : m2.buffer;
          }
          function hexToBinaryString(t4) {
            var a4, u2 = [], m2 = t4.length;
            for (a4 = 0; a4 < m2 - 1; a4 += 2)
              u2.push(parseInt(t4.substr(a4, 2), 16));
            return String.fromCharCode.apply(String, u2);
          }
          function SparkMD5() {
            this.reset();
          }
          return hex(md51("hello")) !== "5d41402abc4b2a76b9719d911017c592" && (add32 = function(t4, a4) {
            var u2 = (65535 & t4) + (65535 & a4);
            return (t4 >> 16) + (a4 >> 16) + (u2 >> 16) << 16 | 65535 & u2;
          }), typeof ArrayBuffer == "undefined" || ArrayBuffer.prototype.slice || function() {
            function clamp(t4, a4) {
              return (t4 = 0 | t4 || 0) < 0 ? Math.max(t4 + a4, 0) : Math.min(t4, a4);
            }
            ArrayBuffer.prototype.slice = function(a4, u2) {
              var m2, h2, g2, M2, I2 = this.byteLength, S2 = clamp(a4, I2), T2 = I2;
              return u2 !== t3 && (T2 = clamp(u2, I2)), S2 > T2 ? new ArrayBuffer(0) : (m2 = T2 - S2, h2 = new ArrayBuffer(m2), g2 = new Uint8Array(h2), M2 = new Uint8Array(this, S2, m2), g2.set(M2), h2);
            };
          }(), SparkMD5.prototype.append = function(t4) {
            return this.appendBinary(toUtf8(t4)), this;
          }, SparkMD5.prototype.appendBinary = function(t4) {
            this._buff += t4, this._length += t4.length;
            var a4, u2 = this._buff.length;
            for (a4 = 64; a4 <= u2; a4 += 64)
              md5cycle(this._hash, md5blk(this._buff.substring(a4 - 64, a4)));
            return this._buff = this._buff.substring(a4 - 64), this;
          }, SparkMD5.prototype.end = function(t4) {
            var a4, u2, m2 = this._buff, h2 = m2.length, g2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            for (a4 = 0; a4 < h2; a4 += 1)
              g2[a4 >> 2] |= m2.charCodeAt(a4) << (a4 % 4 << 3);
            return this._finish(g2, h2), u2 = hex(this._hash), t4 && (u2 = hexToBinaryString(u2)), this.reset(), u2;
          }, SparkMD5.prototype.reset = function() {
            return this._buff = "", this._length = 0, this._hash = [1732584193, -271733879, -1732584194, 271733878], this;
          }, SparkMD5.prototype.getState = function() {
            return { buff: this._buff, length: this._length, hash: this._hash };
          }, SparkMD5.prototype.setState = function(t4) {
            return this._buff = t4.buff, this._length = t4.length, this._hash = t4.hash, this;
          }, SparkMD5.prototype.destroy = function() {
            delete this._hash, delete this._buff, delete this._length;
          }, SparkMD5.prototype._finish = function(t4, a4) {
            var u2, m2, h2, g2 = a4;
            if (t4[g2 >> 2] |= 128 << (g2 % 4 << 3), g2 > 55)
              for (md5cycle(this._hash, t4), g2 = 0; g2 < 16; g2 += 1)
                t4[g2] = 0;
            u2 = (u2 = 8 * this._length).toString(16).match(/(.*?)(.{0,8})$/), m2 = parseInt(u2[2], 16), h2 = parseInt(u2[1], 16) || 0, t4[14] = m2, t4[15] = h2, md5cycle(this._hash, t4);
          }, SparkMD5.hash = function(t4, a4) {
            return SparkMD5.hashBinary(toUtf8(t4), a4);
          }, SparkMD5.hashBinary = function(t4, a4) {
            var u2 = hex(md51(t4));
            return a4 ? hexToBinaryString(u2) : u2;
          }, SparkMD5.ArrayBuffer = function() {
            this.reset();
          }, SparkMD5.ArrayBuffer.prototype.append = function(t4) {
            var a4, u2 = concatenateArrayBuffers(this._buff.buffer, t4, true), m2 = u2.length;
            for (this._length += t4.byteLength, a4 = 64; a4 <= m2; a4 += 64)
              md5cycle(this._hash, md5blk_array(u2.subarray(a4 - 64, a4)));
            return this._buff = a4 - 64 < m2 ? new Uint8Array(u2.buffer.slice(a4 - 64)) : new Uint8Array(0), this;
          }, SparkMD5.ArrayBuffer.prototype.end = function(t4) {
            var a4, u2, m2 = this._buff, h2 = m2.length, g2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            for (a4 = 0; a4 < h2; a4 += 1)
              g2[a4 >> 2] |= m2[a4] << (a4 % 4 << 3);
            return this._finish(g2, h2), u2 = hex(this._hash), t4 && (u2 = hexToBinaryString(u2)), this.reset(), u2;
          }, SparkMD5.ArrayBuffer.prototype.reset = function() {
            return this._buff = new Uint8Array(0), this._length = 0, this._hash = [1732584193, -271733879, -1732584194, 271733878], this;
          }, SparkMD5.ArrayBuffer.prototype.getState = function() {
            var t4 = SparkMD5.prototype.getState.call(this);
            return t4.buff = arrayBuffer2Utf8Str(t4.buff), t4;
          }, SparkMD5.ArrayBuffer.prototype.setState = function(t4) {
            return t4.buff = utf8Str2ArrayBuffer(t4.buff, true), SparkMD5.prototype.setState.call(this, t4);
          }, SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy, SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish, SparkMD5.ArrayBuffer.hash = function(t4, a4) {
            var u2 = hex(md51_array(new Uint8Array(t4)));
            return a4 ? hexToBinaryString(u2) : u2;
          }, SparkMD5;
        }();
      });
      var XI = function _interopDefault$1(t2) {
        return t2 && typeof t2 == "object" && "default" in t2 ? t2.default : t2;
      }(JI);
      var ZI = class BMF {
        md5(t2, a2, u2) {
          this.aborted = false, this.progress = 0;
          let m2 = 0;
          const h2 = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice, g2 = 2097152, M2 = Math.ceil(t2.size / g2), I2 = new XI.ArrayBuffer(), S2 = new FileReader();
          function loadNext() {
            const a3 = m2 * g2, u3 = a3 + g2 >= t2.size ? t2.size : a3 + g2;
            S2.readAsArrayBuffer(h2.call(t2, a3, u3));
          }
          loadNext(), S2.onloadend = (t3) => {
            I2.append(t3.target.result), m2++, this.progress = m2 / M2, u2 && typeof u2 == "function" && u2(this.progress), this.aborted ? a2("aborted") : m2 < M2 ? loadNext() : a2(null, I2.end());
          };
        }
        abort() {
          this.aborted = true;
        }
      }, eS = function() {
        function DataStructureConverterImpl(t3) {
          this.name = "DataStructureConverter", this.core = t3;
        }
        var t2 = DataStructureConverterImpl.prototype;
        return t2.messageConvertToV1 = function messageConvertToV1(t3) {
          var a2, u2 = deserialize(serialize(t3, fm), invert(Qf)), m2 = getSessionId(u2, this.core.account), h2 = (a2 = this.core.session) === null || a2 === void 0 ? void 0 : a2.getSessionWithUncomplete({ id: m2 });
          return formatMsg$1(u2, h2 ? { account: this.core.account, sessionAck: h2.ack, msgReceiptTime: h2.msgReceiptTime } : { account: this.core.account });
        }, t2.messageConvertToV2 = function messageConvertToV2(t3) {
          var a2 = deserialize(serialize(generatorMsgForCmd$1(t3, t3.from, t3.fromDeviceId), Qf), ym);
          return (a2 = completeMessage(this.core, a2)).sendingState = t3.status === "sending" ? 3 : t3.status === "sendFailed" ? 2 : 1, a2;
        }, DataStructureConverterImpl;
      }(), tS = function() {
        function V2NIMMessageConverterImpl(t3) {
          this.name = "V2NIMMessageConverter", this.core = t3;
        }
        var t2 = V2NIMMessageConverterImpl.prototype;
        return t2.messageSerialization = function messageSerialization(t3) {
          if (!t3)
            return null;
          var a2 = serialize(t3, fm);
          return Un(a2);
        }, t2.messageDeserialization = function messageDeserialization(t3) {
          var a2, u2, m2, h2, g2, M2, I2, S2, T2, C2, b2, E2, k2, w2, R2, A2, N2, x2, O2, P2, L2, V2, U2;
          if (!t3)
            return null;
          try {
            var D2, q2, B2, G2, H2 = deserialize(JSON.parse(t3), ym);
            return H2.sendingState = 0, H2.conversationType !== 1 || H2.senderId !== this.core.account && H2.receiverId !== this.core.account ? H2.conversationType === 2 ? H2.conversationId = this.core.V2NIMConversationIdUtil.teamConversationId(H2.receiverId) : H2.conversationType === 3 && (H2.conversationId = this.core.V2NIMConversationIdUtil.superTeamConversationId(H2.receiverId)) : H2.conversationId = this.core.V2NIMConversationIdUtil.p2pConversationId(H2.senderId === this.core.account ? H2.receiverId : H2.senderId), H2.threadReply && (H2.threadReply.conversationType = H2.conversationType, H2.threadReply = completeMessageRefer(this.core, H2.threadReply)), H2.threadRoot && (H2.threadRoot.conversationType = H2.conversationType, H2.threadRoot = completeMessageRefer(this.core, H2.threadRoot)), includes(D2 = [1, 3, 2, 0]).call(D2, H2.conversationType) || this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid conversationType(enum): " + H2.conversationType), H2.senderId && typeof H2.senderId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid senderId(string): " + H2.senderId), H2.receiverId && typeof H2.receiverId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid receiverId(string): " + H2.receiverId), "createTime" in H2 && isNaN(H2.createTime) && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid createTime(number): " + H2.createTime), includes(q2 = [2, 7, 12, 100, 6, 1, -1, 4, 5, 11, 0, 10, 3]).call(q2, H2.messageType) || this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid messageType(enum): " + H2.messageType), "subType" in H2 && isNaN(H2.subType) && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid subType(number): " + H2.subType), H2.messageClientId && typeof H2.messageClientId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid messageClientId(string): " + H2.messageClientId), H2.messageServerId && typeof H2.messageServerId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid messageServerId(string): " + H2.messageServerId), H2.attachment && typeof H2.attachment != "object" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid attachment(object): " + H2.attachment), H2.text && typeof H2.text != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid text(string): " + H2.text), H2.serverExtension && typeof H2.serverExtension != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid serverExtension(string): " + H2.serverExtension), H2.callbackExtension && typeof H2.callbackExtension != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid callbackExtension(string): " + H2.callbackExtension), ((a2 = H2.pushConfig) === null || a2 === void 0 ? void 0 : a2.pushContent) && typeof H2.pushConfig.pushContent != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid pushContent(string): " + H2.pushConfig.pushContent), ((u2 = H2.pushConfig) === null || u2 === void 0 ? void 0 : u2.pushPayload) && typeof H2.pushConfig.pushPayload != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid pushPayload(string): " + H2.pushConfig.pushPayload), ((m2 = H2.pushConfig) === null || m2 === void 0 ? void 0 : m2.forcePushContent) && typeof H2.pushConfig.forcePushContent != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid forcePushContent(string): " + H2.pushConfig.forcePushContent), ((h2 = H2.pushConfig) === null || h2 === void 0 ? void 0 : h2.forcePushAccountIds) && !Dn(H2.pushConfig.forcePushAccountIds) && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid forcePushAccountIds(array): " + H2.pushConfig.forcePushAccountIds), ((g2 = H2.routeConfig) === null || g2 === void 0 ? void 0 : g2.routeEnvironment) && typeof H2.routeConfig.routeEnvironment != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid routeEnvironment(string): " + H2.routeConfig.routeEnvironment), ((M2 = H2.antispamConfig) === null || M2 === void 0 ? void 0 : M2.antispamBusinessId) && typeof H2.antispamConfig.antispamBusinessId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid antispamBusinessId(string): " + H2.antispamConfig.antispamBusinessId), ((I2 = H2.antispamConfig) === null || I2 === void 0 ? void 0 : I2.antispamCustomMessage) && typeof H2.antispamConfig.antispamCustomMessage != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid antispamCustomMessage(string): " + H2.antispamConfig.antispamCustomMessage), ((S2 = H2.antispamConfig) === null || S2 === void 0 ? void 0 : S2.antispamCheating) && typeof H2.antispamConfig.antispamCheating != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid antispamCheating(string): " + H2.antispamConfig.antispamCheating), ((T2 = H2.antispamConfig) === null || T2 === void 0 ? void 0 : T2.antispamExtension) && typeof H2.antispamConfig.antispamExtension != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid antispamExtension(string): " + H2.antispamConfig.antispamExtension), ((C2 = H2.robotConfig) === null || C2 === void 0 ? void 0 : C2.accountId) && typeof H2.robotConfig.accountId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid accountId(string): " + H2.robotConfig.accountId), ((b2 = H2.robotConfig) === null || b2 === void 0 ? void 0 : b2.topic) && typeof H2.robotConfig.topic != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid topic(string): " + H2.robotConfig.topic), ((E2 = H2.robotConfig) === null || E2 === void 0 ? void 0 : E2.function) && typeof H2.robotConfig.function != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid function(string): " + H2.robotConfig.function), ((k2 = H2.robotConfig) === null || k2 === void 0 ? void 0 : k2.customContent) && typeof H2.robotConfig.customContent != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid customContent(string): " + H2.robotConfig.customContent), ((w2 = H2.threadRoot) === null || w2 === void 0 ? void 0 : w2.senderId) && typeof H2.threadRoot.senderId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid senderId(string): " + H2.threadRoot.senderId), ((R2 = H2.threadRoot) === null || R2 === void 0 ? void 0 : R2.receiverId) && typeof H2.threadRoot.receiverId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid receiverId(string): " + H2.threadRoot.receiverId), ((A2 = H2.threadRoot) === null || A2 === void 0 ? void 0 : A2.messageClientId) && typeof H2.threadRoot.messageClientId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid messageClientId(string): " + H2.threadRoot.messageClientId), ((N2 = H2.threadRoot) === null || N2 === void 0 ? void 0 : N2.messageServerId) && typeof H2.threadRoot.messageServerId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid messageServerId(string): " + H2.threadRoot.messageServerId), H2.threadRoot && "createTime" in H2.threadRoot && isNaN(H2.threadRoot.createTime) && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid createTime(number): " + H2.threadRoot.createTime), H2.threadRoot && !includes(B2 = [1, 3, 2, 0]).call(B2, H2.threadRoot.conversationType) && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid conversationType(enum): " + H2.threadRoot.conversationType), ((x2 = H2.threadRoot) === null || x2 === void 0 ? void 0 : x2.conversationId) && typeof H2.threadRoot.conversationId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid conversationId(string): " + H2.threadRoot.conversationId), ((O2 = H2.threadReply) === null || O2 === void 0 ? void 0 : O2.senderId) && typeof H2.threadReply.senderId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid senderId(string): " + H2.threadReply.senderId), ((P2 = H2.threadReply) === null || P2 === void 0 ? void 0 : P2.receiverId) && typeof H2.threadReply.receiverId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid receiverId(string): " + H2.threadReply.receiverId), ((L2 = H2.threadReply) === null || L2 === void 0 ? void 0 : L2.messageClientId) && typeof H2.threadReply.messageClientId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid messageClientId(string): " + H2.threadReply.messageClientId), ((V2 = H2.threadReply) === null || V2 === void 0 ? void 0 : V2.messageServerId) && typeof H2.threadReply.messageServerId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid messageServerId(string): " + H2.threadReply.messageServerId), H2.threadReply && "createTime" in H2.threadReply && isNaN(H2.threadReply.createTime) && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid createTime(number): " + H2.threadReply.createTime), H2.threadReply && !includes(G2 = [1, 3, 2, 0]).call(G2, H2.threadReply.conversationType) && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid conversationType(enum): " + H2.threadReply.conversationType), ((U2 = H2.threadReply) === null || U2 === void 0 ? void 0 : U2.conversationId) && typeof H2.threadReply.conversationId != "string" && this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid conversationId(string): " + H2.threadReply.conversationId), delete H2.__clientExt, delete H2.userUpdateTime, H2;
          } catch (a3) {
            return this.core.logger.error("V2NIMMessageConverterImpl.messageDeserialization: invalid message string: " + t3), null;
          }
        }, V2NIMMessageConverterImpl;
      }();
      !function setAdapters(t2) {
        merge$1(Jl, t2());
      }(function getAdapter() {
        return { setLogger, platform: "BROWSER", localStorage: window.localStorage, request: Zu, WebSocket: window.WebSocket, uploadFile: uploadFileFn, getFileUploadInformation: getFileUploadInformationFn, getSystemInfo: getSystemInfoFn, net: bd, logStorage: Pd };
      }), Xu.registerService(mp, "V1NIMLoginService"), Xu.registerService(ry, "msg"), Xu.registerService(oy, "user"), Xu.registerService(gy, "session"), Xu.registerService(fy, "team"), Xu.registerService(Sy, "systemMessage"), Xu.registerService(wy, "friend"), Xu.registerService(Oy, "event"), Xu.registerService(qy, "msgExtend"), Xu.registerService(Wy, "msgLog"), Xu.registerService(Xy, "passThrough"), Xu.registerService(sg, "cloudStorage"), Xu.registerService(f_, "superTeam"), Xu.registerService(iy, "sync"), Xu.registerService(M_, "plugin"), Xu.registerService(E_, "cloudSession"), Xu.registerService(B_, "signaling"), Xu.registerService(Qp, "V2NIMLoginService"), Xu.registerService(Um, "V2NIMConversationService"), Xu.registerService(Tg, "V2NIMMessageService"), Xu.registerService(cI, "V2NIMNotificationService"), Xu.registerService(pg, "V2NIMStorageService"), Xu.registerService(Hh, "V2NIMStorageUtil"), Xu.registerService(Gm, "V2NIMConversationGroupService"), Xu.registerService(mv, "V2NIMTeamService"), Xu.registerService(wv, "V2NIMUserService"), Xu.registerService(Bv, "V2NIMFriendService"), Xu.registerService(mf, "V2NIMSettingService"), Xu.registerService(dI, "V2NIMSyncService"), Xu.registerService(fI, "V2NIMAIService"), Xu.registerService(eS, "DataStructureConverter"), Xu.registerService(tS, "V2NIMMessageConverter"), Xu.registerService(Rg, "V2NIMMessageLogUtil"), Xu.registerService(Bg, "V2NIMMessageExtendUtil"), Xu.registerService(LI, "V2NIMSignallingService"), Xu.registerService(jI, "V2NIMSubscriptionService"), Xu.registerService(QI, "V2NIMPassthroughService"), Xu.registerService(Mg, "YSFService"), Xu.registerService(CM, "qchatChannel"), Xu.registerService(NM, "qchatMedia"), Xu.registerService(aI, "qchatMsg"), Xu.registerService(oI, "qchatRole"), Xu.registerService(sI, "qchatServer"), Xu.registerPlugin(ZI, "browser-md5-file"), Xu.registerPrivateService(function EventForwardCenter(t2) {
        var a2 = this;
        this.bindEvents = function() {
          a2.core.eventBus.on("forwardSend/msg/sendMsg", a2.onV1SendMsg), a2.core.eventBus.on("forwardSend/msg/recallMsg", a2.onV1RecallMsg), a2.core.eventBus.on("forwardSend/msg/deleteSelfMsgs", a2.onV1DeleteSelfMsgs), a2.core.eventBus.on("forwardSend/msgLog/clearHistoryMsgsFromServer", a2.onV1ClearHistoryMessage), a2.core.eventBus.on("forwardSend/V2NIMMessageService/sendMsg", a2.onV2SendMsg), a2.core.eventBus.on("forwardSend/V2NIMMessageService/modifyMsg", a2.onV2ModifyMsg), a2.core.eventBus.on("forwardSend/V2NIMMessageService/revokeMessage", a2.onV2RevokeMessage), a2.core.eventBus.on("forwardSend/V2NIMMessageService/deleteSelfMsgs", a2.onV2DeleteSelfMsgs), a2.core.eventBus.on("forwardSend/V2NIMMessageLogService/clearHistoryMessage", a2.onV2ClearHistoryMessage), a2.core.eventBus.on("forwardSend/team/created", a2.onV1TeamCreated), a2.core.eventBus.on("forwardSend/team/updateMyMemberInfo", a2.onV1TeamMemberUpdate), a2.core.eventBus.on("forwardSend/superTeam/updateMyMemberInfo", a2.onV1SuperTeamMemberUpdate), a2.core.eventBus.on("forwardSend/V2NIMTeamService/updateSelfTeamMemberInfo", a2.onV2TeamMemberUpdate), a2.core.eventBus.on("forwardSend/team/passTeamApply", function(t3, u2) {
            return a2.onV1TeamApply(t3, 1, 1, u2);
          }), a2.core.eventBus.on("forwardSend/superTeam/passSuperTeamApply", function(t3, u2) {
            a2.onV1TeamApply(t3, 2, 1, u2);
          }), a2.core.eventBus.on("forwardSend/team/rejectTeamApply", function(t3, u2) {
            a2.onV1TeamApply(t3, 1, 2, u2);
          }), a2.core.eventBus.on("forwardSend/superTeam/rejectSuperTeamApply", function(t3, u2) {
            a2.onV1TeamApply(t3, 2, 2, u2);
          }), a2.core.eventBus.on("forwardSend/team/acceptTeamInvite", function(t3, u2) {
            a2.onV1TeamInvite(t3, 1, 1, u2);
          }), a2.core.eventBus.on("forwardSend/superTeam/acceptSuperTeamInvite", function(t3, u2) {
            a2.onV1TeamInvite(t3, 2, 1, u2);
          }), a2.core.eventBus.on("forwardSend/team/rejectTeamInvite", function(t3, u2) {
            a2.onV1TeamInvite(t3, 1, 2, u2);
          }), a2.core.eventBus.on("forwardSend/superTeam/rejectSuperTeamInvite", function(t3, u2) {
            a2.onV1TeamInvite(t3, 2, 2, u2);
          }), a2.core.eventBus.on("forwardSend/user/updateBlackList", a2.onV1UpdateBlackList), a2.core.eventBus.on("forwardSend/user/updateUserInfo", a2.onV1UpdateUserInfo), a2.core.eventBus.on("forwardSend/user/setMute", a2.onV1SetMute), a2.core.eventBus.on("forwardSend/friend/addFriend", a2.onV1AddFriend), a2.core.eventBus.on("forwardSend/friend/deleteFriend", a2.onV1DeleteFriend), a2.core.eventBus.on("forwardSend/friend/updateFriend", a2.onV1UpdateFriend), a2.core.eventBus.on("forwardSend/friend/passFriendApply", a2.onV1PassFriendApply), a2.core.eventBus.on("forwardSend/friend/rejectFriendApply", a2.onV1RejectFriendApply);
        }, this.onV1TeamApply = function(t3, u2, m2, h2) {
          if (h2) {
            if (!a2.core.V2NIMTeamService.notification.checkIfExpired(h2))
              return;
            m2 = 3;
          }
          a2.core.eventBus.emit("forwardReceive/V2NIMTeamService/updateTeamActionStatus", { teamId: t3.teamId, teamType: u2, operatorAccountId: t3.from, actionType: 0 }, m2);
        }, this.onV1TeamInvite = function(t3, u2, m2, h2) {
          if (h2) {
            if (!a2.core.V2NIMTeamService.notification.checkIfExpired(h2.code))
              return;
            m2 = 3;
          }
          a2.core.eventBus.emit("forwardReceive/V2NIMTeamService/updateTeamActionStatus", { teamId: t3.teamId, teamType: u2, operatorAccountId: t3.from, actionType: 2 }, m2);
        }, this.onV1PassFriendApply = function(t3, u2) {
          a2.core.eventBus.emit("forwardReceive/V2NIMFriendService/acceptAddApplication", t3, u2);
        }, this.onV1RejectFriendApply = function(t3, u2, m2) {
          a2.core.eventBus.emit("forwardReceive/V2NIMFriendService/rejectAddApplication", { applicantAccountId: t3, recipientAccountId: a2.core.account, operatorAccountId: a2.core.account, postscript: u2 || "", timestamp: a2.core.timeOrigin.getNTPTime(), read: true, status: 3 }, m2);
        }, this.onV1SetMute = function(t3, u2) {
          a2.core.eventBus.emit("forwardReceive/v2NIMSettingService/setP2PMessageMuteMode", t3, u2 ? 1 : 0);
        }, this.onV1UpdateFriend = function(t3) {
          a2.core.eventBus.emit("forwardReceive/V2NIMFriendService/setFriendInfo", t3.account, Dt(Dt({}, "alias" in t3 ? { alias: t3.alias } : {}), "ext" in t3 ? { serverExtension: t3.ext } : {}));
        }, this.onV1AddFriend = function(t3) {
          a2.core.eventBus.emit("forwardReceive/V2NIMFriendService/addFriend", t3);
        }, this.onV1DeleteFriend = function(t3) {
          a2.core.eventBus.emit("forwardReceive/V2NIMFriendService/deleteFriend", t3);
        }, this.onV1UpdateUserInfo = function(t3) {
          var u2 = deserialize(serialize(t3, Vf.user), invertSerializeItem(vv));
          a2.core.eventBus.emit("forwardReceive/V2NIMUserService/updateUserProfile", u2);
        }, this.onV1UpdateBlackList = function(t3, u2) {
          a2.core.eventBus.emit("forwardReceive/V2NIMUserService/updateBlockList", t3, u2);
        }, this.onV1TeamCreated = function(t3) {
          var u2 = deserialize(serialize(generateTeam(t3), xf.team), invertSerializeItem(um));
          a2.core.eventBus.emit("forwardReceive/V2NIMTeamService/created", u2);
        }, this.onV1TeamMemberUpdate = function(t3) {
          (t3 = Dt({}, t3)).type && (t3.type = { normal: 0, owner: 1, manager: 2 }[t3.type]);
          var u2 = deserialize(serialize(t3, xf.teamMember), invertSerializeItem(dm));
          u2.teamType = 1, a2.core.eventBus.emit("forwardReceive/V2NIMTeamService/updateSelfTeamMemberInfo", u2);
        }, this.onV1SuperTeamMemberUpdate = function(t3) {
          (t3 = Dt({}, t3)).type && (t3.type = { normal: 0, owner: 1, manager: 2 }[t3.type]);
          var u2 = deserialize(serialize(t3, h_.superTeamMember), invertSerializeItem(pm));
          u2.teamType = 2, a2.core.eventBus.emit("forwardReceive/V2NIMTeamService/updateSelfTeamMemberInfo", u2);
        }, this.onV2TeamMemberUpdate = function(t3) {
          var u2 = t3.teamType, m2 = serialize(t3, dm);
          if (u2 === 2) {
            var h2 = deserialize(m2, invertSerializeItem(h_.superTeamMember));
            a2.core.eventBus.emit("forwardReceive/superTeam/updateMyMemberInfo", h2);
          } else {
            var g2 = deserialize(m2, invertSerializeItem(xf.teamMember));
            a2.core.eventBus.emit("forwardReceive/team/updateMyMemberInfo", g2);
          }
        }, this.onV1SendMsg = function(t3) {
          var u2 = deserialize(serialize(t3, Qf), ym);
          (u2 = completeMessage(a2.core, u2)).sendingState = t3.status === "sending" ? 3 : t3.status === "sent" ? 1 : 2, a2.core.eventBus.emit("forwardReceive/V2NIMMessageService/sendMsg", u2);
        }, this.onV2SendMsg = function(t3) {
          var u2 = deserialize(serialize(t3, fm), invert(Qf));
          u2.status = t3.sendingState === 3 ? "sending" : t3.sendingState === 1 ? "sent" : "sendFailed", a2.core.eventBus.emit("forwardReceive/msg/sendMsg", u2);
        }, this.onV2ModifyMsg = function(t3) {
          var u2 = deserialize(serialize(t3, fm), invert(Qf));
          a2.core.eventBus.emit("forwardReceive/msg/modifyMsg", u2);
        }, this.onV1RecallMsg = function(t3) {
          t3.deleteMsgCreatetime = t3.time;
          var u2 = deserialize(serialize(t3, Jf.recallMsgTag), invertSerializeItem(Im));
          a2.core.eventBus.emit("forwardReceive/V2NIMMessageService/revokeMessages", [u2]);
        }, this.onV2RevokeMessage = function(t3) {
          var u2 = deserialize(serialize(t3, Im), Xf.recallMsgTag);
          a2.core.eventBus.emit("forwardReceive/msg/recallMsg", u2);
        }, this.onV1DeleteSelfMsgs = function(t3) {
          var u2 = map$6(t3).call(t3, function(t4) {
            return deserialize(serialize(t4, Jf.deleteSelfMsgTag), invertSerializeItem(_m));
          });
          forEach$1(u2).call(u2, function(t4) {
            t4.messageRefer = formatMessageRefer(a2.core, t4.messageRefer);
          }), a2.core.eventBus.emit("forwardReceive/V2NIMMessageService/deleteMessages", u2);
        }, this.onV2DeleteSelfMsgs = function(t3) {
          var u2 = map$6(t3).call(t3, function(t4) {
            return deserialize(serialize(t4, _m), Xf.deleteSelfMsgTag);
          });
          a2.core.eventBus.emit("forwardReceive/msg/deleteSelfMsgs", u2);
        }, this.onV1ClearHistoryMessage = function(t3) {
          var u2 = deserialize(serialize(t3, Gy.clearHistoryMsgsFromServerReqTag), invertSerializeItem(Eg));
          a2.core.eventBus.emit("forwardReceive/V2NIMMessageLogService/clearHistoryMessage", u2);
        }, this.onV2ClearHistoryMessage = function(t3) {
          var u2 = deserialize(serialize(t3, Eg), Hy.clearHistoryMsgsFromServerReqTag);
          a2.core.eventBus.emit("forwardReceive/msgLog/clearHistoryMsgsFromServer", u2);
        }, this.core = t2, this.bindEvents();
      }, "eventForwardCenter"), t.V2NIMConst = Ol, t.default = Xu, Object.defineProperty(t, "__esModule", { value: true });
    });
  }
});

// dep:nim-web-sdk-ng
var nim_web_sdk_ng_default = require_NIM_BROWSER_SDK();
export {
  nim_web_sdk_ng_default as default
};
/*!
	 * Platform.js v1.3.6
	 * Copyright 2014-2020 Benjamin Tan
	 * Copyright 2011-2013 John-David Dalton
	 * Available under MIT license
	 */
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
//# sourceMappingURL=nim-web-sdk-ng.js.map
